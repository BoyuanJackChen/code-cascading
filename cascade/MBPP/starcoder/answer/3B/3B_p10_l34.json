[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    # Iterate through each element of the first list\n    for element in test_tup1:\n        # Check if the element is present in the second list\n        if element in test_tup2:\n            # If it is, add it to the shared set\n            shared_set.add(element)\n    # Return the shared set\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Extract the elements from the tuple and sort them in ascending order\n    tup1_sorted = sorted(test_tup1)\n    tup2_sorted = sorted(test_tup2)\n    \n    # Initialize a set to store the common elements\n    common_set = set()\n    \n    # Iterate through the sorted lists and compare the elements\n    for i in range(len(tup1_sorted)):\n        if tup1_sorted[i] == tup2_sorted[i]:\n            common_set.add(tup1_sorted[i])\n            \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is not prime or not.\n    \n    Parameters:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    \n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n    if n < 2:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    limit = int(math.sqrt(n)) + 1\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, limit):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n    for i in range(2, n + 1):\n        if primes[i]:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return False\n    # check if n is equal to 2 or 3\n    elif n == 2 or n == 3:\n        return True\n    # check if n is divisible by 2 or 3\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    # check if n is less than 25\n    elif n < 25:\n        # check if n is divisible by all numbers from 5 to sqrt(n)\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        # check if n is divisible by any odd number less than or equal to sqrt(n)\n        for i in range(5, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if the number is not prime, False otherwise.\n    A prime number is a number that is divisible only by 1 and itself.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function returns True if a given number is not a prime number,\n    else it returns False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and an integer n as inputs, and returns the n largest integers from the list in descending order.\n    The function uses a min-heap to achieve the required functionality.\n    '''\n    # Initialize an empty min-heap\n    heap = []\n\n    # Fill the min-heap with the first n elements of the list\n    for num in nums[:n]:\n        hq.heappush(heap, -num)\n\n    # Iterate through the remaining elements of the list\n    for num in nums[n:]:\n        # If the current element is greater than or equal to the smallest element in the min-heap, remove it from the min-heap and push it back\n        if -num >= -heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, -num)\n\n    # The min-heap will now hold the n largest elements in descending order\n    largest_elements = []\n    while heap:\n        largest_elements.append(-heap[0])\n        hq.heappop(heap)\n\n    return largest_elements"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize an empty heap\n    hq.heapify(nums)\n\n    # extract and return the largest n numbers from the heap\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    hq.heapify(nums)\n    for _ in range(n):\n        largest.append(hq.heappop(nums))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list to a min heap\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Remove the smallest elements from the heap\n    for i in range(n, len(nums)):\n        # Heapify the remaining elements of the heap\n        if nums[i] > heap[0]:\n            hq.heappushpop(heap, nums[i])\n    \n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, nums[i])\n\n    # Traverse through the remaining numbers in the list and add them to the max heap\n    for num in nums[n:]:\n        if num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, num)\n\n    # Extract the n largest integers from the max heap and return them\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the input list to a min heap\n    nums_min_heap = nums[:n]\n    heapq.heapify(nums_min_heap)\n    # Remove the minimum element from the heap and append it to the output list\n    for _ in range(n, len(nums)):\n        nums_min_heap.append(heapq.heappop(nums_min_heap))\n    # Return the output list in descending order\n    return nums_min_heap[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the given list to a min-heap\n    nums = [-num for num in nums]\n    hq.heapify(nums)\n    \n    # Extract the largest n elements from the heap\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the first n elements of the list\n    max_heap = hq.nlargest(n, nums)\n\n    # Remove and return the elements of the max heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = 0\n    while x > 0: \n        n += 1\n        x = x // 2\n    return (x == 1) or (n > 1 and x == 2**n)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: #if x is a power of 2\n        print(\"x is a power of 2\")\n    else:\n        print(\"x is not a power of 2\")"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Bitwise AND operator to find the common bit positions\n    common_bits = x & (~x + 1)\n\n    # Check whether the number of common bits is equal to the number of bits in the original number\n    if (x & (~x + 1)).bit_length() == x.bit_length():\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # bitwise AND of x and (x-1) returns 0 if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bit_diff = (x & (x - 1))\n    if bit_diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    # check if x is a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Bitwise XOR operation to find the differing position\n    differing_position = x ^ (x - 1)\n    # Check whether the differing position is only one or zero\n    return differing_position == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Filter out words with length less than 4\n    result = [word for word in words if len(word) >= 4]\n    # Return the result\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the string\n    long_words = [] # create an empty list to store long words\n    for word in words:\n        if len(word) >= 4: # if the length of the word is at least 4\n            long_words.append(word) # add the word to the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower()) # find all words in the text\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into a list of words\n    words = text.split()\n    # Initialize an empty list to store the words that are at least 4 characters long\n    long_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to 4\n        if len(word) >= 4:\n            # If the length of the word is greater than or equal to 4, append it to the long_words list\n            long_words.append(word)\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Find all words with at least 4 characters\n    result = [word for word in words if len(word) >= 4]\n\n    # Return the result\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words using whitespace as the separator\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    # loop through each element in the list\n    for i in range(len(nums)):\n        # square the element and add it to a new list\n        nums[i] = nums[i] ** 2"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Initialize an empty list to store the squares of each element\n    squares = []\n\n    # Iterate over each element in the input list\n    for num in nums:\n        # Append the square of the current element to the squares list\n        squares.append(num ** 2)\n\n    # Return the final list of squares\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    return [x**2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # create a list of tuples containing the character and its frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n    \n    # initialize the number of rotations to 0\n    rotations = 0\n    \n    # loop through each character in the sorted list of tuples\n    for char, freq in sorted_freq:\n        # if the frequency of the current character is greater than 1, increment the number of rotations by 1\n        if freq > 1:\n            rotations += 1\n    \n    # return the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # count the frequency of each character in the string\n    freq = [0]*26\n    for ch in str:\n        freq[ord(ch)-ord('a')] += 1\n    \n    # find the maximum frequency of the first character\n    max_freq = 0\n    for i in range(n):\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n    \n    # initialize the dictionary to store the frequency of each character after rotation\n    freq_dict = {}\n    for i in range(n):\n        freq_dict[i] = freq[i]\n    \n    # iterate over each character in the string and rotate the character\n    for i in range(n):\n        j = i+max_freq\n        if j >= n:\n            j -= n\n        freq_dict[j] -= 1\n        freq_dict[i] += 1\n    \n    # count the frequency of each character after rotation\n    for i in range(n):\n        freq_dict[i] = max(freq_dict[i], 0)\n    \n    # check if the frequency of each character is same after rotation\n    is_rotated = True\n    for i in range(n):\n        if freq_dict[i]!= freq[i]:\n            is_rotated = False\n            break\n    \n    if is_rotated:\n        return 0\n    \n    # find the minimum number of rotations required\n    min_rot = 1\n    for i in range(n):\n        if freq_dict[i] > 0:\n            min_rot += 1\n    \n    return min_rot-1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize the hashmap with the characters of the string\n    char_hashmap = {}\n    for i in range(n):\n        if str[i] not in char_hashmap:\n            char_hashmap[str[i]] = [i]\n        else:\n            char_hashmap[str[i]].append(i)\n    \n    # Find the length of the shortest string that can be obtained by rotating the longest string\n    min_rotations = n\n    for i in range(n-1):\n        if len(char_hashmap[str[i]]) > len(char_hashmap[str[n-i-1]]):\n            min_rotations = min(min_rotations, n-i-1)\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i\n    return n//2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a list to store the frequency of each character after rotating the string\n    freq_rotated = {}\n    \n    # start with the first character of the string\n    start_char = str[0]\n    \n    # loop through each character of the string\n    for char in str[1:]:\n        # find the frequency of the current character in the rotated string\n        if char in freq:\n            if freq[char] in freq_rotated:\n                freq_rotated[freq[char]] += 1\n            else:\n                freq_rotated[freq[char]] = 1\n        \n        # update the start_char to the next character\n        start_char = char\n    \n    # find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for count in freq_rotated:\n        if count < min_rotations:\n            min_rotations = count\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Initialize variables to keep track of the maximum and minimum rotations found so far\n    max_rotations = 0\n    min_rotations = 1000000 # Set the minimum rotations to infinity\n    \n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        # Check if the current string is equal to the rotated version of the next string\n        if str[i:] == str[i:i+len(str)]:\n            # If it is, increment the maximum rotations found so far and update the minimum rotations if the current minimum is greater than the maximum\n            max_rotations = max(max_rotations, min_rotations)\n            min_rotations = i + 1\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the rotations of each character in the string\n    rotations = {}\n    for char in str:\n        if char in rotations:\n            rotations[char] += 1\n        else:\n            rotations[char] = 1\n\n    # find the rotations of each character in the string\n    rotations_count = len(str)\n    min_rotations = rotations_count\n\n    # iterate over all possible rotations of the string and update the minimum rotations count\n    for i in range(1, rotations_count+1):\n        rotations_dict = {}\n        for j in range(0, rotations_count):\n            rotations_dict[str[j]] = i\n        if rotations_dict == rotations:\n            min_rotations = min(min_rotations, i)\n\n    # if the string can be obtained with only one rotation, the minimum rotations is 1\n    if min_rotations == rotations_count:\n        min_rotations = 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i + 1\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n\n    # create a dictionary to store the frequency of characters in the given string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # find the maximum frequency among all characters\n    max_freq = max(freq.values())\n\n    # iterate through all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # check if the length of the substring is equal to the maximum frequency\n            if j - i == max_freq:\n                # check if all characters in the substring appear in the frequency dictionary\n                if all(freq[char] > 0 for char in str[i:j]):\n                    # if the condition is satisfied, add the rotation to the list of rotations\n                    rotations.append((i, j))\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for i, j in rotations:\n        # calculate the length of the substring after rotating the substring\n        length = j - i\n        # check if the length of the substring is less than the current minimum\n        if length < min_rotations:\n            min_rotations = length\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[:s.find(ch) - 1] + s.replace(ch, '')[s.find(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if string is empty\n    if len(s) == 0:\n        return \"\"\n    # Check if character to be removed is present in string\n    if ch in s:\n        # Remove first occurrence\n        if s.find(ch) == 0:\n            return s[1:]\n        # Remove last occurrence\n        elif s.rfind(ch) == len(s) - 1:\n            return s[:-1]\n        # Remove both occurrences\n        else:\n            return s.replace(ch, \"\")\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    # Removing first occurrence of the character\n    if s[0] == ch:\n        return s[1:]\n    # Removing last occurrence of the character\n    if s[-1] == ch:\n        return s[:-1]\n    # Return the string as is if both occurrences are not found\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # initialize variables\n    first = True\n    last = False\n    # iterate over the string\n    for i in range(len(s)):\n        # if the character is the first occurrence, change the flag and continue\n        if s[i] == ch and first:\n            first = False\n            continue\n        # if the character is the last occurrence, change the flag and continue\n        elif s[i] == ch and last:\n            last = False\n            continue\n        # if the character is neither the first nor the last occurrence, append it to a new string\n        else:\n            new_s = new_s + s[i]\n    # return the new string\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Remove the first occurrence of the character from the string\n        s = s[:s.index(ch)+1] + s[s.index(ch)+2:]\n        \n        # Remove the last occurrence of the character from the string\n        s = s[:s.rindex(ch)] + s[s.rindex(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) < 2: \n        return s\n    else: \n        return s.replace(ch, \"\", 1) + s.replace(ch, \"\", -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into a list of characters\n        s_list = list(s)\n        # Remove the first occurrence of the character\n        s_list.remove(ch)\n        # Remove the last occurrence of the character\n        s_list.remove(ch)\n        # Convert the list of characters back to a string\n        s_new = ''.join(s_list)\n        return s_new\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function takes two parameters, s and ch, which are strings and character respectively. \n    The function removes the first and last occurrence of the character 'ch' from the string's' and returns the modified string.\n    '''\n    s = s.strip() # removes leading and trailing spaces\n    s = s.replace(ch,'') # replaces the character 'ch' with a space\n    return s.strip() # removes leading and trailing spaces"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Initialize index variables\n    i = 0\n    j = len(s) - 1\n\n    # Loop through the string to find first occurrence of character\n    while i <= j and s[i]!= ch:\n        i += 1\n\n    # If first occurrence is found, move it to the end of the string\n    if i <= j:\n        s = s[:i] + s[i+1:]\n\n    # Initialize index variables\n    i = 0\n    j = len(s) - 1\n\n    # Loop through the string to find last occurrence of character\n    while i <= j and s[j]!= ch:\n        j -= 1\n\n    # If last occurrence is found, remove it from the string\n    if i <= j:\n        s = s[:j+1] + s[j:]\n\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the row with the largest sum\n        max_sum_row = i\n        max_sum = sum(M[i])\n        for j in range(i+1, n):\n            if sum(M[j]) > max_sum:\n                max_sum = sum(M[j])\n                max_sum_row = j\n        # Swap the maximum sum row with the current row\n        M[i], M[max_sum_row] = M[max_sum_row], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Find the index of the smallest row sum\n    min_row = row_sums.index(min(row_sums))\n\n    # Create a copy of the matrix with the smallest row at the beginning\n    sorted_M = [row for row in M]\n    sorted_M.insert(0, sorted_M.pop(min_row))\n\n    # Sort the matrix in ascending order by comparing the sum of each row with the row index\n    sorted_M = sorted(sorted_M, key=lambda row: row_sums.index(sum(row)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    M: A matrix of integers.\n\n    Returns:\n    The sorted matrix.\n\n    \"\"\"\n\n    # Get the number of rows and columns of the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Create a copy of the matrix to sort\n    sorted_M = [[0]*m for _ in range(n)]\n\n    # Sort the matrix in ascending order of the sum of its rows\n    for i in range(n):\n        for j in range(m):\n            # Initialize the sum of the row to be the current element\n            row_sum = M[i][j]\n            # Compare it with the sums of the row above and below\n            if i > 0:\n                row_sum += sorted_M[i-1][j]\n            if i < n-1:\n                row_sum += sorted_M[i+1][j]\n            # Compare it with the sums of the column to the left and right\n            if j > 0:\n                row_sum += sorted_M[i][j-1]\n            if j < m-1:\n                row_sum += sorted_M[i][j+1]\n            # Update the sorted_M[i][j] element with the row_sum\n            sorted_M[i][j] = row_sum\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize the sum variable to the current row index\n        sum_of_row = i\n        \n        # Loop through each column of the current row\n        for j in range(len(M[i])):\n            # Check if the current column is greater than the sum of the row\n            if M[i][j] > sum_of_row:\n                # If it is, update the sum of the row with the current column value\n                sum_of_row = M[i][j]\n        \n        # Add the current row to the sorted matrix, sorted by ascending sum of its rows\n        sorted_matrix.append(M[i])\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    This function sorts a given matrix M in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables for sorting and sum of rows\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Swap rows if sum of rows is greater than sum of columns\n            if (sum(M[i]) + sum(M[j])) > (sum(M[j]) + sum(M[i])):\n                M[i], M[j] = M[j], M[i]\n    \n    # Print sorted matrix\n    for i in range(n):\n        print(M[i])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    n = rows * cols\n    \n    # initialize the matrix with zeros\n    result = [[0 for j in range(cols)] for i in range(rows)]\n    \n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # sort the rows based on the sum of each row\n    sorted_rows = sorted(range(rows), key=lambda i: sums[i])\n    \n    # copy the rows from the sorted list to the final result matrix\n    for i in sorted_rows:\n        for j in range(cols):\n            result[i][j] = M[i][j]\n    \n    # return the final result matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i].sort()\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    result = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the first row and column\n    result[0][0] = M[0][0]\n    result[0][n-1] = M[0][n-1]\n    result[n-1][0] = M[n-1][0]\n    result[n-1][n-1] = M[n-1][n-1]\n    # Calculate the sums of the first row and last column\n    row_sum = sum([M[0][i] + M[i][n-1] for i in range(n)])\n    col_sum = sum([M[i][0] + M[i][n-1] for i in range(n)])\n    # Calculate the sums of the other rows and columns\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            row_sum = row_sum + M[i][j]\n            col_sum = col_sum + M[j][i]\n            # Find the maximum sum in the current row\n            row_max = max(M[i][j], M[i][j+1], M[i][j-1])\n            # Find the maximum sum in the current column\n            col_max = max(M[j][i], M[j][i+1], M[j][i-1])\n            # Find the maximum sum in the diagonal of the current matrix\n            diag_max = max(M[i][i], M[i][i+1], M[i][i-1])\n            # Calculate the sum of the current cell and store the result in the result matrix\n            result[i][j] = row_sum + col_sum - row_max - col_max + diag_max\n    # Return the sorted result matrix\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate the volume using Heron's formula\n    s = (l+b+h)/2 #semi-perimeter\n    area = (s*(s-l)*(s-b)*(s-h))**0.5 #area of the parallelepiped\n    volume = area * b * h #volume of the prism\n    return volume #return the volume of the prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume.\n    '''\n\n    # Calculate the volume of the prism\n    volume = (1/2) * l * b * h\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as input and returns the volume of the prism.\n    \"\"\"\n    V = (l * b * h) / 3\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n\n    Args:\n        l (float): Length of one side of the prism.\n        b (float): Width of one side of the prism.\n        h (float): Height of the prism.\n\n    Returns:\n        float: Volume of the triangular prism.\n    \"\"\"\n\n    volume = 0.5 * l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes in length, width, and height of a triangle as input and returns the volume of the triangle.\n    '''\n    V = 0.5*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of the base, height, and width of a triangular prism as input\n    and returns the volume of the triangular prism.\n    '''\n    volume = (l * b * h) / 6  # Formula to calculate the volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the triangle using Heron's formula\n    area = (l * b * h) / 2\n    # Calculate the volume using Heron's formula\n    volume = area ** 2 * (1 / 3)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length of the base and the height of the prism as input parameters, and returns the volume of the prism.\n    '''\n    return (1/3)*l*b*h"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Convert the input string to lowercase\n    text = text.lower()\n\n    # Define a regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n\n    # Use the regular expression search function to check if the input string matches the pattern\n    matches = re.search(pattern, text)\n\n    # Return True if there is a match and False otherwise\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+[_][a-z]+$')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('(?<=[a-z])(?=[a-z])|(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z])')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)(_+[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]([a-z0-9]|[^a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]+[_][a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9]*_[a-z0-9]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z_]+(?![a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![\\w_])([a-z]+)_+([a-z]+)(?![\\w_])'\n    matches = re.findall(pattern, text)\n    return True if matches else False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4*a  # Calculating the perimeter by multiplying the side length by 4.\n    return perimeter  # Returning the perimeter."
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    filtered_string = ''.join([char for char in string if char not in char_set])\n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Find the intersection of the two lists\n    intersection = list(set(list1) & set(list2))\n\n    # Convert the intersection back to a string\n    result = ''.join(intersection)\n\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    first_set = set(string)\n    second_set = set(input(\"Enter the set of characters to be removed: \"))\n    new_set = first_set - second_set\n    return list(new_set)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # creating a list of all the characters in string1\n    char_list = list(string1)\n    # creating a set of all the characters in string2\n    set_of_chars = set(string2)\n    # removing characters from char_list which are present in set_of_chars\n    for char in char_list:\n        if char in set_of_chars:\n            char_list.remove(char)\n    # converting char_list to a string\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of all characters in string\n    char_list = list(string)\n    # create an empty list to store the final string\n    final_string = []\n    # loop through each character in the first string\n    for char in char_list:\n        # check if the character is not present in the second string\n        if char not in string:\n            # add the character to the final string\n            final_string.append(char)\n    # convert the final string to a string\n    final_string = ''.join(final_string)\n    # return the final string\n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create an empty list to store the result\n    result = []\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Loop through the characters in the string\n    for char in char_list:\n\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n\n    # Convert the result list to a string\n    result_string = ''.join(result)\n\n    # Return the result string\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = list(range(NO_OF_CHARS))\n    char_list = set(char_list)\n    string_list = list(string)\n    \n    for char in string_list:\n        if char in char_list:\n            char_list.remove(char)\n    \n    new_string = ''.join(char_list)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string[i] not in string:\n            string = string[:i] + string[i+1:]\n            print(string)\n            break"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(string)\n\n    # create an empty list to store the characters from the first string that are not present in the second string\n    result_list = []\n\n    # iterate over each character in the first string\n    for char in char_list:\n\n        # check if the character is not in the second string\n        if char not in string:\n            result_list.append(char)\n\n    # convert the list of result characters back to a string\n    result_string = ''.join(result_list)\n\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of characters to remove from the first string\n    chars_to_remove = [chr(i) for i in range(NO_OF_CHARS)]\n    # Remove characters from the first string which are present in the second string\n    string = ''.join([char for char in string if char not in chars_to_remove])\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        else:\n            hash_table[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the array and add elements to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if the set is empty\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # loop through the array of numbers and add each number to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    # check if there are any duplicates in the set\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the values and their occurrences\n    count = {}\n    \n    # Iterate over the array\n    for num in arraynums:\n        # If the value is already in the dictionary, increment its occurrence count\n        if num in count:\n            count[num] += 1\n        # If the value is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n    \n    # Iterate over the dictionary and check if any value occurs more than once\n    for num, count in count.items():\n        if count > 1:\n            # If a duplicate is found, return True\n            return True\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # iterate through the dictionary and check if there is any duplicate element\n    for key, value in freq_dict.items():\n        if value > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for count in counts.values():\n        if count > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    elif arraynums[0] == arraynums[1]:\n        return True\n    else:\n        for i in range(len(arraynums)-1):\n            if arraynums[i] == arraynums[i+1]:\n                return True\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # define the list of numbers for each type of woodball\n    woodball_1 = [1, 10, 20, 50]\n    woodball_2 = [10, 20, 50, 100]\n    woodball_3 = [100, 200, 500, 1000]\n\n    # iterate through each list and check if the given number is in it\n    for ball in woodball_1:\n        if x == ball:\n            return True\n    for ball in woodball_2:\n        if x == ball:\n            return True\n    for ball in woodball_3:\n        if x == ball:\n            return True\n\n    # if the number is not in any of the lists, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"Not a woodball\"\n    elif x % 10 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the number is a perfect square\n    if x**0.5 % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x == 2 or x == 5 or x == 7 or x == 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    # Initialize the divisor and sum to 1\n    divisor = 1\n    sum = 1\n    # Iterate over the digits of the number\n    for digit in str(x):\n        # If the digit is odd, multiply the divisor by 2\n        if int(digit) % 2 == 1:\n            divisor *= 2\n        else:\n            sum += divisor\n        # Update the divisor to 1\n        divisor = 1\n    # If the sum is divisible by 16, the number is woodall\n    return sum % 16 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [2, 5, 10]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0: \n        return \"Woodall number\" \n    else: \n        return \"Not a Woodall number\"\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < 100000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < int(str(num)[::-1]) * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse * 2 < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return True if num - num//2 < 0 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    if (rev_num - 1) // 2 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reverse = 0\n    while num > 0:\n        num_reverse = num_reverse * 10 + num % 10\n        num //= 10\n    if num_reverse == 2 * num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the reversed number is one less than twice the original number\n    if num - reversed_num == 1:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    if rev_num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 2:\n        return False\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return reverse == num + 2\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num!= 0:\n        digit = num % 10\n        reversed_num = reversed_num * 10 + digit\n        num //= 10\n    return True if reversed_num == 1 else False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, int(''.join(sorted(str(max_num) + arr[i]))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # initialize max_num with 0\n    max_num = 0\n\n    # loop through each digit in the array\n    for digit in arr : \n\n        # if the digit is 0, skip it and move on to the next digit\n        if digit == 0 : \n            continue\n\n        # convert the digit to a binary string and loop through each digit in the string\n        for i in range(len(bin(digit)[2:])) : \n\n            # calculate the new number by combining the old number with the digit at the current position\n            new_num = max_num * 2 + digit\n\n            # if the new number is greater than the current max_num, update max_num\n            if new_num > max_num : \n                max_num = new_num\n\n    # return the final max_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n    for i in range(10):\n        for j in range(len(arr)):\n            if i < arr[j]:\n                max_num = max(max_num, i * 10**j)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the given list in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum number to 0\n    max_num = 0\n    # iterate through the sorted list\n    for num in arr:\n        # calculate the number of digits in the current number\n        num_digits = len(str(num))\n        # calculate the number of digits that can be formed with the given number\n        max_digits = (len(arr) // num_digits) * num_digits\n        # if the number of digits that can be formed is greater than the maximum number found so far, update the maximum number\n        if max_digits > len(str(max_num)):\n            max_num = num\n    # return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the maximum number that can be formed by the digits.\n    \"\"\"\n    max_num = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if arr[0] == i and arr[1] == j and arr[2] == k:\n                    continue\n                elif arr[0] == i and arr[1] == k and arr[2] == j:\n                    continue\n                elif arr[0] == k and arr[1] == j and arr[2] == i:\n                    continue\n                else:\n                    num = i*1000 + j*100 + k\n                    if num > max_num:\n                        max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # initialize variables\n    max_num = 0\n    max_len = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if the length of the current number is greater than the current maximum, update the variables\n        if len(arr[i]) > max_len:\n            max_num = arr[i]\n            max_len = len(arr[i])\n        # otherwise, check if the current number can be formed by adding the next digit to it\n        elif len(arr[i]) < max_len and str(int(arr[i][0])+1) in arr[i]:\n            # if so, add the next digit to the number and check if it's still the largest number\n            arr[i] += str(int(arr[i][0])+1)\n            if len(arr[i]) > max_len:\n                max_num = arr[i]\n                max_len = len(arr[i])\n\n    # return the final maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n\n    Example:\n    Input: arr = [1, 2, 3]\n    Output: 103\n\n    \"\"\"\n    arr.sort(reverse=True)\n    result = 0\n    for digit in arr:\n        result = result * 10 + digit\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    \n    # sort the list of digits in ascending order\n    arr.sort()\n\n    # loop through the sorted list of digits\n    for i in range(len(arr)):\n        # multiply the current digit with the maximum number formed so far\n        max_num = max(max_num, arr[i] * i)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Base case: if the list of digits is empty, return 0\n    if len(arr) == 0 : \n        return 0\n    \n    # Recursive case: if the list of digits has more than one element, \n    # check each element to see if it can form a larger number\n    else : \n        max_num = 0\n        for i in arr : \n            if i > max_num : \n                max_num = i\n                \n        # Recursively call the function with the remaining digits\n        remaining_digits = [j for j in arr if j!= max_num]\n        return max_num + find_Max_Num(remaining_digits)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] == '0':\n            continue\n        max_num = max(max_num, int(''.join(arr[i:])))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return \"The two integers have same sign\"\n    elif x < 0 and y < 0:\n        return \"The two integers have same sign\"\n    elif x < 0 and y >= 0:\n        return \"The first integer is negative and the second integer is positive\"\n    else:\n        return \"The first integer is positive and the second integer is negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if the signs of x and y are opposite\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # check if the signs of both numbers are different\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both numbers have positive signs.\")\n    elif x < 0 and y < 0:\n        print(\"Both numbers have negative signs.\")\n    elif x == y:\n        print(\"Both numbers have same sign.\")\n    else:\n        print(\"Both numbers have different signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 and y == 0:\n        return \"Both numbers are zero\"\n\n    elif (x > 0 and y > 0) or (x < 0 and y < 0):\n        return \"Both numbers have opposite signs\"\n\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return \"One number has positive sign and the other number has negative sign\"\n\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if both numbers have the same sign\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, else False.\n\n    :param x: An integer.\n    :param y: An integer.\n    :return: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    #check if both integers have same sign or not\n    if x == 0 or y == 0:\n        return False\n    if x > 0 and y > 0:\n        return True\n    if x < 0 and y < 0:\n        return True\n    return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 8*n**2 - 5"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_pentagonal(m):\n        '''\n        Write a function to check whether a given number m is a pentagonal number or not.\n        '''\n        return m % 2 == 0\n\n    def is_square(x):\n        '''\n        Write a function to check whether a given number x is a square number or not.\n        '''\n        return x ** 2 == m\n\n    def octagonal_number(n):\n        '''\n        Write a function to find the nth octagonal number.\n        '''\n        i = 0\n        j = 1\n        count = 0\n        while count < n:\n            if is_pentagonal(i) and is_square(j):\n                count += 1\n            i += 1\n            j += 2\n        return i - 1\n\n    return octagonal_number(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        octagonal = 4*i**2 - 3\n        if octagonal == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    i = 1\n    while i <= n:\n        octagonal += i*2 - 1\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_power_of_two(n):\n        return n > 0 and ((n & (n - 1)) == 0)\n\n    def is_hexagonal(n):\n        return is_power_of_two(n * (3 * n - 1))\n\n    def nth_octagonal(n):\n        if is_hexagonal(n):\n            return int((16 * n * (3 * n - 1) - 1) ** 0.5) // 2\n        else:\n            return 0\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 4\n    else:\n        return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Initialize the sum of the first n terms of the sequence\n    sum = 0\n\n    # Loop through the sequence and add each term to the sum\n    for i in range(1, n + 1):\n        sum += i*i\n\n    # Return the sum of the first n terms of the sequence\n    return sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def square_of_sum_of_digits(num):\n        return sum(int(digit) ** 2 for digit in str(num))\n\n    octagonal_numbers = [num for num in range(10, 100) if square_of_sum_of_digits(num) == 36]\n\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Convert n to a string to get the last digit\n    last_digit = str(n)[-1]\n    \n    # Check if the last digit is 0\n    if int(last_digit) == 0:\n        # Convert n to an integer and add 1 to get the octagonal number\n        octagonal_num = int(n) + 1\n    else:\n        # Convert n to an integer and divide by 2 to get the square root\n        octagonal_num = int(n) // 2 + 1\n        \n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a, b = 1, 2\n    for i in range(n):\n        print(a)\n        a, b = b, a * 3 + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 4*n**2 + 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n\n    total = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_s = s[i:j]\n            digits_sum = sum(int(digit) for digit in sub_s)\n            if digits_sum == len(sub_s):\n                total += 1\n    return total"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[ord(char) - ord('0')] += 1\n    \n    count = 0\n    for length in range(1, len(s) + 1):\n        for start in range(len(s) - length + 1):\n            if digit_count[ord(s[start + length - 1]) - ord('0')] > 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] += len(str(i))\n        count[i+1] += len(str(i+1))\n        count[i+2] += len(str(i+2))\n        count[i+3] += len(str(i+3))\n        count[i+4] += len(str(i+4))\n        count[i+5] += len(str(i+5))\n        count[i+6] += len(str(i+6))\n        count[i+7] += len(str(i+7))\n        count[i+8] += len(str(i+8))\n        count[i+9] += len(str(i+9))\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # if the substring has the sum of digits equal to its length, increment the count in the dictionary\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count_dict[j-i] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    counts = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            counts[(sum(int(d) for d in s[i:j+1]))] += 1\n    return counts[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    # Create a dictionary to store the count of substrings with the given sum\n    substrings_count = defaultdict(int)\n    # Iterate over all possible substrings of s and count them with the given sum\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            substring_sum = sum(map(int, substring))\n            if substring_sum == len(substring):\n                substrings_count[substring] += 1\n    # Return the count of substrings with the given sum\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            digits = sum(int(digit) for digit in s[i:j])\n            if digits == len(s[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[len(s) - i] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the frequency of each digit in the string\n    digit_frequency = defaultdict(int)\n    for digit in s:\n        digit_frequency[digit] += 1\n\n    # Iterate through the string and check if the sum of the digits is equal to its length\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number variable to the first element in the list\n    smallest = xs[0]\n    \n    # Loop through the list and compare each element to the current smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n            \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Find the maximum difference among all pairs of numbers in the list\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = sorted([(x, y) for x, y in test_list])\n    max_diff = abs(pairs[-1][0] - pairs[0][1])\n    for i in range(len(pairs)-1):\n        diff = abs(pairs[i+1][0] - pairs[i][1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[j][1] - test_list[i][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    pair_diff = 0\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Calculate the difference between the pair\n            pair_diff = abs(test_list[i][0] - test_list[j][0])\n\n            # Update the maximum difference if the current pair is larger\n            if pair_diff > max_diff:\n                max_diff = pair_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the maximum and minimum values\n    max_diff = float('-inf')\n    min_val = float('inf')\n\n    # Iterate through the list of tuples\n    for num1, num2 in test_list:\n        # Compare the current values with the minimum and maximum values\n        if num1 < min_val:\n            min_val = num1\n        if num1 > max_val:\n            max_val = num1\n        if num2 < min_val:\n            min_val = num2\n        if num2 > max_val:\n            max_val = num2\n\n        # Calculate the difference between the maximum and minimum values and update the maximum difference if necessary\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    prev_val = test_list[0][1]\n\n    for val in test_list[1:]:\n        diff = val[1] - prev_val\n        max_diff = max(max_diff, diff)\n        prev_val = val[1]\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # Use a lambda function to sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list.')\n\n    if not data_list:\n        return 0\n\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[0])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, current_index=0, total_sum=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if current_index == len(data_list):\n        return total_sum\n    else:\n        return recursive_list_sum(data_list, current_index+1, total_sum+data_list[current_index])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            for element in data_list:\n                flatten(element)\n        else:\n            flattened_list.append(data_list)\n\n    flattened_list = []\n    flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        '''\n        Recursively flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return that element\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: sum the first element and the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition as 1\n    ways_to_partition = 1\n\n    # Loop through all possible values of k\n    for k in range(n+1):\n        # Calculate the number of ways to partition the set of Bell numbers using the Bell number theorem\n        ways_to_partition = ways_to_partition * (n - k + 1) // k\n\n    # Return the number of ways to partition the set of Bell numbers\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a counter variable to 0\n    count = 0\n    \n    # Loop over the numbers 0 to n-1\n    for i in range(n):\n        # Loop over all possible values of (n-i-1)\n        for j in range(n-i-1):\n            # Increment the counter if (i,j) is a valid partition\n            if i*j == n-i-1:\n                count += 1\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_partitions(n, k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        count = 0\n        for i in range(1, n+1):\n            count += count_partitions(i, k-1)\n        return count\n    \n    # return the number of ways to partition Bell numbers into k parts\n    return count_partitions(n, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    def helper(num, remain, index):\n        if remain == 0:\n            return 1\n        if remain == 1:\n            return helper(num, num-1, index+1)\n        if remain == 2:\n            return helper(num, num-1, index+1) + helper(num, num-2, index+2)\n\n    return helper(n, n-1, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    count = 0\n    count_max = 0\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(1, n + 1):\n        count += 1\n        if i <= n - i:\n            count_max += count\n        else:\n            count_max -= count\n\n    return count_max"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the result variable\n    result = 1\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Compute the number of ways to partition i using the previous numbers in the sequence\n        ways = 0\n        if i > 0:\n            ways += bell_number(i-1)\n        if i > 1:\n            ways += bell_number(i-2)\n        if i > 2:\n            ways += bell_number(i-3)\n        if i > 3:\n            ways += bell_number(i-4)\n        if i > 4:\n            ways += bell_number(i-5)\n        if i > 5:\n            ways += bell_number(i-6)\n        if i > 6:\n            ways += bell_number(i-7)\n        if i > 7:\n            ways += bell_number(i-8)\n        if i > 8:\n            ways += bell_number(i-9)\n        if i > 9:\n            ways += bell_number(i-10)\n        if i > 10:\n            ways += bell_number(i-11)\n        if i > 11:\n            ways += bell_number(i-12)\n        if i > 12:\n            ways += bell_number(i-13)\n        if i > 13:\n            ways += bell_number(i-14)\n        if i > 14:\n            ways += bell_number(i-15)\n        if i > 15:\n            ways += bell_number(i-16)\n        if i > 16:\n            ways += bell_number(i-17)\n        if i > 17:\n            ways += bell_number(i-18)\n        if i > 18:\n            ways += bell_number(i-19)\n        if i > 19:\n            ways += bell_number(i-20)\n        if i > 20:\n            ways += bell_number(i-21)\n        if i > 21:\n            ways += bell_number(i-22)\n        if i > 22:\n            ways += bell_number(i-23)\n        if i > 23:\n            ways += bell_number(i-24)\n        if i > 24:\n            ways += bell_number(i-25)\n        if i > 25:\n            ways += bell_number(i-26)\n        if i > 26:\n            ways += bell_number(i-27)\n        if i > 27:\n            ways += bell_number(i-28)\n        if i > 28:\n            ways += bell_number(i-29)\n        if i > 29:\n            ways += bell_number(i-30)\n        if i > 30:\n            ways += bell_number(i-31)\n        if i > 31:\n            ways += bell_number(i-32)\n        if i > 32:\n            ways += bell_number(i-33)\n        if i > 33:\n            ways += bell_number(i-34)\n        if i > 34:\n            ways += bell_number(i-35)\n        if i > 35:\n            ways += bell_number(i-36)\n        if i > 36:\n            ways += bell_number(i-37)\n        if i > 37:\n            ways += bell_number(i-38)\n        if i > 38:\n            ways += bell_number(i-39)\n        if i > 39:\n            ways += bell_number(i-40)\n        if i > 40:\n            ways += bell_number(i-41)\n        if i > 41:\n            ways += bell_number(i-42)\n        if i > 42:\n            ways += bell_number(i-43)\n        if i > 43:\n            ways += bell_number(i-44)\n        if i > 44:\n            ways += b"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 0\n    ways = 0\n\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return 0\n\n    # Initialize two variables to store the left and right limits of the partition\n    left = 0\n    right = n\n\n    # While the left limit is less than or equal to the right limit\n    while left <= right:\n        # If the left limit is even and the right limit is odd,\n        # the left limit can be partitioned into two parts:\n        # left + right, and left + right - 1.\n        if left % 2 == 0 and right % 2 == 1:\n            # Increment the number of ways to partition by 1\n            ways += 1\n            # Divide the left limit by 2 to reduce the size of the partition\n            left = left // 2\n            # Divide the right limit by 2 to increase the size of the partition\n            right = right // 2\n\n        # If the left limit is odd and the right limit is even,\n        # the right limit can be partitioned into two parts:\n        # left + right, and left + right - 1.\n        elif left % 2 == 1 and right % 2 == 0:\n            # Increment the number of ways to partition by 1\n            ways += 1\n            # Divide the right limit by 2 to reduce the size of the partition\n            right = right // 2\n            # Divide the left limit by 2 to increase the size of the partition\n            left = left // 2\n\n        # If the left limit is odd and the right limit is odd,\n        # the left limit can be partitioned into two parts:\n        # left + right, and left + right - 1.\n        else:\n            # Increment the number of ways to partition by 1\n            ways += 1\n            # Divide the left limit by 2 to reduce the size of the partition\n            left = left // 2\n            # Divide the right limit by 2 to increase the size of the partition\n            right = right // 2\n\n    # Return the final number of ways to partition\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    else:\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += bell_number(i/2)\n            else:\n                count += bell_number((3*i-1)//2)\n        return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic, else False.\n    A monotonic array is an array where either all elements are increasing or all elements are decreasing.\n    '''\n    if A[0] <= A[-1]: # if all elements are increasing\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False # if any element is decreasing\n        return True\n    elif A[0] >= A[-1]: # if all elements are decreasing\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False # if any element is increasing\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # check if the array is ascending\n    if A[0] <= A[1] and A[1] <= A[2]:\n        for i in range(2, n-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    # check if the array is descending\n    elif A[0] >= A[1] and A[1] >= A[2]:\n        for i in range(2, n-1):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    # if neither ascending nor descending, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize variables to store the maximum and minimum values in the array\n    max_val = A[0]\n    min_val = A[0]\n    \n    # Loop through the array\n    for i in range(1, len(A)):\n        \n        # If the current element is greater than the maximum value, update the maximum value\n        if A[i] > max_val:\n            max_val = A[i]\n            \n        # If the current element is less than the minimum value, update the minimum value\n        elif A[i] < min_val:\n            min_val = A[i]\n            \n        # If the current element is not greater than the maximum value and not less than the minimum value, then the array is not monotonic\n        else:\n            return False\n            \n    # If the loop completes without finding any errors, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    for i in range(1, len(A)): \n        if A[i] < A[i-1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    # check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # initialize variables for tracking the monotonicity\n    prev = A[0]\n    curr = A[1]\n    \n    # iterate through the array\n    for i in range(2, len(A)):\n        # check if the current element is monotonically increasing or decreasing\n        if (curr > prev):\n            if curr - prev == 0:\n                return False # break out of loop if difference is zero\n            elif curr - prev > 0:\n                return False # return False if difference is positive\n            prev = curr\n        elif (curr < prev):\n            if curr - prev == 0:\n                return False # break out of loop if difference is zero\n            elif curr - prev < 0:\n                return False # return False if difference is negative\n            prev = curr\n        else:\n            return False # break out of loop if element is equal to prev\n        curr = A[i]\n    \n    # check if the last element is monotonically increasing or decreasing\n    if curr > prev:\n        if curr - prev == 0:\n            return False # return False if difference is zero\n        elif curr - prev > 0:\n            return False # return False if difference is positive\n    else:\n        if curr - prev == 0:\n            return False # return False if difference is zero\n        elif curr - prev < 0:\n            return False # return False if difference is negative\n    \n    return True # return True if all elements are monotonically increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return False\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return False\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    if A[-1] <= A[-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] <= A[i+1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    if A[1] >= A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return not is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or not\n    if len(A) == 0:\n        return False\n\n    # initialize variables to store previous and current values\n    prev = A[0]\n    curr = A[0]\n\n    # loop through the array starting from the second element\n    for i in range(1, len(A)):\n        # check if current value is greater than the previous value\n        if A[i] > prev:\n            # if it is, then the array is not monotonic\n            return False\n\n        # update previous and current values\n        prev = curr\n        curr = A[i]\n\n    # if the loop completes without returning False, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return False\n    \n    # Check for duplicate elements\n    for i in range(len(A)-1):\n        if A[i] == A[i+1]:\n            return False\n    \n    # Check for non-increasing/non-decreasing order\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if len(s) == 0:\n        return True\n    # Check if the list is empty\n    if len(l) == 0:\n        return False\n    # Check if the first element of the sublist matches the first element of the list\n    if l[0] == s[0]:\n        # Check if the remaining elements of the sublist are present in the list\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Convert the given sublist to set to remove duplicates and sort the list\n    sublist = sorted(set(s))\n\n    # Traverse the list and check if the current element is a sublist of the sublist\n    for i in range(len(l)):\n        if l[i] in sublist:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    # Traverse the list and check if the sublist is a sublist of the current element\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            # Check if the sublist is a sublist of the remaining elements of the list\n            if is_sublist(l[i+len(s):], s):\n                return True\n    # If the sublist is not found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    for j in range(len(l) - len(s) + 1):\n        if l[j:j+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i:i+j+1] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Define an empty list to store the lengths of the tuples\n    lengths = []\n\n    # Iterate through each tuple in the input list\n    for tup in Input:\n        # Append the length of each tuple to the lengths list\n        lengths.append(len(tup))\n\n    # Check if all the lengths in the list are equal\n    if len(set(lengths)) == 1:\n        # If all lengths are equal, return True\n        return True\n    else:\n        # If there are any lengths that are not equal, return False\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a counter variable to keep track of the number of tuples with equal length\n    count = 0\n    # loop through each tuple in the input list\n    for i in Input:\n        # check if the length of each tuple is equal to the length of the first tuple\n        if len(i) == len(Input[0]):\n            # increment the counter variable if the tuples have equal length\n            count += 1\n        # if the tuples have different lengths, break out of the loop\n        else:\n            break\n    # return the count of tuples with equal length\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function will take a list of tuples as input and return a boolean value indicating whether all the tuples in the list have equal length or not.\n    \"\"\"\n    lengths = []\n    for tuple in Input:\n        lengths.append(len(tuple))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = min(gap * 3, n)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = min(gap, n//2)\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        n -= gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    # initialize the gap size\n    gap = n\n    # initialize the swapped flag\n    swapped = True\n    while gap > 1 or swapped:\n        # calculate the new gap size\n        gap = int(gap / 1.3)\n        # set the swapped flag to False\n        swapped = False\n        # iterate over the list\n        for i in range(n - gap):\n            # if the elements are out of order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set the swapped flag to True\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # define the minimum and maximum values of the range\n    min_val = min(nums)\n    max_val = max(nums)\n\n    # define the swap function\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define the compare function\n    def compare(i, j):\n        return nums[i] - nums[j]\n\n    # define the swap_ranges function\n    def swap_ranges(start, mid, end):\n        for i in range(start, mid):\n            swap(i, i + mid - start)\n\n    # define the comb_sort function\n    def comb_sort(nums):\n        n = len(nums)\n        swapped = True\n        start = 0\n        mid = 0\n        end = n - 1\n\n        while swapped:\n            swapped = False\n            mid = (start + end) // 2\n\n            if compare(mid, start) < 0:\n                swap_ranges(start, mid, end)\n                swapped = True\n                start = mid\n            elif compare(mid, end) > 0:\n                swap_ranges(start, mid, end)\n                swapped = True\n                end = mid\n            else:\n                break\n\n    # call the comb_sort function with the input list\n    comb_sort(nums)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = (gap*10)//10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    \n    # Define variables\n    gap = len(nums)\n    swapped = True\n    \n    # Sort until the gap is 1 or no swaps are made\n    while gap > 1 or swapped:\n        swapped = False\n        \n        # Calculate the new gap size based on the current gap size\n        new_gap = int(gap/1.3)\n        \n        # Iterate over the list using a for loop and a for loop index\n        for i in range(len(nums)-new_gap):\n            \n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i+new_gap]:\n                nums[i], nums[i+new_gap] = nums[i+new_gap], nums[i]\n                swapped = True\n        \n        # Update the gap size to the new value\n        gap = new_gap\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb sort algorithm.\n\n    Args:\n    nums (list): List of elements to be sorted.\n\n    Returns:\n    list: Sorted list of elements.\n    '''\n\n    # Helper function to swap elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to calculate the gap between elements\n    def calculate_gap(nums, start, end):\n        return end - start\n\n    # Helper function to calculate the number of swaps needed to sort the gap\n    def calculate_swaps(nums, start, end, gap):\n        return gap // 2 + 1\n\n    # Main loop\n    while True:\n        gap = calculate_gap(nums, 0, len(nums) - 1)\n        swaps = calculate_swaps(nums, 0, len(nums) - 1, gap)\n\n        if gap == 1 or swaps == 0:\n            break\n\n        # Adjust the gap size for the next iteration\n        gap = calculate_gap(nums, 0, len(nums) - 1)\n\n        # Perform the swapping\n        for i in range(swaps):\n            min_index = i + start\n            for j in range(i + 1, swaps):\n                if nums[j] < nums[min_index]:\n                    min_index = j\n\n            swap(nums, min_index, i + start)\n\n        swaps -= 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    def is_square(x):\n        '''\n        Check whether a number is a square or not.\n        '''\n        return x ** 0.5 == int(x ** 0.5)\n    \n    for i in range(1, n+1):\n        if is_square(i) and is_square(n-i):\n            print(\"The given number can be represented as the difference of two squares.\")\n            break\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return \"The given number is negative.\"\n    elif n == 0: \n        return \"The given number is 0.\"\n    elif n == 1: \n        return \"The given number is a square.\"\n    elif n == 4 or n == 9 or n == 16: \n        return \"The given number is not a square.\"\n    else: \n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: \n                return \"The given number is not a square.\"\n        return \"The given number is a square.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0 and n/(i*i) == n/(i*i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square of the given number\n    sqr = int(n**0.5)\n\n    # check if the square of the given number is divisible by 3\n    if sqr % 3 == 0:\n        # if it is divisible by 3, check if the given number is divisible by 9\n        if n % 9 == 0:\n            # if it is divisible by 9, print \"YES\"\n            print(\"YES\")\n        else:\n            # if it is not divisible by 9, print \"NO\"\n            print(\"NO\")\n    else:\n        # if it is not divisible by 3, print \"NO\"\n        print(\"NO\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check whether a number can be represented as the difference of two squares or not\n    def is_square(num):\n        # Check if the number is a positive integer\n        if type(num)!= int or num < 0:\n            return False\n        # Check if the number is a perfect square\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if the given number is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Check if the given number is a perfect square\n    if is_square(n):\n        return \"The given number is a perfect square.\"\n\n    # Check if the given number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if is_square(i) and is_square(n-i):\n            return \"The given number can be represented as the difference of two squares.\"\n\n    # If the given number cannot be represented as the difference of two squares\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Checking for negative numbers\n    if n < 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    \n    # Calculating the sum of squares of digits\n    sum_of_squares = sum([int(digit)**2 for digit in str(abs(n))])\n    \n    # Checking if the sum of squares is equal to the given number\n    if abs(n) == sum_of_squares:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1): \n        if n % i == 0 and n % (i ** 2) == 0: \n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    a = n*n\n    b = (n//2)*((n//2)+1)\n    return a == b\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Using the formula for the square root of a number, check if the number is within a square\n    # with side length = sqrt(n)\n    sqrt_n = int(n**(1/2))\n    if n % sqrt_n == 0: \n        return True\n    # If the number is not within a square, then check if it can be represented as the difference of two squares\n    for i in range(2, sqrt_n):\n        if n % (sqrt_n - i) == 0 and n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Define a function to check whether the given number is a square or not\n    def is_square(num):\n        return num**0.5 == int(num**0.5)\n\n    # Check if the given number is less than 1\n    if n < 1:\n        return \"The number should be greater than or equal to 1\"\n\n    # Check if the given number is a square number\n    if is_square(n):\n        return \"The given number is a square number\"\n\n    # Check if the difference of the square of the given number and 1 is a square number\n    diff = (n**2) - 1\n    if is_square(diff):\n        return \"The given number can be represented as the difference of two squares\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if a given set of colors and patterns form a sequence.\n\n    Args:\n        colors: list of strings representing colors (e.g. ['red', 'blue', 'green'])\n        patterns: list of strings representing patterns (e.g. ['RRRR', 'BRBB', 'GBGB'])\n\n    Returns:\n        bool: True if the given set of colors and patterns form a sequence, False otherwise.\n    \"\"\"\n\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Find the number of sequences of colors that need to be repeated to form a single pattern\n    pattern_repeats = len(set(colors))\n\n    # Check if the number of patterns matches the pattern repeats\n    if len(patterns)!= pattern_repeats:\n        return False\n\n    # Check if all patterns are the same length\n    for pattern in patterns:\n        if len(pattern)!= len(patterns[0]):\n            return False\n\n    # Find the maximum length of a pattern in the list\n    max_pattern_len = max(len(pattern) for pattern in patterns)\n\n    # Check if the length of the longest pattern is a multiple of the pattern repeats\n    if max_pattern_len % pattern_repeats!= 0:\n        return False\n\n    # Check if the colors in the patterns form a valid sequence\n    for i in range(len(patterns)):\n        for j in range(pattern_repeats):\n            if patterns[i][j] not in colors:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    # create a dictionary to store the count of colors for each pattern\n    pattern_counts = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color in pattern_counts:\n                pattern_counts[color] += 1\n            else:\n                pattern_counts[color] = 1\n\n    # check if all colors in the colors list are present in the pattern_counts dictionary\n    for color in colors:\n        if color not in pattern_counts:\n            return False\n\n    # check if the colors in the colors list are present in the patterns array\n    for pattern in patterns:\n        for color in pattern:\n            if color not in pattern:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    # check if there are any patterns in the array\n    if not patterns:\n        return True\n\n    # check if the first pattern and the first color are the same\n    if colors[0]!= patterns[0][0]:\n        return False\n\n    # remove the first color from the array\n    colors = colors[1:]\n\n    # remove the first pattern from the array\n    patterns = patterns[1:]\n\n    # check if the rest of the colors and patterns are the same for each pattern\n    for pattern in patterns:\n        if pattern[0]!= colors[0]:\n            return False\n        colors = colors[1:]\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    colors_used = []\n    for pattern in patterns:\n        if pattern not in colors_used:\n            colors_used.append(pattern)\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    color_count = {}\n    for pattern in patterns:\n        pattern_colors = []\n        for i, color in enumerate(colors):\n            if i == pattern:\n                pattern_colors.append(color)\n                color_count[color] = color_count.get(color, 0) + 1\n                if len(pattern_colors) == len(patterns):\n                    for p_color in pattern_colors:\n                        if p_color not in pattern_colors:\n                            return False\n                    break\n        else:\n            return False\n    return all(count == len(patterns) for count in color_count.values())"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the count of each color in the patterns array\n    pattern_count = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color in pattern_count:\n                pattern_count[color] += 1\n            else:\n                pattern_count[color] = 1\n    \n    # Check if the count of each color in the patterns array is equal to the count of colors in the colors array\n    if len(pattern_count) == len(colors):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i+1]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            divisible_tuples.append(tuple)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a set to store the divisible elements of K\n    divisible_elements = set()\n\n    # Iterate through each tuple in the given list of tuples\n    for t in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(e % K == 0 for e in t):\n            # Add the tuple to the list of divisible tuples\n            divisible_tuples.append(t)\n\n    # Return the list of divisible tuples\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list of tuples): A list of tuples.\n    K (int): The value to divide all elements of a tuple by.\n\n    Returns:\n    list of tuples: A list of tuples that have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create a list to store the tuples that meet the criteria\n    result = []\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Create a list to store the elements of the tuple that are divisible by K\n        divisible_elements = []\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Check if the element is divisible by K\n            if elem % K == 0:\n                # Add the element to the list of divisible elements\n                divisible_elements.append(elem)\n        # Check if all elements in the tuple are divisible by K\n        if len(divisible_elements) == len(tup) and tuple(divisible_elements) not in result:\n            # Add the tuple to the result list if it meets the criteria\n            result.append(tuple(divisible_elements))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples that meet the conditions\n    result = []\n\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if all(j % K == 0 for j in test_list[i]):\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                count += 1\n                print(test_list[i], test_list[j])\n    return count"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length word.\")\n        else:\n            print(f\"{word} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the sentence into a list of words\n    for word in words:\n        if len(word) % 2 == 1: # Check if the length of the word is odd\n            return True # If it is, return True\n    return False # If no odd word is found, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Initialize a counter variable to keep track of the length of the longest word\n    longest_len = 0\n    # Loop through each word and update the longest_len variable if necessary\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n    # Return True if the length of the longest word is odd, and False otherwise\n    return longest_len % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #splitting the sentence into words\n    for word in words:\n        if len(word) % 2 == 0: #checking if the length of the word is even or not\n            return True #if the length of the word is even, then return True\n    return False #if all the words in the sentence have even length, then return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #splitting the string into words\n    for word in words:\n        if len(word) % 2 == 0: #checking whether the length of the word is even or odd\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(\"The length of the word is odd.\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    return \"All the words in the sentence have even length.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in range(len(s)):\n        if s[i].isalpha() == True:\n            if len(s[i]) % 2 == 0:\n                return False\n            else:\n                return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #splitting the string into words\n    for word in words:\n        if len(word) % 2 == 1: #if the length of the word is odd\n            return word\n    return \"All words are even\" #if all the words are even"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Helper function to calculate the sum of n-th power of a list\n    def sum_n_power(lst):\n        return sum(lst[i]**n for i in range(len(lst)))\n\n    # Calculate the sum of n-th power of the first n Fibonacci numbers\n    fib_n = [1, 1]\n    fib_n_sum = sum_n_power(fib_n)\n\n    # Calculate the sum of the first n numbers of the Pascal's triangle\n    pascal_n = [1]\n    for i in range(2, n+1):\n        next_row = [1]\n        for j in range(i):\n            next_row.append(pascal_n[j] + pascal_n[j-1])\n        pascal_n = next_row\n        pascal_n_sum = sum_n_power(pascal_n)\n\n    # Calculate the sum of the first n numbers of the Tetrahedral numbers\n    tetrahedral_n = [1]\n    for i in range(2, n+1):\n        next_row = [1]\n        for j in range(i):\n            next_row.append(tetrahedral_n[j] + tetrahedral_n[j-1] + pascal_n[j])\n        tetrahedral_n = next_row\n        tetrahedral_n_sum = sum_n_power(tetrahedral_n)\n\n    return tetrahedral_n_sum\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return (1 + 4**(n-2))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    else:\n        return n * tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 14\n    elif n == 3:\n        return 60\n    \n    # compute nth tetrahedral number recursively\n    return n * 4 + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_prime(n):\n        '''\n        Check if a number is prime or not.\n        '''\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def t_prime(n):\n        '''\n        Calculate the nth prime tetrahedral number.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return 3 * t_prime(n-1) + 1\n    \n    def tetrahedral(n):\n        '''\n        Calculate the nth tetrahedral number.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return t_prime(n) * (n-1)\n    \n    if is_prime(n):\n        return tetrahedral(n)\n    else:\n        return t_prime(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError('n must be a non-negative integer.')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        num = 4 * n * (n - 1)\n        for i in range(2, n):\n            num += 4 * (n - i) * i\n        return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n\n    for i in range(1, n+1):\n        d = (a+b+c)/2\n        a = b\n        b = c\n        c = d\n\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c = 1, 1, 1\n    t = 0\n    while n > 0:\n        t += n\n        a, b, c = b, c, a + b + c\n        n = (3 * n) - 1\n    return t"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function finds the volume of a sphere.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    float\n        The volume of the sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with the given radius r.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    \n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert string to list of characters\n    char_list = list(strr)\n\n    # Initialize the sum of ASCII values of characters to 0\n    sum_ascii = 0\n\n    # Loop through the list of characters and add the ASCII value to the sum\n    for char in char_list:\n        ascii_value = ord(char)\n        sum_ascii += ascii_value\n\n    # Find the character made by adding the ASCII value of all the characters modulo 26\n    result = chr((sum_ascii % 26) + ord('a'))\n\n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char = \"\"\n    for i in range(len(strr)):\n        char += chr((ord(strr[i]) + i + 65) % 26 + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the characters\n    char = \"\"\n    # Loop through each character of the string\n    for i in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(i)\n        # Add the ASCII value to the character string\n        char += str(ascii_value)\n    # Convert the character string to an integer and take the modulo of 26\n    char = int(char) % 26\n    # Convert the result to a letter and return it\n    return chr(char + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char = chr((ascii_value % 26) + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = sum(ord(ch) for ch in strr) % 26\n    return chr(97 + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total_sum = 0\n    for char in strr:\n        total_sum += ord(char)\n\n    return chr((total_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of characters\n    char_sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        char_sum += ord(char)\n    # Find the character by subtracting the sum modulo 26\n    char = chr(char_sum % 26 + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n): \n        new_term = 4 * sequence[-1] + 2\n        sequence.append(new_term)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 32768, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 262144, 262144, 262144, 262144, 262144, 262144, 262144, 262144, 262144, 262144,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        new_sequence = []\n        for j in range(i):\n            if sequence[j] % 2 == 0:\n                new_sequence.append(sequence[j] + 1)\n            else:\n                new_sequence.append(sequence[j] - 1)\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [2]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    count = 1\n    while count < n:\n        for i in range(len(sequence)):\n            if sequence[i] == 1:\n                for j in range(4):\n                    x = (i + j) % len(sequence)\n                    y = (i - j) % len(sequence)\n                    if x >= 0 and y >= 0 and x < len(sequence) and y < len(sequence):\n                        sequence[x] += 1\n        count += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers in the sequence \n    sequence = [0, 1] \n\n    # Loop n-2 times to generate the remaining numbers in the sequence \n    for i in range(2, n): \n        # Generate a list of the current row of the sequence \n        row = [0] * n \n\n        # Loop through the current row and fill it with the appropriate values \n        for j in range(1, n-1): \n            # Check if the current cell is alive or dead \n            if sequence[j] == 1: \n                # If it is alive, check the eight surrounding cells for the number of living neighbors \n                neighbors = 0 \n                if j > 0 and sequence[j-1] == 1: \n                    neighbors += 1 \n                if j < n-1 and sequence[j+1] == 1: \n                    neighbors += 1 \n                if i > 0 and sequence[i-1][j] == 1: \n                    neighbors += 1 \n                if i < n-1 and sequence[i+1][j] == 1: \n                    neighbors += 1 \n                if i > 0 and j > 0 and sequence[i-1][j-1] == 1: \n                    neighbors += 1 \n                if i < n-1 and j > 0 and sequence[i+1][j-1] == 1: \n                    neighbors += 1 \n                if i > 0 and j < n-1 and sequence[i-1][j+1] == 1: \n                    neighbors += 1 \n                if i < n-1 and j < n-1 and sequence[i+1][j+1] == 1: \n                    neighbors += 1 \n                # If the current cell has 2 or 3 live neighbors, it survives \n                if neighbors == 2 or neighbors == 3: \n                    row[j] = 1 \n                else: \n                    row[j] = 0 \n            else: \n                row[j] = 0 \n\n        # Add the new row to the sequence \n        sequence.append(row) \n\n    # Return the nth number in the sequence \n    return sequence[n-1][n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    # define the newman conway sequence\n    sequence = [1, 1]\n    # generate the next number in the sequence\n    for i in range(1, n):\n        # if the current number is even, double it\n        if sequence[i-1] % 2 == 0:\n            sequence.append(2*sequence[i-1])\n        # if the current number is odd, triple it\n        else:\n            sequence.append(3*sequence[i-1])\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(1, n):\n        b = a + b\n        c = a + c\n        a = b + c\n        if i == n-1:\n            print(c)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]  # Start with 0 and 1 in the sequence\n    while len(sequence) < n: \n        # Iterate through the sequence until it reaches the nth number\n        new_sequence = [0] * len(sequence)  # Create a new sequence of zeros\n        for i in range(len(sequence)): \n            # For each position in the sequence, check the conditions to determine the next number\n            if sequence[i] == 0 and sequence[(i - 1) % len(sequence)] == 1: \n                new_sequence[i] = 1  # If the previous number and the previous number to the left are both 1, set the new number to 1\n            elif sequence[i] == 1 and sequence[(i - 1) % len(sequence)] == 1 and sequence[(i - 2) % len(sequence)] == 0: \n                new_sequence[i] = 1  # If the previous number and the previous two numbers to the left are both 1, set the new number to 1\n        sequence = new_sequence  # Update the sequence with the new values\n    return sequence[n - 1]  # Return the nth number in the sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # pi is a predefined constant in Python, representing the mathematical constant pi\n    pi = math.pi\n\n    # the surface area of a sphere is 4 * pi * r^2\n    surface_area = 4 * pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Using formula: 4*pi*r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere with given radius r.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    # Calculate the surface area using the formula:\n    # S = 4 * pi * r^2\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # formula for surface area of a sphere\n    # surface area = (4/3)\u03c0r^2\n    surface_area = (4/3) * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Surface area of a sphere with radius r is 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n, count):\n        if count == 0:\n            return n\n        else:\n            return centered_hexagonal_helper((3*n**2) - (2*n) + 1, count - 1)\n    \n    return centered_hexagonal_helper(1, n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prev = centered_hexagonal_number(n-1)\n        current = centered_hexagonal_number(n-2)\n        if prev % 2 == 0:\n            return prev + 1\n        else:\n            return prev + 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    result = 0\n    a = 1\n    b = 3\n    c = 5\n    \n    # loop through n to find nth centered hexagonal number\n    for i in range(n):\n        # calculate the value of the centered hexagonal number\n        result = a + b + c\n        # move the center of the hexagonal triangle to the right by 1\n        a = b\n        b = c\n        c = result\n    \n    # return the centered hexagonal number\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    j = n\n    while i <= j:\n        k = (n-i+1)*i//2 + i - 1\n        print(k, end=' ')\n        i += 1\n    print()\n    \n    i = n\n    j = 1\n    while i >= j:\n        k = (n-i+1)*i//2 + i - 1\n        print(k, end=' ')\n        i -= 1\n    print()"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the sum of the centered hexagonal numbers up to n\n    sum_of_centered_hexagonal_numbers = 0\n    for i in range(n+1):\n        sum_of_centered_hexagonal_numbers += centered_hexagonal_number(i)\n\n    # Divide the sum by 2*n\n    centered_hexagonal_number = sum_of_centered_hexagonal_numbers / (2*n)\n\n    return centered_hexagonal_number\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 0 or n % 1!= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return (5 * (n**2 + n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return centered_hexagonal(n/2) + centered_hexagonal(n/2)\n        else:\n            return centered_hexagonal(n/2) - centered_hexagonal(n/2)\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: If n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n    \n    # Calculate centered hexagonal number\n    for i in range(1, n+1):\n        a, b = b, 2*a + b\n        c, d = d, 2*c + d\n    \n    return a + d - c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 11\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \n    Parameters:\n    n (int): The index of the centered hexagonal number.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    # Helper function to find the index of the center of the hexagon.\n    def center_index(n):\n        \"\"\"\n        Helper function to find the index of the center of the nth hexagon.\n        \"\"\"\n        # Find the number of hexagons in the row.\n        row_length = (2 * n) ** 0.5\n        # Subtract 1 from the row length to get the actual index of the center.\n        return (2 * n) - 1 - row_length + 1\n    \n    # Calculate the index of the center of the nth hexagon.\n    center = center_index(n)\n    \n    # Calculate the nth centered hexagonal number.\n    return 2 * center * (center ** 2 + 1) // 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: a dictionary with key-value pairs\n    - dict2: a dictionary with key-value pairs\n    - dict3: a dictionary with key-value pairs\n\n    Returns:\n    - a merged dictionary with key-value pairs from dict1, dict2, and dict3\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # Use a defaultdict to initialize an empty dictionary\n    merged_dict = ct.defaultdict(list)\n    \n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Append the value for that key to the list associated with the key in the merged dictionary\n        merged_dict[key].append(dict1[key])\n    \n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Append the value for that key to the list associated with the key in the merged dictionary\n        merged_dict[key].append(dict2[key])\n    \n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Append the value for that key to the list associated with the key in the merged dictionary\n        merged_dict[key].append(dict3[key])\n    \n    # Return the merged dictionary\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    :param dict1: First dictionary to be merged.\n    :param dict2: Second dictionary to be merged.\n    :param dict3: Third dictionary to be merged.\n    :return: Merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.defaultdict(list)\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n\n    # Loop through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        freq_dict[element] += 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary\n    freq = {}\n    # Loop through the list and update the frequency count\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # Return the frequency count dictionary\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = sorted(range(N))\n    num1 = min(nums)\n    num2 = max(nums)\n    if abs(num1 - N) < abs(num2 - N):\n        return num1\n    else:\n        return num2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes an integer N as input and returns the closest smaller number than N.\n    \"\"\"\n\n    # Initialize variables\n    min_diff = float('inf')\n    closest_smaller = N\n\n    # Loop through all integers from 1 to N-1\n    for num in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(N - num)\n\n        # Update the minimum difference and closest smaller number\n        if diff < min_diff:\n            min_diff = diff\n            closest_smaller = num\n\n    # Return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    # Initialize variables\n    min_diff = float('inf')\n    closest_smaller = None\n\n    # Loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(num - N)\n\n        # If the absolute difference is smaller than the current minimum difference, update variables\n        if diff < min_diff:\n            min_diff = diff\n            closest_smaller = num\n\n    # Return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Create a list of numbers from 0 to N\n    nums = [i for i in range(N+1)]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Find the closest smaller number to N\n    closest = nums[-1]\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small = float('inf')\n    for i in range(N):\n        small = min(small, i)\n    return small"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = abs(N - 1)\n    \n    for i in range(N-1, 0, -1):\n        diff = abs(i - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest = i\n    \n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return 0\n    else:\n        return closest_num(N - 1) + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        left, right = 1, N-1\n        while left < right:\n            mid = (left+right)//2\n            if mid*mid == N:\n                return mid\n            elif mid*mid < N:\n                left = mid+1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    m = n - 1\n    while m >= 0:\n        if abs(n - m) <= abs(n - n + m):\n            break\n        m -= 1\n    return m + 1"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initializing variables\n    max_len = 0\n    word = ''\n\n    # looping through the list\n    for item in list1:\n        # checking if the item is a word\n        if item.isalpha():\n            # checking if the length of the current word is greater than the previous longest word\n            if len(item) > max_len:\n                # updating the variables\n                max_len = len(item)\n                word = item\n\n    # returning the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initializing an empty list to store the lengths of the words\n    lengths = []\n\n    # iterating over each word in the list\n    for word in list1:\n        # adding the length of each word to the list\n        lengths.append(len(word))\n\n    # finding the maximum length in the list\n    max_length = max(lengths)\n\n    # iterating over each word in the list again to find the words with the maximum length\n    for word in list1:\n        # if the length of the word is equal to the maximum length, adding the word to a list\n        if len(word) == max_length:\n            longest_words.append(word)\n\n    # returning the length of the longest word in the list\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize max_length to the length of the first word in the list\n    max_length = len(list1[0])\n    # Iterate through the list and update max_length if a longer word is found\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    #initialize max_len to zero\n    max_len = 0\n    \n    #loop through each word in the list\n    for word in list1:\n        \n        #find the length of the current word\n        current_len = len(word)\n        \n        #if the length of the current word is greater than the current max_len\n        if current_len > max_len:\n            \n            #update max_len to the length of the current word\n            max_len = current_len\n            \n    #return the value of max_len\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list of words.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes two arguments:\n    str_list: a list of string values to search in\n    sub_str: the substring to search for in the list of strings\n    \n    The function returns True if the substring is present in the list, False otherwise.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        return None"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the given number is greater than 0\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    # Calculate the sum of squares of the digits of the number\n    digits = [int(digit) for digit in str(n)]\n    sum_of_squares = sum([digit*digit for digit in digits])\n    \n    # Check if the sum of squares is greater than or equal to the number itself\n    if sum_of_squares >= n:\n        print(\"The given number is undulating.\")\n    else:\n        print(\"The given number is not undulating.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if the number is undulating or False otherwise.\n    '''\n\n    # checking if the number is odd or even\n    if n % 2 == 0: \n        return True\n    else: \n        # checking whether the number is divisible by any of the numbers from 1 to sqrt(n)\n        for i in range(1, int(n**0.5)+1): \n            if n % i == 0: \n                return True\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd\n    if n % 2 == 0:\n        return False\n    # Check if the sum of the digits is odd\n    digits = [int(digit) for digit in str(n)]\n    digits_sum = sum(digits)\n    return digits_sum % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check for prime factors\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0 or n > 200:\n        return \"Invalid input\"\n    elif n == 0 or n == 200:\n        return \"The given number is a fixed point\"\n    elif n % 2 == 0:\n        return \"The given number is odd and has an odd number of zeroes\"\n    else:\n        return \"The given number is even and has an even number of zeroes\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd\n    if n % 2!= 0:\n        # If the number is odd, it is not undulating\n        return False\n    else:\n        # If the number is even, it is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer as input and returns True if it is undulating and False otherwise.\n    '''\n    if n == 0 or n == 1: \n        return False\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating((n//2)+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    # Check if the number is divisible by any odd number\n    for i in range(5, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return True\n    # If none of the above conditions are met, the number is not undulating\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    result = 1\n    for i in range(b):\n        result *= a\n\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by the second value using the itemgetter() function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Iterate through the sorted list to find the first index with the smallest second value\n    for i, tup in enumerate(sorted_list):\n        if tup[1] == sorted_list[0][1]:\n            return i\n\n    # If no tuple has the same second value as the first tuple, return the index of the first tuple\n    return 0"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = test_list[i]\n    return minimum[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the built-in sorted() function to sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Using the itemgetter() function again to extract the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n\n    # return the first value of the smallest tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the sorted function to sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize variables to store the smallest and largest values seen so far\n    min_len = lst[0][0]\n    max_len = lst[0][0]\n\n    # Loop through each list in the list of lists and check if its length is smaller than the current minimum\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n        # Check if the length of the current list is greater than the current maximum\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n\n    # Return the minimum length of any list in the list of lists\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize min_len to the length of the first list in the list\n    min_len = len(lst[0])\n\n    # loop through each list in the list\n    for i in range(len(lst)):\n        # check if the current list has a smaller length\n        if len(lst[i]) < min_len:\n            # if it does, update min_len to the length of the current list\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for i in list1:\n        for j in i:\n            flattened_list.append(j)\n    freq_dict = {}\n    for i in flattened_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # initialize an empty dictionary to store frequency counts\n    freq = {}\n\n    # loop over all elements in the input list\n    for elem in list1:\n        # if elem is a list, recursively call the function on the nested list\n        if isinstance(elem, list):\n            nested_freq = frequency_lists(elem)\n            # add the nested frequency counts to the overall dictionary\n            for key, value in nested_freq.items():\n                freq[key] = freq.get(key, 0) + value\n        # if elem is not a list, add it to the dictionary with a count of 1\n        else:\n            freq[elem] = freq.get(elem, 0) + 1\n\n    # return the final dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(lst):\n    # flatten the list of lists\n    flat_lst = [item for sublist in lst for item in sublist]\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # iterate over the flattened list and count the frequency of each element\n    for item in flat_lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate over each element in the flattened list and count its frequency in the dictionary\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # Return the dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    dict: A dictionary where keys are elements from the input list and values are their respective frequencies.\n    \"\"\"\n    # Use set to remove duplicates and flatten the list\n    flat_lst = [item for sublist in lst for item in sublist]\n    unique_lst = list(set(flat_lst))\n\n    # Create dictionary with frequency counts\n    freq_dict = {}\n    for item in unique_lst:\n        freq_dict[item] = flat_lst.count(item)\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    total = 1\n    for num in numbers:\n        total *= num\n\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum([num * i / len(numbers) for i, num in enumerate(numbers)])"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Initialize the empty string to store the binary representation\n    binary = \"\"\n    # Loop until the decimal number is zero\n    while n!= 0:\n        # Get the last digit of the decimal number\n        digit = n % 2\n        # Convert the digit to a string and append it to the binary string\n        binary = str(digit) + binary\n        # Remove the last digit of the decimal number\n        n = n // 2\n    # Reverse the binary string and return it\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary if binary[0]!= \"0\" else binary[1:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize the binary string and temporary binary variable\n    binary = ''\n    temp = 0\n\n    # loop through each digit of the decimal number\n    while n > 0:\n        # calculate the remainder when the decimal number is divided by 2\n        temp = n % 2\n\n        # append the remainder to the binary string\n        binary = str(temp) + binary\n\n        # remove the decimal number of the last digit and divide it by 2\n        n = n // 2\n\n    # remove leading zeros from the binary string\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal number to string and split it into a list of digits\n    digits = [str(d) for d in str(n)]\n    # Reverse the order of the list to obtain the binary equivalent\n    binary = digits[::-1]\n    # Join the list of digits into a string with no leading zeros\n    binary = ''.join(binary)\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to store the binary equivalent of the input decimal number\n    binary_str = \"\"\n\n    # While the decimal number is greater than 0, loop until the quotient becomes 0\n    while n > 0: \n        # Find the remainder of the division of the decimal number by 2 and store it in a temporary variable\n        remainder = n % 2\n\n        # Add the remainder to the binary string\n        binary_str = str(remainder) + binary_str\n\n        # Remove the last digit (the quotient) from the decimal number and repeat the process\n        n = n // 2\n\n    # Return the binary string with no leading zeros\n    return binary_str.lstrip(\"0\")"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes an integer `n` and returns the binary representation of `n` as a string, with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = ''\n    while n > 0: \n        binary_num = str(n % 2) + binary_num \n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_number = str(remainder) + binary_number\n        n = n // 2\n    return binary_number"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # check if the input is a palindrome\n    palindrome = str(num)\n    if palindrome == palindrome[::-1]:\n        return num + 1\n\n    # find the largest palindrome less than or equal to num\n    largest_palindrome = 1\n    while True:\n        palindrome = str(largest_palindrome)\n        if int(palindrome) < num:\n            largest_palindrome += 1\n        else:\n            break\n\n    # find the smallest palindrome that is not equal to largest palindrome\n    smallest_palindrome = 10\n    while True:\n        palindrome = str(smallest_palindrome)\n        if int(palindrome) < num and int(palindrome)!= int(largest_palindrome):\n            smallest_palindrome += 1\n        else:\n            break\n\n    # find the difference between the next smallest palindrome and num\n    difference = smallest_palindrome - num\n\n    return difference"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    i = 1\n    while True:\n        if num // i == num // i + 1:\n            return num - i\n        i += 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    num_str = int(num_str)\n\n    # Check if the reversed string is equal to the original integer\n    if num_str == num:\n        # If it is, the next smallest palindrome is one digit longer\n        return num + 10\n    else:\n        # If it's not, the next smallest palindrome is the original integer plus one\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return int(str(num) + str(num)[::-1])\n    else:\n        for i in range(10, 100):\n            if is_palindrome(i):\n                return i + 1\n\ndef is_palindrome(num):\n    \"\"\"\n    Write a function to check if a specified integer is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if num is even\n    if num % 2 == 0:\n        # odd number, find the next smallest odd number\n        n = num + 1\n        while n % 2 == 0:\n            n += 1\n        return n\n    else:\n        # even number, find the next smallest even number\n        n = num + 1\n        while n % 2!= 0:\n            n += 1\n        return n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        return str(n) == str(n)[::-1]\n    \n    def reverse_num(num):\n        '''\n        Helper function to reverse a number.\n        '''\n        return int(str(num)[::-1])\n    \n    if num < 10:\n        return num + 1\n    elif is_palindrome(num):\n        return num + 1\n    else:\n        while True:\n            next_num = reverse_num(num) + 1\n            if is_palindrome(next_num):\n                return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(n):\n    # Convert integer to string\n    str_num = str(n)\n    # Reverse string\n    str_num = str_num[::-1]\n    # Convert string back to integer\n    rev_num = int(str_num)\n    # Check if original number is equal to its reverse\n    return n == rev_num\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Find the first number greater than num that is a palindrome\n    i = num + 1\n    while not is_palindrome(i):\n        i += 1\n    \n    # Return the next smallest palindrome\n    return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # Convert the number to a string and reverse it\n    s = str(num)[::-1]\n\n    # Loop through the digits of the string and check for palindromes\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            # Check if the current pair of digits forms a palindrome\n            x = int(s[i] + s[j])\n            y = int(s[j] + s[i])\n            if x > y:\n                x, y = y, x\n\n            # Check if the resulting palindrome is smaller than the current number\n            if x < num:\n                num = x\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    min_num = sys.maxsize  # initialize minimum value to be greater than all integers\n    palindrome = 0  # initialize palindrome value to 0\n    \n    # loop through all integers from 1 to num and check if they are palindromes\n    for i in range(1, num+1):\n        temp = i\n        while temp!= 0:\n            # if palindrome found, update minimum value and palindrome\n            if temp % 10 == temp // 10:\n                if i < min_num:\n                    min_num = i\n                    palindrome = i * 10 + temp % 10\n            temp //= 10\n            \n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num + 1):\n        return num + 1\n    else:\n        while True:\n            num += 1\n            if is_palindrome(num):\n                return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    if k == 1:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    mid = len(arr) // 2\n    if arr[mid - 1] <= arr[mid]:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input! Please enter a valid k value between 1 and the length of the array.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_arr = arr[:k-1]\n        right_arr = arr[k-1:]\n        left_kth_element = kth_element(left_arr, k-1)\n        right_kth_element = kth_element(right_arr, k)\n        if left_kth_element is None or right_kth_element is None:\n            return None\n        elif left_kth_element < right_kth_element:\n            return left_kth_element\n        else:\n            return right_kth_element"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i > 0 and word[i] == '_':\n            result += word[i+1].upper()\n        else:\n            result += word[i].upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them\n    result = ''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_case.append(word[i].lower())\n        elif word[i].isupper():\n            camel_case.append(word[i])\n        else:\n            camel_case.append(word[i].upper())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    prev_was_upper = False\n    \n    for char in word:\n        if char == '_':\n            prev_was_upper = True\n        elif prev_was_upper:\n            result += char.upper()\n            prev_was_upper = False\n        else:\n            result += char\n    \n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word except for the first one\n    camel_case = [word.capitalize() for word in words if word.isupper()][1:]\n    # Join the words with underscores\n    camel_case_str = ''.join(camel_case)\n    return camel_case_str"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i > 0 and word[i-1] == '_':\n            camel_case_word += word[i].upper()\n        else:\n            camel_case_word += word[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: a snake case string\n    :type word: str\n    :return: a camel case string\n    :rtype: str\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n\n    # Join the words back into a camel case string\n    return ''.join(camel_words)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize a(1, m) and a(n, 1) to 1\n    a = [[1] * (m+1) for _ in range(n+1)]\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j-1) is 1 and a(i-1, j) is 1\n            if a[i][j-1] == 1 and a[i-1][j] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n            # if a(i, j-1) is 1 and a(i-1, j-1) is 1\n            elif a[i][j-1] == 1 and a[i-1][j-1] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n            # if a(i-1, j) is 1 and a(i, j-1) is 1\n            elif a[i-1][j] == 1 and a[i][j-1] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j) is 1 and a(i+1, j) is 1\n            if a[i][j] == 1 and a[i+1][j] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j) is 1 and a(i, j+1) is 1\n            if a[i][j] == 1 and a[i][j+1] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j) is 1 and a(i+1, j+1) is 1\n            if a[i][j] == 1 and a[i+1][j+1] == 1:\n                # set a(i, j) to 0\n                a[i][j] = 0\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j) is 1 and a(i+1, j) is 1 and a(i, j+1) is 1\n            if a[i][j] == 1 and a[i+1][j] == 1 and a[i][j+1] == 1:\n                # set a(i, j) to the sum of a(i, j-1) and a(i-1, j)\n                a[i][j] = a[i][j-1] + a[i-1][j]\n\n    # loop through each value of n from 1 to n\n    for i in range(1, n+1):\n        # loop through each value of m from 1 to m\n        for j in range(1, m+1):\n            # if a(i, j) is 1 and a(i-1, j) is 1 and a(i, j+1) is 1\n            if a[i][j] == 1 and a[i-1][j] == 1 and a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    if n == m:\n        return 1\n    \n    # Initialize variables\n    a = 1\n    b = 0\n    c = 1\n    d = 0\n    e = 1\n    \n    # Iterate through the numbers until the maximum value of n is reached\n    while n > 0:\n        a, b, c, d, e = b, a + b, c, d + c, e + d\n        \n        # Update n\n        n -= 1\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0 or m == 0:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1) - eulerian_num(n - 1, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m) for given values of n and m.\n\n    Args:\n        n (int): The number of nodes in the graph.\n        m (int): The number of edges in the graph.\n\n    Returns:\n        int: The Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the number of nodes in the graph\n    num_nodes = 2 * n\n\n    # Calculate the number of edges in the graph\n    num_edges = m\n\n    # Calculate the number of degrees of each node\n    degrees = [0] * num_nodes\n\n    # Initialize the adjacency list\n    adj_list = [[] for _ in range(num_nodes)]\n\n    # Generate the adjacency list\n    for i in range(num_edges):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Calculate the degrees of each node\n    for u in range(num_nodes):\n        degrees[u] = len(adj_list[u])\n\n    # Calculate the number of cliques in the graph\n    num_cliques = 0\n\n    # Initialize the sets of nodes in each clique\n    clique_sets = [set() for _ in range(num_cliques)]\n\n    # Calculate the number of cliques in the graph\n    for u in range(num_nodes):\n        # Check if the node u has a degree greater than 1\n        if degrees[u] > 1:\n            # Initialize the set of nodes in clique c\n            clique_c = set()\n\n            # Add u to clique c\n            clique_c.add(u)\n\n            # Check if the node u forms a clique\n            is_clique = True\n            for v in adj_list[u]:\n                # Check if the node v has a degree greater than 1 and is in clique c\n                if degrees[v] > 1 and v in clique_c:\n                    is_clique = False\n                    break\n\n            # If the node u forms a clique, add u to the clique set and update the number of cliques\n            if is_clique:\n                num_cliques += 1\n                clique_sets[num_cliques - 1].add(u)\n\n    # Calculate the Eulerian number a(n, m)\n    eulerian_num = sum(degrees) - sum(sum(degrees) for i in range(1, num_cliques + 1))\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first term of the sequence\n    a = 1\n\n    # Initialize the first row of the matrix\n    row = [1] * m\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Create a new row of the matrix with the first i+1 terms of the sequence\n        new_row = [a] * m\n\n        # Iterate over the current row and copy each element to the corresponding position in the new row\n        for j in range(m):\n            new_row[j] = row[j]\n\n        # Update the matrix and row variables\n        row = new_row\n        a = a * (i + 1)\n\n    # Return the last element of the row\n    return row[n-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i**m\n\n    return total"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    a = eulerian_num(n-1, m)\n    b = eulerian_num(n, m-1)\n    return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Define the pattern of numbers to be summed\n    pattern = [1] + [0] * n\n\n    # Initialize the sum of the pattern\n    total = pattern[0]\n\n    # Iterate through the rest of the numbers\n    for i in range(1, m + 1):\n        # Compute the number of zeros in the pattern so far\n        zeros = sum(pattern[-i:])\n\n        # Compute the number of ones in the pattern so far\n        ones = sum(pattern[:-(i - zeros)])\n\n        # Update the pattern with the new values\n        pattern = [ones] + [zeros] * i\n\n        # Update the total sum\n        total += pattern[-1]\n\n    # Return the final sum of the pattern\n    return total"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return eulerian_num(n + m, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 1:\n        return 1\n    if m == 1:\n        return (1 + eulerian_num(n-1, m-1)) // 2\n    return (eulerian_num(n-1, m-1) + eulerian_num(n-1, m)) // 2"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Convert the sublist to a string and sort it alphabetically\n        sublist = ''.join(sorted(sublist))\n        # Convert the sorted sublist back to a list and assign it back to the original sublist\n        input_list[input_list.index(sublist)] = list(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for i, sublist in enumerate(input_list):\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists using the '+' operator\n    combined_list = test_list + test_tup\n    # Convert the list to a tuple\n    combined_tup = tuple(combined_list)\n    # Return the resulting tuple\n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Iterate through the tuples and append the list to each tuple\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    \n    # Append the list to the tuple\n    test_tup += new_tuple\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    \n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_list = test_list + list(test_tup)\n    print(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples if they're not already\n    if not isinstance(test_list, tuple):\n        test_list = tuple(test_list)\n    if not isinstance(test_tup, tuple):\n        test_tup = tuple(test_tup)\n    # Append the lists to the tuples and return the result\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize an empty list to hold the merged sorted list\n    merged_list = []\n    \n    # initialize two pointers to point to the beginning of the three input lists\n    i = j = k = 0\n    \n    # while the three input lists have not been exhausted\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        \n        # if the element at the current indices of the three input lists is less than the element at the same index in the merged list,\n        # append the element at the current index to the merged list and increment the current index for each input list\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    # while there are still elements left in the input lists, append them to the merged list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a min heap for num1\n    heapq.heapify(num1)\n\n    # create a min heap for num2\n    heapq.heapify(num2)\n\n    # create a min heap for num3\n    heapq.heapify(num3)\n\n    # merge the three lists\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    # append any remaining elements\n    merged_list += num1 + num2 + num3\n\n    # return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Create a min heap of the combined list\n    heap = []\n    for num in combined_list:\n        heapq.heappush(heap, num)\n    \n    # Combine the list from the heap into a single sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n\n    while i < len(num1) and k < len(num3):\n        if num1[i] < num3[k]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n\n    while j < len(num2) and k < len(num3):\n        if num2[j] < num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge the first two lists\n    merged_list = num1 + num2\n    \n    # Merge the merged list with the third list\n    merged_list += num3\n    \n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # create a list to store the merged sorted list\n    merged_list = []\n\n    # initialize the three input lists\n    input_list1 = num1\n    input_list2 = num2\n    input_list3 = num3\n\n    # compare the first element of each list and add the smaller one to the merged list\n    if input_list1[0] < input_list2[0]:\n        if input_list1[0] < input_list3[0]:\n            merged_list.append(input_list1[0])\n            input_list1 = input_list1[1:]\n        else:\n            merged_list.append(input_list3[0])\n            input_list3 = input_list3[1:]\n    else:\n        if input_list2[0] < input_list3[0]:\n            merged_list.append(input_list2[0])\n            input_list2 = input_list2[1:]\n        else:\n            merged_list.append(input_list3[0])\n            input_list3 = input_list3[1:]\n\n    # add the remaining elements of the two lists to the merged list\n    while input_list1:\n        merged_list.append(input_list1[0])\n        input_list1 = input_list1[1:]\n    while input_list2:\n        merged_list.append(input_list2[0])\n        input_list2 = input_list2[1:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert the lists to lists of tuples, where each tuple contains a number and its index in the original list\n    list1_tuples = [(num1[i], i) for i in range(len(num1))]\n    list2_tuples = [(num2[i], i) for i in range(len(num2))]\n    list3_tuples = [(num3[i], i) for i in range(len(num3))]\n\n    # Combine the lists of tuples into a single list\n    merged_tuples = list1_tuples + list2_tuples + list3_tuples\n\n    # Sort the merged list of tuples by the first element (the number)\n    heapq.heapify(merged_tuples)\n\n    # Create an empty list to hold the sorted numbers\n    sorted_list = []\n\n    # Extract the numbers from the tuples and add them to the sorted list\n    while merged_tuples:\n        _, index = heapq.heappop(merged_tuples)\n        sorted_list.append(num1[index])\n        sorted_list.append(num2[index])\n        sorted_list.append(num3[index])\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Combine the three lists into one list using the heapq.merge() function\n    merged_list = heapq.merge(num1, num2, num3)\n\n    # Convert the merged list back to a list and return it\n    return list(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all the three lists into one\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list in ascending order\n    merged_list.sort()\n\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a list of all three input lists\n    all_lists = [num1, num2, num3]\n    \n    # initialize an empty list to store the sorted numbers\n    sorted_list = []\n    \n    # use a heapq to merge the lists based on the smallest values first\n    heapq.heapify(all_lists)\n    \n    # iterate over the lists and add the smallest values to the sorted_list\n    while all_lists:\n        sorted_list.append(heapq.heappop(all_lists))\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    binary = list(s)\n    # Initialize the count of odd numbers to 0\n    count = 0\n    # Initialize the current index to 0\n    i = 0\n    \n    # Loop for n times\n    for _ in range(n):\n        # Append the last digit to the beginning of the list\n        binary.append(binary.pop(0))\n        # Find the number of odd digits in the list\n        for j in range(len(binary)):\n            if binary[j] % 2!= 0:\n                count += 1\n        # Rotate the list by one index to the right\n        binary = binary[1:] + [binary[0]]\n        \n    # Return the count of odd numbers in the final rotated list\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    binary_str = ''\n    for i in range(n):\n        binary_str = binary_str + s\n    binary_str = binary_str.replace('0', '1').replace('1', '0')\n    count = 0\n    for i in binary_str:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    s = s.lstrip('0') # Remove leading zeros\n    s = s[::-1] # Reverse the binary string\n    s = bin(int(s, 2))[2:].zfill(n) # Rotate the binary string n times\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert binary string to list of digits\n    binary_list = list(s)\n\n    # initialize counter for odd values\n    odd_counter = 0\n\n    # loop through the list of digits and increment counter if digit is odd\n    for digit in binary_list:\n        if int(digit) % 2 == 1:\n            odd_counter += 1\n\n    # rotate the list of digits n times\n    for i in range(n):\n        left = binary_list.pop(0)\n        right = binary_list.pop(-1)\n        binary_list.insert(0, right)\n        binary_list.insert(-1, left)\n\n    # loop through the rotated list of digits and increment counter if digit is odd\n    for digit in binary_list:\n        if int(digit) % 2 == 1:\n            odd_counter += 1\n\n    # return the number of odd values in the final rotated list\n    return odd_counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize an empty list to store the numbers with odd value\n    odd_list = []\n    \n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Reverse the first half of the binary string\n        binary_list = binary_list[::-1]\n        # Reverse the second half of the binary string\n        binary_list = binary_list[::-1]\n    \n    # Count the number of odd numbers in the binary string\n    for i in binary_list:\n        if i % 2!= 0:\n            odd_list.append(i)\n            \n    # Return the number of odd numbers\n    return len(odd_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes two arguments:\n    s: A binary string of length n.\n    n: An integer representing the number of times to rotate the binary string.\n    It returns the number of odd values in the rotated binary string.\n\n    Example:\n    odd_Equivalent(\"0101\", 2) # should return 1\n    odd_Equivalent(\"1111\", 4) # should return 0\n    odd_Equivalent(\"1001\", 1) # should return 1\n    \"\"\"\n\n    # Create a list of binary strings that are rotated n times\n    rotated_binary_strings = [s[i:] + s[:i] for i in range(len(s)+1)]\n\n    # Initialize a counter to keep track of the number of odd values\n    counter = 0\n\n    # Iterate over the rotated binary strings and check if each one contains an odd value\n    for binary_string in rotated_binary_strings:\n        for i in range(len(binary_string)):\n            if int(binary_string[i]) % 2 == 1:\n                counter += 1\n                break\n\n    return counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # initialize the count variable to 0\n    count = 0\n    \n    # convert the binary string to a list of integers\n    binary_list = list(bin(int(s, 2))[2:])\n    \n    # loop n times\n    for i in range(n):\n        \n        # reverse the list\n        binary_list.reverse()\n        \n        # loop through the list\n        for j in range(len(binary_list)):\n            \n            # if the value is odd, increment the count\n            if int(binary_list[j]) % 2 == 1:\n                count += 1\n                \n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    This function takes a binary string's' and an integer 'n' as input and returns the number of odd numbers after rotating the binary string's' n number of times.\n    \"\"\"\n    # Initialize an empty list to store the rotated binary string\n    rotated_binary_str = []\n    \n    # Iterate n times to rotate the binary string's'\n    for i in range(n):\n        # Append the last digit of the binary string to the front of the list\n        rotated_binary_str.append(int(s[-1]))\n        \n        # Remove the last digit from the binary string\n        s = s[:-1]\n        \n        # Add the first digit of the binary string to the end of the list\n        rotated_binary_str.append(int(s[0]))\n        \n        # Remove the first digit from the binary string\n        s = s[1:]\n        \n    # Initialize a counter variable to keep track of the number of odd numbers\n    count = 0\n    \n    # Iterate through the rotated binary string and count the number of odd numbers\n    for num in rotated_binary_str:\n        if num % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers after rotating the binary string's' n number of times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: A binary string.\n    :param n: An integer representing the number of times to rotate the binary string.\n    :return: An integer representing the number of odd numbers found after rotating the binary string n times.\n    \"\"\"\n\n    # Initialize a counter to keep track of the number of odd numbers found\n    count = 0\n\n    # Check if the length of the binary string is odd\n    if len(s) % 2!= 0:\n        # Convert the binary string to a list of digits\n        s = list(map(int, s))\n        # Rotate the binary string n times\n        for i in range(n):\n            # Initialize a list to store the digits of the binary string\n            digits = []\n            # Iterate through the digits of the binary string\n            for j in range(len(s)):\n                # Get the index of the digit based on the rotation index\n                index = (j + i) % len(s)\n                # Add the current digit to the list of digits\n                digits.append(s[index])\n            # Set the binary string to the rotated list of digits\n            s = digits\n        # Iterate through the digits of the binary string\n        for i in range(len(s)):\n            # If the digit is odd, increment the counter\n            if s[i] % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two parameters - a binary string s and an integer n.\n    The function rotates the binary string s n number of times using a sliding window technique.\n    The sliding window technique is used to find the number of odd values in the rotated binary string.\n    \"\"\"\n    # Initialize a window with the first n characters of the binary string s\n    window = s[:n]\n\n    # Initialize an odd count variable to 0\n    odd_count = 0\n\n    # Loop through the remaining characters of the binary string s\n    for i in s[n:]:\n        # Slide the window by one character and append the new character to it\n        window = window[-1] + i\n\n        # If the last character of the window is odd, increment the odd count\n        if window[-1] % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common = set()\n\n    # iterate over all the elements in the nested list\n    for element in nestedlist:\n        # check if the element is already in the common set\n        if element in common:\n            # if it is, add it to a list to store the common elements\n            common.add(element)\n        else:\n            # if it's not, check if it's in any of the sublists of the nested list\n            for sublist in nestedlist:\n                if element in sublist:\n                    # if it's, add it to the common set\n                    common.add(element)\n                    break\n\n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the element to the set of common elements if it's not already present\n            if element not in common:\n                common.add(element)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        for elem in sublist:\n            common_set.add(elem)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                if nestedlist[j] not in common:\n                    common.append(nestedlist[j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create a set to store the common elements\n    common = set()\n\n    # Loop through each nested list\n    for lst in nestedlist:\n\n        # Loop through each element in the list\n        for elem in lst:\n\n            # Add the element to the set if it's not already there\n            if elem not in common:\n                common.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find the first list\n    first_list = nestedlist[0]\n    \n    # Initialize the set to store the common elements\n    common_elements = set()\n    \n    # Iterate through the first list\n    for item in first_list:\n        # Check if the item is in the set of common elements\n        if item in common_elements:\n            # If it is, increment the count of occurrences\n            common_elements[item] += 1\n        else:\n            # If it's not, add it to the set with a count of 1\n            common_elements.add(item)\n    \n    # Iterate through the rest of the lists\n    for list_index in range(1, len(nestedlist)):\n        # Find the current list\n        current_list = nestedlist[list_index]\n        \n        # Iterate through the current list\n        for item in current_list:\n            # Check if the item is in the set of common elements\n            if item in common_elements:\n                # If it is, increment the count of occurrences\n                common_elements[item] += 1\n            else:\n                # If it's not, add it to the set with a count of 1\n                common_elements.add(item)\n    \n    # Create a list of common elements with their count of occurrences\n    result_list = []\n    for item, count in common_elements.items():\n        result_list.append((item, count))\n    \n    # Sort the list based on the count of occurrences in descending order\n    result_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the list of common elements with their count of occurrences\n    return result_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Define a helper function to check if a list contains a value\n    def contains_value(lst, value):\n        return any(x == value for x in lst)\n    \n    # Initialize a set to store the common elements found\n    common = set()\n    \n    # Loop over all elements in the nested lists\n    for lst in nestedlist:\n        # Loop over all elements in the current list\n        for element in lst:\n            # If the current element is not in the common set and\n            # if it is in the current list, add it to the common set\n            if element not in common and contains_value(lst, element):\n                common.add(element)\n    \n    # Return the list of common elements found\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if the string is empty or contains only white spaces\n    if not text.strip():\n        return False\n    # check if the string is a number\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if it represents an integer, False otherwise.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # Check if the input is a number\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if not i:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for dictionary in list1:\n            if len(dictionary)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(x, dict) and not x for x in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise ValueError('Input must be a tuple')\n    \n    total = 0\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError('All elements of the tuple must be positive integers')\n        total += num\n        \n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_num = 0\n    for num in nums:\n        int_num += num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in nums):\n        raise TypeError(\"All elements in the tuple must be positive integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_value = 0\n    for num in nums:\n        int_value += num\n    return int_value\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Initialize sum variable\n    total = 0\n    # Iterate over list and add each element to total\n    for num in nums_list:\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize the sum variable\n    total = 0\n    # loop through each element of the tuple\n    for num in nums:\n        # add each element to the total\n        total += num\n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers and returns a single integer by summing up all its elements.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_value = 0\n    for num in nums:\n        int_value += num\n    return int_value"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        try:\n            new_item = float(item)\n            new_list.append(new_item)\n        except ValueError:\n            pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, element in enumerate(row):\n            if isinstance(element, (int, float)):\n                test_list[i][j] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, (int, float, complex)):\n            test_list[test_list.index(item)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                item = float(item)\n            finally:\n                sublist[test_list.index(sublist)] = item\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        elif isinstance(item, (int, float, complex)):\n            test_list.remove(item)\n            test_list.append(float(item))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                yield float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n                else:\n                    sublist[sublist.index(element)] = element"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and convert to list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    # split the string on spaces and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the frequency dictionary to keep track of the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency dictionary with the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Loop through the frequency dictionary and find the element with frequency 1\n    for key in freq:\n        if freq[key] == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n    # loop through the array and update the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # loop through the array again and return the element that appears only once\n    for num in arr:\n        if count_dict[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the array again and check if each element appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first element that appears only once\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            count = 1\n\n    # Find the last element that appears only once\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            count = 1\n\n    # Return the element that appears only once\n    for i in range(len(arr)):\n        if count == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    count += 1\n                    if count == 2:\n                        return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize the count and the index of the element that appears only once\n    count = 1\n    index = 0\n    \n    # Iterate through the array and check if the current element appears only once\n    for i in range(1, n):\n        if arr[i] == arr[index]:\n            # If it does, increment the count and move to the next index\n            count += 1\n        elif count == 1:\n            # If it appears only once, update the index\n            index = i\n            count = 0\n    \n    # If the count is 1, it means that the element that appears only once is at the last index\n    if count == 1:\n        return arr[n-1]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize variables to keep track of the count and the element\n    count = 0\n    element = None\n    # loop through the array\n    for i in range(len(arr)):\n        # check if the current element is equal to the previous element\n        if arr[i] == arr[i-1]:\n            # if it is, increment the count\n            count += 1\n        # if the count is 1 and the element is not None, return the element\n        elif count == 1 and element is not None:\n            return element\n        # otherwise, reset the count and element\n        else:\n            count = 1\n            element = arr[i]\n    # if the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables to store the first and last indices of the array\n    first_index = 0\n    last_index = len(arr) - 1\n\n    # Initialize variables to store the element that appears only once\n    unique_element = None\n\n    # Loop through the array until we find the element that appears only once\n    while first_index < last_index:\n        # Calculate the midpoint index\n        midpoint_index = (first_index + last_index) // 2\n\n        # If the element at the midpoint index is the unique element, update the variables\n        if arr[midpoint_index] == arr[midpoint_index + 1]:\n            unique_element = arr[midpoint_index]\n            first_index = midpoint_index + 1\n        # If the element at the midpoint index is greater than the unique element, update the variables\n        elif arr[midpoint_index] > arr[midpoint_index + 1]:\n            last_index = midpoint_index - 1\n        # If the element at the midpoint index is less than the unique element, update the variables\n        else:\n            first_index = midpoint_index + 1\n\n    # If we didn't find the element that appears only once, return None\n    return unique_element if unique_element is not None else None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    for key, value in count.items():\n        if value == 1:\n            return key\n    \n    return \"Element does not appear only once in the array\""
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create a list of tuples from the input list\n    pairs = [(list1[i], list1[j]) for i in range(len(list1)-1) for j in range(i+1, len(list1))]\n    # Sort the list of tuples based on the second element of each tuple (i.e., the second number in each pair)\n    pairs.sort(key=lambda x: x[1])\n    # Initialize a variable to store the maximum absolute product\n    max_prod = abs(pairs[0][0])\n    # Loop through the sorted list of pairs and update the maximum absolute product\n    for pair in pairs:\n        curr_prod = abs(pair[0]) * abs(pair[1])\n        max_prod = max(max_prod, curr_prod)\n    # Return the maximum absolute product\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum product and maximum pair product variables\n    max_product = float('-inf')\n    max_pair_product = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n\n            # Calculate the absolute product of the numbers in the pair and check if it's greater than the current maximum product\n            pair_product = abs(list1[i][0]*list1[j][1])\n\n            if pair_product > max_pair_product:\n                max_pair_product = pair_product\n\n            # Calculate the absolute product of the current maximum product and the current pair product and check if it's greater than the current maximum absolute product\n            abs_max_product = abs(max_product*max_pair_product)\n\n            if abs_max_product > max_product:\n                max_product = abs_max_product\n\n    # Return the maximum absolute product found\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if len(list1[i]) == 2 and len(list1[j]) == 2:\n                list2.append((list1[i][0]*list1[j][0], list1[i][1]*list1[j][1]))\n    list2.sort(key=lambda x: abs(x[0]), reverse=True)\n    if len(list2) == 0:\n        return 0\n    return list2[0][0]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            diff = abs(list1[i][0]-list1[j][0])\n            temp_product = temp_product * diff\n            \n            if temp_product > max_product:\n                max_product = temp_product\n                max_pair = (list1[i],list1[j])\n                \n    return max_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        elif i % 2 == 0 and i > 2:\n            j = i // 2\n            while j > 1:\n                if j == i or j == i//j:\n                    break\n                j -= 1\n            else:\n                amicable_numbers.append(i)\n        elif i > 2:\n            j = i - 1\n            while j > 1:\n                if j == i or j == i//j:\n                    break\n                j -= 1\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if i not in amicable_numbers:\n            for j in range(2, limit):\n                if j not in amicable_numbers:\n                    if i + j == limit:\n                        amicable_numbers.append(i)\n                        amicable_numbers.append(j)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n\n    # Find all pairs of numbers that are divisible by 2 but not by 1\n    # in the list of numbers\n    pairs = [(a, b) for a in numbers for b in numbers if a!= b and (a % 2 == 0 and b % 2!= 0) or (b % 2 == 0 and a % 2!= 0)]\n\n    # Create a dictionary to store the sum of each pair of amicable numbers\n    amicable_sums = {}\n\n    # Loop through each pair of numbers and calculate their sum\n    for pair in pairs:\n        sum_of_pair = pair[0] + pair[1]\n        if sum_of_pair in amicable_sums:\n            amicable_sums[sum_of_pair] += 1\n        else:\n            amicable_sums[sum_of_pair] = 1\n\n    # Loop through the dictionary and find the sum of all pairs whose sum is equal to the limit\n    result = 0\n    for key in amicable_sums.keys():\n        if key == limit:\n            result += amicable_sums[key]\n\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit + 1):\n        if i!= 1:\n            if i % 2!= 0:\n                if sum_of_proper_divisors(i) == i:\n                    total += i\n    return total\n\n\ndef sum_of_proper_divisors(num):\n    \"\"\"\n    Write a function to find the sum of all proper divisors of a given number.\n    \"\"\"\n    total = 0\n    for i in range(1, num):\n        if num % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a limit number as input and returns the sum of all\n    the amicable numbers from 1 to the limit number.\n    \"\"\"\n    # Helper function to check if a number is amicable or not\n    def is_amicable(num):\n        \"\"\"\n        This helper function takes a number as input and returns True if it\n        is an amicable number, and False otherwise.\n        \"\"\"\n        # Check if the number is divisible by any of the numbers from 1 to num-1\n        for i in range(1, num):\n            if (num % i == 0) and (num // i!= i):\n                return True\n        return False\n\n    # Initialize variables to store sum and count of amicable numbers\n    sum_amicable = 0\n    count_amicable = 0\n\n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable and add it to sum and count if it is\n        if is_amicable(num):\n            sum_amicable += num\n            count_amicable += 1\n\n    # Return the sum of amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        j = 1\n        while i * j <= limit:\n            if i % j == 0 and j!= i:\n                amicable_numbers.append(i * j)\n            j += 1\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables to store the sum of amicable numbers and the count of pairs\n    total_sum = 0\n    pair_count = 0\n    \n    # loop over numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # check if the number is an amicable number\n        if is_amicable(i):\n            # check if the sum of the number and its divisors is less than the limit\n            if is_amicable(limit - i):\n                # increment the pair count and add the sum of the number and its divisors to the total sum\n                pair_count += 1\n                total_sum += i + limit - i\n    \n    # return the sum of amicable numbers\n    return total_sum, pair_count\n\n\ndef is_amicable(n):\n    '''\n    Write a function to check if a number is an amicable number.\n    '''\n    # loop over numbers from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n        # check if the number is divisible by i\n        if n % i == 0:\n            # if it is, check if the divisor is also a factor of the square root of the number\n            if i == n // i:\n                return False\n    # if we made it through the loop without returning False, then the number is an amicable number\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize variables\n    sum_amicable = 0\n    num = 0\n    \n    # loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # check if number is amicable\n        if i in [j for j in range(1, i) if i % j == 0] and i!= j:\n            # add i to sum if it's amicable\n            sum_amicable += i\n        \n        # check if number is prime\n        if i > 1 and all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            # add i to sum if it's prime\n            sum_amicable += i\n    \n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the sum of amicable numbers\n    amicable_sum = 0\n\n    # Iterate through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num!= 1:\n            # Check if the number is divisible by any of the numbers from 1 to the number-1\n            for div in range(2, num):\n                if num % div == 0:\n                    break\n            else:\n                # If the number is not divisible by any of the numbers from 1 to the number-1, it is amicable\n                amicable_sum += num\n\n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable.append(i)\n    return sum(amicable)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculating the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    # calculating the angle of the complex number\n    angle = cmath.phase(a + b*1j)/magnitude\n    # returning the angle of the complex number\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the complex conjugate of the second complex number\n    conjugate_b = cmath.conjugate(b)\n    # calculate the angle using the arc cosine of the product of the first and second complex numbers\n    angle = cmath.acos(a*conjugate_b)\n    # convert the angle from radians to degrees\n    angle_deg = angle * (180 / cmath.pi)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n\n    # Convert the complex number to polar form\n    polar = cmath.polar(complex(a,b))\n    \n    # Calculate the angle of the complex number\n    angle = polar[1] * 180/cmath.pi\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as inputs and returns their angle as a float value.\n    '''\n\n    # convert the inputs to radians\n    angle_rad = cmath.phase(a + b * 1j)\n\n    # convert the angle to degrees\n    angle_deg = angle_rad * 180/cmath.pi\n\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the absolute value of the complex number\n    magnitude = abs(a + b*1j)\n\n    # Calculate the argument of the complex number\n    argument = cmath.phase(a + b*1j)\n\n    # Return the angle in degrees\n    return round(argument * 180 / cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle_in_rad = angle * (cmath.pi/180)\n    return round(angle_in_rad, 3)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # If the current character is 0, increment the count of 0s\n        if string[i] == '0':\n            count_0 += 1\n        # If the current character is 1, increment the count of 1s\n        else:\n            count_1 += 1\n\n        # Calculate the maximum difference between the count of 0s and count of 1s\n        max_diff = max(max_diff, abs(count_0 - count_1))\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_1 - count_0)\n        else:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    zeros = zeros_count = ones_count = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            zeros += 1\n            ones_count = 0\n        else:\n            ones_count += 1\n            zeros_count = 0\n        diff = abs(zeros - ones_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n            if count_0s > count_1s:\n                max_diff = max(max_diff, count_0s - count_1s)\n            count_0s = 0\n            count_1s = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                zero_count += 1\n            elif string[j] == '1':\n                one_count += 1\n            else:\n                break\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        diff = 0\n        for j in range(i+1, len(string)+1):\n            if string[i] == '0' and string[j-1] == '1':\n                diff += 1\n            elif string[i] == '1' and string[j-1] == '0':\n                diff += 1\n            else:\n                continue\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize variables\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n        # If the character is neither 0 nor 1, reset the counts to 0 and 1\n        else:\n            count_0 = 0\n            count_1 = 0\n\n        # Calculate the maximum difference between the count of 0s and 1s\n        diff = max(count_0, count_1)\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize the maximum difference and count of 0s and 1s\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through each character of the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == \"0\":\n            count_0 += 1\n            # If the difference between the count of 0s and 1s is greater than the current maximum difference, update the maximum difference\n            if count_1 - count_0 > max_diff:\n                max_diff = count_1 - count_0\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n            # If the difference between the count of 0s and 1s is greater than the current maximum difference, update the maximum difference\n            if count_1 - count_0 > max_diff:\n                max_diff = count_1 - count_0\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_0 = count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = [i for i in range(1, b+1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of a and b.\n    \"\"\"\n    return (gcd(a, b) * (a//gcd(a, b)))\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of common divisors of a and b.\n    \"\"\"\n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = [x for x in range(1, min(a, b)+1) if a % x == 0 and b % x == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function takes in two numbers as arguments and returns the sum of their common divisors.\n    \"\"\"\n\n    # Find the set of common divisors of num1 and num2\n    common_divisors = set()\n    for i in range(1, num1 + 1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            common_divisors.add(i)\n\n    # Calculate the sum of the common divisors\n    total_sum = 0\n    for divisor in common_divisors:\n        total_sum += divisor\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers a and b.\n    \"\"\"\n\n    # First, we find the list of common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # If there are no common divisors, we return 0\n    if len(common_divisors) == 0:\n        return 0\n\n    # Otherwise, we sum up the common divisors\n    result = sum(common_divisors)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate the sum of common divisors using a for loop\n    sum_divisors = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n\n    # Initializing a set to store all the prime numbers up to the square root of the maximum number\n    prime_numbers = set(range(2, int(a**0.5) + 1))\n\n    # Finding the set of common divisors of a and b using the formula for the sum of divisors\n    divisors_a = set()\n    divisors_b = set()\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            divisors_a.add(i)\n            divisors_a.add(a // i)\n        if b % i == 0:\n            divisors_b.add(i)\n            divisors_b.add(b // i)\n\n    # Finding the prime divisors of the common divisors and storing them in a new set\n    prime_divisors = set()\n    for div in divisors_a.intersection(divisors_b):\n        if div in prime_numbers:\n            prime_divisors.add(div)\n\n    # Returning the sum of the prime divisors\n    return sum(prime_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integer inputs and returns their sum of common divisors.\n    \"\"\"\n    # Find all the common divisors of num1 and num2\n    div1 = find_common_divisors(num1, num2)\n    # Find the sum of these divisors\n    total = sum(div1)\n    return total\n\ndef find_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integer inputs and returns a list of their common divisors.\n    \"\"\"\n    divisors = []\n    # Iterate through all possible divisors of num1 and num2\n    for i in range(1, min(num1, num2)+1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find common divisors\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # find sum of common divisors\n    if not divisors:\n        return 0\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b+1):\n        if b % i == 0 and a % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Create an empty list to store the long words\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n characters\n        if len(word) > n:\n            # If it is, append it to the long_words_list\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Create an empty list to store the longer words\n    longer_words = []\n    \n    # Loop through the words in the list\n    for word in str:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the word to the longer_words list\n            longer_words.append(word)\n    \n    # Return the list of longer words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the input string into words\n    words = str.split()\n\n    # Initialize an empty list to store long words\n    long_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the long_words list\n            long_words.append(word)\n\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # check if each row, column, and diagonal have the same sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        diag_sum = sum([my_matrix[j][j] for j in range(n)])\n        if row_sum!= col_sum or row_sum!= diag_sum:\n            return False\n    # check if each row, column, and sub-diagonal have the same sum\n    for i in range(n):\n        for j in range(n):\n            sub_sum = sum([my_matrix[k][j] for k in range(i)])\n            if sub_sum!= my_matrix[i][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize the sum of the diagonal elements\n    diag_sum = 0\n    \n    # Loop through each row and column\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the current element is the same as the next element in the row or column\n            if my_matrix[i][j]!= my_matrix[i+1][j] and my_matrix[i][j]!= my_matrix[i][j+1]:\n                return False\n            \n            # Add the element to the sum of the diagonal elements\n            if i == j:\n                diag_sum += my_matrix[i][j]\n    \n    # Check if the diagonal sum is equal to the sum of the matrix elements\n    if diag_sum == sum(sum(row) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum - my_matrix[i][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the diagonal values\n    diagonal_sum = 0\n    \n    # Iterate through the rows and columns of the matrix\n    for i in range(len(my_matrix)):\n        # Check if the sum of the row values equals the sum of the column values\n        if sum(my_matrix[i]) == diagonal_sum:\n            return True\n        \n        # Check if the sum of the diagonal values equals the sum of the row values\n        if sum(my_matrix[j][i] for j in range(len(my_matrix))) == diagonal_sum:\n            return True\n        \n        # Add the current diagonal value to the sum\n        diagonal_sum += my_matrix[i][i]\n    \n    # If no diagonal value is found to match the sum, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square, and False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix has a perfect square shape\n    if n**0.5!= int(n**0.5):\n        return False\n    # Calculate the sum of the diagonal elements\n    sum_diagonal = sum(sum(row) for row in my_matrix)\n    # Calculate the sum of the rows\n    sum_rows = sum(row for row in my_matrix)\n    # Calculate the sum of the columns\n    sum_columns = sum(my_matrix[j][i] for i in range(n) for j in range(n))\n    # Check if the sum of the diagonal elements is the same as the sum of the rows and columns\n    return sum_diagonal == sum_rows == sum_columns"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    square = []\n    \n    # Check if the matrix is a magic square\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if my_matrix[i][j] not in square:\n                square.append(my_matrix[i][j])\n                if len(square) == num_rows * num_cols:\n                    return True\n                square.pop()\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square,\n    and False otherwise.\n    \"\"\"\n    # Calculate the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Initialize a list to store the sum of each row\n    row_sums = [0] * n\n\n    # Check if each row has a sum of 15 or 0\n    for row in my_matrix:\n        row_sum = sum(row)\n        if row_sum not in [15, 0]:\n            return False\n        row_sums[row.index(max(row))] += 1\n        row_sums[row.index(min(row))] -= 1\n\n    # Check if each column has a sum of 15 or 0\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum not in [15, 0]:\n            return False\n\n    # Check if the main diagonal has a sum of 15 or 0\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag_sum not in [15, 0]:\n        return False\n\n    # Check if the reverse diagonal has a sum of 15 or 0\n    rev_diag_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if rev_diag_sum not in [15, 0]:\n        return False\n\n    # If all the checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if each row has the same sum\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= len(my_matrix) ** 2:\n            return False\n\n    # Check if each column has the same sum\n    for i in range(len(my_matrix[0])):\n        col_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if col_sum!= len(my_matrix) ** 2:\n            return False\n\n    # Check if the diagonals have the same sum\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diag_sum!= len(my_matrix) ** 2:\n        return False\n    diag_sum = sum(my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix)))\n    if diag_sum!= len(my_matrix) ** 2:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_square = [[0] * cols for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            magic_square[i][j] = my_matrix[i][j]\n\n    for i in range(rows):\n        if sum(magic_square[i])!= i * (i + 1) * (2 * rows - 1):\n            return False\n\n    for j in range(cols):\n        if sum(magic_square[:, j])!= j * (j + 1) * (2 * cols - 1):\n            return False\n\n    for i in range(rows - 2):\n        for j in range(cols - 2):\n            if magic_square[i][j] + magic_square[i+1][j+1] + magic_square[i+2][j] + \\\n               magic_square[i+2][j+2] + magic_square[i+2][j+1] + magic_square[i+2][j] + \\\n               magic_square[i+1][j+1]!= 10:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"The matrix must have 3 rows and 3 columns.\"\n\n    # Initialize the sum of the rows, columns and diagonals\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(row[i] for row in my_matrix) for i in range(3))\n    diagonal_sum = sum(row[i] for i in range(3) for row in my_matrix)\n\n    # Check if the sum of the rows, columns and diagonals are equal to 15\n    if row_sum == col_sum == diagonal_sum == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    max_freq = max(freq_map.values())\n    for num, freq in freq_map.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)  # to store the frequency of each item\n    \n    # iterate over the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n        \n    # find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n            break\n        \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item in freq:\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with\n    the maximum frequency in the list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The item with the maximum frequency in the list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    max_item = [k for k, v in freq_dict.items() if v == max_freq][0]\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = -1\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_str = []\n    \n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str.append(char)\n    \n    return ''.join(reversed_str[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_index = []\n    vowels_found = False\n    result = ''\n\n    # Find all the index of vowels in the string\n    for i, char in enumerate(str1):\n        if char in vowels and vowels_found == False:\n            vowels_index.append(i)\n            vowels_found = True\n        elif char in vowels and vowels_found == True:\n            break\n\n    # Reverse the vowels in the string\n    for i in range(len(vowels_index) - 1, -1, -1):\n        result += str1[vowels_index[i]]\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowel_index = [i for i, char in enumerate(string) if char in vowels]\n    reversed_string = string[::-1]\n    new_string = \"\"\n    for i in range(len(reversed_string)):\n        if i in vowel_index:\n            new_string += reversed_string[i]\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str = str1[i] + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_index.append(i)\n    if not vowel_index:\n        return str1\n    else:\n        vowel_index.reverse()\n        start = vowel_index[0]\n        end = vowel_index[-1]\n        return str1[start:end+1][::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_reverse = \"\"\n    for char in str1:\n        if char not in vowels:\n            vowels_reverse += char\n    return vowels_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str2 = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            str2 += char\n    str2 = str2[::-1]\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # join the list with commas\n    string_tup = \", \".join(lst)\n    # return the string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    # Return the converted string\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negatives += num\n    return sum_of_negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n - 3 * n) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (3*n**2 - 1) // 2\n    else:\n        return (-3*n**2 + 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Find the base 6 value of n and store it in a variable\n    base_6_value = n // 6\n    \n    # Find the remainder when n is divided by 6\n    remainder = n % 6\n    \n    # Add the remainder to the base_6_value to get the nth hexagonal number\n    hexagonal_num = base_6_value + remainder\n    \n    # Return the nth hexagonal number\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Function to calculate the nth hexagonal number\n    def nth_hexagonal_num(n):\n        # Initialize variables\n        h = 0\n        i = 1\n        while i <= n:\n            # Calculate the value of h for each iteration\n            h = i * (3 * i - 1) // 2\n            # Increment i\n            i += 1\n        # Return the value of h\n        return h\n    \n    # Return the nth hexagonal number\n    return nth_hexagonal_num(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first term of the sequence\n    first_term = n * (3 * n - 1) // 2\n    return first_term"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # base case: if n is 1, the nth hexagonal number is 1\n    if n == 1:\n        return 1\n    # base case: if n is 2, the nth hexagonal number is 5\n    elif n == 2:\n        return 5\n    # recursive case: otherwise, the nth hexagonal number is the sum of the (n-1)th and (n-2)th hexagonal numbers\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = n * (2 * n - 1)\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (n * (2 * n - 1)) + ((n * (2 * n - 1)) // 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the base of the hexagonal number\n    base = 2 * (5 ** 0.5)\n\n    # Calculate the nth hexagonal number using the formula:\n    # (2 * base)^(n/2) + (2 * base)^((n-1)/2)\n    hex_num = (2 * base) ** (n // 2) + (2 * base) ** ((n - 1) // 2)\n\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the zeros and ones\n    arr = array('i', nums)\n\n    # initialize the count of zeros and ones\n    zeros = 0\n    ones = 0\n\n    # iterate through the array and count the zeros and ones\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n\n    # calculate the ratio of zeros to non-zeros\n    ratio = zeros / ones\n\n    # print the ratio\n    print(\"Ratio of zeros to non-zeros: {:.2f}\".format(ratio))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the count of non-zero and zeroes\n    counts = array('i', [0, 0])\n    \n    # Loop through the array and increment the count of non-zeroes and zeroes\n    for num in nums:\n        if num!= 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = counts[0] / counts[1]\n    \n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    \n    return num_zeros / num_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:  # base case\n        return 0, 0\n    \n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    ratio = (zeroes / non_zeroes) * 100\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize a counter for zeroes and a counter for non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # iterate over the array and count zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = non_zero_count / zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        float: A float value representing the ratio of zeroes to non-zeroes in the input array.\n\n    \"\"\"\n    # Initialize two variables to store the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate through the array and increment the count of zeroes and non-zeroes accordingly\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    # Calculate and return the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i') # initialize array of integers to store zeros\n    nonzeros = array('i') # initialize array of integers to store non-zeros\n    for num in nums:\n        if num == 0: # if number is zero, append to array of zeros\n            zeros.append(1)\n        else: # if number is non-zero, append to array of non-zeros\n            nonzeros.append(1)\n    zeros_ratio = zeros[0] / len(nums) # calculate the ratio of zeros to non-zeros\n    return zeros_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to a list\n    arr = list(nums)\n\n    # Initialize the zero count and non-zero count\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the list and count the number of zeroes and non-zeroes\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    power = 0\n    \n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n //= 2\n        power += 1\n        \n    return count == power"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check if a number is a power of 2\n    def isPowerOf2(num): \n        if num == 0: \n            return False\n        if num == 1: \n            return True\n        return (num & (num - 1)) == 0\n\n    # Function to check if a number is a sum of powers of 2\n    def isSumOfPowersOf2(num):\n        power = 0\n        total = 0\n        while num > 0:\n            power += 1\n            num >>= 1\n            if isPowerOf2(power):\n                total += power\n        return total == n\n\n    # Check if the given number can be represented as sum of powers of 2 or not\n    if isSumOfPowersOf2(n):\n        return \"The number can be represented as sum of non-zero powers of 2.\"\n    else:\n        return \"The number cannot be represented as sum of non-zero powers of 2.\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the input number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Initialize a variable to keep track of the sum of powers of 2\n    power_sum = 0\n    \n    # Loop through each binary digit in the string\n    for digit in binary_str:\n        # If the digit is 1, add 2^power_sum to the sum\n        if digit == '1':\n            power_sum += 1\n        \n        # If the sum is greater than the input number, it can't be represented as sum of powers of 2\n        if power_sum > n:\n            return False\n        \n        # If the sum is equal to the input number, it can be represented as sum of powers of 2\n        if power_sum == n:\n            return True\n    \n    # If the loop completes without returning False, it means that the input number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is a power of 2\n    if n == 1:\n        return True\n\n    # Iterate through the binary representation of n\n    for i in range(31, -1, -1):\n        if (n >> i) & 1:\n            # Check if the remaining binary digits can be represented as sum of powers of 2\n            power = 1 << i\n            count = 0\n            while power <= n:\n                count += n // power\n                power <<= 1\n            if count!= 0:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    if count >= 2:\n        return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two <<= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Initialize a variable to store the remainder when n is divided by 2\n    remainder = n\n    \n    # Loop while the remainder is greater than 0\n    while remainder > 0:\n        # Check if the remainder is a power of 2\n        if remainder % 2 == 0:\n            # Add 1 to the power sum if the remainder is a power of 2\n            power_sum += 1\n        \n        # Divide the remainder by 2 to remove the last digit\n        remainder = remainder // 2\n        \n    # Check if the power sum is equal to the number of bits in the binary representation of n\n    return power_sum == len(bin(n)[2:])"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while n > 0:\n        if n % 2 == 1:\n            if power == 0:\n                return False\n            else:\n                return True\n        n //= 2\n        power += 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r  # pi is a mathematical constant and is approximately equal to 3.14"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return 2*pi*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi is a mathematical constant, and r is the radius\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(set([item for sublist in test_list for item in sublist]))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # Helper function to reverse the order of the pancakes\n    def reverse_pancakes(pancakes, start, end):\n        while start < end:\n            pancakes[start], pancakes[end] = pancakes[end], pancakes[start]\n            start += 1\n            end -= 1\n\n    # Sort the pancakes using the standard bubble sort algorithm\n    for i in range(len(nums) - 1, 0, -1):\n        reverse_pancakes(nums, 0, i)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # step 1: reverse the array\n    for i in range(n//2):\n        j = n - 1 - i\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # step 2: bubble sort\n    for i in range(n-1, 0, -1):\n        swapped = False\n        for j in range(0, i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Convert the list to a string and reverse the string\n    s = ''.join(reversed(str(nums)))\n    # Traverse the string from left to right\n    for i in range(n-1):\n        # Find the maximum element in the unsorted part of the string\n        max_index = s.find(max(s[i:], key=s[i:].index))\n        # Swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Update the sorted part of the string\n        for j in range(i, n-1):\n            s = s[:i] + str(nums[j]) + s[i+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Initialize the maximum heap\n    heap = [(0, i) for i in range(n)]\n    heapq.heapify(heap)\n    # Bubble up the smallest element\n    for i in range(n-1, 0, -1):\n        if nums[i] < nums[heap[0][1]]:\n            # Swap the two elements\n            nums[i], nums[heap[0][1]] = nums[heap[0][1]], nums[i]\n            # Update the heap\n            heap[0] = (heap[0][0] - 1, heap[0][1])\n            heapq.heapify(heap)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    Pancake sort is an efficient sorting algorithm that sorts a list of elements by repeatedly\n    interchanging adjacent elements if they are in the wrong order.\n\n    Pancake sort works by sorting the list in reverse order and then sorting the reversed list.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    '''\n\n    # Reverse the list\n    nums = nums[::-1]\n\n    # Sort the reversed list using the bubble sort algorithm\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all the elements\n    for i in range(n):\n        # Find the maximum element in the unsorted part\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the remaining unsorted part\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # Initialize the maximum pancake.\n    max_pancake = n - 1\n\n    # Initialize the swaps count.\n    swaps = 0\n\n    # Iterate until the maximum pancake has been reached.\n    while max_pancake >= 1:\n        # Initialize the current pancake.\n        current_pancake = max_pancake\n\n        # Iterate until the current pancake is sorted.\n        while current_pancake > 0 and nums[current_pancake - 1] > nums[current_pancake]:\n            # Swap the elements.\n            nums[current_pancake - 1], nums[current_pancake] = nums[current_pancake], nums[current_pancake - 1]\n\n            # Increment the swaps count.\n            swaps += 1\n\n            # Decrement the current pancake.\n            current_pancake -= 1\n\n        # Decrement the maximum pancake.\n        max_pancake -= 1\n\n    # Print the final sorted list.\n    print(nums)\n\n    # Print the number of swaps.\n    print(\"Number of swaps:\", swaps)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Convert the list to a string\n    s = str(nums)\n    # Initialize the index of the largest element\n    largest = n - 1\n    # Initialize the count of swaps\n    swaps = 0\n    # Loop until the largest element is in its correct position\n    while largest >= 0:\n        # Initialize the index of the current largest element\n        i = largest\n        # Initialize the maximum index of the current pancake segment\n        j = i\n        # Find the maximum element in the current pancake segment\n        while j < n:\n            if s[j] == '0':\n                break\n            elif s[j] == '1':\n                j += 1\n            else:\n                break\n            if j == n:\n                break\n            if s[j] == '1':\n                if j > i:\n                    s[i:j+1] = s[j:j+1][::-1]\n                    swaps += j-i\n                    i = j+1\n                    j = i\n        # If the maximum element is not in its correct position, swap it with the next largest element\n        if s[i]!= '0':\n            s[i], s[largest] = s[largest], s[i]\n            largest -= 1\n            swaps += 1\n    return s, swaps"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is an efficient sorting algorithm that works by repeatedly\n    \"flipping\" the top and bottom elements of an unsorted list. The algorithm is named after\n    its inventor, French pancake artist, and is named after the pancake that is formed when a\n    pancake sort is completed.\n\n    Algorithm:\n       1. Start with the first element as the pivot.\n       2. Partition the list around the pivot.\n       3. If the pivot is on its correct position, return.\n       4. Otherwise, repeat step 2 with the new partition.\n\n    Complexity:\n       1. Time Complexity: O(n^2)\n       2. Space Complexity: O(1)\n    '''\n\n    def partition(nums, low, high):\n        '''\n        Partition the list around a pivot element.\n        '''\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i+1], nums[high] = nums[high], nums[i+1]\n        return i+1\n\n    def pancake_sort_helper(nums, low, high):\n        '''\n        Recursive function to sort the list.\n        '''\n        if low < high:\n            pivot_index = partition(nums, low, high)\n            pancake_sort_helper(nums, low, pivot_index-1)\n            pancake_sort_helper(nums, pivot_index+1, high)\n\n    pancake_sort_helper(nums, 0, len(nums)-1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # find the maximum element in the range\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the maximum element with the end of the range\n        nums[max_index], nums[i] = nums[i], nums[max_index]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1: A list of numbers.\n        list2: A list of numbers.\n        list3: A list of numbers.\n\n    Returns:\n        The count of identical items in the same position in the three lists.\n    \"\"\"\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = arr[1] - arr[0] # Initialize the maximum difference with the first element \n    for i in range(1, len(arr)): \n        diff = arr[i] - arr[i-1] # Find the difference between current and previous elements \n        max_diff = max(max_diff, diff) # Update the maximum difference \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and finds the maximum difference between any two elements in the array.\n    The function returns the maximum difference.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = abs(arr[1] - arr[0])\n\n    # Loop through the array and find the maximum difference\n    for i in range(1, len(arr)-1):\n        curr_diff = abs(arr[i+1] - arr[i])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n\n    # Define the quadratic equation as ax^2 + bx + c = 0\n    def quadratic_equation(a, b, c):\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None\n        elif discriminant == 0:\n            return -b/2/a\n        else:\n            root1 = (-b - discriminant**0.5)/(2*a)\n            root2 = (-b + discriminant**0.5)/(2*a)\n            return (root1, root2)\n\n    # Determine the roots of the quadratic equation\n    roots = quadratic_equation(a, b, n)\n\n    # Check if the roots are real\n    if None in roots:\n        return None\n\n    # Return the solutions as a tuple\n    return tuple(int(round(root)) for root in roots)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n+1):\n        x = (n - i*a) // b\n        y = i*x - n\n        if x == int(x) and y == int(y):\n            return (int(x), int(y))\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize a list to store the solutions\n    solutions = []\n\n    # loop through all possible values of x and y\n    for x in range(n):\n        for y in range(n):\n            # check if the current value satisfies the equation\n            if a*x + b*y == n:\n                # add the current solution to the list of solutions\n                solutions.append((x, y))\n\n    # if there are no solutions, return None\n    if len(solutions) == 0:\n        return None\n\n    # otherwise, return the first solution in the list of solutions\n    else:\n        return solutions[0]"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if a == 0:\n        return None\n\n    x = -b / (2 * a)\n    y = n / a\n\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y variables\n    x = y = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Calculate the value of x and y\n        x = (y * b) - (x * a)\n        y = (x * a) + (y * b)\n\n        # Check if the value of x and y satisfies the given condition\n        if x * a + y * b == n:\n            return x, y\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if d < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    \n    # Return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables for x and y\n    x = 0\n    y = 0\n    \n    # Initialize variables for x and y\n    for i in range(n):\n        # Increment x by a\n        x += a\n        \n        # Increment y by b\n        y += b\n        \n        # If x and y are equal to n, return (x, y)\n        if x == n and y == n:\n            return (x, y)\n    \n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    D = b**2 - 4*a*n\n\n    # If the discriminant is positive, there is a solution\n    if D > 0:\n        x1 = (-b + D**0.5) / (2*a)\n        x2 = (-b - D**0.5) / (2*a)\n        return (x1, x2)\n\n    # If the discriminant is 0, there is only one solution\n    elif D == 0:\n        return (-b / (2*a))\n\n    # If the discriminant is negative, there is no solution\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    if b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative or zero\n    if discriminant < 0:\n        return None\n    \n    # If it's not, the discriminant must be a positive integer\n    x = (-b + discriminant**0.5) // (2*a)\n    y = (-b - discriminant**0.5) // (2*a)\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has real solutions\n    d = a*b - n\n    if d == 0:\n        return (0, 0)\n    elif d > 0:\n        x = (-b + d**0.5)/(2*a)\n        y = (-b - d**0.5)/(2*a)\n    elif d < 0:\n        x = (-b - d**0.5)/(2*a)\n        y = (-b + d**0.5)/(2*a)\n\n    # Check if the solutions are integers\n    if int(x) == x and int(y) == y:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the elements that are present in list2 but not in list1\n    result = []\n    # iterate through each element in list1\n    for element in list1:\n        # check if the element is present in list2\n        if element in list2:\n            # if it is, add it to the result list\n            result.append(element)\n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the elements that should be removed\n    remove_list = []\n    \n    # Loop over the first list and check if each element is in the second list\n    for element in list1:\n        if element in list2:\n            # If the element is in the second list, add it to the remove list\n            remove_list.append(element)\n    \n    # Loop over the remove list and remove all occurrences of the elements from the first list\n    for element in remove_list:\n        list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list2 to find the elements to remove\n    for element in list2:\n        # remove all occurrences of the element from list1\n        while element in list1:\n            list1.remove(element)\n    # return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the elements of list1 that are not present in list2\n    new_list = [x for x in list1 if x not in list2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        x = 0\n        while n - 2*x >= 0:\n            x += 1\n        return (2*x + 1)*(n - 2*x)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 0\n    while i < n // 2:\n        s += (n - 2*i)\n        i += 1\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n//2):\n        series_sum += n - 2*i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    i = 0\n    while n - i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        n += 1\n    return sum(x for x in range(n-1, -1, -1) if x % 2 == 1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the series from 0 to n // 2 is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n // 2) * ((2*n) - 2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the length of one side of the polygon\n    a = s / l\n\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * tan(pi/l)) ** 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = (2*i*pi)/l\n        area += s * (math.tan(angle))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/(2*(1-tan(pi/l)))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2) * l / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * 2 * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        a = (s/l)**(1/2)\n        area += a\n    area *= tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pi = math.pi\n    area = (l * s) / 2\n    area = round(area, 2)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(set(int(i) for i in str(n)))\n\n    # check if the sum of the divisors of the other integer is the same as n\n    other_int = int(input(\"Enter another integer: \"))\n    other_div_sum = sum(set(int(i) for i in str(other_int)))\n\n    if div_sum == other_div_sum:\n        print(f\"The sum of the divisors of {n} and {other_int} is the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} and {other_int} are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_set = set() \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_set.add(i) \n            if i!= n//i: \n                div_set.add(n//i) \n    if len(div_set) == 2: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div2 = [n//i for i in div1]\n    div1.sort()\n    div2.sort()\n    if div1 == div2:\n        print(\"The sum of the divisors of\", n, \"are the same\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check if n is a prime number \n    if n == 2: \n        return True\n    elif n < 2 or not n % 2: \n        return False\n    # check if n has only odd divisors \n    elif n % 3 == 0 or n % 5 == 0: \n        return True\n    # check for divisors up to sqrt(n) \n    else: \n        i = 3\n        while i * i <= n: \n            if n % i == 0: \n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # Calculate the sum of the divisors of n-1\n    div_sum += sum([i for i in range(1, int(math.sqrt(n))+1) if n-1 % i == 0])\n    # Check if the sum of the divisors of n and n-1 is the same\n    if div_sum == (n*(n-1))/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Divide the input number by 2 and get the remainder\n    # If the remainder is 0, the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    # Initialize sum variable to 0\n    sum_div = 0\n    # Loop through the integers from 1 to the square root of the input number\n    for i in range(1, int(math.sqrt(n))+1):\n        # If the input number is divisible by the current integer, add it to the sum variable\n        if n % i == 0:\n            sum_div += i\n    # Check if the sum of the divisors of the input number and the sum variable is equal\n    if sum_div == 2 * n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i)\n            if n//i!= i: \n                divisors.append(n//i)\n    if len(divisors) % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # Check if the sum of divisors of n is equal to the sum of divisors of 2n\n    if div_sum == (2*n)*sum([i for i in range(1, int(math.sqrt(2*n))+1) if 2*n % i == 0]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    \n    # Calculate the sum of the divisors of n\n    divs = [int(i) for i in str(n)]\n    divs.sort()\n    div_sum = divs[0] + divs[-1]\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def divisor_sum(num):\n        '''\n        Calculate the sum of the divisors of a given number.\n        '''\n        div_list = []\n        i = 2\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                div_list.append(i)\n        if num > 1:\n            div_list.append(num)\n        return sum(div_list)\n\n    return divisor_sum(n) == divisor_sum(n+1)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for i in range(26):\n        if str1.lower().count(alphabet[i].lower()) > 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for char in str1:\n        if char in alphabet:\n            index = alphabet.find(char.lower())\n            if index == str1.lower().index(char.lower()):\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the position of each character in the alphabet\n    alphabet = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n    # create an empty dictionary to store the count of characters at each position\n    count = {}\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is in the alphabet\n        if char.lower() in alphabet:\n            # if it is, add 1 to the count for the position of the character in the alphabet\n            count[alphabet[char.lower()]] = count.get(alphabet[char.lower()], 0) + 1\n    # return the count of characters at each position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter (upper or lower case), add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Initialize a counter to store the total number of characters\n    total_chars = 0\n\n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # If the character is in the dictionary and its count matches the position of the letter in the English alphabet, add it to the total count\n        if chr(i) in char_count and char_count[chr(i)] == i - ord('a'):\n            total_chars += 1\n\n    # Return the total number of characters in the string that occur at the same position in the English alphabet as in the original string\n    return total_chars"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of characters\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is in the English alphabet\n        if char.isalpha():\n            # get its position in the English alphabet (0-25)\n            pos = ord(char) - ord('a')\n            \n            # if the position is already in the dictionary\n            if pos in char_count:\n                # increment the count\n                char_count[pos] += 1\n            # otherwise, add the character to the dictionary with a count of 1\n            else:\n                char_count[pos] = 1\n    \n    # count the number of characters that occur at the same position in the string as in the English alphabet\n    same_pos_count = 0\n    for count in char_count.values():\n        if count > 1:\n            same_pos_count += 1\n    \n    return same_pos_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the number of times each character occurs\n    char_count = {}\n\n    # convert the input string to lowercase for case-insensitivity\n    str1 = str1.lower()\n\n    # iterate over the characters in the input string\n    for char in str1:\n        # if the character is a letter, add it to the dictionary with a value of 1\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # return the number of times each character occurs at the same position in the string as in the English alphabet\n    return sum(char_count.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] + A[j]) % 2 == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # calculate the binary representation of n\n    binary_representation = bin(n)[2:]\n    # find the length of the binary representation\n    length = len(binary_representation)\n    # if n is already a power of 2, then it is already the next power of 2\n    if length == 1:\n        return n\n    # if n is not a power of 2, then it has a length of 1 more than the length of the binary representation\n    # add a 0 at the end of the binary representation to make it a power of 2\n    binary_representation += '0'\n    # calculate the length of the binary representation after adding the 0\n    new_length = len(binary_representation)\n    # find the binary representation of the next power of 2\n    binary_representation_next_power_of_2 = ''\n    for i in range(new_length-1, -1, -1):\n        if binary_representation[i] == '1':\n            binary_representation_next_power_of_2 += '0'\n        else:\n            binary_representation_next_power_of_2 += '1'\n    # convert the binary representation of the next power of 2 to an integer and return it\n    return int(binary_representation_next_power_of_2, 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the next power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to a binary string and count the number of set bits (0's) in it\n    count = bin(n).count('1')\n\n    # Calculate the smallest power of 2 greater than or equal to n\n    power = 1 << count\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return i * 2 ** i\n        return n * 2 ** n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the next power of 2 that is greater than or equal to n.\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the result.\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    # find the binary representation of n\n    binary_representation = bin(n)[2:]\n    \n    # find the least significant set bit (LSB)\n    lsb = binary_representation.index('1')\n    \n    # increment the LSB by one to get the next power of 2\n    new_binary_representation = binary_representation[:lsb] + '1' + binary_representation[lsb+1:]\n    \n    # convert the new binary representation back to an integer and return it\n    return int(new_binary_representation, 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the next power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    while n & (n-1)!= 0:\n        n = n & (n-1)\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1 # subtract 1 to round down to the nearest power of 2\n    n |= n >> 1 # shift right by 1 until the least significant bit is 0\n    n |= n >> 2 # shift right by 2 until the second least significant bit is 0\n    n |= n >> 4 # shift right by 4 until the third least significant bit is 0\n    n |= n >> 8 # shift right by 8 until the fourth least significant bit is 0\n    n |= n >> 16 # shift right by 16 until the fifth least significant bit is 0\n    return n + 1 # add 1 to get the next power of 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is negative\n    if n < 0:\n        n = abs(n)\n\n    # initialize power of 2 to 1\n    power = 1\n\n    # loop until power of 2 is greater than n\n    while power < n:\n        # increment power of 2 by 1\n        power *= 2\n\n    # return power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list 'a' and a number 'x' as input and returns the number of occurrences of 'x' in 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable\n    sum_range = 0\n\n    # Iterate through the list from the start index to the end index (inclusive)\n    for i in range(m, n+1):\n        # Check if the current number is within the specified range\n        if i >= 0 and i <= len(list1) - 1:\n            # Add the current number to the sum variable\n            sum_range += list1[i]\n\n    # Return the sum of numbers within the specified range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Using list slicing to get the range of numbers we want to sum\n    range_list = list1[m:n+1]\n    # Using a loop to calculate the sum of the numbers in the range\n    sum_value = 0\n    for num in range_list:\n        sum_value += num\n    # Returning the sum of the numbers in the range\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # check if the indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices\"\n\n    # initialize the sum variable\n    sum_of_range = 0\n\n    # iterate over the indices and add the numbers in the range to the sum variable\n    for i in range(m, n+1):\n        sum_of_range += list1[i]\n\n    return sum_of_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = 5 * a  # perimeter = 5 * side_length\n    return s"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n\na = float(input(\"Enter the length of side a of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = math.sqrt(3)*a\n    c = 5*math.sqrt(3)*a\n    return a + b + c"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = 5 * (a**2) / (4 * math.tan(math.pi / 5))\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * area\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Using the formula for the area of a regular pentagon, we can find the perimeter\n    # of the pentagon. The formula is:\n    # Perimeter = 5/2 * a^2\n    # where a is the length of the side of the pentagon.\n    perimeter = 5/2 * a**2\n\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i-2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurrences of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element\n    data_type = type(test_tuple[0])\n    # Check if all the elements in the tuple have same data type\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create a set to store unique data types in the tuple\n    data_types = set()\n\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # get the data type of the element\n        data_type = type(element).__name__\n\n        # add the data type to the set\n        data_types.add(data_type)\n\n    # check if all the data types in the set are the same\n    if len(data_types) == 1:\n        # if so, all data types are the same\n        return True\n    else:\n        # if not, all data types are different\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is not empty\n    if not test_tuple:\n        return False\n    \n    # Initialize a variable to store the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Iterate over the rest of the elements in the tuple\n    for item in test_tuple[1:]:\n        # If the current item has a different type than the first one, return False\n        if type(item)!= first_type:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the length of the tuple is 1 or more\n    if len(test_tuple) == 0:\n        return True\n    # Check if all the elements in the tuple have same data type\n    elif len(test_tuple) > 1:\n        if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n            return True\n        else:\n            return False\n    # If the length of the tuple is 1, it will be checked in the next line of code\n    else:\n        return isinstance(test_tuple[0], type(test_tuple[0]))"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    \n    data_type = type(test_tuple[0])\n    \n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns whether the given element x is a majority element in the sorted array arr of length n.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    # loop through each bit of the binary representation of n\n    for bit in bin(n)[2:]:\n        # check if the bit is 1\n        if bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_indices.append(i)\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters with odd index values.\n    \n    Args:\n    str (str): A string to be processed\n    \n    Returns:\n    str: A new string with the characters with odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character of the input string\n    for char in str:\n        # if the index of the character is odd, add it to the result string\n        if ord(char) % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with characters at odd index positions removed.\n\n    Args:\n        str (str): A string to be processed.\n\n    Returns:\n        str: A new string with characters at odd index positions removed.\n    \"\"\"\n    return \"\".join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \"\"\"\n    # Check if all three numbers are different\n    if a == b == c:\n        return a\n    \n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Return the smallest number\n    return sorted_numbers[0]"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 2**n - 1\n    result = ((mask ^ (l - 1)) & (mask ^ (r - 1))) == 0\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if (n & (1 << i)) > 0:\n            count += 1\n\n    # Check if the count is equal to the total number of bits in the range\n    if count == (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range into a binary string\n    binary_str = bin(l)[2:].zfill(n) + bin(r)[2:].zfill(n)\n\n    # Compare the binary string with the binary representation of all possible values of n bits\n    for i in range(2**n):\n        if binary_str == bin(i)[2:].zfill(n):\n            return False\n\n    # If all the bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if (n & 1) == 1:\n                return False\n            n = n >> 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range to binary representation\n    binary_range = bin(r-l+1)\n    binary_range = binary_range.lstrip('0b')\n    binary_range = list(binary_range)\n    \n    # Check for unset bits in the given range\n    unset_bits = set(binary_range).difference(set(bin(n)[2:]))\n    if len(unset_bits) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable 'unset_bits' to store the number of unset bits in the range\n    unset_bits = 0\n\n    # Iterate over the bits in the given range\n    for i in range(l, r+1):\n        # Check if the bit is set or not\n        if n & (1 << i):\n            # If it's set, increment the 'unset_bits' counter\n            unset_bits += 1\n\n    # Check if all the bits are unset or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Loop through each bit in the range (inclusive)\n    for i in range(l, r + 1):\n        # Check if the bit is set or unset (0 or 1)\n        if (n & (1 << i))!= 0:\n            # If the bit is set, return False\n            return False\n\n    # If no bits are set in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize variables\n    set_bits = 0\n\n    # Iterate through the range of bits\n    for i in range(l, r+1):\n        # Check if the current bit is set in the given number\n        if n & (1 << i):\n            # If the bit is set, increment the set_bits variable\n            set_bits += 1\n\n    # Check if the total number of set bits is equal to the number of bits in the range\n    if set_bits == r - l + 1:\n        # If all the bits are set, return True\n        return True\n    else:\n        # If any of the bits are unset, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        if n & (1 << l):\n            return False\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize the mask with all 1's\n    mask = 0xFFFFFFFF\n    # loop through the range of bits\n    for i in range(l, r+1):\n        # check if the current bit is set or not\n        if (n & (1 << i)) == 0:\n            # if the current bit is not set, clear the corresponding bit in the mask\n            mask &= ~(1 << i)\n    # if all bits are set in the range, return True, otherwise return False\n    if mask == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the positive elements and their indices\n    pos_dict = {}\n    for i, num in enumerate(arr):\n        if num > 0:\n            pos_dict[num] = i\n    \n    # create a list to store the negative elements\n    neg_list = []\n    \n    # iterate through the remaining elements\n    for i, num in enumerate(arr):\n        if i < n:\n            # if the element is negative, add it to the negative list\n            if num < 0:\n                neg_list.append(num)\n            # if the element is positive, move it to its correct index in the positive list\n            else:\n                pos_dict[num] = i\n    \n    # rearrange the positive list by swapping its elements with their indices in the negative list\n    pos_list = []\n    for i in range(n):\n        pos_list.append(neg_list[pos_dict[i]])\n    \n    # combine the positive and negative lists and return the final result\n    return pos_list + neg_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # create an empty list to store negative elements\n    neg_list = []\n\n    # iterate over the first n elements of the array and append them to the neg_list if they are negative\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are positive\n    for i in range(n):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n\n    # iterate over the remaining elements of the array and append them to the end of the neg_list if they are negative\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # iterate over the first n elements of the array and append them to the end of the neg_list if they are negative"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # create a dictionary to store the count of negative and positive elements\n    count = {'-': 0, '+': 0}\n\n    # iterate through the array and update the count of negative and positive elements\n    for num in arr:\n        if num < 0:\n            count['-'] += 1\n        else:\n            count['+'] += 1\n\n    # create a list to store the positive elements in the correct order\n    positive = []\n\n    # iterate through the array again and add the positive elements to the correct list\n    for num in arr:\n        if num >= 0:\n            positive.append(num)\n\n    # concatenate the two lists and return the result\n    return positive + [''] * (n - len(positive))"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers: one for the current positive element and one for the current negative element\n    pos = 0\n    neg = n - 1\n    \n    # Iterate through the array and swap the current elements with their corresponding pointers\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[pos], arr[i] = arr[i], arr[pos]\n            pos += 1\n        else:\n            arr[neg], arr[i] = arr[i], arr[neg]\n            neg -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n as input and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. The function returns the re-arranged array.\n    '''\n    # create two lists to store the negative and positive elements\n    negative = []\n    positive = []\n    \n    # iterate over the array and add elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    # iterate over the negative list and add elements to the beginning of the positive list\n    for num in negative:\n        if len(positive) == 0:\n            positive.append(num)\n        elif positive[-1] < num:\n            positive.append(num)\n        else:\n            i = len(positive) - 1\n            while i >= 0 and positive[i] >= num:\n                i -= 1\n            positive.insert(i + 1, num)\n    \n    # iterate over the positive list and add elements to the end of the new array\n    for num in positive:\n        if len(arr) - n <= len(positive):\n            arr.append(num)\n        else:\n            i = len(arr) - 1\n            while i >= len(arr) - n and arr[i] >= num:\n                i -= 1\n            arr.insert(i + 1, num)\n    \n    # return the new array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n            \n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            positives.append(arr[i])\n        else:\n            negatives.append(arr[i])\n            \n    result = negatives + positives\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables for negative and positive elements\n    neg = []\n    pos = []\n    \n    # iterate over the array and count negative and positive elements\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n            \n    # iterate over the negative elements and place them in the correct position\n    for i in range(len(neg)):\n        j = i + n\n        while j < len(arr):\n            if pos[0] >= neg[i]:\n                arr[j] = neg[i]\n                break\n            j += 1\n            \n    # iterate over the positive elements and place them in the correct position\n    for i in range(len(pos)):\n        j = i + n\n        while j < len(arr):\n            if pos[i] >= neg[0]:\n                arr[j] = neg[0]\n                break\n            j += 1\n            \n    # sort the remaining elements in ascending order\n    arr.sort()\n    \n    # return the sorted array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a dictionary to store the position of negative and positive elements in the array\n    neg_pos_dict = {}\n    for i in range(n):\n        if arr[i] < 0:\n            neg_pos_dict[-i-1] = i\n        else:\n            neg_pos_dict[i] = -i-1\n    \n    # Sort the dictionary by values (negative and positive indices)\n    neg_pos_dict = dict(sorted(neg_pos_dict.items()))\n    \n    # Update the array using the sorted dictionary\n    for i in range(n):\n        if i < n//2:\n            arr[i] = neg_pos_dict[i]\n        else:\n            arr[i] = neg_pos_dict[n-i-1]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # loop over the first n elements\n    for i in range(n):\n        # if the element is negative, swap it with the last positive element\n        if arr[i] < 0:\n            j = n\n            while j > 0 and arr[j-1] >= 0:\n                j -= 1\n            arr[i], arr[j-1] = arr[j-1], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # create a temporary array to store the negative elements\n    negative_arr = []\n    \n    # loop through the array and add negative elements to the temporary array\n    for i in range(n):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n    \n    # loop through the temporary array and add positive elements to the original array\n    for i in range(n):\n        if i < len(negative_arr):\n            if negative_arr[i] < 0:\n                continue\n        arr[i] = negative_arr.pop(0)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all occurrences of blank spaces with the specified character\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return ''.join([char if ch =='' else ch for ch in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Function to replace blank spaces with a character\n    def replace_space(string):\n        return string.replace(' ', char)\n    \n    # Apply the replace_space function to the string and return the result\n    return replace_space(str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\",1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        elif str1[i] == \" \":\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If a blank word is found, replace it with the specified character\n        if not words[i]:\n            words[i] = char\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list into a min heap\n    heap = list1.copy()\n    heapq.heapify(heap)\n    \n    # Extract the n largest items from the heap\n    for _ in range(n):\n        heapq.heappop(heap)\n    \n    # Convert the heap back into a list and return it\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a set to remove duplicates\n    list1 = list(set(list1))\n    # create a min heap of size n and fill it with the smallest n elements of the original list\n    heapq.heapify(list1[:n])\n    # extract the n largest elements and add them to a new list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(list1))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # remove the smallest element from the heap and append it to the result list\n    for i in range(n, len(list1)):\n        if len(heap) < n:\n            heapq.heappush(heap, list1[i])\n        else:\n            if list1[i] > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # create a max heap and add all elements of the list to it\n    max_heap = []\n    heapq.heapify(max_heap, list1)\n    \n    # extract the n largest elements from the heap\n    larg_list = []\n    for i in range(n):\n        larg_list.append(heapq.heappop(max_heap))\n        \n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    # Print the lateral surface area\n    print(\"The lateral surface area of a cylinder with radius\", r, \"and height\", h, \"is\", lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h # formula for lateral surface area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n\n    Args:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n\n    Returns:\n    float: the lateral surface area of the cylinder.\n    '''\n\n    # Calculating the lateral surface area of the cylinder using the formula:\n    # lateral surface area = 2 * pi * r * h\n\n    lateral_surface_area = 2 * 3.14159265 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14*r**2 + 2*3.14*h + 2*3.14*r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2*pi*(r**2 + h**2)\n    return lateral_surface"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n.bit_length()):\n        if (n >> i) & 1 == 0:\n            n ^= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1) & 0x5555555555555555555555555555555"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n    # Loop through each bit of the number\n    for i in range(32):\n        # If the current bit is even\n        if n & (1 << i):\n            # Add it to the list of even bits\n            even_bits.append(i)\n    # Set the even bits of the number to 1\n    for bit in even_bits:\n        n |= (1 << bit)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result of the function\n    result = 0\n    \n    # loop through each bit in the input number\n    for i in range(32): \n        # check if the current bit is even\n        if n & (1 << i): \n            # set the corresponding bit in the result to 1\n            result |= (1 << i)\n            \n    # return the result of the function\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            even_bits |= 1 << int(bit)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with even bits set\n    even_bit_set = n\n    # Loop through each bit of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & 1 == 0:\n            # If it is, set the corresponding bit in the even_bit_set variable to 1\n            even_bit_set |= 1 << i\n    # Return the even_bit_set variable\n    return even_bit_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 15 # 15 is the binary equivalent of '1111'\n    n = n | even_bits # set all even bits in the original number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the bits\n    bits = []\n    # loop through each bit in the given number\n    for i in range(32):\n        # check if the current bit is even\n        if (n & (1 << i))!= 0:\n            # if it is, add it to the list of bits\n            bits.append(i)\n    # loop through the list of bits and set each one to 1\n    for i in bits:\n        n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through each bit of the number and set the corresponding bit of the new number to 1 if it is even\n    new_number = 0\n    for i in range(32):\n        if n & (1 << i):\n            new_number |= 1 << i\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bit_mask = 0b1010101010101010101010101010101010101010101010101010101010101010\n    \"\"\"\n    The above mask represents the binary equivalent of the even bits.\n    \"\"\"\n    return n | even_bit_mask"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # if not, add the tuple and count of 1 to the dictionary\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter function from the collections module to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n\n    # Returning the dictionary with the count of each unique tuple\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    counter = Counter(unique_tuples)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    counts = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if tup not in counts:\n            counts[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[tup] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n\n        # Check if the tuple is already in the dictionary\n        if tup not in count_dict:\n\n            # If the tuple is not in the dictionary, add it and set its count to 1\n            count_dict[tup] = 1\n\n        # If the tuple is already in the dictionary, increment its count\n        else:\n            count_dict[tup] += 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple in the list\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # if the tuple is already in the dictionary, increment the count by 1\n        else:\n            count_dict[tup] += 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize a dictionary to store the count of occurrences of each tuple\n    count_dict = Counter()\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Count the number of occurrences of the tuple in the list\n        count_dict[tup] += 1\n    \n    # Return the dictionary of counts\n    return count_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    # initialize variables\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j] and str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1].strip()!= '': \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    # Initialize variables\n    count = 0\n    i = 0\n    \n    # Iterate through each character in the string\n    while i < len(str):\n        # Check if the current character is a letter\n        if str[i].isalpha():\n            # Initialize variables for the current substring\n            start = i\n            end = i\n            \n            # Iterate through the remaining characters in the string\n            while end < len(str) and str[end].isalpha():\n                end += 1\n            \n            # Add the current substring to the count\n            count += end - start\n            \n            # Move the start index to the next character\n            i = end\n        else:\n            # Move the start index to the next character\n            i += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1, n+1):\n        if i % 2 == 0:\n            if i <= 2*m:\n                count += 1\n            elif i > 2*m and i <= m:\n                count += (m-i//2)//2\n            elif i > m:\n                count += (i-m)//2\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables for counting the total number of sequences\n    total = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(n):\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i == 0 or sequence[i-1] <= 2*m:\n            # If the current element is greater than or equal to twice the previous element, increment the total count\n            if i == 0 or sequence[i-1] >= 2*sequence[i-1]:\n                total += 1\n\n    # Return the total number of sequences\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the total number of sequences as 0\n    total_sequences = 0\n\n    # Initialize two variables for storing the previous element and the current element\n    prev_element = 0\n    current_element = 1\n\n    # Loop until we have found n sequences\n    while current_element <= n:\n\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if current_element >= 2 * prev_element and current_element <= m:\n\n            # Increment the total number of sequences\n            total_sequences += 1\n\n        # Update the previous element and current element\n        prev_element = current_element\n        current_element += 1\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Initialize the previous element to 0\n    prev_elem = 0\n    \n    # Loop from 0 to m\n    for i in range(m):\n        \n        # Check if the current element is greater than or equal to twice the previous element\n        if i >= 2*prev_elem and i < m:\n            \n            # Add 1 to the count\n            count += 1\n            \n        # Update the previous element\n        prev_elem = i\n        \n    # Return the count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: If n is 0, return 0\n    if n == 0:\n        return 0\n\n    # Initialize variables to store the count and the current sequence\n    count = 0\n    sequence = []\n\n    # Initialize the current element to be the minimum integer value greater than 2 times the previous element\n    current_element = min(x for x in range(1, m//2+1) if 2*x-2 <= m)\n\n    # Iterate until the sequence length is equal to n\n    while len(sequence) < n:\n        # Add the current element to the sequence\n        sequence.append(current_element)\n\n        # Calculate the next element in the sequence based on the current element\n        current_element = max(x for x in range(current_element, m//2+1) if 2*x <= m)\n\n        # Increment the count\n        count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize a dictionary to store the results\n    sequence_count = {}\n    \n    # Initialize the first element\n    sequence_count[1] = 1\n    \n    # Loop through all the elements in the range from 2 to m\n    for i in range(2,m+1):\n        \n        # Loop through all the elements in the range from 1 to i-1\n        for j in range(1,i):\n            \n            # Check if the current element is greater than or equal to twice the previous element\n            if i >= j*2:\n                \n                # Check if the current element is less than or equal to m\n                if i <= m:\n                    \n                    # If the current element is valid, add it to the sequence count dictionary\n                    sequence_count[i] = sequence_count.get(i,0) + sequence_count.get(j,0)\n    \n    # Return the total number of sequences\n    return sum(sequence_count.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(m,m+n):\n        if i % 2 == 0 and i % 4 == 0 and i > 2 * n:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m+1):\n        if i >= 2*n and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    def helper(m, n, index):\n        \"\"\"\n        This is a helper function that takes in three arguments: the current value of m, the current value of n, and the current index of the array. \n        It checks if the current value of n is greater than 0, and if so, checks if the current value of the array at the current index is greater than or equal to twice the previous element but less than or equal to m. If both conditions are met, it increments the count of sequences and recursively calls itself with the next value of n and the next index of the array.\n        \"\"\"\n        if n > 0:\n            if arr[index] >= arr[index - 1] * 2 and arr[index] <= m:\n                count += 1\n                helper(m, n - 1, index + 1)\n        return count\n\n    arr = list(range(1, m + 1))\n    count = 0\n    helper(m, n, 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(m+1, 2*i):\n            if j % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Iterate through the first list and append the elements of the second list to it.\n    for i in range(len(list1) - 1):\n        list1.append(list2[0])\n        list2.pop(0)\n    # Append the last element of the second list to the first list.\n    list1.append(list2[0])\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        list1.append(list2.pop())\n    else:\n        list1.append(list1.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        list1[i] = list1[i] + list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 += list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[:]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Check if the length of the second list is greater than the length of the first list\n    if len(list2) > length:\n        # If the length of the second list is greater than the length of the first list,\n        # raise an exception\n        raise ValueError(\"The second list should be shorter or equal to the length of the first list.\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # Return the modified first list\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Convert N to float and check if it is negative\n    if N < 0:\n        N = -N\n\n    # Find the first perfect square greater than N\n    if N % 4 == 0:\n        # N is a multiple of 16\n        sqrt_N = int(math.sqrt(N / 2) + 1)\n        while not (sqrt_N * sqrt_N == N + sqrt_N - 1):\n            sqrt_N += 1\n    elif N % 2 == 0:\n        # N is even\n        sqrt_N = int(math.sqrt(N / 2) + 1)\n        while not (sqrt_N * sqrt_N == N + sqrt_N - 1):\n            sqrt_N -= 1\n    else:\n        # N is odd\n        sqrt_N = int(math.sqrt(N / 2) + 1)\n        while not (sqrt_N * sqrt_N == N + sqrt_N - 1):\n            sqrt_N -= 1\n\n    # Find the next perfect square greater than sqrt_N\n    next_sqrt_N = sqrt_N + 1\n    while next_sqrt_N % 4!= 1:\n        next_sqrt_N += 1\n\n    # Return the next perfect square greater than N\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        sqrt_N += 1\n        if sqrt_N**2 > N:\n            return sqrt_N\n        else:\n            sqrt_N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Calculate the integer part of the square root and multiply it with 2\n    int_part = int(sqrt_N) * 2\n    # Add 1 to the integer part and square it\n    new_N = int_part + 1 + int_part * int_part\n    # If the new_N is greater than N, subtract 1 from the integer part\n    while new_N > N:\n        int_part -= 1\n        new_N = int_part + 1 + int_part * int_part\n    return new_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    int_sqrt_N = int(sqrt_N)\n    next_square = int_sqrt_N**2 + 1\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize the current and next perfect squares\n    curr_square = N\n    next_square = 0\n\n    # loop until the next perfect square is greater than the current perfect square\n    while curr_square > next_square:\n        next_square = curr_square + math.sqrt(curr_square)\n        curr_square = next_square\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # check if N is a positive integer\n    if not (isinstance(N, int) and N > 0):\n        return \"Error: N must be a positive integer\"\n\n    # find the first perfect square that is greater than N\n    sq = math.sqrt(N)\n    while math.isqrt(sq * sq)!= sq:\n        sq += 1\n\n    # find the next perfect square that is greater than sq\n    n = math.ceil(sq * sq)\n    return n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        n = num\n        while not is_prime(n):\n            n += 1\n        return n\n\n    def next_square(num):\n        n = num\n        while n*n <= N:\n            n += 1\n        return n\n\n    square = next_square(N)\n    while next_prime(square)!= N:\n        square = next_square(square)\n\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        x = int(math.sqrt(N))\n        y = (x+1)**2\n        if y > N:\n            return y\n        else:\n            N = y\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # check if N is already a perfect square\n    if sqrt_N == int(sqrt_N):\n        # N is a perfect square, so find the next greater perfect square\n        next_sqrt_N = sqrt_N + 1\n    else:\n        # N is not a perfect square, so find the next smallest perfect square greater than sqrt(N)\n        next_sqrt_N = int(sqrt_N) + 1\n\n    # calculate the next perfect square and return it\n    return int(next_sqrt_N*next_sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    N += 1  # This is to make sure that the input is greater than the current number\n    sqrt_N = math.sqrt(N)\n    power = int(math.log2(sqrt_N))\n    sqrt_N = int(sqrt_N ** power)\n    if sqrt_N ** power == N:\n        sqrt_N += 1  # This is to make sure that the next perfect square is also greater than the current number\n    return sqrt_N\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n * 2)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n * 2):\n        if i % 2 == 0:\n            dp[i] = max(dp[i - 1], dp[i - 2] + arr[i // 2])\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] - arr[i // 2])\n    \n    return dp[-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    # Check if the array is empty\n    if not arr:\n        return 0\n\n    # Initialize the max sum and two indices for the current subsequence\n    max_sum = arr[0]\n    i, j = 0, 1\n\n    # Traverse the array and update the indices and max sum for each subsequence\n    while j < len(arr):\n        if arr[i] < arr[j]:\n            # If the current subsequence is increasing, update the max sum if necessary\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n\n            # Move the left index to the right\n            i += 1\n        else:\n            # If the current subsequence is decreasing, update the max sum if necessary\n            if arr[j] + arr[i] > max_sum:\n                max_sum = arr[j] + arr[i]\n\n            # Move the right index to the left\n            j += 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    # Initialize variables for the max_sum and max_ending_here\n    max_sum = float('-inf')\n    max_ending_here = float('-inf')\n\n    # Iterate through the array and calculate the max_ending_here\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max(arr[i] for i in range(n))\n\n    # Find the maximum sum of a increasing subsequence\n    max_sum_increasing = max(arr[i] for i in range(1, n))\n\n    # Return the maximum of the two sums\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i - 1]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the maximum sum to be the first element of the array\n    max_so_far = arr[0]\n    # Initialize the second element of the array\n    second_max = float('-inf')\n    # Initialize the current sum to be the first element of the array\n    current_sum = arr[0]\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is greater than the second element\n        if arr[i] > second_max:\n            # Update the second maximum element\n            second_max = current_sum\n            # Update the current sum to be the current element\n            current_sum = arr[i]\n        # If the current element is less than the second element\n        elif arr[i] < second_max:\n            # Update the current sum to be the sum of the current element and the second element\n            current_sum += arr[i]\n        # If the current element is equal to the second element\n        else:\n            # Update the current sum to be the sum of the current element and the second element\n            current_sum += arr[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n    # Return the maximum sum\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Check if the array is bitonic\n    if arr[0] < arr[1] and arr[n-1] > arr[n-2]:\n        # If it is bitonic, find the maximum sum subsequence\n        return max_subseq(arr, 0, n-1)\n    else:\n        # If the array is not bitonic, return 0\n        return 0\n\ndef max_subseq(arr, start, end):\n    '''\n    Recursive function to find the maximum sum subsequence in a bitonic array.\n    '''\n    if start == end:\n        return arr[start]\n    elif start == end-1:\n        if arr[start] < arr[end]:\n            return max(arr[start], arr[end])\n        else:\n            return max(arr[start], arr[end])\n    else:\n        if arr[start] < arr[end]:\n            return max(arr[start], max_subseq(arr, start+1, end))\n        else:\n            return max(arr[end], max_subseq(arr, start, end-1))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Find the first increasing subsequence\n    i, j = 0, 1\n    while j < len(arr):\n        while j < len(arr) and arr[j] >= arr[j-1]:\n            j += 1\n        if j == len(arr):\n            break\n        arr[i:j] = sorted(arr[i:j])\n        i = j\n\n    # Find the first decreasing subsequence\n    i, j = 0, 1\n    while j < len(arr):\n        while j < len(arr) and arr[j] <= arr[j-1]:\n            j += 1\n        if j == len(arr):\n            break\n        arr[i:j] = sorted(arr[i:j], reverse=True)\n        i = j\n\n    # Find the maximum subsequence sum\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, sum(arr[i:j+1]))\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_max = float('-inf')\n    current_sum = 0\n\n    # iterate through the array\n    for i in range(n):\n        # check if the current element is increasing\n        if arr[i] < arr[i+1]:\n            current_sum += arr[i]\n        else:\n            # check if the current element is decreasing\n            if current_sum > prev_max:\n                # update the max sum if the current sum is greater than the previous max sum\n                max_sum = max(max_sum, current_sum)\n            # reset the current sum to the current element\n            current_sum = arr[i]\n        # update the previous max sum\n        prev_max = max(prev_max, current_sum)\n\n    # check if the last element is increasing or decreasing\n    if current_sum > prev_max:\n        # update the max sum if the current sum is greater than the previous max sum\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Initialize variables\n    left_sum = 0\n    right_sum = 0\n    max_sum = float('-inf')\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            left_sum += arr[i]\n        else:\n            right_sum += arr[i]\n\n        # Update maximum sum if current sum is greater\n        if left_sum > right_sum:\n            max_sum = max(max_sum, left_sum)\n        else:\n            max_sum = max(max_sum, right_sum)\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize two variables to hold the last two convergents of the babylonian method\n    last = 0\n    curr = number // 2\n    # Iterate until the difference between the last two convergents is less than or equal to 1e-10\n    while abs(last - curr) > 1e-10:\n        # Calculate the next convergent using the formula:\n        # curr = (curr + number / curr) / 2\n        curr = (curr + (number / curr)) / 2\n        # Update the last convergent for the next iteration\n        last = curr\n    # Return the last convergent as the square root of the original number\n    return curr"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0\n    x1 = x0 * number / (x0 + number)\n    n = 1\n    while abs(x1 - x0) > 1e-6:\n        x0 = x1\n        x1 = x0 * number / (x0 + number)\n        n += 1\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    low = 0\n    high = number\n    while abs(high - low) > 1e-6:\n        mid = (low + high) / 2\n        guess = mid * mid\n        if guess == number:\n            return mid\n        elif guess < number:\n            low = mid\n        else:\n            high = mid\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize variables for square root and iteration count\n    x = number / 2\n    y = number\n    iteration = 0\n\n    # iterate until x is within an error of y\n    while abs(x - y) > 0.0001:\n        iteration += 1\n        x = (x + y) / 2\n        y = number / x\n\n    # return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the number is negative\n    if number < 0:\n        return \"Sorry, Babylonian method does not work for negative numbers.\"\n\n    # Compute the square root using babylonian method\n    x0 = number / 2\n    x1 = x0\n    n = 0\n    while abs(x1 - x0) > 0.00001:\n        x2 = (x1 + number / x1) / 2\n        n += 1\n        x0 = x1\n        x1 = x2\n\n    # Check if the answer is accurate enough\n    if abs(x1) < 0.0001:\n        return round(x1, 6)\n    else:\n        return \"The answer is not accurate enough.\""
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # check if the number is negative\n    if number < 0:\n        raise ValueError(\"The number must be non-negative.\")\n\n    # check if the number is an integer\n    if number.is_integer():\n        raise ValueError(\"The number must be a floating-point number.\")\n\n    # initial approximation\n    guess = number\n\n    # maximum number of iterations\n    max_iterations = 100\n\n    # iteration counter\n    iterations = 0\n\n    # tolerance\n    tolerance = 1e-10\n\n    # while loop to converge to a good approximation\n    while True:\n\n        # estimate the next guess\n        next_guess = (guess + number / guess) / 2\n\n        # check if the difference between the current and next guess is within the tolerance\n        if abs(next_guess - guess) <= tolerance:\n            break\n\n        # update the guess\n        guess = next_guess\n\n        # check the maximum number of iterations\n        if iterations == max_iterations:\n            raise ValueError(\"Maximum number of iterations reached.\")\n\n        # increment the iteration counter\n        iterations += 1\n\n    # return the estimated square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the babylonian method.\n    \n    Parameters:\n    number (float): The number for which to compute the square root.\n    \n    Returns:\n    float: The square root of the input number.\n    \"\"\"\n\n    # Set the maximum number of iterations and the tolerance\n    max_iterations = 50\n    tolerance = 1e-10\n\n    # Set the starting guess\n    guess = number / 2.0\n\n    # Initialize the number of iterations and the number of iterations with convergence\n    iterations = 0\n    has_converged = False\n\n    # Perform the babylonian method\n    while iterations < max_iterations and not has_converged:\n        iterations += 1\n\n        # Compute the next iteration\n        next_guess = (guess + number / guess) / 2.0\n\n        # Check if the difference between the previous and next guess is within the tolerance\n        if abs(next_guess - guess) < tolerance:\n            has_converged = True\n        else:\n            guess = next_guess\n\n    # If the number of iterations exceeded the maximum, return the last guess\n    if iterations == max_iterations:\n        return guess\n    else:\n        return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n\n    current_guess = number / 2\n    i = 0\n    while True:\n        square = current_guess ** 2\n        if square == number:\n            return current_guess\n        elif square < number:\n            if current_guess == 0:\n                return None\n            current_guess -= 1\n        elif square > number:\n            current_guess += 1\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n\n    The babylonian method is a method for computing square roots by iteratively\n    approximating the square root by an average of the previous two\n    approximations.\n    '''\n\n    # Initialize two variables to keep track of the last two approximations\n    last_guess = 0\n    current_guess = number / 2\n\n    # Iterate until the difference between the last two approximations is less than a small tolerance\n    while abs(current_guess**2 - number) > 0.0001:\n        # Update the last two approximations\n        last_guess = current_guess\n        current_guess = (current_guess + number / current_guess) / 2\n\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Use the babylonian method to compute the square root\n    i = 1\n    while True:\n        x = number / i\n        delta = x - ((x ** 2) / (2 * i))\n        if abs(delta) < 0.00001:\n            return i\n        i += 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D table to store lengths of LPS for substrings of length i\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # fill the table in bottom-up manner\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    # return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n\nstring = \"babad\"\nprint(lps(string))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store lengths of palindrome subsequences\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Base case: all subsequences are palindromes\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the table in a bottom-up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    # Return the length of the longest palindrome subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D array of size (n+1) x (n+1) to store the results of dynamic programming\n    dp = [[0] * (n+1) for i in range(n+1)]\n\n    # Base cases\n    for i in range(n+1):\n        dp[i][i] = 1\n\n    # Find the length of the longest palindromic subsequence in the given string\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            # If the characters at i and j are same, then it's a palindromic subsequence\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n            # If the characters at i and j are not same, then it's a longest palindromic subsequence\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    # create a 2D table to store lengths of longest palindromic subsequences ending at each position\n    lps_table = [[0]*len(str) for i in range(len(str))]\n\n    # initialize the length of longest palindromic subsequence ending at the first position\n    lps_table[0][0] = 1\n\n    # iterate through the string and calculate lengths of longest palindromic subsequences ending at each position\n    for i in range(1, len(str)):\n        for j in range(len(str)):\n            # if characters match, add 2 to the length of longest palindromic subsequence ending at j\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i-1][j-1] + 2\n            # if characters don't match, take the maximum of the length of longest palindromic subsequence ending at i-1 and j\n            else:\n                lps_table[i][j] = max(lps_table[i-1][j], lps_table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last position\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    lps_array = [1] * n\n    max_len = 1\n    max_start = 0\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps_array[i] = lps_array[i-1] + 1\n            if lps_array[i] > max_len:\n                max_len = lps_array[i]\n                max_start = i-max_len+1\n        else:\n            lps_array[i] = 1\n            if lps_array[i] > max_len:\n                max_len = lps_array[i]\n                max_start = i\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store information about length of subsequence ending at each index \n    table = [[0]*n for i in range(n)] \n  \n    # Store the length of the longest palindromic subsequence ending at index i \n    for i in range(n): \n        table[i][i] = 1\n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                table[i][j] = 2 + table[i+1][j-1] \n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]) \n  \n    # Return the length of the longest palindromic subsequence ending at index n-1 \n    return table[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D array to store the lengths of palindromic subsequences for each substring\n    lengths = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # Initialize the base case, when the string is empty or has only one character, it is a palindrome\n    lengths[0][0] = 0\n    lengths[1][1] = 0\n\n    # Initialize the lengths for substrings of length 2 or more\n    for i in range(2, len(str)+1):\n        if str[i-1] == str[i-2]:\n            lengths[i][i] = lengths[i-1][i-2] + 2\n        else:\n            lengths[i][i] = max(lengths[i-1][i], lengths[i][i-1])\n\n    # Return the length of the longest palindromic subsequence\n    return lengths[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    n = len(string)\n    dp = [[0] * n for i in range(n)]\n\n    # base cases\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill dp table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n    \n    # Create a 2D table to store the length of longest palindromic subsequence ending at i, j\n    table = [[0] * (n+1) for i in range(n+1)]\n    \n    # Initialize the first row and column\n    for i in range(n+1):\n        table[i][0] = i\n        table[0][i] = 0\n    \n    # Fill the table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n                \n    # Return the length of the longest palindromic subsequence ending at (n, n)\n    return table[n][n]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2 * (n-1) + harmonic_sum(n-1)) / n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 + (1/n)) * harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # initialize a variable to keep track of the sum of harmonic numbers\n    harmonic_sum = 0\n    \n    # loop through each number from 1 to n-1\n    for i in range(1, n):\n        # add the ratio of i to n to the harmonic sum\n        harmonic_sum += 1/i\n    \n    # return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - (n * (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1)/2)**0.5\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the unique values of array_nums2\n    intersection_set = set()\n    # Iterate through each value in array_nums1\n    for num in array_nums1:\n        # If the value is in array_nums2 and not already in the intersection set, add it to the set\n        if num in array_nums2 and num not in intersection_set:\n            intersection_set.add(num)\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = list(set(array_nums1) & set(array_nums2))\n\n    # Sort the intersection array\n    intersection.sort()\n\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the elements that are present in both arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a set to store the unique elements of array_nums1\n    set1 = set(array_nums1)\n\n    # Create an empty list to store the intersection elements\n    intersection_list = []\n\n    # Iterate through array_nums2 and append the elements that are present in set1 to the intersection_list\n    for num in array_nums2:\n        if num in set1:\n            intersection_list.append(num)\n\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the intersection\n    intersection_dict = {}\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # If the element is in the second array and not already in the intersection dictionary, add it to the intersection dictionary\n        if num in array_nums2 and num not in intersection_dict.values():\n            intersection_dict[num] = True\n    # Return the intersection dictionary as a list of elements\n    return list(intersection_dict.keys())"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in array1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a set to store the elements in array2 that appear in freq_dict\n    intersection = set(num for num in array_nums2 if num in freq_dict and freq_dict[num] > 0)\n    \n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of elements from both arrays\n    set_of_both = set(array_nums1) & set(array_nums2)\n    \n    # Create a list of the intersection elements\n    intersection_list = list(set_of_both)\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays and returns their intersection.\n    \"\"\"\n\n    # create two dictionaries to store the frequency of each element in each array\n    freq1 = {}\n    freq2 = {}\n\n    # loop through the first array and update the frequency dictionary\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # loop through the second array and update the frequency dictionary\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # create an empty intersection list\n    intersection = []\n\n    # loop through the frequency dictionaries and add common elements to the intersection list\n    for key, value in freq1.items():\n        if key in freq2 and freq1[key] > 0 and freq2[key] > 0 and value == freq2[key]:\n            intersection.append(key)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Given two arrays of integers, return a new array containing only the elements that are present in both arrays.\n\n    :param array_nums1: The first array of integers\n    :param array_nums2: The second array of integers\n    :return: A new array containing only the elements that are present in both arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup: \n        if element == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create an empty list to store the resulting list\n    result = []\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize an empty list to store the modified list\n    modified_list = []\n    # Loop through each element in the original list\n    for num in list:\n        # Add the element to the modified list before the current element\n        modified_list.append(element)\n        modified_list.append(num)\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        complex_number = complex(number[0], number[1])\n        polar_coordinates = cmath.polar(complex_number)\n        result.append(polar_coordinates)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(magnitude, phase)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            angle = cmath.phase(num)\n            magnitude = abs(num)\n            print(f\"({angle:.2f}\u00b0, {magnitude:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"({real}, {imag}) : ({magnitude}, {angle})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number\n        polar = cmath.polar(complex(real, imag))\n        print(f\"The complex number {number} in polar form is ({polar[0]} + {polar[1]}i)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        print(f\"({num.real}, {num.imag})  ||  r = {r}  ||  theta = {theta}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            result.append(cmath.polar(num))\n        else:\n            result.append('Please enter only complex numbers.')\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(f'({real}, {imag})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        result.append([magnitude, phase])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number.real, number.imag\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(number)\n        print(f\"({magnitude:.2f}, {angle:.2f})\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i+1:], n-1):\n            result.append((l[i],) + tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    isPrime = [True] * (n + 1)\n\n    for i in range(2, n + 1):\n        if isPrime[i]:\n            primes.append(i)\n            for j in range(i * i, n + 1, i):\n                isPrime[j] = False\n\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean array \"prime[0..n]\" and\n    # initialize count to 0\n    prime = [True for i in range(n+1)]\n    prime[0], prime[1] = False, False\n    count = 0\n\n    # Iterate through all numbers from 2 to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        # If prime[i] is not changed, then it is a prime\n        if prime[i]:\n            # Update all multiples of i\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n    \n    # Iterate through all numbers from 2 to n\n    for i in range(2, n+1):\n        # If prime[i] is changed, then it is a prime\n        if prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function counts the number of prime numbers less than the given non-negative number `n`.\n    '''\n    # Initialize variables to keep track of the number of primes found so far\n    count = 0\n    # Initialize the list of prime numbers to check\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Iterate through the list of primes\n    for num in primes:\n        # If the current number is less than or equal to `n`, increment the count\n        if num <= n:\n            count += 1\n    # Return the count of primes found\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A helper function that checks if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    '''\n    A Python function that takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Initialize variables for the max elements\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    \n    # Iterate over the tuples and find the max elements\n    for i in range(min(len1, len2)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n            \n    # If the length of the longer tuple is greater, maximize that one\n    if len1 > len2:\n        return maximize_elements(test_tup1, test_tup2[:len2])\n    elif len2 > len1:\n        return maximize_elements(test_tup1[:len1], test_tup2)\n    else:\n        return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1):\n            max_tup += (test_tup1[i],)\n        if i < len(test_tup2):\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Taking the maximum element from each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # If both tuples have same maximum element, then the greater tuple should be returned\n    if max1 == max2:\n        return test_tup1 if len(test_tup1) > len(test_tup2) else test_tup2\n    else:\n        # If one tuple has a maximum element, then it should be returned\n        return test_tup1 if max1 > max2 else test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return (test_tup1[0], test_tup1[1])\n    elif test_tup1[0] > test_tup2[0]:\n        return (test_tup2[0], test_tup2[1])\n    else:\n        if test_tup1[1] < test_tup2[1]:\n            return (test_tup1[1], test_tup1[2])\n        else:\n            return (test_tup2[1], test_tup2[2])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If the first tuple is greater than the second tuple, return the first tuple\n    if test_tup1 > test_tup2:\n        return test_tup1\n    # If the second tuple is greater than the first tuple, return the second tuple\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = max(test_tup1, test_tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    max_val3 = max(max_val1, max_val2)\n\n    return (max_val1, max_val2, max_val3)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    p = 0\n\n    # Check if n is a positive integer\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    # Initialize the first prime number to 2\n    prime = 2\n\n    # Start searching for the nth newman prime number\n    while count < n:\n        # Check if the prime number is within the desired range\n        if prime > 10000000:\n            break\n        # Check if the prime number is a newman prime number\n        if is_newman_prime(prime):\n            count += 1\n            if count == n:\n                return prime\n        # Increment the prime number by 1\n        prime += 1\n\n    # If no nth newman prime number is found, return None\n    return None\n\n\ndef is_newman_prime(p):\n    '''\n    Write a function to check if a given number is a newman prime number.\n    '''\n    # Check if p is a prime number\n    if is_prime(p):\n        # Check if p is a newman prime number\n        if p > 2 and all(p % i!= 0 for i in range(2, int(p**0.5) + 1)):\n            return True\n    return False\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is a prime number.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    # Check if n is divisible by any number from 2 to n-1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize counter variable\n    count = 0\n    \n    # iterate through all numbers from 2 to n\n    for i in range(2, n+1):\n        # check if i is a newman\u2013shanks\u2013williams prime number\n        if is_newman_prime(i):\n            # if it is, increment the count\n            count += 1\n            \n            # if we've reached the nth newman\u2013shanks\u2013williams prime number, return its value\n            if count == n:\n                return i\n            \n    # if we've reached this point, we haven't found the nth newman\u2013shanks\u2013williams prime number\n    return -1\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    # check if n is less than 4\n    if n < 4:\n        return False\n    \n    # check if n is divisible by any number between 2 and n-2\n    for i in range(2, n-2):\n        if n % i == 0:\n            return False\n    \n    # if we've gone through all iterations and haven't found a divisor, n is a newman\u2013shanks\u2013williams prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    max_number = 1000  # maximum number to check for primality\n    count = 0  # count of prime numbers found so far\n\n    # Loop through all numbers from 2 to max_number\n    for i in range(2, max_number):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, check if it meets the newman-shanks-williams condition\n        if is_prime:\n            count += 1\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        \"\"\"\n        Function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        i = 2\n        while True:\n            if is_prime(i) and (is_prime(i**2) or is_prime(i**3)):\n                return i\n            i += 1\n\n    return newman_shanks_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_primes = [2]\n    while len(newman_primes) < n:\n        is_prime = True\n        for prime in newman_primes:\n            if prime * prime > 2 * prime * prime + 1:\n                break\n            if prime * prime + 1 == 2 * prime * prime + 1:\n                is_prime = False\n                break\n            if prime * prime > 2 * prime * prime + 1:\n                break\n            if prime * prime + 1 > 2 * prime * prime + 1:\n                is_prime = False\n                break\n            if prime * prime + prime + 1 == 2 * prime * prime + 1:\n                is_prime = False\n                break\n            if prime * prime + prime + 1 > 2 * prime * prime + 1:\n                break\n        if is_prime:\n            newman_primes.append(2 * prime * prime + 1)\n    return newman_primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        num += 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    i = 1\n    while i < n:\n        i = next_prime(i)\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n\n    # Define the initial value of the prime number\n    prime = 2\n\n    # Loop through the remaining numbers\n    for i in range(3, n+1, 2):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, update the prime value\n        if is_prime:\n            prime = i\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    primes = []\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Check if n is even\n    if n % 2 == 0:\n        raise ValueError(\"n must be an odd number.\")\n\n    # Start with the first prime number\n    prime = 2\n\n    # Iterate until we have found n primes\n    while count < n:\n        # Check if prime is a newman-shanks-williams prime\n        is_prime = True\n        for i in range(3, int(prime**0.5)+1, 2):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(prime)\n            count += 1\n\n        # Increment the prime number\n        prime += 2\n\n    # Return the n-th newman-shanks-williams prime\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    \n    while count < n:\n        p += 1\n        is_prime = True\n        \n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n    \n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the count of newman prime numbers to 0\n    count = 0\n\n    # Initialize the current number to 2\n    current = 2\n\n    # Loop until we have found the nth newman prime number\n    while count < n: \n        # Check if the current number is a newman prime number\n        if is_newman_prime(current): \n            # Increment the count of newman prime numbers found\n            count += 1\n\n        # Increment the current number by 1\n        current += 1\n\n    # Return the nth newman prime number\n    return current\n\ndef is_newman_prime(n): \n    '''\n    Determine whether a number is a newman prime number.\n    '''\n\n    # Initialize the count of primes to 0\n    count = 0\n\n    # Initialize the current number to 2\n    current = 2\n\n    # Loop until we have found n primes\n    while count < n: \n        # Check if the current number is prime\n        if is_prime(current): \n            # Increment the count of primes found\n            count += 1\n\n        # Increment the current number by 1\n        current += 1\n\n    # Return True if n primes were found, False otherwise\n    return count == n\n\ndef is_prime(n): \n    '''\n    Determine whether a number is prime.\n    '''\n\n    # Check if the number is 1 or 0\n    if n <= 1: \n        return False\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0: \n        return False\n\n    # Check if the number is divisible by any odd number between 3 and the square root of the number\n    for i in range(3, int(n ** 0.5) + 1, 2): \n        if n % i == 0: \n            return False\n\n    # If we made it through all the checks, the number is prime\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of tuples does not match\"\n\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            return \"Error: Division by zero\"\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Number of elements in both tuples must be equal\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples should have same length.\"\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        elif isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            return \"Error: Both elements of the tuples should be of integer or float type.\"\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], (int, float)):\n            try:\n                div_result.append(test_tup1[i]/test_tup2[i])\n            except ZeroDivisionError:\n                div_result.append(float('inf'))\n    return div_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n        elif test_tup2[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n        else:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n            \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Perform element-wise division of the two tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError('List cannot be split into two parts.')\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    half_len = len(lst) // 2\n    first_part = lst[:half_len]\n    second_part = lst[half_len:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the second part of the list\n    L2 = L - len(list1)\n\n    # Check if the second part of the list is greater than the length of the list\n    if L2 > len(list1):\n        return (list1, [])\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Find the length of the first part\n    L1 = len(list1) // 2\n    # Find the length of the second part\n    L2 = len(list1) - L1\n    # Split the list into two parts\n    L1_list = list1[:L1]\n    L2_list = list1[L1:]\n    # Return the two lists as a tuple\n    return (L1_list, L2_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # get the length of the second part of the list\n    second_part_len = len(list1) - L\n\n    # create the first part of the list\n    first_part = list1[:L]\n\n    # create the second part of the list\n    second_part = list1[L:]\n\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    half_length = length // 2\n    if length % 2 == 0:\n        return (list1[:half_length], list1[half_length:])\n    else:\n        return (list1[:half_length+1], list1[half_length:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the number of elements in the first part of the list\n    n = len(list1)\n    half_n = n // 2\n\n    # Check if L is greater than half the number of elements in the list\n    if L > half_n:\n        # If L is greater than half the number of elements in the list, return the entire list as both parts\n        return (list1, list1)\n    else:\n        # If L is less than or equal to half the number of elements in the list, split the list into two parts and return them as a tuple\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part is L.\n    \"\"\"\n    n = len(lst)\n    if L > n:\n        raise ValueError(\"L cannot be greater than the length of the list.\")\n    mid = n // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return (left, right)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in years\n    dog_age_years = h_age * 7\n    # Return the dog's age in years\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * int(h_age)\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): Height in centimeters\n\n    Returns:\n    int: Age in dog years\n\n    Raises:\n    TypeError: If the input is not a number\n    '''\n    if not isinstance(h_age, (int, float)):\n        raise TypeError(\"Input must be a number\")\n    \n    # Calculate age in dog years\n    dog_years = h_age / 12\n    \n    # Return the age in dog years\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in days\n    dog_age_days = (365.25 * h_age) / 100\n    # calculate dog's age in years\n    dog_age_years = dog_age_days / 365.25\n    # round the dog's age to the nearest whole number\n    dog_age_rounded = round(dog_age_years)\n    return dog_age_rounded"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age >= 0 and h_age <= 1:\n        dog_years = h_age * 7\n    elif h_age > 1 and h_age <= 2:\n        dog_years = h_age * 6\n    elif h_age > 2 and h_age <= 3:\n        dog_years = h_age * 5\n    elif h_age > 3 and h_age <= 4:\n        dog_years = h_age * 4\n    elif h_age > 4 and h_age <= 5:\n        dog_years = h_age * 3\n    elif h_age > 5 and h_age <= 6:\n        dog_years = h_age * 2\n    else:\n        dog_years = h_age * 1\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age # age in dog's years = 7 * height in inches\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    n = len(S)\n    split_list = []\n    i = 0\n    while i < n:\n        split_list.append(S[i:i+step])\n        i += step\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    output = []\n    while len(S) >= n:\n        output.append(S[:n])\n        S = S[n:]\n    if S:\n        output.append(S)\n    return output"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Use a while loop to iterate through the list\n    i = 0\n    while i < len(S):\n        # If the index is divisible by the step, add the current slice of the list to the result list\n        if i % step == 0:\n            result.append(S[i:i+step])\n        # Increment the index by 1\n        i += 1\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # calculate the lateral surface area using the formula: lateral surface area = 2 * (base * height)\n    lsurface = 2 * (l**2)\n\n    # return the lateral surface area\n    return lsurface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    V = 6 * l ** 3\n\n    # Calculate the lateral surface area of the cube\n    A_lateral = 2 * V\n\n    # Return the result\n    return A_lateral"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Compute the lateral surface area\n    area = 6*l*l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the surface area of the cube using the formula:\n    # surface area = 2 * (l^2)\n    surface_area = 2 * (l**2)\n    \n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    print(\"The lateral surface area of a cube is:\", area)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (12 * l)\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of the squares of odd natural numbers\n    sum_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of each odd natural number to the sum_squares variable\n        sum_squares += i**2\n    \n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(n+1):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum_of_squares = 0\n    # initialize the counter to 1\n    counter = 1\n    # loop until we have counted n odd natural numbers\n    while counter <= n:\n        # add the square of the current odd number to the sum_of_squares variable\n        sum_of_squares += counter**2\n        # increment the counter by 2\n        counter += 2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a counter variable\n    count = 1\n    # initialize an empty string to store the result\n    result = ''\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # if the counter variable is divisible by 2, add a star to the result string\n        if count % 2 == 0:\n            result += '*'\n        # increment the counter variable\n        count += 1\n    # print the result string\n    print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the string of stars\n    stars = \"*\" * n\n    # Print the stars\n    print(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a counter variable and a star number variable\n    counter = 1\n    star_num = \"\"\n    \n    # Loop through each digit in the number n\n    while counter <= n:\n        # Append the digit to the star number variable\n        star_num += str(counter)\n        \n        # Increment the counter variable\n        counter += 1\n    \n    # Return the star number variable\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    elif n == 3:\n        return \"***\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the loop counter and the result string\n    i = 1\n    result = ''\n    \n    # loop until we reach the nth star number\n    while i <= n:\n        # add a star to the result string\n        result += '*'\n        \n        # increment the loop counter\n        i += 1\n    \n    # print the result string\n    print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    result = 0\n    # loop through the first n-1 stars\n    for i in range(1, n):\n        result += count\n        count *= 2\n    # add the last star to the result\n    result += count\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number to 1\n    star_num = 1\n    # loop through each digit in the number\n    for i in range(n):\n        # multiply the current star number by 10\n        star_num *= 10\n        # append the result to a list of stars\n        stars.append(star_num)\n    # return the list of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0: \n        return \"Invalid input. Please enter a positive integer.\"\n    else: \n        star_num = 1\n        for i in range(1, n+1): \n            star_num = star_num * i\n        return str(star_num)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ascii value and return it\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert k to string\n    k = str(k)\n    # find the ascii value of each character in the string\n    ascii_values = []\n    for char in k:\n        ascii_values.append(ord(char))\n    # return the sum of the ascii values of each character\n    return sum(ascii_values)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII values of all the characters from A to Z\n    ascii_values = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n    # Check if the input character is a letter and return its ascii value\n    if k.isalpha():\n        return ascii_values[ord(k) - 65]\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return 0"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n\n    Args:\n    k: a string containing a single character\n\n    Returns:\n    The ascii value of the character in the string, or None if the character is not a valid character (e.g. whitespace)\n    \"\"\"\n    # check if k is a valid character\n    if len(k)!= 1:\n        return None\n\n    # convert k to its integer value\n    i = ord(k)\n\n    # check if i is a valid ascii value\n    if i < 0 or i > 127:\n        return None\n\n    # return the ascii value as an integer\n    return i"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):  \n        if arr[i] % 2 == 0:  \n            even_sum += arr[i]  \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if even_index % 2 == 0:\n                even_index += 1\n\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_indices = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            even_indices.append(i)\n    return even_sum, even_indices"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize the sum to zero\n    even_pow_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the raised power of the even natural number\n        raised_power = i**5\n        \n        # add the raised power to the sum\n        even_pow_sum += raised_power\n    \n    # return the sum of even raised to the fifth power\n    return even_pow_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize a variable to store the sum\n    sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the raised power to the sum\n        sum += i ** 5\n        \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum_even_power += i\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize a variable to store the sum of even raised to the fifth power\n    sum_of_even_raised_to_fifth = 0\n    \n    # Iterate from 0 to n\n    for i in range(n):\n        # Calculate the raised to the fifth power of the even natural number i\n        even_raised_to_fifth = i**5\n        \n        # If the raised to the fifth power is even, add it to the sum\n        if even_raised_to_fifth % 2 == 0:\n            sum_of_even_raised_to_fifth += even_raised_to_fifth\n    \n    return sum_of_even_raised_to_fifth"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(2, n+1): \n        if i ** 5 % 2 == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize sum variable\n    even_power_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Check if the number is raised to the fifth power\n            if i ** 5 == i ** 5:\n                # If both conditions are met, add the number to the sum\n                even_power_sum += i\n\n    # Return the sum of the first n even natural numbers that are raised to the fifth power\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**(5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples have different lengths.\")\n        return None\n    \n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n    \n    # Create a new tuple with the elements of the first tuple\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples must have the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    \n    # print the resulting tuple\n    print(test_tup1)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    \n    # Loop through the tuples and subtract the elements of the second tuple by the first tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    # Loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n\n    # Print the modified tuple\n    print(\"Modified tuple:\", test_tup1)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            even_sum += term\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index_binomial_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_even_index_binomial_coeffs += math.comb(n, i)\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through each index (starting from 0)\n    for i in range(n):\n        # calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n\n        # add the even index binomial coefficient to the sum if it's even\n        if i % 2 == 0:\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_index_binomial_coefficients = 0\n    for i in range(n+1):\n        numerator = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        denominator = math.factorial(2*i) * math.factorial(n-2*i)\n        sum_even_index_binomial_coefficients += numerator/denominator\n        if i % 2 == 0:\n            sum_even_index_binomial_coefficients += numerator/denominator\n    \n    return sum_even_index_binomial_coefficients"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i, exact=True)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        coeff_sum = 0\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                coeff_sum += math.comb(n, i)\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients of that number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    even_index_binomial_coefficients = [0] * (n + 1)\n    even_index_binomial_coefficients[0] = 1\n\n    for i in range(1, n + 1):\n        even_index_binomial_coefficients[i] = 0\n\n        for j in range(1, i + 1):\n            even_index_binomial_coefficients[i] += math.comb(i, j) * even_index_binomial_coefficients[j]\n\n    sum_of_even_index_binomial_coefficients = 0\n\n    for i in range(1, n + 1, 2):\n        sum_of_even_index_binomial_coefficients += even_index_binomial_coefficients[i]\n\n    return sum_of_even_index_binomial_coefficients"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Define the first two even binomial coefficients\n    b0 = 1.0\n    b1 = 0.0\n    \n    # Initialize the sum of even binomial coefficients to zero\n    sum_even_binomial_coeffs = 0.0\n    \n    # Loop through the range of indices from 0 to n\n    for i in range(n):\n        # Calculate the even index binomial coefficient b(i, 0) and add it to the sum\n        even_binomial_coeff = (b0 + b1) / 2.0\n        sum_even_binomial_coeffs += even_binomial_coeff\n        \n        # Update the values of b0 and b1 for the next iteration\n        b0 = b1\n        b1 = even_binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum variable\n    even_sum = 0\n    \n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n        \n        # Check if the index is even\n        if i % 2 == 0:\n            # If the index is even, add the binomial coefficient to the sum\n            even_sum += binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index coefficients to zero\n    even_sum = 0\n\n    # Calculate the sum of even index coefficients using a loop\n    for i in range(2, n+1):\n        # Calculate the even index binomial coefficient using the math.comb() function\n        coeff = math.comb(n, i)\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index coefficient to the sum\n            even_sum += coeff\n\n    # Return the sum of even index coefficients\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159*r**2\n    volume = area*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (3.14/4)*r**2*h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r ** 2) * h # Volume calculation using formula V = pi * r^2 * h\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dict: A dictionary to filter.\n        n: An integer to filter by.\n\n    Returns:\n        A filtered dictionary with only entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i - 1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 0\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    row_num = 1\n    col_num = 1\n\n    # Check if the input is valid\n    if n <= 0 or n > 50:\n        print(\"Invalid input! Please enter a number between 1 and 50.\")\n        return\n\n    # Calculate the nth decagonal number\n    while row_num <= n:\n        while col_num <= n:\n            decagonal_num = decagonal_num + col_num\n            col_num += 1\n        col_num = 1\n        row_num += 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i*2\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    a = 1\n    b = 2\n    count = 0\n\n    while count < n:\n        if b == n:\n            return b\n        elif b % 2 == 0:\n            b += 4 * a - 2\n        else:\n            b += 4 * a\n        a += 1\n        count += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function checks if a given number is a decagonal number or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Calculate the sum of the squares of the digits\n    digit_sum = sum([int(digit)**2 for digit in num_str])\n    # If the sum is divisible by 12, then the number is a decagonal number\n    return digit_sum % 12 == 0"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables to keep track of row and column numbers\n    row = 1\n    col = n\n    \n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through each row\n    while row <= col:\n        # Loop through each column in the current row\n        while col >= row:\n            # Add the number of rows to the sum\n            sum += row\n            \n            # Move down a row\n            row += 1\n            \n            # Move to the rightmost column in the previous row\n            col -= 1\n    \n    # Check if the sum is equal to the nth decagonal number\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += i * (i - 1)\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first and second row of the decagonal matrix\n    row1 = [1]\n    row2 = [1, 1]\n    # Define the index of each element in the matrix\n    row1_index = 0\n    row2_index = 0\n    # Define the nth decagonal number\n    nth_decagonal = 0\n    \n    # Loop through each row of the matrix\n    for i in range(n):\n        # Check if the current row is the first or second row\n        if i == 0 or i == 1:\n            # Calculate the nth decagonal number for the first row\n            nth_decagonal = sum(row1)\n        else:\n            # Calculate the nth decagonal number for the second row\n            nth_decagonal = sum(row2)\n            # Update the row1 and row2 lists with the next element\n            row1 = [row1[i] + row2[i] for i in range(len(row1))]\n            row2 = [row2[i] + row2[i+1] for i in range(len(row2)-1)]\n            # Update the row1 index to skip over the previous element\n            row1_index += 1\n        # Print the nth decagonal number\n        print(nth_decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the variable to keep track of the current number\n    current_num = 1\n\n    # Loop from 1 to n and add the current number to the sum of squares\n    for i in range(1, n+1):\n        current_num += i * i\n\n    # Return the result\n    return current_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # decagonal number formula: (n^2 + 1)/2\n    return ((n ** 2 + 1) // 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        num += i * (2 * i - 1) / 2\n    return num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # loop through the array\n    for i in range(len(dlist)):\n        # if the element is found, return a tuple containing a boolean and the index position\n        if dlist[i] == item:\n            return (True, i)\n    \n    # if the element is not found, return a tuple containing a boolean and -1\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        if i > 0 and test_list[i] == test_list[i-1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all elements are unique,\n    and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns True if all the elements in the list are unique and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the element-wise difference between the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists must have the same length.\"\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns a list with the element-wise difference between the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    # subtract each element in the lists element-wise\n    result = [a - b for a, b in zip(nums1, nums2)]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # convert the number to a string\n    s = str(n)\n    \n    # create a dictionary to store the frequency of each digit in the string\n    freq = {}\n    \n    # iterate through each character in the string\n    for c in s:\n        # if the character is already a key in the dictionary, increment its value by 1\n        if c in freq:\n            freq[c] += 1\n        # otherwise, add the character as a key with a value of 1\n        else:\n            freq[c] = 1\n            \n    # iterate through each key-value pair in the dictionary\n    for key, value in freq.items():\n        # if the value is greater than the key, return False (since the digit's frequency is greater than the digit itself)\n        if value > key:\n            return False\n            \n    # if the loop completes without returning False, return True (since the frequency of each digit is less than or equal to the digit itself)\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # create a set to store the frequency of each digit\n    digit_freq = set()\n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is not in the set, add it with a frequency of 1\n        if digit not in digit_freq:\n            digit_freq.add((digit, 1))\n        # otherwise, increment the frequency by 1\n        else:\n            digit_freq[digit] += 1\n    \n    # loop through each digit in the set\n    for digit, freq in digit_freq:\n        # if the frequency is greater than the digit itself, the number is not valid\n        if freq > digit:\n            return False\n    \n    # if all digits have valid frequencies, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # loop through each character in the string\n    for char in num_str:\n        # convert the character to an integer\n        char_int = int(char)\n        # if the character is already in the dictionary, increment its frequency\n        if char_int in freq_dict:\n            freq_dict[char_int] += 1\n        # otherwise, add the character to the dictionary with frequency 1\n        else:\n            freq_dict[char_int] = 1\n    # loop through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for num in freq_dict:\n        if freq_dict[num] > num:\n            return False\n    # if no digit frequency is greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = list(str(n))\n    for digit in digits:\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Calculate the frequency of each digit in the integer\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    \n    # If all digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    def digit_frequency(n):\n        frequency = {}\n        while n > 0:\n            digit = n % 10\n            if digit in frequency:\n                frequency[digit] += 1\n            else:\n                frequency[digit] = 1\n            n //= 10\n        return frequency\n\n    def digit_sum(frequency):\n        return sum(frequency.values())\n\n    def is_valid(frequency):\n        return digit_sum(frequency) <= n\n\n    frequency = digit_frequency(n)\n    return is_valid(frequency)"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    frequency = {}\n\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in digits:\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert integer to string and split it into individual digits\n    digits = list(str(n))\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Iterate through each digit in the string and update the frequency dictionary accordingly\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # Iterate through the frequency dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # Function to check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    def check_digit(num):\n        freq = [0] * 10  # Initialize an array of size 10 to store the frequency of each digit\n        \n        # Count the frequency of each digit in the integer\n        while num > 0:\n            freq[num % 10] += 1\n            num //= 10\n        \n        # Check if the frequency of each digit is less than or equal to the digit itself\n        for digit in freq:\n            if digit > 1:\n                return False\n            elif digit == 1:\n                num %= 10\n                if num!= digit:\n                    return False\n        \n        return True\n    \n    # Check if the input integer is valid or not\n    if check_digit(n):\n        print(f\"{n} is a valid number.\")\n    else:\n        print(f\"{n} is an invalid number.\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # create a list to store the frequency of each digit\n\n    # iterate through each digit in the number\n    for i in range(len(str(n))):\n        # get the current digit\n        digit = int(str(n)[i])\n\n        # increment the frequency of the current digit\n        freq[digit] += 1\n\n    # iterate through the list of frequencies and check if the frequency of each digit is less than or equal to itself\n    for i in range(len(freq)):\n        if freq[i] > 0 and freq[i] > i:\n            # if the frequency of the current digit is greater than itself, return False\n            return False\n\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    return all(lst[i] == element for i in range(len(lst)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    \n    # Check if the first item in the list is equal to the given element\n    if list[0] == element:\n        # Remove the first item from the list\n        list = list[1:]\n        # Recursively call the function with the updated list and element\n        return check_element(list, element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"The string contains 'a' followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.{2,3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        print('The pattern is found in the text.')\n    else:\n        print('The pattern is not found in the text.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b(?:\\1){0,2}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\w{2,3}')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf') \n    cur_sum = 0 \n    repeated_sum = 0\n    \n    for i in range(k):\n        repeated_sum += a[0] * n\n    \n    for i in range(n):\n        cur_sum += a[i]\n        \n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        \n        if cur_sum < repeated_sum:\n            cur_sum = repeated_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        for j in range(n-k+1):\n            sub_array = a[j:j+k]\n            sub_array.sort()\n            max_sum = max(max_sum, sum(sub_array))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base Case\n    if n == 1:\n        return a[0]\n    \n    # Maximum subarray sum with first element\n    max_sum_first = max_sub_array_sum_repeated(a[1:], n-1, k)\n    \n    # Maximum subarray sum with last element\n    max_sum_last = max_sub_array_sum_repeated(a[:-1], n-1, k)\n    \n    # Maximum subarray sum with k elements\n    max_sum_k = max_sub_array_sum_repeated(a[1:], n-1, k-1)\n    \n    # Maximum subarray sum with repeated elements\n    max_sum_repeated = max_sum_first + max_sum_last + max_sum_k\n    \n    return max(max_sum_first, max_sum_last, max_sum_k, max_sum_repeated)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize two pointers, one for the original array and the other for the modified array\n    i, j = 0, 0\n\n    # Initialize variables to keep track of the current maximum sum and the sum of the repeated array\n    max_sum = a[0]\n    repeated_sum = a[0]\n\n    # Loop through the original array n-k times\n    for _ in range(n-k):\n        # Move the pointer for the modified array to the right\n        j = (j + 1) % n\n\n        # Add the element at the right pointer of the modified array to the sum of the repeated array\n        repeated_sum += a[j]\n\n        # Update the maximum sum if the current sum is greater than the current maximum sum\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a copy of the input array and repeat it k times\n    repeated_array = a * k\n\n    # Initialize variables to store the maximum sum of the repeated array and the maximum subarray sum\n    max_sum_repeated = max_sum_subarray = float('-inf')\n\n    # Loop through the repeated array and calculate the maximum sum and subarray sum\n    for i in range(n):\n        curr_sum = a[i]\n        subarray_sum = a[i]\n        for j in range(i + 1, min(i + k, n)):\n            curr_sum += a[j]\n            subarray_sum += a[j]\n            if curr_sum > max_sum_repeated:\n                max_sum_repeated = curr_sum\n            if curr_sum == max_sum_repeated:\n                max_sum_subarray = max(max_sum_subarray, subarray_sum)\n\n    # Return the maximum sum of the repeated array\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the array with the repeated elements\n    max_sum = a[0]\n    sum_repeated = a[0]\n    arr_repeated = a.copy()\n    arr_repeated.extend(a)\n    \n    # Loop through the array and find the maximum sum of a contiguous array formed by repeating the array k times\n    for i in range(1, n):\n        if i % k == 0:\n            # Add the first element of the current array to the sum of the repeated array\n            arr_repeated[i] += arr_repeated[0]\n            # If the sum exceeds the maximum sum so far, update the maximum sum and the array with the repeated elements\n            if arr_repeated[i] > max_sum:\n                max_sum = arr_repeated[i]\n                sum_repeated = arr_repeated[i]\n                arr_repeated = a.copy()\n                arr_repeated.extend(a)\n        else:\n            # If the current index is not a multiple of k, simply add the current element to the sum of the repeated array\n            arr_repeated[i] += arr_repeated[i-1]\n            # If the sum exceeds the maximum sum so far, update the maximum sum and the array with the repeated elements\n            if arr_repeated[i] > max_sum:\n                max_sum = arr_repeated[i]\n                sum_repeated = arr_repeated[i]\n                arr_repeated = a.copy()\n                arr_repeated.extend(a)\n    \n    return max_sum, sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements\n    sum_first_k = sum(a[:k])\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = sum_first_k\n    current_sum = sum_first_k\n    \n    # Iterate through the array from the second element up to the last element\n    for i in range(k, n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n        \n        # If the current sum exceeds the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current sum exceeds the sum of the first k elements, add the first k elements to the current sum\n        if current_sum > sum_first_k:\n            current_sum -= a[i-k]\n    \n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize two pointers, start and end, to 0\n    start = 0\n    end = 0\n    # Initialize a variable to store the maximum sum\n    max_sum = 0\n    # Initialize two variables, sum and sum_k, to 0\n    sum = 0\n    sum_k = 0\n    # Iterate through the array and calculate the sum of the first k elements\n    for i in range(k):\n        sum += a[i]\n    # Update the maximum sum if the sum is greater than the maximum sum so far\n    if sum > max_sum:\n        max_sum = sum\n    # Iterate through the remaining elements of the array and calculate their sum\n    for i in range(k, n):\n        sum += a[i] - a[i - k]\n        # Update the maximum sum if the sum is greater than the maximum sum so far\n        if sum > max_sum:\n            max_sum = sum\n    # Initialize a variable, sum_repeated, to 0\n    sum_repeated = 0\n    # Calculate the sum of the k first elements in the modified array\n    for i in range(k):\n        sum_repeated += a[i]\n    # Calculate the sum of the (n-k) last elements in the modified array\n    for i in range(n - k, n):\n        sum_repeated += a[i]\n    # Update the maximum sum if the sum of the modified array is greater than the maximum sum so far\n    if sum_repeated > max_sum:\n        max_sum = sum_repeated\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_list = [0] * n\n    for i in range(n):\n        sum_list[i] = a[i]\n    max_sum = max(sum_list)\n    for i in range(k):\n        sum_list = sum_list[1:] + [max_sum]\n    return max(sum_list)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    modified_array = [a] * n\n    for i in range(k):\n        current_sum += a[i]\n        modified_array[i] = current_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    count = 0\n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n        count += 1  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of i to the sum of squares\n        sum_of_squares += i**2\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    current_num = 0\n    while current_num < n:\n        current_num += 2\n        sum_of_squares += current_num**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    i = 0\n    \n    while i <= n:\n        total += i**2\n        i += 2\n        \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += (count*count)\n        count += 2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Create a dictionary to store the maximum length of each sub-list\n    sub_lengths = {}\n    \n    # Iterate through each sub-list in the list of lists\n    for sub_list in list1:\n        # Iterate through each element in the sub-list\n        for element in sub_list:\n            # If the element is not in the dictionary, set its value to 1\n            if element not in sub_lengths:\n                sub_lengths[element] = 1\n            # If the element is already in the dictionary, increment its value\n            else:\n                sub_lengths[element] += 1\n    \n    # Find the maximum length of any sub-list\n    max_length = max(sub_lengths.values())\n    \n    # Create a list to store the maximum length sub-lists\n    max_sub_lists = []\n    \n    # Iterate through each key in the dictionary\n    for key in sub_lengths.keys():\n        # If the value of the key is equal to the maximum length, append the key to the list\n        if sub_lengths[key] == max_length:\n            max_sub_lists.append(key)\n    \n    return max_sub_lists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(item) for item in sublist]\n        if len(lengths) > len(max_lengths):\n            max_lengths = lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Returns a list of the maximum length of each sublist in the input list.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist[i]) for i in range(len(sublist))]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(lst):\n    '''\n    This function takes a list of lists and returns a list of the maximum length for each sublist.\n    '''\n    # Create an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Find the length of the current sublist\n        sublist_length = len(sublist)\n        \n        # Check if the current length is greater than the maximum length\n        if sublist_length > max(max_lengths) or max_lengths == []:\n            # If it is, add it to the list\n            max_lengths.append(sublist_length)\n    \n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize a variable to store the maximum length found so far\n    max_length = 0\n    # initialize a variable to store the maximum length list found so far\n    max_length_list = []\n    # loop through each element in the list of lists\n    for sublist in list1:\n        # get the length of the current sublist\n        length = len(sublist)\n        # if the length of the current sublist is greater than the maximum length found so far,\n        # update the maximum length and the maximum length list\n        if length > max_length:\n            max_length = length\n            max_length_list = [sublist]\n        # if the length of the current sublist is equal to the maximum length found so far,\n        # add the current sublist to the maximum length list\n        elif length == max_length:\n            max_length_list.append(sublist)\n    # return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Create an empty list to store the maximum length lists\n    max_lists = []\n    # Iterate through each element in the list\n    for lst in list1:\n        # Check if the current list has a longer length than any of the previous ones\n        if len(lst) > max([len(x) for x in max_lists]):\n            # Add the current list to the list of maximum length lists\n            max_lists = [lst]\n        # Check if the current list is longer than the last list in the list of maximum length lists\n        elif len(lst) > len(max_lists[-1]):\n            # Replace the last list in the list of maximum length lists with the current list\n            max_lists[-1] = lst\n        # If the current list is not longer than any previous list, do nothing\n    # Return the list of maximum length lists\n    return max_lists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Find the maximum length of a list of lists.\n\n    Parameters:\n    list1 (list of lists): A list of lists.\n\n    Returns:\n    int: The maximum length of the list.\n    \"\"\"\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using dynamic programming to store the count of ways\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n\n    # Base case: if we only have 3 colors, there is only one way\n    if k == 3:\n        return dp[n][3]\n\n    # Base case: if we only have 2 colors, we can paint the fence in either order\n    if k == 2:\n        return dp[n][2] + dp[n][3]\n\n    # Fill in the rest of the table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = dp[i-1][j]\n            elif j == 1:\n                dp[i][j] = dp[i][j-1]\n            elif i == n and j == k:\n                dp[i][j] = dp[i-1][j-1]\n            elif i == n and j!= k:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n\n    # Return the final value in the table\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return count_no_of_ways(n-1, k)\n        else:\n            return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # create an empty dictionary to store the count of ways for each possible color\n    count = {}\n    # create a list of empty lists to store the ways for each color\n    ways = [[] for i in range(k)]\n\n    # generate all possible ways of painting the fence for each possible color\n    for i in range(k):\n        ways[i] = [(n - 1) // k, n - 1 - (i + 1) * (n - 1) // k]\n\n    # loop through the possible colors\n    for i in range(k):\n        # if the current color is not already counted, count the number of ways of painting the fence\n        if i not in count:\n            count[i] = ways[i][0] * ways[i][1] * 2\n\n    # return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # create a matrix to store the number of ways to paint the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # initialize the first row and column of the matrix\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n    \n    # fill in the rest of the matrix\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n            \n    # return the final value in the bottom-right corner of the matrix\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways_helper(start, end, color_count):\n        if start > end:\n            return 1\n        \n        if start == end:\n            return 1 if color_count[start-1] == k else 0\n        \n        ways = 0\n        \n        for i in range(start, end+1):\n            if color_count[i-1] < k:\n                color_count[i-1] += 1\n                ways += count_ways_helper(i+1, end, color_count)\n                color_count[i-1] -= 1\n                \n        return ways\n    \n    color_count = [0] * k\n    return count_ways_helper(1, n, color_count)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    def backtrack(left, right, color):\n        if left == n:\n            return 1\n        if left > n or right > n:\n            return 0\n        \n        if color == 0:\n            return backtrack(left + 1, right, 1) + backtrack(left, right + 1, 1)\n        else:\n            return backtrack(left + 1, right, 0) + backtrack(left, right + 1, 0)\n    \n    return backtrack(0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "Here's the Python code for the above approach:"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Base case: if n is 0 or k is 0, the fence has been painted exactly once\n    if n == 0 or k == 0:\n        return 1\n\n    # Base case: if n is 1, the fence has been painted exactly once\n    if n == 1:\n        return k\n\n    # Recursive case: count the number of ways of painting the fence with n-1 posts and k colors, and with n-2 posts and k-1 colors\n    ways1 = count_no_of_ways(n-1, k)\n    ways2 = count_no_of_ways(n-2, k-1)\n\n    # Return the number of ways that paint the fence with n posts and k colors\n    return ways1 + ways2"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # create a list to store the number of ways of painting the fence\n    ways = [1] * (n+1)\n    # iterate over the colors from 1 to k\n    for color in range(1, k+1):\n        # iterate over the colors from 1 to n-1\n        for i in range(1, n):\n            # check if the colors are adjacent and not the same as the current color\n            if i > 1 and ways[i-1] > 0 and ways[i-2] > 0 and ways[i-1]!= ways[i-2]:\n                ways[i] += ways[i-1]\n    # return the final value in the list\n    return ways[-1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Check if both numbers are even\n    if n % 2 == 0 and m % 2 == 0:\n        return (n + m) // 2\n    elif n % 2 == 0 and m % 2!= 0:\n        return (n + m) // 2 - 1\n    elif n % 2!= 0 and m % 2 == 0:\n        return (n + m) // 2\n    else:\n        return (n + m) // 2"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m == n:\n        return quotient - 1\n    else:\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = (n/m)\n    return int(q)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w ** 2 + h ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the diagonal\n    diagonal = math.sqrt(w**2 + h**2)\n\n    # Calculate the semi-perimeter\n    semi_perimeter = diagonal / 2\n\n    # Calculate the third side\n    third_side = math.sqrt(semi_perimeter**2 - h**2)\n\n    # Return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Use the Law of Cosines to calculate the cosine of the angle\n    cos_theta = (w ** 2 + h ** 2 - s ** 2) / (2 * w * h)\n\n    # Calculate the third side of the right angled triangle\n    third_side = math.sqrt(w ** 2 + h ** 2 - cos_theta ** 2)\n\n    # Return the result\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(s ** 2 - w ** 2)\n    # Return the third side of the right angled triangle\n    return hypotenuse"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the area of the triangle\n    area = math.sqrt(w**2 + h**2)\n    # calculate the perimeter of the triangle\n    perimeter = area/2\n    # find the square root of the perimeter to get the third side\n    third_side = math.sqrt(perimeter**2 - area)\n    # return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the length of the diagonal of the right angled triangle\n    diagonal = math.sqrt(w**2 + h**2)\n\n    # return the third side of the triangle\n    return diagonal"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w * h) / 2\n    return area"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current element is greater than the maximum value, update the maximum value\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n\n    # Initialize maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is greater than the maximum value, update the maximum value\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None #initialize max_val to None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i #if max_val is None or current value is greater than max_val, update max_val\n    return max_val #return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    # loop through the list to find the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the input number\n    for i in range(1, number + 1):\n\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n\n            # Add the current number to the sum of divisors\n            sum_div += i\n\n    # Return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisors_sum = 0\n\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    \n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total_sum = 0\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            total_sum += divisor\n        divisor += 1\n    return total_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    # initialize variables\n    n = len(arr)\n    count = 0\n    \n    # divide array in half\n    mid = n // 2\n    \n    # count inversions in each half recursively\n    count += get_Inv_Count(arr[:mid])\n    count += get_Inv_Count(arr[mid:])\n    \n    # sort the array\n    arr.sort()\n    \n    # count inversions in sorted array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array using the merge sort algorithm.\n    \"\"\"\n    n = len(arr)\n    # base case: array with 0 or 1 element is already sorted\n    if n <= 1:\n        return 0\n\n    # divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # count the inversions in each half recursively\n    inv_left = get_Inv_Count(left)\n    inv_right = get_Inv_Count(right)\n\n    # merge the two halves to form a single sorted array\n    inv_count = inv_left + inv_right\n    i = j = k = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count += len(left) - i\n        k += 1\n\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Check if the array has less than two elements\n    if len(arr) < 2:\n        return 0\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count the inversions in the left and right halves\n    inv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\n    # Count the inversions in the current half of the array\n    left.sort()\n    right.sort(reverse=True)\n    i = j = inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            inv_count += len(left) - i\n            j += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n\n    # Sort the array in ascending order \n    for i in range(n): \n        min_idx = i \n\n        # Find the minimum element in remaining unsorted array \n        for j in range(i+1, n): \n            if arr[j] < arr[min_idx]: \n                min_idx = j \n\n        # Swap the found minimum element with the first element \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n        # Calculate the inversion count \n        inv_count += (n - i - 1) \n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize the left and right indices\n        left = i\n        right = len(arr) - 1\n\n        # While the left index is less than the right index, perform the merge sort algorithm\n        while left < right:\n            # If the left element is greater than the right element, increment the count and swap the elements\n            if arr[left] > arr[right]:\n                count += (right - left)\n                arr[left], arr[right] = arr[right], arr[left]\n            # If the left element is less than or equal to the right element, increment the left index\n            else:\n                left += 1\n\n            # If the right element is greater than the left element, decrement the right index\n            if arr[right] > arr[left]:\n                count += (right - left)\n                arr[right], arr[left] = arr[left], arr[right]\n            # If the right element is less than or equal to the left element, decrement the right index\n            else:\n                right -= 1\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Traverse the array from the start to the end\n    for i in range(n): \n        # Count inversions\n        inv_count += i * (n - i - 1)\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Divide and conquer approach to count inversions\n    def merge_sort(left, right):\n        if left >= right:\n            return\n\n        mid = (left + right) // 2\n        merge_sort(left, mid)\n        merge_sort(mid + 1, right)\n\n        i = j = k = 0\n        inv = 0\n\n        while i < mid and j < right:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                inv += mid - i + 1\n                j += 1\n            k += 1\n\n        while i < mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j < right:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        return inv\n\n    inv_count = merge_sort(0, n - 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n\n    # Sort the array in ascending order\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        # Count the inversions\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inv_count += (n-j)\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Base case: if the list is empty or contains only one element, return it\n    if len(list1) == 0 or len(list1) == 1:\n        return list1\n\n    # Recursive case: otherwise, return the first element of the list and concatenate its flattened sublists\n    else:\n        return [list1[0]] + flatten_list(list1[1:])"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a defaultdict to store the count of each item\n    item_counts = defaultdict(int)\n\n    # iterate through the list of tuples and update the count of each item\n    for item, price in stdata:\n        item_counts[item] += 1\n\n    # initialize a variable to store the maximum aggregate\n    max_aggregate = 0\n\n    # iterate through the count of each item and update the maximum aggregate if necessary\n    for count in item_counts.values():\n        if count > max_aggregate:\n            max_aggregate = count\n\n    # return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # create a defaultdict to store the maximum aggregate for each month\n    max_aggr = defaultdict(int)\n    \n    # loop through the list of tuples\n    for month, value in stdata:\n        # update the maximum aggregate for the month\n        max_aggr[month] = max(max_aggr[month], value)\n    \n    # return the maximum aggregate for each month\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            total = stdata[i][0] + stdata[j][0]\n            if total > max_sum:\n                max_sum = total\n                max_dict[(stdata[i][1], stdata[j][1])] = max_sum\n    return max_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each item\n    item_freq = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, freq in stdata:\n        # increment the frequency of the current item\n        item_freq[item] += freq\n\n    # initialize variables for maximum aggregate and maximum frequency\n    max_agg = 0\n    max_freq = 0\n\n    # iterate through the dictionary and find the maximum aggregate and maximum frequency\n    for freq in item_freq.values():\n        if freq > max_freq:\n            max_freq = freq\n        if freq * max_freq > max_agg:\n            max_agg = freq * max_freq\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n    # Iterate through the list of tuples\n    for customer, order in stdata:\n        # Get the maximum aggregate for the current customer\n        max_agg[customer] = max(max_agg[customer], order[0])\n    # Find the maximum aggregate across all customers\n    max_agg = max(max_agg.values())\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[1]] += item[2]\n    max_key = max(max_dict, key=max_dict.get)\n    return max_dict[max_key]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_sum_dict = defaultdict(int)\n    for item in stdata:\n        if item[2] > max_sum_dict[item[0]]:\n            max_sum_dict[item[0]] = item[2]\n            max_sum = max(max_sum, item[2])\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n\n    for item in stdata:\n        for key, value in item.items():\n            max_dict[key] = max(max_dict[key], value)\n\n    max_aggr = max(max_dict.values())\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate obtained from the list.\n    '''\n    # create a dictionary to store the maximum aggregate and its frequency for each stock\n    max_agg = defaultdict(int)\n    # iterate through the list of tuples\n    for stock, price in stdata:\n        # add the price to the maximum aggregate and increment its frequency\n        max_agg[stock] += price\n    # find the maximum aggregate from the dictionary\n    max_aggr = max(max_agg.values())\n    # return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        binary_str = bin(i)[2:].zfill(n)\n        if binary_str[0:n//2] == binary_str[n//2:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    # Iterate through all possible combinations of two binary digits\n    for i in range(2**n):\n        for j in range(2**n):\n            # Check if sum of first n bits is same as sum of last n bits\n            if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(j)[2:].zfill(n)):\n                # Increment count\n                count += 1\n    # Return count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:].zfill(n)\n        if i!= int(temp, 2) + int(temp[-1::-1], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if (i & j) == i:\n                count += 1\n    return count\n\nn = 5\nprint(\"The count of binary sequences of length 2n where sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2**n):\n        first_half = bin(i)[2:][-2*n:]\n        last_half = bin(i)[2:][-2*n:]\n        if int(first_half, 2) == int(last_half, 2):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize an empty list to store the count of binary sequences\n    count_list = []\n    # Initialize two variables to store the sum of first n bits and last n bits\n    first_sum = 0\n    last_sum = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Get the binary representation of the current sequence\n        bin_seq = bin(i)[2:]\n        # Convert the binary representation into a list of bits\n        bit_list = [int(bit) for bit in bin_seq]\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum(bit_list[:n]) == sum(bit_list[-n:]):\n            # If they are, add the count of the sequence to the count list\n            count_list.append(1)\n    # Return the count of all binary sequences\n    return count_list"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Check if n is even\n    if n % 2 == 0:\n        return 0\n\n    # Initialize sum variables\n    total_sum = 0\n    temp_sum = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # Convert binary sequence to integer\n        binary_num = bin(i)[2:]\n        # Convert integer back to binary sequence\n        binary_num = int(binary_num, 2)\n\n        # Add current binary sequence to sum variables\n        total_sum += binary_num\n        temp_sum = 0\n\n        # Iterate through all possible binary sequences of length 2n\n        for j in range(2 ** n):\n            # Convert binary sequence to integer\n            binary_num = bin(j)[2:]\n            # Convert integer back to binary sequence\n            binary_num = int(binary_num, 2)\n\n            # Add current binary sequence to sum variables\n            temp_sum += binary_num\n\n            # If total sum and temp sum are equal, then add count of current binary sequence to result\n            if temp_sum == total_sum:\n                return i\n\n    # If no binary sequence is found, return 0\n    return 0"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            sum_first_n = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n            sum_last_n = sum([int(digit) for digit in bin(j)[2:].zfill(n)])\n            if sum_first_n == sum_last_n:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    def binary_seq(n):\n        return [bin(i)[2:].zfill(n) for i in range(2**n)]\n    \n    def is_same_sum(seq):\n        s1 = sum([int(bit) for bit in seq[:n]])\n        s2 = sum([int(bit) for bit in seq[-n:]])\n        return s1 == s2\n    \n    count = 0\n    for seq in binary_seq(n):\n        if is_same_sum(seq):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    This function takes a positive integer n and returns the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits.\n    '''\n\n    # Initialize an empty dictionary to store the count of sequences\n    count = {}\n\n    # Initialize the first n bits as 0\n    first_bits = '0'*n\n\n    # Initialize the last n bits as 0\n    last_bits = '0'*n\n\n    # Initialize the sum of first n bits as 0\n    first_sum = 0\n\n    # Initialize the sum of last n bits as 0\n    last_sum = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n\n        # Convert the current binary sequence to string\n        current_seq = bin(i)[2:].zfill(n)\n\n        # Calculate the sum of the first n bits of the current sequence\n        current_sum = int(first_bits+current_seq, 2)\n\n        # Calculate the sum of the last n bits of the current sequence\n        last_sum = int(last_bits+current_seq, 2)\n\n        # If the sum of the first n bits is same as the sum of the last n bits, increment the count of the current sequence\n        if current_sum == last_sum:\n            if current_seq in count:\n                count[current_seq] += 1\n            else:\n                count[current_seq] = 1\n\n        # Shift the first and last bits of the current sequence to the left\n        first_bits = current_seq[1:]\n        last_bits = current_seq[:-1]\n\n    # Return the count of all sequences\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n        else:\n            depth += 1\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize a variable to keep track of the depth of the dictionary\n    depth = 0\n    # loop through each key in the dictionary\n    for key in d:\n        # check if the value associated with the key is a dictionary\n        if isinstance(d[key], dict):\n            # increment the depth by 1 and recurse on the sub-dictionary\n            depth += 1\n            depth = dict_depth(d[key])\n        # if the value associated with the key is not a dictionary, increment the depth by 1\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n            dict_depth(value)\n            current_depth -= 1\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    if current_depth > max_depth:\n                        max_depth = current_depth\n                    dict_depth(item)\n                    current_depth -= 1\n    \n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter\n    depth = 0\n    # Iterate through the dictionary\n    for _ in d:\n        # Increment the depth counter by 1\n        depth += 1\n        # If the value of the key is a dictionary, call the function recursively\n        if isinstance(d[_], dict):\n            # Recursively call the function\n            depth += dict_depth(d[_])\n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])) + 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n            current_depth -= 1\n        else:\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n            current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n\n    # Recursively traverse the dictionary and increment the depth by 1 for each dictionary\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            count += 1 + dict_depth(value)\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a list of rotations, and an index.\n    It returns the element at the specified index after performing the specified number of rotations.\n    '''\n    # Loop through the rotations and ranges lists and get the rotation and range values\n    for i in range(len(ranges)):\n        if index < ranges[i]:\n            rotation = i\n            break\n    else:\n        rotation = len(ranges) - 1\n    rotation_range = ranges[rotation]\n    # Calculate the number of rotations that need to be performed\n    num_rotations = (index - rotation_range) // 2\n    # Perform the specified number of rotations and return the element at the specified index\n    result = arr[(rotation + num_rotations) % len(arr)]\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: The original array\n    :type arr: list\n    :param ranges: The rotations of the array\n    :type ranges: list\n    :param rotations: The number of rotations to perform\n    :type rotations: int\n    :param index: The index to find the element at\n    :type index: int\n    :return: The element at the given index after rotating the array\n    :rtype: int\n    \"\"\"\n    if index < 0 or index >= len(arr):\n        return \"Invalid index\"\n\n    # Find the element to be rotated\n    element = arr[index]\n\n    # Perform the rotations\n    for i in range(rotations):\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            temp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = temp\n            start += 1\n            end -= 1\n\n    # Find the index of the element after rotating\n    for i, elem in enumerate(arr):\n        if elem == element:\n            rotated_index = i\n            break\n\n    # Find the element at the rotated index\n    rotated_element = arr[rotated_index]\n\n    # Find the element at the final index\n    final_index = (index + rotated_index) % len(arr)\n    final_element = arr[final_index]\n\n    # Determine which element to return\n    if final_element == element:\n        return final_element\n    elif rotated_element == element:\n        return rotated_element\n    else:\n        return \"Element not found\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    curr_index = index % len(arr)\n    curr_range = ranges[curr_index]\n    curr_rotation = rotations[curr_index]\n\n    # Find the element at the given index after rotations\n    while curr_range <= rotations[-1]:\n        curr_range += curr_rotation\n\n    # Calculate the index of the element\n    next_index = curr_index + curr_range\n\n    # Return the element at the calculated index\n    return arr[next_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # initialize the starting point\n    start_point = 0\n    \n    # loop through the rotations\n    for i in range(rotations):\n        \n        # calculate the end point after the rotation\n        end_point = (index - start_point) % len(arr)\n        \n        # calculate the starting point after the rotation\n        start_point = (start_point + 1) % len(arr)\n        \n        # calculate the index of the element at the end point after the rotation\n        result_index = (end_point + index - start_point) % len(arr)\n        \n        # find the element at the result index\n        result = arr[result_index]\n        \n        # print the element at the result index\n        print(f\"Element at index {result_index} after {rotations - i - 1} rotations: {result}\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a number of rotations as input.\n    It returns the element at the given index after rotations.\n\n    Args:\n    arr (list): The array to be rotated.\n    ranges (list): A list of ranges representing the rotations of the array.\n    rotations (int): The number of rotations that need to be performed on the array.\n    index (int): The index for which the element is to be found after rotations.\n\n    Returns:\n    The element at the given index after rotations.\n\n    \"\"\"\n\n    # Helper function to rotate the array.\n    def rotate_array(arr, rotations):\n        \"\"\"\n        This function takes an array and a number of rotations as input.\n        It returns the rotated array.\n\n        Args:\n        arr (list): The array to be rotated.\n        rotations (int): The number of rotations that need to be performed on the array.\n\n        Returns:\n        The rotated array.\n\n        \"\"\"\n        n = len(arr)\n        for i in range(rotations):\n            for j in range(n // 2):\n                arr[j], arr[n - j - 1] = arr[n - j - 1], arr[j]\n        return arr\n\n    # Helper function to find the element at a given index after rotations.\n    def find_element_after_rotations(arr, index, ranges):\n        \"\"\"\n        This function takes an array, an index, and a list of ranges as input.\n        It returns the element at the given index after rotations.\n\n        Args:\n        arr (list): The array to be rotated.\n        index (int): The index for which the element is to be found after rotations.\n        ranges (list): A list of ranges representing the rotations of the array.\n\n        Returns:\n        The element at the given index after rotations.\n\n        \"\"\"\n        n = len(arr)\n        for i in range(n):\n            # Check if the element is present in the range.\n            for range_start, range_end in ranges:\n                if i >= range_start and i < range_end:\n                    return arr[i]\n        # Element is not present in any range.\n        return None\n\n    # Perform the required rotations on the array.\n    arr = rotate_array(arr, rotations)\n    # Find the element at the given index after rotations.\n    element = find_element_after_rotations(arr, index, ranges)\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a number of rotations, and an index as input and returns the element at the given index after the number of rotations.\n\n    Args:\n    arr: The input array.\n    ranges: A list of ranges representing the rotations.\n    rotations: The number of rotations to perform.\n    index: The index of the element to be found after rotations.\n\n    Returns:\n    The element at the given index after the number of rotations.\n    '''\n\n    # Initialize the result variable to None\n    result = None\n\n    # Iterate through the list of ranges\n    for i in range(len(ranges)):\n        # If the current range is greater than or equal to the number of rotations, break out of the loop\n        if i >= rotations:\n            break\n        # If the current range is less than the number of rotations, apply the range and update the result variable\n        else:\n            result = arr[(i+ranges[i])%len(arr)]\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges for each rotation, and the number of rotations.\n    It then finds the element at the given index after rotating the array.\n\n    Args:\n        arr (list): An array of integers.\n        ranges (list): A list of tuples containing the start and end indices of each rotation.\n        rotations (int): The number of rotations to perform.\n        index (int): The index at which to find the element after rotating the array.\n\n    Returns:\n        int: The element at the given index after rotating the array.\n    \"\"\"\n\n    # If the number of rotations is 0, return the element at the index\n    if rotations == 0:\n        return arr[index]\n\n    # Initialize a new array to store the rotated elements\n    rotated_arr = []\n\n    # Loop through each range\n    for i in range(rotations):\n        # Get the range of indices for this rotation\n        start, end = ranges[i]\n\n        # Get the sublist of the original array between the start and end indices\n        sublist = arr[start:end]\n\n        # Rotate the sublist by the current index\n        sublist = sublist[index:] + sublist[:index]\n\n        # Add the rotated sublist to the new array\n        rotated_arr.extend(sublist)\n\n    # Return the element at the given index after rotating the array\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, list of ranges, and number of rotations. It then finds the element at the given index after rotations.\n\n    Args:\n    arr: The array of integers to be rotated.\n    ranges: A list of tuples containing the starting and ending index of each range.\n    rotations: The number of rotations to be performed.\n    index: The index to be found after the rotations.\n\n    Returns:\n    The element at the given index after the rotations.\n    \"\"\"\n\n    # Calculate the total number of rotations to be performed\n    total_rotations = rotations + 1\n\n    # Calculate the final index after the rotations\n    final_index = ((index % (len(arr))) + total_rotations) % len(arr)\n\n    # Calculate the element at the final index\n    element = arr[final_index]\n\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize a variable to store the element found\n    element = None\n\n    # Loop through the rotations and update the element found at each iteration\n    for rotation in rotations:\n        # Shift the array to the right by the given rotation\n        arr = arr[rotation:] + arr[:rotation]\n\n        # Check if the current element is the target index\n        if index in range(len(arr)):\n            element = arr[index]\n            break\n\n    # Return the element found\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at the given index\n    element = arr[index]\n\n    # Perform the required number of rotations\n    for _ in range(rotations):\n        # Find the range to rotate and the rotation key\n        start, end = ranges[index]\n        key = end - start + 1\n\n        # Perform the rotation\n        if key == 1:\n            arr[index], arr[end] = arr[end], arr[index]\n        else:\n            temp = arr[start]\n            for i in range(start, end):\n                arr[i] = arr[i + 1]\n            arr[end] = temp\n\n    # Return the element at the given index after rotating\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    match = re.search(pattern, words[0])\n    if match:\n        return words[match.start():match.end()]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.match('p', words[i][0]):\n            return words[i:i+2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'\\b\\w*p\\w*\\b'\n\n    # Use re.findall() to find all matches in the input list of words\n    matches = re.findall(pattern,''.join(words))\n\n    # If there are at least two matches, return the two words\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is 'p'\n        if word[0].lower() == 'p':\n            # Split the word into words with spaces\n            words_list = word.split()\n            # Check if there are exactly two words in the list\n            if len(words_list) == 2:\n                # Return the two words in the list\n                return words_list"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) > 1:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp]\\w+\\b', words)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp][^Pp]*\\b',''.join(words), re.IGNORECASE)\n    return p_words"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return 0\n    if index == n:\n        return 0\n    \n    if k > index:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if k == index:\n        return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if k < index:\n        return max_sum_increasing_subseq(a, n, index, k - 1)\n    \n    # kth element is between index and index-1\n    return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index, k - 1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    if index == 0:\n        return max(a[0], max_sum_increasing_subseq(a, n, 1, k))\n\n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[k]:\n            continue\n        else:\n            current_sum = a[i] + max_sum_increasing_subseq(a, n, i, k)\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables to store the maximum sum, current subsequence and its index\n    max_sum = float('-inf')\n    current_subseq = []\n    current_index = index - 1\n    \n    # Iterate over all possible starting indices\n    for i in range(index, n):\n        # If the i-th element is greater than or equal to k, update the current subsequence\n        if a[i] >= k:\n            current_subseq = [a[i]]\n            current_index = i\n        else:\n            # If the i-th element is less than k, update the current subsequence and remove the largest element from it\n            if len(current_subseq) > 1:\n                current_subseq.remove(max(current_subseq))\n            # Add the current element to the current subsequence\n            current_subseq.append(a[i])\n        \n        # Calculate the sum of the current subsequence\n        subseq_sum = sum(current_subseq)\n        \n        # If the sum is greater than the maximum sum, update the maximum sum, subsequence and index\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n            current_subseq_copy = list(current_subseq)\n            \n    # Return the maximum sum and subsequence\n    return max_sum, current_subseq_copy"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max sum and current sum to negative infinity\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array starting from 0 to index-1\n    for i in range(index):\n        # If the current element is greater than k, add it to the current sum and continue to next element\n        if a[i] > k:\n            current_sum += a[i]\n            continue\n        \n        # Otherwise, add the current element to the max sum and subtract the previous element from the current sum\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    \n    # Add the last element to the current sum and max sum\n    current_sum += a[index-1]\n    max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_subseq = []\n\n    # Traverse through all possible prefixes\n    for i in range(index, n):\n        # Check if current prefix can be extended by kth element\n        if i + 1 == k:\n            current_sum += a[i]\n        else:\n            current_sum = max(a[i], current_sum)\n\n        # Update max_sum and current_subseq\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_subseq = [a[i]]\n        elif current_sum == max_sum:\n            current_subseq.append(a[i])\n\n    # Check if there is any valid subsequence\n    if not current_subseq:\n        return float('-inf')\n\n    # Find the maximum sum of increasing subsequence\n    max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum and current subsequence\n    return max_sum, current_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    if index == k:\n        return max(a[0:k] + [a[k]])\n    if index > k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            continue\n        if i < k:\n            dp[i] = dp[i - 1] + a[i]\n        elif a[i] < a[index]:\n            dp[i] = max(dp[i - 1], dp[i - 2] + a[i])\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] + a[i])\n    return dp[n - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n:\n        return 0\n\n    # Initialize the variables\n    current_sum = max_sum = a[index]\n    current_start = current_end = index\n\n    # Find the maximum sum of increasing subsequence from prefix until the kth element\n    for i in range(index + 1, n):\n        if a[i] >= a[current_start]:\n            current_sum += a[i]\n            current_end = i\n        else:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = a[i] - a[current_start]\n            current_start = i\n\n    # Add the sum of increasing subsequence from prefix until the kth element\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    if index == 0:\n        return a[index]\n    \n    if index == 1:\n        if a[index] <= a[0] and a[index] <= a[1]:\n            return a[index]\n        else:\n            return max(a[0], a[1])\n    \n    if index == 2:\n        if a[index] <= a[0] and a[index] <= a[1]:\n            return a[index]\n        elif a[index] <= a[1] and a[index] <= a[2]:\n            return a[index]\n        else:\n            return max(a[0], a[1], a[2])\n    \n    if index == 3:\n        if a[index] <= a[0] and a[index] <= a[1]:\n            return a[index]\n        elif a[index] <= a[1] and a[index] <= a[2]:\n            return a[index]\n        elif a[index] <= a[2] and a[index] <= a[3]:\n            return a[index]\n        else:\n            return max(a[0], a[1], a[2], a[3])\n    \n    if a[index] >= a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize variables\n    dp = [0] * (k + 1)\n    prefix_sum = 0\n    max_sum = 0\n\n    # fill the dp array using the formula\n    for i in range(1, n + 1):\n        if i < index + 1:\n            dp[i] = dp[i - 1] + a[i - 1]\n        else:\n            dp[i] = max(dp[i - 1], prefix_sum + a[i - 1] - a[i - 2])\n            prefix_sum = dp[i - 1]\n\n    # find the maximum sum of increasing subsequence\n    for i in range(k + 1):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    max_sum = 0\n\n    for i in range(index, n):\n        if i == k:\n            max_sum = max(max_sum, a[i])\n        else:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n    - tuplex: A tuple that contains n elements.\n    - m: The number of elements to keep in the colon.\n    - n: The total number of elements in the tuple.\n\n    Returns:\n    - A colon of the tuple, i.e. a tuple containing only the first m elements of tuplex.\n\n    Raises:\n    - TypeError: If the input is not a tuple.\n    - ValueError: If the length of the input tuple is less than n.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    if len(tuplex) < n:\n        raise ValueError(\"Length of input tuple must be greater than or equal to n.\")\n\n    if m > n:\n        m = n\n\n    return tuple(deepcopy(tuplex)[:m])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple([deepcopy(tuplex[i*m+j]) for j in range(m)])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple with m elements\n    new_tuplex = (tuplex[0],) * m\n    # append the remaining elements to the new tuple\n    for i in range(m,n):\n        new_tuplex = new_tuplex + (tuplex[i],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(n):\n        col.append(deepcopy(tuplex[i]))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == m:\n        for i in range(m):\n            if i == n-1:\n                yield tuplex[i]\n            else:\n                yield deepcopy(tuplex[i])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Split the new tuple into m segments\n    segments = [new_tuplex[i::m] for i in range(m)]\n    # Join the segments into a colon-separated string\n    colon_string = ':'.join([''.join(x) for x in segments])\n    # Return the colon-separated string\n    return colon_string"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes in a tuple of tuples, and returns a colon of the nth element of each tuple in the tuple.\n    '''\n    colons = []\n    for i in range(len(tuplex)):\n        colons.append(tuplex[i][n])\n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # Check if the m and n are within the range of the tuple\n    if m > length or n > length:\n        return 'Invalid input'\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the tuple and add the elements between m and n inclusive to the result list\n    for i in range(m, n + 1):\n        result.append(tuplex[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # Check if the indices are valid\n    if m >= length or m < 0 or n >= length or n < 0:\n        return None\n\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the indices\n    row_start = m\n    row_end = n\n    col_start = 0\n    col_end = length - 1\n\n    # Get the sub-tuples\n    sub_tuples = []\n    for i in range(row_start, row_end + 1):\n        sub_tuples.append(new_tuplex[i][col_start:col_end+1])\n\n    # Combine the sub-tuples into a single tuple\n    new_tuplex[row_start][col_start:col_end+1] = tuple(sub_tuples)\n\n    # Return the modified tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= m:\n        raise ValueError(\"The input tuple must have length equal to m\")\n    if n < 0:\n        raise ValueError(\"The value of n must be non-negative\")\n    colon = ()\n    for i in range(m):\n        if i >= n:\n            break\n        colon += (tuplex[i],)\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the largest N elements of nums1 and nums2\n    largest_nums1 = nums1[:N]\n    largest_nums2 = nums2[:N]\n\n    # Initialize a variable to store the largest product\n    max_product = 0\n\n    # Iterate through the combinations of the two lists\n    for i in range(len(largest_nums1)):\n        for j in range(len(largest_nums2)):\n            # Calculate the product of the two largest elements and add it to the max_product\n            max_product += largest_nums1[i] * largest_nums2[j]\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of both lists is equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the requested number of products\n    for _ in range(N):\n        # Select a factor from each list\n        factor1, factor2 = nums1[0], nums2[0]\n        \n        # Check if the factor is larger than the other\n        if factor1 > factor2:\n            result.append(factor1)\n        else:\n            result.append(factor2)\n        \n        # Update the factors by removing the selected factor\n        nums1 = nums1[1:]\n        nums2 = nums2[1:]\n        \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to store the maximum and minimum values\n    max1 = nums1[0]\n    min1 = nums1[0]\n    max2 = nums2[0]\n    min2 = nums2[0]\n    \n    # Loop through each element in the lists and update the maximum and minimum values\n    for num in nums1:\n        if num > max1:\n            max1 = num\n        elif num < min1:\n            min1 = num\n    \n    for num in nums2:\n        if num > max2:\n            max2 = num\n        elif num < min2:\n            min2 = num\n    \n    # Calculate the product of the maximum and minimum values\n    product = max1 * min2\n    \n    # Initialize variables to store the largest products\n    largest1 = product\n    largest2 = product\n    \n    # Loop through the remaining elements in the lists and calculate the largest products\n    for i in range(1, N):\n        # Select a factor from nums1 and nums2 at random\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n        \n        # Calculate the product of the selected factor and the remaining factors\n        product = factor1 * factor2\n        \n        # Update the largest products if the product is larger\n        if product > largest1:\n            largest1 = product\n        if product > largest2:\n            largest2 = product\n    \n    # Return the largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two input lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Initialize the largest product and its index\n    max_product = 0\n    max_product_index = 0\n\n    # Iterate through the N largest indices of the two sorted lists\n    for i in range(N):\n\n        # Calculate the current product of the i-th largest number from nums1 and nums2\n        current_product = nums1[i] * nums2[i]\n\n        # If the current product is greater than the current largest product, update the largest product and its index\n        if current_product > max_product:\n            max_product = current_product\n            max_product_index = i\n\n    # Return the largest product and its index\n    return max_product, max_product_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n    largest_products = []\n    i = 0\n    j = 0\n    for _ in range(N):\n        product1 = nums1_sorted[i] * nums2_sorted[j]\n        product2 = nums1_sorted[j] * nums2_sorted[i]\n        largest_products.append(max(product1, product2))\n        if nums1_sorted[i] == nums1_sorted[i+1]:\n            i += 1\n        else:\n            i = 0\n        if nums2_sorted[j] == nums2_sorted[j+1]:\n            j += 1\n        else:\n            j = 0\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the products\n    max1 = 1\n    max2 = 1\n    max3 = 1\n\n    # Iterate through the sorted lists\n    for i in range(N):\n        # Calculate the product of the first N factors of nums1 and the first N factors of nums2\n        p1 = nums1[0] * nums2[0] * nums1[1] * nums2[1] * nums1[2] * nums2[2] * nums1[3] * nums2[3] * nums1[4] * nums2[4]\n        p2 = nums1[0] * nums2[0] * nums1[1] * nums2[1] * nums1[2] * nums2[2] * nums1[3] * nums2[3] * nums1[4] * nums2[4]\n        p3 = nums1[0] * nums2[0] * nums1[1] * nums2[1] * nums1[2] * nums2[2] * nums1[3] * nums2[3] * nums1[4] * nums2[4]\n\n        # Update the variables to store the largest products\n        if p1 > max1:\n            max3 = max2\n            max2 = max1\n            max1 = p1\n        elif p2 > max2:\n            max3 = max2\n            max2 = p2\n        elif p3 > max3:\n            max3 = p3\n\n    return max1, max2, max3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    i = 0\n    j = 0\n    while len(largest_products) < N:\n        largest_products.append(nums1[i] * nums2[j])\n        i += 1\n        if i == len(nums1):\n            j += 1\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize variables\n    largest_products = []\n    current_product = []\n\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Loop through the sorted lists\n    for i in range(len(nums1)):\n        current_product.append(nums1[i] * nums2[i])\n\n        # If the current product is greater than or equal to the Nth largest product, add it to the list\n        if current_product[i] >= largest_products[-1]:\n            largest_products.append(current_product[i])\n\n        # If the length of the list is equal to N, add the largest product to the result list\n        if len(largest_products) == N:\n            break\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product of any two elements in the two lists\n    max_product = max(nums1[0] * nums2[0], nums1[N-1] * nums2[N-1])\n    # Initialize two variables to keep track of the two largest products of the two factors\n    max_product1 = max_product2 = max_product\n    \n    # Iterate through the remaining elements of the two lists, selecting a factor from each list\n    for i in range(1, N-1):\n        # Calculate the product of the two largest factors\n        product = max_product1 * nums1[i] * nums2[i]\n        # Update the variables to keep track of the two largest products of the two factors\n        if product > max_product2:\n            max_product2 = max_product1\n            max_product1 = product\n        elif product > max_product1:\n            max_product1 = product\n    \n    # Return the two largest products and the total number of products found\n    return max_product1, max_product2, N - (max_product1 + max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize the largest products\n    largest_products = []\n    # Iterate over the specified number of products\n    for _ in range(N):\n        # Find the largest product of nums1 and nums2\n        largest_product = max(nums1[-1] * nums2[-1], nums2[-1] * nums1[-1])\n        # Add the largest product to the list\n        largest_products.append(largest_product)\n        # Remove the largest product from the lists\n        nums1.pop()\n        nums2.pop()\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Find the maximum of two numbers using the `max` function.\n\n    Parameters:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    int: the maximum of the two numbers\n    \"\"\"\n    return max(a,b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Split the string into a list of characters\n    char_list = list(str1)\n    # Convert the list of characters into a tuple of characters\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(str1)\n    # Convert the list of characters to a tuple of characters\n    return tuple(chars)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n\n    # convert string to list of characters\n    lst = list(str1)\n\n    # convert list of characters to tuple of characters\n    tup = tuple(lst)\n\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n    str1 (str): A string.\n\n    Returns:\n    tuple: A tuple of characters.\n\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n and returns an integer that has the leftmost unset bit set to 1.\n    \n    Example:\n    n = 13\n    set_left_most_unset_bit(n) returns 14\n    \n    This is because the binary representation of 13 in base 2 is:\n    00001101\n    \n    The leftmost unset bit is at position 3, which is 1, so we can set it to 1:\n    00001110\n    \n    So the new binary representation of 13 in base 2 is:\n    00001110\n    \"\"\"\n    \n    # Convert the input number to binary and find the index of the leftmost unset bit\n    binary_str = bin(n)[2:]\n    leftmost_unset_bit = binary_str.find('1')\n    \n    # If the leftmost unset bit is already set to 1, return n (no need to set it again)\n    if leftmost_unset_bit == len(binary_str) - 1:\n        return n\n    \n    # Convert the input number to binary and set the leftmost unset bit to 1\n    binary_str = binary_str[:leftmost_unset_bit] + '1' + binary_str[leftmost_unset_bit+1:]\n    new_n = int(binary_str, 2)\n    \n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Check if the binary representation of n has only one bit set\n    if bin(n).count('1') == 1:\n        # If n is 1, set the left most unset bit to 1\n        return 1 << (n.bit_length() - 1)\n\n    # If n is not 1, set the left most unset bit to 0\n    return 0"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index variable to 0\n    i = 0\n    \n    # Iterate over each bit of the binary representation of n\n    while n!= 0:\n        # Check if the current bit is set or not\n        if n & 1 == 1:\n            # Set the current bit to 0\n            n = n ^ (1 << i)\n        # Increment the index variable\n        i = i + 1\n        # Right shift the binary representation of n by 1\n        n = n >> 1\n    \n    # Return the modified binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    # Check if the number is negative\n    if n < 0:\n        n = n & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  # Convert to unsigned integer\n\n    # Convert the number to binary and then find the leftmost unset bit\n    binary_str = bin(n)[2:]  # Remove the '0b' prefix from the binary string\n    leftmost_unset_bit = len(binary_str) - binary_str.index('1')\n\n    # Set the leftmost unset bit to 1\n    n = n | (1 << leftmost_unset_bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes a positive integer n and sets the left most unset bit in n.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    \n    if n == 0:\n        return 1\n    \n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and sets the left most unset bit to 1.\n    \"\"\"\n    mask = ~(1 << 31)\n    while not (n & mask):\n        mask >>= 1\n    n |= mask\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit of a given integer n.\n    '''\n    # Convert the integer to binary representation and reverse the string\n    binary_str = bin(n)[::-1]\n    # Find the index of the first unset bit in the binary string\n    unset_bit_index = len(binary_str) - binary_str.index('0')\n    # Set the left most unset bit to 1\n    left_most_unset_bit = 1 << unset_bit_index\n    # Return the modified integer\n    return n | left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return n * 2"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a binary number.\n    \"\"\"\n    # Initialize the binary representation of n\n    binary_repr = bin(n)[2:]\n    \n    # Iterate over the binary representation of n\n    for i in range(len(binary_repr)):\n        # If the bit at position i is already set, we don't need to do anything\n        if binary_repr[i] == '1':\n            break\n        \n        # Otherwise, we set the bit at position i to 1\n        else:\n            binary_repr = binary_repr[:i] + '1' + binary_repr[i+1:]\n    \n    # Convert the binary representation back to an integer\n    return int(binary_repr, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a mask of all ones\n    mask = 1 << n\n    \n    # Iterate over each bit in the number\n    for bit in range(n):\n        # If the bit is 0, set it to 1\n        if (n & (1 << bit)) == 0:\n            n |= (1 << bit)\n            break\n        # If the bit is 1, shift the mask to the left and try again\n        else:\n            mask <<= 1\n            n |= mask\n            \n    # Return the modified number\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    return math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius r and height h, and returns the volume of the cone.\n    '''\n    # Calculate the volume using the formula V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * r ** 2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * (r ** 2)\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments, r and h, which represent the radius and height of the cone respectively.\n    The function then calculates the volume of the cone using the formula: V = (1/3) * \u03c0 * r^2 * h\n    '''\n\n    V = (1/3) * math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*r*h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # Initialize the variable to keep track of the highest power of 2 found so far\n    highest_power_of_2 = 1\n    \n    # Loop through all the numbers from 2 to n\n    for num in range(2, n + 1):\n        # If the current number is a power of 2, update the highest power of 2 found so far\n        if num & (num - 1) == 0:\n            highest_power_of_2 = num\n            \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize highest power of 2 to 1\n    highest = 1\n    \n    # Loop through powers of 2 until the square of the highest power of 2 is greater than n\n    while highest * highest <= n:\n        # Update the highest power of 2\n        highest *= 2\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # find the highest power of 2 that is less than or equal to n\n    highest = 1\n    while highest < n:\n        highest <<= 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    highest_power = 1\n    \n    while n >= highest_power:\n        highest_power *= 2\n    \n    return highest_power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the highest power of 2\n    highest = 1\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, update the highest variable\n        if i & (i-1) == 0:\n            highest = i\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 0:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as input and returns then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1: \n        return n\n    else: \n        a, b = 0, 2\n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize the first two numbers in the sequence\n    lucas_num = [2]\n    prev_lucas_num = 1\n\n    # Loop through the remaining numbers in the sequence\n    for i in range(2, n+1):\n\n        # Calculate the next number in the sequence\n        next_lucas_num = lucas_num[i-1] + prev_lucas_num\n\n        # Add the next number to the sequence\n        lucas_num.append(next_lucas_num)\n\n        # Update the previous number to be used in the next iteration\n        prev_lucas_num = lucas_num[i]\n\n    # Return the nth number in the sequence\n    return lucas_num[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list and apply the format string to it\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create an empty dictionary to store the result\n    result = {}\n\n    # loop over the lists\n    for i in range(len(l1)):\n        # create a new key for the current list\n        key = l1[i]\n        # add the new key to the result dictionary\n        result[key] = {}\n\n        # loop over the second list and add the corresponding values to the new key\n        for j in range(len(l2)):\n            result[key][l2[j]] = l3[i*len(l2) + j]\n\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    :param l1: a list of dictionaries, each containing values for keys a, b, and c\n    :param l2: a list of tuples, each containing values for keys x and y\n    :param l3: a list of lists, each containing values for keys d, e, and f\n    :return: a nested dictionary with keys a, b, c, x, y, d, e, and f as keys and\n             lists of dictionaries as values, where each list represents\n             a set of dictionaries that share the same keys as the corresponding\n             dictionary in the original list.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # loop through each list and add the values for keys a, b, and c to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]['a']] = [l1[i]]\n\n    # loop through each list and add the values for keys x and y to the nested dictionary\n    for i in range(len(l2)):\n        nested_dict[l2[i]['x']] = l2[i]['y']\n\n    # loop through each list and add the values for keys d, e, and f to the nested dictionary\n    for i in range(len(l3)):\n        for j in range(len(l3[i])):\n            nested_dict[l3[i][j]['d']] = [l3[i][j]]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            result[l1[i]] = {'name': l2[j], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(list1, list2, list3):\n    \"\"\"\n    Convert a list of lists to a nested dictionary.\n\n    Parameters:\n    list1: A list of strings\n    list2: A list of integers\n    list3: A list of floats\n\n    Returns:\n    A nested dictionary where each key corresponds to a value in the input lists.\n    \"\"\"\n    result = {}\n    for i in range(len(list1)):\n        result[list1[i]] = {}\n        result[list1[i]][list2[i]] = list3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create an empty dictionary to store the output\n    result = {}\n\n    # loop through the lists and add each element to the result dictionary\n    for item in l1:\n        result[item] = {}\n\n    for item in l2:\n        result[item][l3.pop(0)] = l3.pop(0)\n\n    for item in l3:\n        result[item][l3.pop(0)] = l3.pop(0)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] not in nested_dict:\n                    nested_dict[l1[i]] = {}\n                if l2[j] not in nested_dict[l1[i]]:\n                    nested_dict[l1[i]][l2[j]] = {}\n                nested_dict[l1[i]][l2[j]][l3[k]] = 0\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert l1 to dictionary\n    d1 = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        d1[key] = value\n\n    # Convert l3 to dictionary\n    d3 = {}\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l3[i]\n        d3[key] = value\n\n    # Combine the two dictionaries\n    d = {}\n    for key in d1:\n        d[key] = d1[key]\n    for key in d3:\n        d[key] = d3[key]\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    \n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionaries\n    nested_dict = {}\n    \n    # loop through the first list of values\n    for value in l1:\n        # create an empty dictionary to store the nested values\n        nested_dict[value] = {}\n        \n        # loop through the second list of values\n        for value2 in l2:\n            # loop through the third list of values\n            for value3 in l3:\n                # add the nested value to the nested dictionary\n                nested_dict[value][value2][value3] = value"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    # Calculate the sum of numbers from 1 to n\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    \n    # Calculate the sum of numbers from 1 to n/2\n    n_2 = n/2\n    half_sum = 0\n    for i in range(1, n_2+1):\n        half_sum += i\n    \n    # Calculate the sum of numbers from 1 to n/3\n    n_3 = n/3\n    third_sum = 0\n    for i in range(1, n_3+1):\n        third_sum += i\n    \n    # Calculate the sum of numbers from 1 to n/4\n    n_4 = n/4\n    fourth_sum = 0\n    for i in range(1, n_4+1):\n        fourth_sum += i\n    \n    # Calculate the sum of numbers from 1 to n/5\n    n_5 = n/5\n    fifth_sum = 0\n    for i in range(1, n_5+1):\n        fifth_sum += i\n    \n    # Find the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum = max(half_sum + third_sum + fourth_sum + fifth_sum, n)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) for n =\", n, \"is\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        return n * (n + 1) // 2\n\n    def helper(n, max_sum):\n        if n <= 1:\n            return max_sum\n\n        left_sum = helper(n // 2, max_sum)\n        right_sum = helper(n // 3, max_sum)\n        mid_sum = f(n)\n\n        return max(left_sum, right_sum, mid_sum)\n\n    return helper(n, float('-inf'))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 15\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result_list = [item]\n        elif len(item) == max_length:\n            result_list.append(item)\n\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    if len(input_list) == 1:\n        return input_list\n    else:\n        return max(input_list, key=len)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique values\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the set is empty\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty, which means there are no duplicates\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Given a string, return the index of the first non-repeating character.\n    If all characters in the string are repeating, return -1.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return i\n    \n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to a list of characters\n    chars = list(str1)\n    # create a dictionary to store the count of each character\n    char_count = {}\n    # iterate through the characters in the string\n    for char in chars:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment its count\n            char_count[char] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    # iterate through the characters in the string again\n    for char in chars:\n        # check if the character is already in the dictionary\n        if char_count[char] == 1:\n            # if it is, return its index\n            return chars.index(char)\n    # if no non-repeating character is found, return -1\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            if len(char_set) == len(str1):\n                return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the character and its frequency\n    char_freq = {}\n    \n    # iterate through the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_freq:\n            # increment its frequency by 1\n            char_freq[char] += 1\n        else:\n            # add the character and its frequency to the dictionary\n            char_freq[char] = 1\n    \n    # iterate through the dictionary and find the first non-repeated character\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    \n    # if all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}  # dictionary to store the count of each character in the string\n    for char in str1:\n        if char in char_count:  # if the character has already been counted\n            char_count[char] += 1  # increment its count\n        else:\n            char_count[char] = 1  # if the character has not been counted, set its count to 1\n    \n    for char in str1:\n        if char_count[char] == 1:  # if the character has only one occurrence in the string\n            return char  # return the character\n    \n    return None  # if no non-repeated character is found"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If all characters have a count of 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers as input and returns the median of those numbers.\n    The median is the middle number in a sorted list of the three input numbers.\n    If the input numbers are in ascending order, then the median is the average of the two middle numbers.\n    If the input numbers are in descending order, then the median is the middle number.\n    '''\n    sorted_list = sorted([a, b, c])  # Sort the three input numbers in ascending order\n    middle_index = len(sorted_list) // 2  # Find the middle index of the sorted list\n    \n    if sorted_list[middle_index - 1] == sorted_list[middle_index]:  # If the middle number is equal to either of the other numbers, then it's the median\n        return sorted_list[middle_index]\n    \n    if middle_index % 2 == 0:  # If the middle index is even\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:  # If the middle index is odd\n        return sorted_list[middle_index]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n\n    # calculate the median\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2 - 1] + num_list[len(num_list)//2]) / 2\n    else:\n        median = num_list[len(num_list)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    # Calculate the median of the three numbers\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    # Return the median\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if sorted_numbers[len(sorted_numbers) // 2] == a:\n        median = b\n    elif sorted_numbers[len(sorted_numbers) // 2] == b:\n        median = a\n    else:\n        median = c\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the index of the middle number\n    mid_index = len(sorted_numbers) // 2\n\n    # if the length of the sorted array is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[mid_index]\n\n    # if the length of the sorted array is even, calculate the average of the two middle numbers\n    else:\n        mid1, mid2 = sorted_numbers[mid_index-1], sorted_numbers[mid_index]\n        return (mid1 + mid2) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2-1] + numbers[n//2])/2\n    else:\n        return numbers[n//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    median = sum(sorted_numbers[1:3]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    a_greater = a > b and a > c\n    b_greater = b > a and b > c\n    c_greater = c > a and c > b\n\n    if a_greater and b_greater and c_greater:\n        return a\n    elif b_greater and a_greater and c_greater:\n        return b\n    elif c_greater and a_greater and b_greater:\n        return c\n    else:\n        return (a + b + c) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(sum(int(digit) for digit in str(num)) for num in nums)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Define an empty list to store the sum of digits of each number\n    digit_sum = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # Initialize a variable to keep track of the sum of digits\n        current_sum = 0\n        # Loop through each digit in the digit list\n        for digit in digits:\n            # Convert the digit to an integer and add it to the current sum\n            current_sum += int(digit)\n        # Append the current sum to the digit_sum list\n        digit_sum.append(current_sum)\n    # Return the sum of digits of all numbers in the input list\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of the digits and add it to a running total\n        total += sum(digits)\n    # return the total sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result.append(sum(digits))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must be of equal length')\n\n    # initialize the result tuple\n    result_tup = ()\n\n    # perform bitwise xor operation across the tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    \n    # iterate through the tuples and perform bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize the result tuple\n    result = ()\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the i-th elements of both tuples\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # Add the result to the result tuple\n        result += (xor_result,)\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the elements\n        test_tup1[i] ^= test_tup2[i]\n    # Return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length!\")\n        return\n\n    # Perform the bitwise xor operation across the tuples\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the frequency of unique tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The frequency of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    \n    # Loop through the list and add each tuple to the dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n            \n    # Return the length of the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create a dictionary to store unique tuples and their frequency\n    freq_dict = {}\n    # iterate over the list and add unique tuples to the dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the total frequency of unique tuples\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    unique_freq_dict = {}\n    for key, value in freq_dict.items():\n        if value == 1:\n            unique_freq_dict[key] = 1\n\n    return len(unique_freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty tuple to store the resultant tuple\n    result_tuple = ()\n\n    # loop through both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # append the sum of the corresponding elements of the two tuples\n        result_tuple += (test_tup1[i] + test_tup2[i],)\n\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if both the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both the tuples must have the same number of elements\")\n    \n    # Initialize the result tuple with same number of elements as the input tuples\n    result_tup = tuple(len(test_tup1) * [0])\n    \n    # Iterate through each index of the result tuple and add the corresponding elements of the input tuples\n    for i in range(len(result_tup)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples do not have the same number of elements\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_sum = sum(test_tup1[i]) + sum(test_tup2[i])\n        result.append(inner_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of two tuples should be same\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples are not of equal length.\")\n        return None\n\n    # Initialize a new tuple to store the result\n    result = []\n\n    # Iterate through the two input tuples and add corresponding elements\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the two given tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both given tuples should have the same length.\")\n    # Initialize a new tuple to store the sum of the tuples\n    sum_tuple = ()\n    # Loop through each element of the two given tuples\n    for i in range(len(test_tup1)):\n        # Calculate the sum of the elements of the two tuples at the current index\n        sum_tuple = sum_tuple + (test_tup1[i] + test_tup2[i],)\n    return sum_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n    Args:\n    test_tup1 (tuple): a tuple of tuples\n    test_tup2 (tuple): another tuple of tuples\n\n    Returns:\n    tuple: a tuple containing the sum of the corresponding elements of the two input tuples\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(temp)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create an empty list to store the sum of the tuples\n    total_sum = []\n    # check the length of both the input tuples\n    if len(test_tup1) == len(test_tup2):\n        # iterate over both tuples\n        for i in range(len(test_tup1)):\n            # append the sum of the elements at the same index\n            total_sum.append(test_tup1[i] + test_tup2[i])\n    else:\n        # if the length of the tuples is not equal, raise an error message\n        raise ValueError(\"The length of the two input tuples is not equal.\")\n    # return the total sum as a tuple\n    return tuple(total_sum)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns the minimum of those two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as arguments and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their minimum value.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuple1:\n        if tup == tuplex:\n            print(tuplex, 'exists in tuple1.')\n            return True\n    print(tuplex, 'does not exist in tuple1.')\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): the tuple to search in\n        tuple1 (tuple): the tuple to search for\n\n    Returns:\n        bool: True if the element exists, False otherwise\n    \"\"\"\n\n    # Loop through each element in the tuple\n    for element in tuplex:\n        # Check if the element exists in the other tuple\n        if element in tuple1:\n            return True\n    \n    # If we reach this point, the element was not found\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element found in tuple\")\n    else:\n        print(\"Element not found in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two parameters:\n    tuplex: a tuple to search for an element in\n    tuple1: a tuple containing the elements to search for\n\n    The function checks if each element of the tuple1 tuple exists in the tuplex tuple\n    and returns a boolean value indicating whether each element exists or not.\n    '''\n\n    for element in tuple1:\n        if element not in tuplex:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two arguments: tuplex and tuple1. \n    tuplex is the tuple that we want to search for an element in tuple1.\n    tuple1 is the tuple that we are searching in.\n    The function checks if the element in tuplex exists within tuple1.\n    If the element is found, the function returns True, otherwise it returns False.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            print(f\"{element} exists in the tuple1.\")\n        else: \n            print(f\"{element} does not exist in the tuple1.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    # Check if the number is even or odd.\n    if x % 2 == 0: \n        return \"The parity of the number is even.\"\n    else: \n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # checking whether the number is even or odd using modulus operator\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")\n\n    # checking whether the parity is odd or even using an if-else statement\n    if x % 2 == 0:\n        parity = \"even\"\n    else:\n        parity = \"odd\"\n\n    print(f\"The parity of {x} is {parity}.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = x % 2\n    if parity == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x and returns True if its parity is odd,\n    False otherwise.\n    '''\n    # Calculate the parity of the number\n    parity = 1 if x % 2 == 0 else 0\n    \n    # Return True if the parity is odd, False otherwise\n    return parity == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # if the number is even, then its parity is even\n        return False\n    else: # if the number is odd, then its parity is odd\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Find the length of the number\n    length = len(str(n))\n\n    # Initialize the result as an empty list\n    result = []\n\n    # Iterate over the digits of the number\n    for i in range(length):\n        # Find the digit at position i and its position in the number\n        digit = n % 10\n        index = length - i - 1\n\n        # Check if the digit is greater than 9\n        if digit > 9:\n            # Rearrange the digits of the number\n            n = (n // 10) * 10 + 1\n\n            # Recalculate the position of the digit\n            index = length - i - 1\n\n        # Add the digit and its position to the result\n        result.append((digit, index))\n\n    # Convert the result to a string and return it\n    return ''.join(str(digit) for digit, _ in result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Iterate through the string from right to left\n    for i in range(len(num_str)-1, -1, -1):\n        # If the current digit is smaller than or equal to 9, skip it\n        if int(num_str[i]) <= 9:\n            continue\n        \n        # Calculate the next bigger digit\n        next_bigger = 1\n        for j in range(i+1, len(num_str)):\n            next_bigger *= 10\n        \n        # Check if the next bigger digit is within the range of the original digit\n        next_bigger += 10*(int(num_str[i])//10)\n        next_bigger *= 10\n        \n        # Calculate the difference between the original digit and the next bigger digit\n        diff = next_bigger - int(num_str[i])\n        \n        # Rearrange the digits and return the result\n        new_num_str = ''\n        for j in range(len(num_str)):\n            # If the current digit is smaller than the next bigger digit, append it to the new string\n            if int(num_str[j]) < next_bigger:\n                new_num_str += num_str[j]\n            \n            # If the current digit is equal to the next bigger digit, append the difference to the new string\n            elif int(num_str[j]) == next_bigger:\n                new_num_str += str(diff)\n            \n            # If the current digit is greater than the next bigger digit, append it to the new string\n            else:\n                new_num_str += num_str[j]\n                \n        return int(new_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits of the input number\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the maximum digit\n    max_digit = max(digits)\n    \n    # Find the index of the maximum digit in the list\n    max_index = digits.index(max_digit)\n    \n    # Reverse the digits of the maximum digit\n    digits[max_index] = digits[max_index][::-1]\n    \n    # Reverse the digits of the number itself\n    digits = digits[::-1]\n    \n    # Find the sum of the digits of the number\n    sum_digits = sum(digits)\n    \n    # Subtract the sum of the digits from the input number\n    result = n - sum_digits\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    number = str(n)\n    # Reverse the string\n    reversed_number = number[::-1]\n    # Find the length of the reversed string\n    length = len(reversed_number)\n    # Initialize an empty string to store the rearranged digits\n    rearranged_digits = ''\n    # Iterate through the digits in reverse order\n    for digit in reversed_number:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # If the digit is 0, increment the next digit to the right by 1\n        if digit_int == 0:\n            if rearranged_digits:\n                rearranged_digits += str(int(rearranged_digits[-1]) + 1)\n            else:\n                rearranged_digits += '1'\n        # Otherwise, add the digit to the rearranged digits\n        else:\n            rearranged_digits = digit + rearranged_digits\n    # Convert the rearranged digits back to an integer\n    rearranged_number = int(rearranged_digits)\n    # Add 1 to the rearranged number to get the next bigger number\n    next_bigger_number = rearranged_number + 1\n    # Return the next bigger number\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        # Convert the given number to a string and reverse it\n        s = str(n)[::-1]\n        \n        # Initialize the new number as the first digit\n        new_n = int(s[0])\n        \n        # Loop through the remaining digits and add up their products\n        for i in range(1, len(s)):\n            new_n += int(s[i]) * (10**(len(s)-i-1))\n            \n        return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the length of the digits list\n    length = len(digits)\n\n    # Reverse the digits list\n    digits.reverse()\n\n    # Initialize the next bigger number\n    next_bigger = 0\n\n    # Iterate over the digits list in reverse order\n    for i in range(length):\n        # Multiply the current digit by the next power of 10\n        next_bigger += digits[i] * (10 ** i)\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the result variable\n    result = ''\n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Convert each digit to an integer\n        digit = int(digit)\n        # Rearrange the digits of the number to create the next bigger number\n        digit = digit * 10 + digit\n        # Convert the rearranged digit back to a string and append it to the result variable\n        result += str(digit)\n    # Convert the result variable back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Get the digits of the given number\n    digits = [int(d) for d in str(n)]\n\n    # Create a new list to store the digits in reverse order\n    reversed_digits = digits[::-1]\n\n    # Calculate the new number\n    new_number = 0\n    for i, digit in enumerate(reversed_digits):\n        if digit > 0:\n            new_number += digit * 10**(i + 1)\n\n    # Add 1 to the new number if the original number was odd\n    if n % 2 == 1:\n        new_number += 1\n\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # initialize the result\n    result = ''\n    # initialize the current index\n    index = len(num) - 1\n    # loop while the current index is greater than -1\n    while index >= 0:\n        # check if the current digit is greater than 0\n        if int(num[index]) > 0:\n            # check if the next digit is greater than 0\n            if int(num[index+1]) > 0:\n                # swap the current digit with the next digit\n                result = num[index+1] + num[index] + result\n                # decrement the next digit\n                num[index+1] = str(int(num[index+1]) - 1)\n            # if the next digit is 0, add it to the result\n            else:\n                result = num[index] + result\n        # if the current digit is 0, decrement it and add it to the result\n        else:\n            num[index] = str(int(num[index]) - 1)\n            result = '0' + result\n        # decrement the current index\n        index -= 1\n    # convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # create a string representation of the given number\n    num_str = str(n)\n\n    # initialize the maximum value for rearranging digits\n    max_val = 9\n\n    # loop through each digit in the string representation\n    for digit in num_str:\n        # calculate the next bigger digit by rearranging digits from left to right\n        next_digit = (int(digit) + max_val) % 10\n\n        # update the maximum value for rearranging digits\n        max_val = int(next_digit)\n\n        # rearrange the digits of the number by swapping the current digit with the next bigger digit\n        num_str = num_str[:num_str.index(digit)] + next_digit + num_str[num_str.index(digit)+1:]\n\n    # convert the resulting string representation back to an integer\n    return int(num_str)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif heap[0][0] > nums1[i] + nums2[j]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of length k to store the smallest pairs\n    heap = []\n    \n    # Iterate through the first array and for each element, check if it is smaller than the smallest element in the heap\n    for num1 in nums1:\n        if not heap or heap[0][0] > num1:\n            # If it is smaller, push (num1, float('inf')) onto the heap\n            heapq.heappush(heap, (num1, float('inf')))\n        \n        # If the heap has more than k elements, pop the smallest element and its corresponding value from the heap\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Iterate through the second array and for each element, check if it is smaller than the smallest element in the heap\n    for num2 in nums2:\n        if not heap or heap[0][0] > num2:\n            # If it is smaller, push (float('inf'), num2) onto the heap\n            heapq.heappush(heap, (float('inf'), num2))\n        \n        # If the heap has more than k elements, pop the smallest element and its corresponding value from the heap\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract the k smallest pairs from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append((nums1[i], nums2[j]))\n    heapq.heapify(pairs)\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min-heap of size k\n    min_heap = []\n    # create a set to store unique pairs\n    pairs = set()\n\n    for num1 in nums1:\n        for num2 in nums2:\n            # check if the pair is unique\n            pair = (min(num1, num2), max(num1, num2))\n            if pair not in pairs:\n                # add the pair to the heap\n                heapq.heappush(min_heap, pair)\n                # add the pair to the set\n                pairs.add(pair)\n                # if the size of the heap exceeds k, remove the smallest element from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n\n    # return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the pairs (nums1[i], nums2[j])\n    min_heap = []\n    \n    # Iterate through the two arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # If we have less than k pairs in the heap, add the current pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            # Otherwise, compare the current pair (nums1[i], nums2[j]) with the smallest element in the heap\n            else:\n                if (nums1[i] + nums2[j]) < min_heap[0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i], nums2[j]))\n    \n    # Extract the k smallest pairs from the heap and return them\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the two arrays to a single array\n    nums = nums1 + nums2\n    # Create a min heap of size k to store the k smallest elements\n    min_heap = []\n    # Initialize two pointers for the two arrays\n    i = j = 0\n    # While there are still elements in the array and the minimum heap is not full\n    while i < len(nums) and len(min_heap) < k:\n        # If the current element in the array is less than or equal to the minimum element in the heap\n        if nums[i] <= min_heap[0]:\n            # Add the current element to the heap\n            heapq.heappush(min_heap, nums[i])\n            # If the size of the heap is equal to k, pop the smallest element from the heap\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n            # Increment the pointer to the next element in the array\n            i += 1\n        else:\n            # Pop the smallest element from the heap and increment the pointer to the next element in the array\n            heapq.heappop(min_heap)\n            j += 1\n    # Return the k smallest elements from the heap\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    min_heap = []\n    pairs = []\n    \n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if j == 0 or num1 <= nums2[j-1]:\n                heapq.heappush(min_heap, (num1 + num2, i, j))\n                \n                if len(pairs) == k:\n                    break\n                \n    while min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        pairs.append((nums1[i], nums2[j]))\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for num in nums1:\n        # Add the number to the heap\n        heapq.heappush(min_heap, num)\n        # If the size of the heap becomes greater than k, remove the smallest element\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Loop through the second array and find the smallest pairs\n    result = []\n    for num in nums2:\n        # Find the pair with the smallest element from the first array\n        smallest_element = heapq.heappop(min_heap)\n        # If the sum of the pair is greater than or equal to k, add it to the result and remove the smallest element from the first array\n        if k - smallest_element >= 0:\n            result.append((smallest_element, num))\n            heapq.heappush(min_heap, smallest_element)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort both arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap to keep track of the pairs\n    pairs = []\n    heapq.heapify(pairs)\n\n    # Initialize variables to keep track of the current pair count and the current indices of the two arrays\n    count = 0\n    i = 0\n    j = 0\n\n    # Iterate through the sorted arrays until we have found k pairs\n    while count < k:\n        # Add the current pair to the heap if it meets the minimum requirement\n        if i < len(nums1) and j < len(nums2):\n            pair = (nums1[i], nums2[j])\n            if pair not in pairs or pair[0] < pairs[0][0] or (pair[0] == pairs[0][0] and pair[1] < pairs[0][1]):\n                heapq.heappush(pairs, pair)\n                i += 1\n                j += 1\n        # If we don't have enough elements in one of the arrays, move on to the next one\n        else:\n            if i < len(nums1):\n                i += 1\n            if j < len(nums2):\n                j += 1\n\n        # Increment the pair count\n        count += 1\n\n    # Extract the k pairs from the heap and return them as a list of tuples\n    return [heapq.heappop(pairs) for _ in range(k)]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, list1[i][0] * list1[j][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples in ascending order by the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product as 1 and the minimum number of pairs as 1\n    min_product = 1\n    min_pairs = 1\n\n    # Traverse through the list of tuples\n    for i in range(1, len(list1)):\n        # Calculate the product of the minimum number of pairs and the current number of pairs\n        current_product = min_pairs * (len(list1) - i)\n\n        # Update the minimum product if the current product is smaller than the previous minimum product\n        if current_product < min_product:\n            min_product = current_product\n            min_pairs = len(list1) - i\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1)):\n                if k!= i and k!= j:\n                    product *= list1[k][j]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples within the list.\n    '''\n    # Initialize two variables to store the minimum and maximum values in each tuple\n    min1 = lst[0][0]\n    max1 = lst[0][1]\n    min2 = lst[0][0]\n    max2 = lst[0][1]\n\n    # Iterate over the list of tuples and update the minimum and maximum values in each tuple\n    for tup in lst:\n        if tup[0] < min1:\n            min2 = min1\n            min1 = tup[0]\n        elif tup[0] < min2:\n            min2 = tup[0]\n\n        if tup[1] > max1:\n            max2 = max1\n            max1 = tup[1]\n        elif tup[1] > max2:\n            max2 = tup[1]\n\n    # Calculate the product of the minimum and maximum values in each tuple\n    prod1 = min1 * max1\n    prod2 = min2 * max2\n\n    # Return the minimum of the two products\n    return min(prod1, prod2)\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][1]*list1[j][1]\n            if pair_product < min_product:\n                min_product = pair_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize a list to hold the products of each tuple\n    product_list = []\n    \n    # loop through each tuple in the list\n    for tuple1 in list1:\n        # loop through each tuple in the list\n        for tuple2 in list1:\n            # if the two tuples are not equal, calculate the product and add it to the product_list\n            if tuple1!= tuple2:\n                product = tuple1[0] * tuple2[1]\n                product_list.append(product)\n    \n    # find the minimum value in the product_list\n    min_product = min(product_list)\n    \n    # return the minimum product value\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value variable\n    min_val = listval[0]\n    \n    # Loop through the list and find the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for item in listval[1:]:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('Input list is empty')\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_num = float('inf')  # initialize the minimum value with positive infinity\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert the word to lowercase\n    word = word.lower()\n    # Split the word into words based on underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert the first word to uppercase and the rest to lowercase\n    camel_case = ''.join([word.capitalize() if i == 0 else word.lower() for i, word in enumerate(words)])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert the word to snake case\n    snake_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Convert the snake case to camel case\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', snake_case).lower()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    camel_word = '_'.join(words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # split the word into words using underscores\n    words = word.split('_')\n\n    # create a new word list by capitalizing the first letter of each word\n    new_words = [word.capitalize() for word in words]\n\n    # join the new words with underscores\n    return '_'.join(new_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace all underscores with spaces and capitalize the first letter\n    word = re.sub('_','', word).capitalize()\n    # split the string into words and join them with capitalized letters\n    camel_case_word = ''.join(word.split())\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove underscores from the word and split it into a list of words\n    words = word.replace('_','').split()\n    \n    # capitalize the first letter of each word and join them together\n    camel_case_word = ''.join(w.capitalize() for w in words)\n    \n    # remove any leading or trailing underscores from the camel case word\n    camel_case_word = re.sub('^_|_$', '', camel_case_word)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as a delimiter\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert the words to camel case\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = [num for num in l if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError(\"Index out of range\")\n\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # initialize an empty list to store the extracted elements\n    extracted_list = []\n\n    # iterate through each element in the list and append the nth element to the extracted list\n    for tup in list1:\n        extracted_list.append(tup[n-1])\n\n    # return the extracted list\n    return extracted_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if n is valid\n    if n > len(list1) or n < 1:\n        raise ValueError(\"Invalid input\")\n    \n    # extract nth element from list1\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Check if the nth element exists\n    if n > len(list1):\n        return None\n    \n    # Initialize the index variable\n    index = 0\n    \n    # Loop through the list and return the nth element\n    for element in list1:\n        if index == n-1:\n            return element\n        index += 1"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the nth element\n    nth_element = []\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # If the current index is equal to n-1, add the element to the nth_element list\n        if i == n-1:\n            nth_element.append(list1[i][1])\n        # If the current index is not equal to n-1, skip it\n        else:\n            pass\n    # Return the nth_element list\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer as input and returns the nth element of the list.\n    '''\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if n < 1:\n            raise ValueError('n must be greater than or equal to 1')\n        if len(list1) < n:\n            raise ValueError('The list must contain at least n elements')\n        return list1[n-1]\n    except ValueError as e:\n        print(e)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:  \n        if i in list2:  \n            return True  \n    return False  "
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            print(f\"{item} is present in both sequences.\")\n        else:\n            print(f\"{item} is present in the first sequence but not in the second sequence.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:  \n        if item in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of elements of list2\n    set2 = set(list2)\n\n    # iterate through list1 and check if any of the elements exists in set2\n    for element in list1:\n        if element in set2:\n            return True\n    \n    # if no elements were found in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list is present in the second list.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input, list1 and list2, and checks whether there is any value that exists in both lists or not. If a value exists in both lists, the function will return True, otherwise, it will return False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    max1 = arr[0]\n    max2 = arr[0] * arr[1]\n    min1 = arr[0]\n    min2 = arr[0] * arr[1]\n\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # Update max1 and max2\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        # Update min1 and min2\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    # Return the pair with the highest product\n    return (max1, max2) if max1 * max2 > min1 * min2 else (min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2:\n        return None\n\n    # Initialize two variables for keeping track of the maximum product\n    max_product_pair = [0, 0]\n    max_product = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product of the first i elements and the last i elements\n        product = 1\n        for j in range(i):\n            product *= arr[j]\n        for j in range(i+1, len(arr)):\n            product *= arr[j]\n\n        # Update the maximum product pair if the current product is greater\n        if product > max_product:\n            max_product_pair = [i, len(arr)-i-1]\n            max_product = product\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    first_max = float('-inf')\n    second_max = float('-inf')\n\n    for num in arr:\n        if num > max_product:\n            second_max = max_product\n            first_max = num\n            max_product = num\n        elif num > second_max and num!= max_product:\n            second_max = num\n    \n    if max_product == float('-inf'):\n        return \"No pair found\"\n    else:\n        return (first_max, second_max)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = arr[0]\n    max_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        temp = arr[i]\n        if arr[i] < 0:\n            temp *= -1\n            \n        if temp > max_product:\n            max_product = temp\n            max_val = arr[i]\n            \n    return max_val"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    # Initialize variables to store the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Initialize variables to store the maximum product of the two elements\n    max_product = min_val * max_val\n\n    # Iterate through the array again and update the maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two elements\n            product = arr[i] * arr[j]\n\n            # Update the maximum product if the current product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n\n    # Return the pair with the highest product\n    return (min_val, max_val)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables for the first element and second element of the pair\n    first_element = arr[0]\n    second_element = arr[1]\n\n    # Initialize variables for the maximum product of any two elements\n    max_product = first_element * second_element\n\n    # Loop through the remaining elements in the array and update the maximum product of any two elements\n    for i in range(2, len(arr)):\n        current_product = first_element * second_element\n\n        # Check if the current element is larger than the first element\n        if arr[i] > first_element:\n            # Update the maximum product of any two elements\n            if current_product < max_product:\n                max_product = current_product\n\n            # Update the first element of the pair\n            first_element = arr[i]\n\n            # Update the second element of the pair\n            second_element = arr[i]\n\n        # Check if the current element is larger than the second element\n        elif arr[i] > second_element:\n            # Update the maximum product of any two elements\n            if current_product < max_product:\n                max_product = current_product\n\n            # Update the second element of the pair\n            second_element = arr[i]\n\n    # Return the maximum product of any two elements\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                pair = (arr[i], arr[j])\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                temp_product = arr[i] * arr[j]\n                if temp_product > max_product:\n                    max_product = temp_product\n                    max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_tuple = None\n    for i in Input:\n        if common_tuple:\n            if i[0] == common_tuple[0]:\n                common_tuple.append(i)\n            else:\n                common_tuple = None\n        else:\n            common_tuple = i\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains the common first element of all the tuples in the input list.\n    '''\n    common_first_elements = []\n    for tuple in Input:\n        first_element = tuple[0]\n        if first_element not in common_first_elements:\n            common_first_elements.append(first_element)\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize empty dictionary to store count of each element in the list\n    count = {}\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        element = tup[0]\n        # If the element is already present in the count dictionary, increment its count\n        if element in count:\n            count[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count[element] = 1\n    # Find the common first element in the count dictionary\n    for key in count:\n        if count[key] == max(count.values()):\n            common_element = key\n            break\n    # Return the list of tuples with the common first element\n    return [tup for tup in Input if tup[0] == common_element]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        common_elements.append(first_element)\n    \n    common_elements_set = set(common_elements)\n    for element in common_elements_set:\n        if len(common_elements_set.intersection(common_elements)) == len(common_elements):\n            return element\n        \n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tuple_list in Input:\n        if len(set(tuple_list[0])) == 1:\n            common_elements.append(tuple_list[0][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as an input and returns the list of unique first elements\n    of the tuples in the input list.\n    '''\n\n    # Create an empty list to store unique first elements of the tuples\n    unique_elements = []\n\n    # Iterate through the input list of tuples\n    for tuple in Input:\n        # Extract the first element of the current tuple\n        current_element = tuple[0]\n\n        # If the current element is not already present in the unique_elements list, add it\n        if current_element not in unique_elements:\n            unique_elements.append(current_element)\n\n    # Return the list of unique first elements of the tuples in the input list\n    return unique_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if not common_element:\n            common_element = tuple[0]\n        elif common_element!= tuple[0]:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    This function takes a list of tuples as an input and returns a list of tuples\n    where the first element of each tuple is the common first element of the input.\n    \"\"\"\n    Common_first_element = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Common_first_element.append((Input[i][0],Input[i][1],Input[j][1]))\n    return Common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for tuple in Input:\n        first_element = tuple[0]\n        common_elements.add(first_element)\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the maximum element of the list.\n    '''\n    max_element = lst[0]\n    for i in lst:\n        if len(str(i)) > len(str(max_element)):\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_elem = None\n\n    # Iterate through the list\n    for elem in lst:\n        # Check if the length of the current element is greater than the previous maximum length\n        if len(elem) > max_length:\n            # Update the maximum length and element\n            max_length = len(elem)\n            max_elem = elem\n\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max([len(i) for i in lst])\n    max_elem = []\n    for elem in lst:\n        if len(elem) == max_length:\n            max_elem.append(elem)\n    return max_elem[0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    # Loop through the list of numbers\n    total = 0\n    for num in lst:\n        # Round the number and add it to the total\n        total += round(num)\n    # Multiply the total by the length of the list to get the final answer\n    result = total * len(lst)\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    for number in list1:\n        total += round(number)\n    \n    total_sum = total * len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    count = 0 \n    sum = 0 \n    i = 0 \n    while i < n: \n        sum += i*i*i \n        count += 1 \n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n + 1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        cube_sum += num**3\n        count += 1\n        num += 2\n        \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum_cubes += i ** 3\n        i += 1\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum and counter to zero\n    sum = 0\n    count = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n, 2):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        # Add the cube to the sum\n        sum += cube\n        # Increment the counter\n        count += 1\n\n    # Return the sum and the counter\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1,2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input. It concatenates each element of the tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for element in test_tup:\n        concatenated_list.append(element + delimiter)\n    return concatenated_list"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the given delimiter.\n    '''\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\"|\"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of the tuple using the delimiter as a string\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + \",\"\n    return concatenated_str[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum\n        sum += i**3\n    # Divide the sum by n to get the average of the cubes\n    average = sum/n\n    # Return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cube = i**3\n        cubes.append(cube)\n    average = sum(cubes) / len(cubes)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n\n    average_of_cubes = sum_of_cubes/n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n\n    #initialize sum and count variables\n    sum = 0\n    count = 0\n\n    #calculate the cube of each natural number and add to sum\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    #calculate the average\n    avg = sum/count\n\n    #return the average\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    total = 0  \n    count = 0  \n\n    for i in range(n):  \n        total += i**3  \n        count += 1  \n\n    if count == 0:  \n        print(\"There are no natural numbers to find the average of cubes.\")  \n    else:  \n        average = total/count  \n        print(\"The average of cubes of first\", n, \"natural numbers is\", average)  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize sum of cubes and count of cubes\n    sum_cubes = 0\n    count_cubes = 0\n\n    #iterate through first n natural numbers\n    for i in range(1, n+1):\n\n        #calculate the cube of i and add it to the sum of cubes\n        sum_cubes += i**3\n\n        #increment the count of cubes\n        count_cubes += 1\n\n    #calculate the average of cubes and return it\n    return sum_cubes / count_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    average = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([str(test_tuple[i][-1]) for i in range(len(test_tuple))])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for i in range(len(test_tuple)):\n        extracted_rear.append(test_tuple[i][-1])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, elem in enumerate(test_tuple):\n        if isinstance(elem, str):\n            rear_elements.append(elem[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is odd, add it to the list\n        if num % 2!= 0:\n            odd_nums.append(num)\n\n    # Return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search the pattern in the input string\n    match = re.search(pattern, dt)\n    # If match is found, replace the matched values with the desired format\n    if match:\n        y = match.group(1)\n        m = match.group(2)\n        d = match.group(3)\n        desired_format = f\"{d}-{m}-{y}\"\n        return desired_format\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regex pattern for matching date in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use re.match() to check if the given date is in yyyy-mm-dd format\n    match = re.match(pattern, dt)\n    # If the given date is in yyyy-mm-dd format, use tuple unpacking to split it into year, month, and day components\n    if match:\n        year, month, day = match.groups()\n        # Convert the date in yyyy-mm-dd format to dd-mm-yyyy format\n        date_str = f'{day}-{month.zfill(2)}-{year.zfill(4)}'\n        return date_str\n    # If the given date is not in yyyy-mm-dd format, return the original date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() method to find the match between the pattern and the input string\n    match = re.search(pattern, dt)\n    # If a match is found, use the group() method to extract the individual date components\n    if match:\n        year, month, day = match.group(1), match.group(2), match.group(3)\n        # Reverse the order of the month and day components\n        day, month = month, day\n        # Use string formatting to convert the date components into the desired format\n        result = f'{day}-{month}-{year}'\n        return result\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if yyyy_mm_dd:\n        dd_mm_yyyy = datetime(int(yyyy_mm_dd.group(1)), int(yyyy_mm_dd.group(2)), int(yyyy_mm_dd.group(3))).strftime('%d-%m-%Y')\n        return dd_mm_yyyy\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'([0-9]{4})-([0-9]{2})-([0-9]{2})', r'\\3-\\1-\\2', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date string to regex pattern\n    pattern = r'([0-9]{4})-([0-9]{2})-([0-9]{2})'\n    # Replace the matched values with appropriate characters\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # search for the pattern in the given date string\n    date_match = re.search(pattern, dt)\n    # check if match is found\n    if date_match:\n        # extract groups from match object\n        year = date_match.group(1)\n        month = date_match.group(2)\n        day = date_match.group(3)\n        # construct the new date string in dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n        # return the new date string\n        return new_date\n    else:\n        # if no match found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern and replace the matched groups with the desired output format\n    result = re.sub(pattern, r'\\2-\\1-\\3', dt)\n\n    # Return the modified date string\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub('-', '/', dt)\n    mm_dd_yyyy = yyyy_mm_dd.replace('/', '-')\n    return mm_dd_yyyy\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub() function to replace all occurrences of pattern with desired format\n    new_dt = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<3>', dt)\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the maximum element in the list\n    max_element = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_element:\n            max_element = my_list[i]\n\n    # Calculate the shell increment for each iteration\n    increment = max_element // 2\n    while increment > 0:\n        # Perform insertion sort for each increment\n        for i in range(increment, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= increment and my_list[j-increment] > temp:\n                my_list[j] = my_list[j-increment]\n                j -= increment\n            my_list[j] = temp\n        # Decrease the shell increment\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Traverse gap sequence\n    for gap in range(n//2):\n        # Last gap elements are already sorted\n        for i in range(gap, n):\n            # Insert current element in its correct position in the gap sequence\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n    \n    # Print the sorted array\n    print(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Step size = 1\n    step = n//2\n    \n    while step > 0:\n        # Traverse through all elements\n        for i in range(step, n):\n            key = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are greater than key,\n            # to one position ahead of their current position\n            while j >= step and my_list[j-step] > key:\n                my_list[j] = my_list[j-step]\n                j = j - step\n            my_list[j] = key\n        # Decrease step size\n        step = step // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j - h]:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Loop through the elements of each tuple and extract the elementwise and tuple\n    for i in range(len(test_tup1)):\n        elementwise_and = test_tup1[i] & test_tup2[i]\n        result_tup += (elementwise_and, )\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the given tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The given tuples are not of equal length!\")\n        return None\n\n    # Loop through the tuples and perform elementwise and\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5)/(2*a) \n        root2 = (-b - discriminant**0.5)/(2*a) \n        print(\"The directrix of the parabola is between\", root1, \"and\", root2) \n    elif discriminant == 0: \n        root = -b/(2*a) \n        print(\"The directrix of the parabola is\", root) \n    else: \n        print(\"The parabola has no real roots\") "
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    # Check if the discriminant is greater than 0\n    if disc > 0:\n        # Calculate the directrix\n        directrix = (-b + disc**0.5)/(2*a)\n        # Return the directrix\n        return directrix\n    # If the discriminant is less than 0\n    elif disc < 0:\n        # Calculate the directrix\n        directrix = (-b - disc**0.5)/(2*a)\n        # Return the directrix\n        return directrix\n    # If the discriminant is equal to 0\n    else:\n        # Return None as there is no unique directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc > 0:\n        directrix = (-b + disc**0.5)/(2*a)\n        return directrix\n    elif disc == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        print(\"The equation has no real roots.\")\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is positive, there are two solutions\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n\n        # Sort the solutions in ascending order\n        if x1 > x2:\n            x1, x2 = x2, x1\n\n        # Return the two solutions\n        return x1, x2\n\n    # If the discriminant is negative, there is only one solution\n    elif discriminant < 0:\n        return (-b)/(2*a)\n\n    # If the discriminant is zero, the parabola has a unique solution\n    else:\n        return (-b)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    else:\n        return \"No real root\"\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return None # no real root\n    \n    elif discriminant == 0:\n        x = -b/2/a\n        return x # only one real root\n    \n    else:\n        x1 = (-b + discriminant**0.5)/2/a\n        x2 = (-b - discriminant**0.5)/2/a\n        \n        return x1, x2 # two real roots"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is between roots\", root1, \"and\", root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix is at\", root)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if there is a solution\n    if disc < 0:\n        return \"There is no real solution to this parabola.\"\n    elif disc == 0:\n        return f\"The directrix of the parabola is x={-b/(2*a):.2f}\"\n    else:\n        # Calculate the root of the discriminant\n        root = (-b + disc**0.5)/(2*a)\n        return f\"The directrix of the parabola is x={root:.2f}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the determinant of the matrix\n    det = a*a*c - b*b*b - 2*a*b*c\n    \n    # Check if the determinant is equal to zero\n    if det == 0:\n        print(\"The directrix does not exist.\")\n    else:\n        # Calculate the inverse of the matrix\n        inv_det = 1/det\n        \n        # Calculate the determinant of the second order matrix\n        det_2 = a*inv_det - b/det\n        \n        # Calculate the directrix\n        directrix = (-b + math.sqrt(det_2))/(2*a)\n        \n        print(\"The directrix of the parabola is:\", directrix)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and ensure order preservation\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any common elements are present in the sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            # If the element at index i is present in both lists\n            if list1[i] in list2 and list2[i] in list1:\n                return True\n        # If we get here, there was no common element\n        return False\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = set(list1) & set(list2)\n    if common_elements:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    if area > height:\n        median = 0.5 * (base1 + base2) * height\n    else:\n        median = 0.5 * (base1 + base2) * area\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    area1 = base1 * height\n    area2 = base2 * height\n\n    if area1 < area2:\n        area1, area2 = area2, area1\n        base1, base2 = base2, base1\n\n    area_trapezium = area1 + area2\n\n    return 0.5 * (area_trapezium / base1 + area_trapezium / base2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the median of the trapezium\n    if area > trapezium_length:\n        median = (base1 + base2) / 2\n    else:\n        median = height\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes the base and height of two triangles, as well as the height of a third triangle, \n    and returns the length of the median line of the trapezium.\n    \"\"\"\n    # Calculate the length of the third triangle\n    third_triangle = base1 + base2 + height\n    # Calculate the length of the first triangle\n    first_triangle = (base1 + base2) / 2\n    # Calculate the length of the second triangle\n    second_triangle = (height + first_triangle + third_triangle) / 2\n    # Calculate the length of the median line\n    median_line = first_triangle + second_triangle\n    # Return the median length of the trapezium\n    return median_line"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula:\n    #   a = (base1 + base2) / 2\n    #   h = height\n    a = (base1 + base2) / 2\n    h = height\n\n    # Calculate the area of the trapezium using the formula:\n    #   A = (b + h) / 2\n    #   b = (base1 + base2) / 2\n    A = (a + h) / 2\n\n    # Calculate the length of the base of the trapezium using the formula:\n    #   b = (h / 2) * A\n    b = (h / 2) * A\n\n    # Calculate the area of the base of the trapezium using the formula:\n    #   Ab = b * h\n    Ab = b * h\n\n    # Calculate the length of the base of the trapezium using the formula:\n    #   b = A / 2\n    b = A / 2\n\n    # Calculate the length of the perimeter of the trapezium using the formula:\n    #   p = 2 * (b + a)\n    p = 2 * (b + a)\n\n    # Calculate the area of the perimeter of the trapezium using the formula:\n    #   Ap = p / 2\n    Ap = p / 2\n\n    # Calculate the area of the trapezium using the formula:\n    #   A = Ab + Ap\n    A = Ab + Ap\n\n    # Calculate the length of the base of the trapezium using the formula:\n    #   b = sqrt(h^2 - A)\n    b = h ** 2 - A\n\n    # Calculate the length of the base of the trapezium using the formula:\n    #   b = sqrt(h^2 - A) / 2\n    b = (h ** 2 - A) ** 0.5 / 2\n\n    # Calculate the median length of the trapezium using the formula:\n    #   median = (b + a) / 2\n    median = (b + a) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    s = math.sqrt(3) * (base1 + base2) / 2\n    \n    # Calculate the length of the trapezium using the formula for the area of a trapezium\n    trapezium_length = s * math.sqrt(area)\n\n    # Calculate the area of the triangle that forms the base of the trapezium\n    base_area = math.sqrt(3) / 4 * base1 * height\n    \n    # Calculate the area of the triangle that forms the right half of the trapezium\n    right_area = math.sqrt(3) / 4 * base2 * height\n    \n    # Calculate the length of the right half of the trapezium\n    right_length = math.sqrt(3) / 4 * base2 * trapezium_length\n    \n    # Calculate the median length of the trapezium by averaging the lengths of the two triangles\n    median_length = (right_length + base_area + right_area) / 4\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the lengths of the shorter base and longer base\n    shorter_base = base1\n    longer_base = base2\n    if shorter_base > base2:\n        shorter_base, longer_base = longer_base, shorter_base\n        \n    # Calculate the lengths of the shorter side and the longer side\n    shorter_side = shorter_base * 2\n    longer_side = longer_base * 2\n    \n    # Calculate the total length of the trapezium\n    total_length = shorter_side + longer_side\n    \n    # Calculate the median length\n    median_length = total_length / 2\n    \n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    return 2 * area / (base1 + base2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the area of the lower half of the trapezium\n    lower_area = 0.5 * base1 * (base1 + height)\n\n    # Calculate the area of the upper half of the trapezium\n    upper_area = 0.5 * base2 * (base2 + height)\n\n    # Calculate the total area of the trapezium\n    total_area = area + lower_area + upper_area\n\n    # Calculate the median of the trapezium\n    median = total_area / 3\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    base1, base2, and height are the lengths of the two base pieces of the trapezium.\n\n    Returns the median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the perpendicular of the base from the central angle\n    length_perp = 0.5 * (base1 + base2) * height / area\n    # Calculate the length of the central part of the trapezium\n    length_central = 0.5 * (base1 + base2) * height - length_perp\n\n    # Find the median of the two lengths\n    median = sorted([length_central, length_perp])[1]\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if isinstance(arr, list):\n        for element in arr:\n            if number > element:\n                return True\n        return False\n    else:\n        print(\"The given array is not a list.\")\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i)\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = []\n    for element in arr:\n        if element > number:\n            greater.append(element)\n    if greater:\n        return \"The number is greater than the elements of the array.\"\n    else:\n        return \"The number is not greater than the elements of the array.\""
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = []\n    for i in arr:\n        if i > number:\n            greater.append(i)\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r\"a(b)*\")\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_one(text):\n    pattern = re.compile(r'a(b)*')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a list of matches found.\n    '''\n    pattern = r'\\ba[bB]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.b+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Get the last digit of the number by dividing it by 10 and taking the remainder\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of n.\n    \"\"\"\n    # To find the last digit of a number, we need to divide it by 10 and take the remainder.\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of the number.\n    '''\n    # convert number to string\n    num_str = str(n)\n    # return the last digit of the number\n    return int(num_str[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list and returns a new list with negative numbers\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with negative numbers.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store negative numbers\n    neg_list = []\n    # Loop through each element in the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If the number is negative, add it to the neg_list\n            neg_list.append(num)\n    # Return the neg_list containing negative numbers\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if ord(char) % 2!= 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = set(['a', 'e', 'i', 'o', 'u'])\n    result = []\n    for char in str1:\n        if char not in odd_chars:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_chars = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # if the character is even (i.e., not divisible by 2), append it to the even_chars string\n        if char % 2 == 0:\n            even_chars += char\n    # return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if int(char) % 2!= 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str += \"\"\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    bidirectional_pairs = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in bidirectional_pairs:\n                bidirectional_pairs.remove((test_list[i], test_list[j]))\n            else:\n                bidirectional_pairs.append((test_list[i], test_list[j]))\n\n    return len(bidirectional_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] or (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i < j:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[i:i+2] == test_list[j:j+i+2]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    seen = set()\n    for pair in test_list:\n        if pair in seen:\n            count += 1\n        else:\n            seen.add(pair[::-1])\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        if type(i) == int:\n            total += i\n        else:\n            total += 0\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L) // len(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty result variable\n    result = 0\n\n    # Iterate over each integer in the list\n    for num in L:\n        # If the integer is not a multiple of 10, raise an exception\n        if num % 10!= 0:\n            raise ValueError('Input must be a list of multiple of 10')\n        # Add the integer to the result variable\n        result += num\n\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return multiple_to_single(L[:-1]) + L[-1]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of all the numbers in the list\n    total = 0\n    # iterate over each number in the list\n    for num in L:\n        # check if the number is a multiple of 3, 5, or 7\n        if num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n            # add the number to the total\n            total += num\n    # return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Use the reduce function to add all the integers in the list together\n    return reduce(lambda x, y: x*10 + y, L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to find adverbs\n    pattern = r'\\b(?:[A-Za-z]+\\s*(?:of\\s*[A-Za-z]+\\s*)?)\\b'\n    # Use re.findall to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    # Define empty dictionary to store adverb positions\n    adverb_positions = {}\n    # Iterate over all adverbs and add their positions to the dictionary\n    for i, adv in enumerate(adverbs):\n        adverb_positions[adv] = i + 1\n    # Return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:before|after|during|towards|behind|ahead|below|above|beneath|beyond|below|above)\\b'\n\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the positions of the adverbs and their corresponding words\n    for i, match in enumerate(matches):\n        print(f'Adverb {i+1}: {match}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n    text (str): The input text to search for adverbs.\n\n    Returns:\n    list: A list containing tuples of the form (adverb, position), where adverb is a string and position is an integer.\n    \"\"\"\n    # Define regular expression pattern to find adverbs\n    pattern = r'\\b([a-z]+)(ed|ing|s)\\b'\n\n    # Search for adverbs using the pattern in the input text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Create a list of tuples of the form (adverb, position)\n    adverb_position = []\n    for match in matches:\n        adverb = match.group(1).lower()\n        position = match.start()\n        adverb_position.append((adverb, position))\n\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove non-alphanumeric characters from the text\n    text = re.sub(r'\\W+','', text).strip()\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.lower() in ['really', 'actually', 'actually', 'finally','really','really', 'just', 'just', 'just', 'just']:\n            # Append the adverb and its position to the list of adverbs\n            adverbs.append((word.lower(), i))\n            \n    # Sort the list of adverbs based on their position in the sentence\n    adverbs.sort(key=lambda x: x[1])\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define the pattern to find the first adverb\n    pattern = r'\\b(\\w+)(?:st|nd|rd|th)\\b'\n    \n    # Use the re.search() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any adverbs in the text\n    if not matches:\n        print(\"No adverbs found in the sentence.\")\n    else:\n        # Loop through the matches and print the adverbs and their positions\n        for match in matches:\n            print(match[0], '(', match[1], ')')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n\n    # Define the regular expression pattern to match adverbs\n    pattern = r\"\\b(really|very|well|well-done|well-intentioned|well-made|well-meaningful|well-rounded|well-wishing|well-wishes|well-done|well-intentioned|well-made|well-meaningful|well-rounded|well-wishing|well-wishes|well-done|well-intentioned|well-made|well-meaningful|well-rounded|well-wishing|well-wishes)\\b\"\n\n    # Find all the matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # If there are any matches, print them along with their positions in the sentence\n    if matches:\n        print(\"Adverbs:\", matches)\n        print(\"Positions:\", [text.find(match) for match in matches])\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[a-z]*\\b', text.lower())\n    # Sort the adverbs in descending order based on their position\n    adverbs.sort(key=lambda x: (len(x), text.lower().index(x.lower())), reverse=True)\n    # Print the adverbs and their positions\n    for i, adverb in enumerate(adverbs, start=1):\n        print(f'{i}. {adverb} - {text.lower().index(adverb.lower()) + 1} in the sentence')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+(ing|ed|er|est|ly|se|edly|ery)\\b', text, re.IGNORECASE)\n\n    # Loop through all the adverbs and print their positions\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb}\")\n\n    # Find the position of the first adverb\n    first_adverb = adverbs[0]\n    print(f\"\\nThe first adverb is at position {adverbs.index(first_adverb)+1}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['very', 'well', 'well', 'badly', 'awfully']\n    pattern = r'\\b(' + '|'.join(adverbs) + r')\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverbs:\")\n        for i, match in enumerate(matches):\n            print(f\"{i+1}. {match}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverbs\n    pattern = r'\\b(?:adverb|adv|adv\\.)\\b'\n    # Use regex to find all matches of pattern in text\n    matches = re.findall(pattern, text)\n    # Create a dictionary to store positions and adverbs\n    positions = {}\n    # Iterate through matches and update positions dictionary\n    for i, match in enumerate(matches):\n        positions[i+1] = match\n    # Return the positions dictionary\n    return positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube using the formula\n    # surface area = 6 x volume\n    # where volume is the product of the length and width of the cube\n    volume = l * l * l\n    surface_area = 6 * volume\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # find the length of one side of the cube\n    r = l / 2\n    # calculate the surface area\n    surface_area = 6 * math.pi * r**2\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube by multiplying its sides\n    # with the corresponding values\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 # formula for surface area of a cube\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l * l * l\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    negative_nums = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n    \n    total_count = len(nums)\n    positive_count = len(positive_nums)\n    \n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # convert the array to a list to handle negative numbers\n    nums_list = list(nums)\n\n    # count the number of positive numbers\n    positive_count = 0\n    for num in nums_list:\n        if num > 0:\n            positive_count += 1\n\n    # calculate the ration of positive numbers\n    positive_ratio = positive_count / len(nums_list)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [num for num in nums if num > 0])\n    negatives = array('i', [num for num in nums if num < 0])\n    zeros = array('i', [num for num in nums if num == 0])\n    total = len(nums)\n\n    positive_ratio = (positives.itemsize * positives.itemsize) / (total * total)\n    negative_ratio = (negatives.itemsize * negatives.itemsize) / (total * total)\n    zero_ratio = (zeros.itemsize * zeros.itemsize) / (total * total)\n\n    return positive_ratio, negative_ratio, zero_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = []\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    return len(positive_nums) / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [])\n    negatives = array('i', [])\n    zeros = array('i', [])\n\n    for num in nums:\n        if num > 0:\n            positives.append(1)\n        elif num < 0:\n            negatives.append(1)\n        else:\n            zeros.append(1)\n\n    if positives == []:\n        return 0\n    else:\n        return len(positives) / (len(positives) + len(negatives) + len(zeros))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [num for num in nums if num > 0])\n    neg_nums = array('i', [num for num in nums if num < 0])\n    total_nums = len(nums)\n    \n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    \n    pos_ratio = pos_count / total_nums\n    neg_ratio = neg_count / total_nums\n    \n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an empty list to store the positive numbers\n    positive_numbers = []\n\n    # Iterate through the array of integers\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list\n            positive_numbers.append(num)\n\n    # Calculate the ration of positive numbers\n    total_numbers = len(nums)\n    positive_ratio = len(positive_numbers) / total_numbers\n\n    # Return the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = 0\n    \n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    \n    if total == 0:\n        return 0\n    else:\n        return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    return round(count/total, 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n\n    # Initialize a variable to store the largest negative number\n    largest = float('-inf')\n\n    # Loop through each element in the list\n    for num in list1:\n        # If the current number is negative and greater than the current largest, update the largest variable\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number present in the list.\n    '''\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') #initialize the largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num #update the largest if the current number is negative and greater than the largest\n    return largest #return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        return max(lst, key=lambda x: abs(x))"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_num:\n            max_num = list1[i]\n    return max_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[:-K]\n        result.append(trimmed_tup)\n\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tuple(tup[:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = tuple(test_list[i][j][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # Split the tuple into two lists, one for the elements and one for the keys\n        elem_list, key_list = tup\n        # Trim each element in the element list by k\n        trimmed_elem_list = elem_list[K:]\n        # Combine the trimmed element list and the keys into a new tuple and append it to the trimmed list\n        trimmed_tup = (trimmed_elem_list, key_list)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through the list of tuples\n    for tup in test_list:\n        # slice the tuple by K elements to remove the first K elements\n        trimmed_tup = tup[K:]\n        # replace the original tuple with the trimmed one\n        test_list.remove(tup)\n        test_list.append(trimmed_tup)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            continue\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Trim each tuple by k\n        tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) <= K:\n            continue\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst) \n    \n    # Initialize a new list to store the result\n    result = []\n    \n    # Iterate over each element in the tuple\n    for i in tup: \n        # Check if the element is in the dictionary, if not, append a 0 as value\n        if i in count_dict: \n            result.append(count_dict[i]) \n        else: \n            result.append(0) \n            \n    # Return the result list\n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = {}\n    for i in counter:\n        result[i] = tup.count(i)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = Counter(tup)\n    for elem in lst:\n        count_dict[elem] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    return count[x] for x in lst if x in count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) #create a dictionary from the list\n    count_tup = (tup[i] for i in range(len(tup)) if lst[i] in count_dict) #create a new tuple with only the elements that are present in the dictionary\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = dict(count)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # convert the list to a set to remove duplicates\n    unique_set = set(lst)\n    \n    # count the occurence of all unique elements in the tuple\n    count_dict = Counter(tup)\n    \n    # update the count dictionary with the unique elements of the set\n    for element in unique_set:\n        count_dict[element] = count_dict.get(element, 0) + 1\n        \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = Counter(tup)\n    count_tup_lst = dict(count_tup)\n    count_lst = [0] * len(lst)\n\n    for i in count_tup_lst:\n        count_lst[lst.index(i)] = count_tup_lst[i]\n\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Taking a tuple and a list as input \n    tup = tup \n    lst = lst \n    # Using Counter module to count the occurrence of elements in the tuple \n    count_dict = Counter(tup) \n    # Using set() to convert the list to a set \n    set_lst = set(lst) \n    # Using set intersection method to get the common elements between the set and the dictionary keys \n    common_set = set_lst.intersection(count_dict.keys()) \n    # Using dictionary to count the occurrence of common elements in the list \n    count_dict = {x:count_dict[x] for x in common_set} \n    count_dict = Counter(count_dict) \n    # Returning the count of the common elements in the tuple \n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 2*i - 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = [0] * (n + 1)\n    p[0] = 1\n    p[1] = 1\n    for i in range(2, n + 1):\n        p[i] = (p[i - 1] + p[i - 2]) % 1000000007\n    return p[n]\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The sum of the perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_of_numbers = 0\n    for num in perrin_numbers:\n        sum_of_numbers += num\n        if sum_of_numbers > n:\n            break\n    return sum_of_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize the sum of perrin numbers\n    sum_perrin = 0\n\n    # Check each number from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a perrin number\n        if i % 2 == 1 and all(i%j!= 0 for j in range(3, int(i**0.5)+1, 2)):\n            # If it is a perrin number, add it to the sum\n            sum_perrin += i\n\n    # Return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    while p <= n:\n        if p % 2 == 0:\n            sum += p\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        p = i**2 + 1\n        # add the perrin number to the sum\n        total += p\n    # return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    sum_perrin_numbers = 0\n    for num in perrin_numbers:\n        sum_perrin_numbers += num\n        if sum_perrin_numbers > n:\n            break\n    return sum_perrin_numbers\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    perrin = [0, 1, 4, 10, 20, 40, 80, 160, 320, 640, 1280]\n    \n    sum_perrin = sum(perrin[:n])\n    \n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified size of strings from a list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input, and returns a new list of strings \n    containing the extracted strings.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of strings and extracts the specified size of strings from the list.\n    '''\n    # initialize an empty list to store extracted strings\n    extracted_str = []\n    # iterate over the list of strings\n    for i in range(len(l)):\n        # check if the length of the current string is equal to the specified size\n        if len(l[i]) == l[0]:\n            # if yes, append the current string to the extracted_str list\n            extracted_str.append(l[i])\n    # return the extracted string list\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the desired size of each string to extract.\n    It returns a list of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(' '.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list of strings with the specified size.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in l:\n        extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer representing the size of the strings to be extracted.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i][-1]:\n            extracted.append(l[i])\n            if len(extracted) == l[i][-1]:\n                break\n    return extracted"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function will remove all whitespaces from the given string.\n    \"\"\"\n    # Use regex to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() function to remove all whitespaces from the string\n    text2 = re.sub(pattern, '', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # define a regular expression pattern for whitespace\n    pattern = re.compile(r'\\s+')\n    # use the pattern to remove all whitespace from the text\n    text = pattern.sub('', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    \n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    \n    # Return the final string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expression\n    text1 = re.sub('\\s+','', text1)\n    # Remove whitespaces from the beginning and end of the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    num = n\n    \n    # loop through all odd numbers up to the square root of the number\n    while num > 0:\n        # check if the number is even\n        if num % 2 == 0:\n            # add the even factor to the sum\n            sum += num\n        \n        # divide the number by 2\n        num = num // 2\n        \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    i = 2\n    while i*i <= n:\n        if n%i == 0 and i % 2 == 0:\n            sum_even += i\n        i += 1\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Find the sum of even factors\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0 \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i \n    return evenSum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n // i!= i:\n                sum += n // i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i%2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\w+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year2 % 4 == 0 and (year2 % 100!= 0 or year2 % 400 == 0)):\n        return True\n    elif 1 <= monthnum2 <= 12:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 == 2:\n            if ((year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)):\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        return days_in_month[monthnum2-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the given month number is valid or not\n    if monthnum2 in range(1, 13):\n        # if valid, check whether it contains 31 days or not\n        if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2:\n        if monthnum2.isdigit() and int(monthnum2) <= 12:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and assign it back to the list\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables\n    min_len = lst[0]\n    min_sublist = [lst[0]]\n    \n    # Loop through the list\n    for i in range(1, len(lst)):\n        # Check if the length of the current sublist is less than the minimum length\n        if len(lst[i]) < min_len:\n            # Update the minimum sublist and its length\n            min_sublist = lst[i]\n            min_len = len(lst[i])\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function finds the sublist having minimum length in a given list.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the smallest sublist that has the minimum length.\n    '''\n    # Finding the length of the list\n    length = len(lst)\n\n    # Initializing the minimum length\n    min_len = length\n\n    # Looping through all sublists of length i\n    for i in range(1, length+1):\n        # Initializing the current sublist\n        current = []\n\n        # Looping through all possible sublists of length i\n        for j in range(length-i+1):\n            # Adding the jth element of the sublist to the current sublist\n            current.append(lst[j+i-1])\n\n        # Finding the length of the current sublist\n        current_len = len(current)\n\n        # Updating the minimum length if the current sublist has the minimum length\n        if current_len < min_len:\n            min_len = current_len\n\n    # Returning the sublist of minimum length\n    return lst[min_len-1:min_len+1]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < len(lst[i]):\n                break\n        if len(sublist) < len(lst[i]):\n            break\n    return sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+', re.IGNORECASE)\n    \n    # Iterate through each match in the string\n    matches = pattern.finditer(str1)\n    \n    # Replace all matches with an empty string\n    str1 = ''.join(matches)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'([A-Z]+)', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into a list of words\n    words = str1.lower().split()\n\n    # Initialize an empty list to store the non-uppercase words\n    non_uppercase_words = []\n\n    # Loop through each word in the list of words\n    for word in words:\n        # Check if the first character of the word is uppercase\n        if word[0].isupper():\n            # If it is, skip it and move on to the next word\n            continue\n        else:\n            # If it's not, add it to the non-uppercase list\n            non_uppercase_words.append(word)\n\n    # Join the non-uppercase words back into a string and return it\n    return \" \".join(non_uppercase_words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+') # find all uppercase substrings\n    result = pattern.sub('', str1) # remove the uppercase substrings from the string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    str2 = pattern.sub('', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove all uppercase substrings\n    str1 = re.sub('[A-Z]+', '', str1)\n    # remove leading and trailing spaces\n    str1 = str1.strip()\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize an empty list to store the first element of each sublist\n    result = []\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # check if the sublist is not empty\n        if sublist:\n            # add the first element of the sublist to the result list\n            result.append(sublist[0])\n    # return the result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Use a list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i], list1[j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    # Create an empty list to store all combinations\n    result = []\n    # Sort the input list\n    list1.sort()\n    # Create a loop that iterates over all possible pairs of indices\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Create a tuple of the two elements in the pair\n            pair = (list1[i], list1[j])\n            # Append the pair to the result list\n            result.append(pair)\n    # Return the result list\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initializing a list to store all possible combinations\n    combinations = []\n\n    # finding the length of the list\n    n = len(list1)\n\n    # generating all possible combinations using recursion\n    def generate_combinations(start, curr_comb):\n        # base case: if the start index is equal to the length of the list, add the current combination to the list\n        if start == n:\n            combinations.append(curr_comb[:])\n            return\n        # recursive case: add the current element to the combination and generate all possible combinations starting from start+1\n        generate_combinations(start+1, curr_comb + [list1[start]])\n\n    # calling the recursive function to generate all possible combinations\n    generate_combinations(0, [])\n\n    # returning the list of all possible combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    # Helper function to generate combinations\n    def helper(lst, index, result):\n        if index == len(lst):\n            result.append(lst)\n            return\n        helper(lst, index+1, result)\n        for i in range(index+1, len(lst)+1):\n            helper(lst, i, result)\n    \n    # Helper function to remove duplicates from a list\n    def remove_duplicates(lst):\n        return list(set(lst))\n    \n    # Find all unique combinations of the elements of the list\n    lst = remove_duplicates(lst)\n    result = []\n    helper(lst, 0, result)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(\" \".join(str(x) for x in list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    '''\n    Given a list, returns a list of all possible combinations of the elements in the list.\n\n    Parameters:\n        lst (list): A list of elements.\n\n    Returns:\n        A list of all possible combinations of the elements in the input list.\n    '''\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combinations.append(lst[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i):\n            print(list1[j], end=' ')\n        print()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store all the combinations\n    combinations = []\n\n    # use a nested loop to iterate over all possible pairs of elements in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    result = []\n    \n    # function to generate all possible combinations of the list\n    def generate_combinations(lst, index, path):\n        # base case: if all elements have been considered\n        if index == len(lst):\n            result.append(path)\n            return\n        \n        # recursive case: consider the next element\n        generate_combinations(lst, index+1, path + [lst[index]])\n        \n        # backtrack: don't consider the next element\n        generate_combinations(lst, index, path)\n        \n    # call the function to generate all possible combinations\n    generate_combinations(list1, 0, [])\n    \n    # return the list of combinations\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num > 0:\n            max_ending_here *= num\n            min_ending_here = 1\n        elif num < 0:\n            min_ending_here *= num\n            max_ending_here = 1\n        else:\n            max_ending_here = 1\n            min_ending_here = 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here = min_ending_here\n            min_ending_here = 1\n        else:\n            max_ending_here = max(max_ending_here * num, num)\n            min_ending_here = min(min_ending_here * num, num)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        if max_product < 0:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Checking if the length of the dictionary is same as n\n    if len(dict) == n:\n        # Iterate through the dictionary\n        for value in dict.values():\n            # If any value is not same as n, then return False\n            if value!= n:\n                return False\n        # If all values are same as n, then return True\n        return True\n    else:\n        # If the length of the dictionary is not same as n, then return False\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return values == values[:n]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is equal to n\n    if len(dict) == n:\n\n        # Loop through the dictionary\n        for value in dict.values():\n\n            # Check if all the values are equal to each other\n            if value!= dict[next(iter(dict))]:\n                return False\n\n        return True\n\n    # If the length is not equal to n, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict:\n        return False\n    \n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values are same in the dictionary\")\n    else:\n        print(\"All values are different in the dictionary\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return values[0] == values[1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if the dictionary has n elements\n    if len(dict)!= n:\n        return False\n    # check if all values are the same\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    for value in values:\n        if values.count(value)!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n    for key, value in dict.items():\n        if value!= dict[key-1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n\n    for value in dict.values():\n        if dict.values().count(value) > 1:\n            return False\n\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if not v:\n            del dict1[k]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Create a 2D table to store the maximum product formed by multiplying the numbers of an increasing subsequence of that array\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the table with the product of the first element with itself\n    for i in range(n):\n        table[i][i] = arr[i]\n\n    # Fill the table with the maximum product formed by multiplying the numbers of an increasing subsequence of that array\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            table[i][j] = max(table[i][j], arr[i] * arr[j])\n\n    # Return the maximum product formed by multiplying the numbers of an increasing subsequence of that array\n    return table[0][n - 1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:   # base case: single element\n        return arr[0]\n\n    # initialize two variables to keep track of the minimum and maximum products of the current subarray\n    min_product = arr[0]   # start with the first element\n    max_product = arr[0]   # start with the first element\n\n    # loop through the array and update the minimum and maximum products accordingly\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:   # if the current element is greater than the current maximum product\n            max_product = arr[i]   # update the maximum product\n        elif arr[i] < min_product:   # if the current element is less than the current minimum product\n            min_product = arr[i]   # update the minimum product\n\n    # return the maximum product formed by multiplying the minimum and maximum products of the entire subarray\n    return max_product * min_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_so_far = max(max_so_far, min_ending_here)\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n            min_ending_here = min(min_ending_here, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables for the maximum product and the length of the current subsequence\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Add the current element to the current product\n        current_product *= arr[i]\n\n        # If the current product is greater than the maximum product, update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # If the current element is negative, set the current product to 1 to avoid negative product\n        if arr[i] < 0:\n            current_product = 1\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:  # If array is empty, return 0\n        return 0\n    if len(arr) == 1:  # If array has only one element, return itself\n        return arr[0]\n    max_ending_here = arr[0]  # Initialize max_ending_here to the first element of the array\n    max_so_far = arr[0]  # Initialize max_so_far to the first element of the array\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:  # If the current element is greater than max_ending_here, update max_ending_here\n            max_ending_here = arr[i]\n        else:  # If the current element is not greater than max_ending_here, update max_ending_here to the previous value\n            max_ending_here = max_ending_here * arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here)  # Update max_so_far to the maximum of max_so_far and max_ending_here\n\n    return max_so_far  # Return the maximum of max_so_far and max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def increasing_subsequence_product(arr):\n        n = len(arr)\n        if n == 1:\n            return arr[0]\n        elif n == 2:\n            return max(arr[0], arr[1])\n        else:\n            i = 0\n            while i < n:\n                if i == 0:\n                    j = i\n                else:\n                    j = max(i-1, 0)\n                while j < n and arr[j] <= arr[i]:\n                    j += 1\n                if j == n:\n                    break\n                arr[i+1:j] = sorted(arr[i+1:j])\n                i = j\n            return increasing_subsequence_product(arr)\n\n    return max(increasing_subsequence_product(arr), increasing_subsequence_product(arr[::-1]))"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize variables\n    max_product_ending_here = max_product_so_far = 1\n    i = 0\n\n    # loop through the array\n    while i < len(arr):\n        # if the current element is increasing, update the maximum product ending here\n        if i == 0 or arr[i] > arr[i - 1]:\n            max_product_ending_here *= arr[i]\n            if max_product_ending_here < 0:\n                max_product_ending_here = 1\n        else:\n            max_product_ending_here = 1\n\n        # if the current product is greater than or equal to the maximum product so far, update the maximum product so far\n        if max_product_ending_here >= max_product_so_far:\n            max_product_so_far = max_product_ending_here\n\n        # move to the next element in the array\n        i += 1\n\n    # return the maximum product\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, n):\n        # Update max_product_ending_here\n        if arr[i] > 0:\n            max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        else:\n            max_product_ending_here = arr[i]\n            \n        # Update max_product_so_far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    if len(arr) == 0:\n        return 0\n\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(1, len(test_tup)):\n        total += test_tup[i] - test_tup[i-1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    \n    return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    if n < 2:\n        return None\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    test_tup (tuple): a tuple of numbers to find the pairwise addition of\n\n    Returns:\n    tuple: the pairwise addition of the given tuple\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements\")\n\n    # initialize the result tuple with the first two elements\n    result = (test_tup[0] + test_tup[1],)\n\n    # loop over the remaining elements and add their pairwise sum to the result\n    for i in range(2, len(test_tup)):\n        result += (test_tup[i] + result[-1],)\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(test_tup, tuple) == False:\n        print(\"Invalid input. Please provide a tuple.\")\n        return\n\n    # Check if the length of the tuple is less than 2\n    if len(test_tup) < 2:\n        print(\"Invalid input. Please provide a tuple with at least 2 elements.\")\n        return\n\n    # Calculate the length of the tuple\n    length = len(test_tup)\n\n    # Initialize the sum of the pairwise additions to 0\n    sum = 0\n\n    # Iterate through the tuple and add the neighboring elements to the sum\n    for i in range(length-1):\n        sum += test_tup[i] + test_tup[i+1]\n\n    # Return the sum of the pairwise additions\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the pairwise additions\n    pairwise_sum = []\n\n    # iterate through the elements of the tuple, except the last one\n    for i in range(len(test_tup) - 1):\n        # add the current element to the previous element to get the next element\n        next_elem = test_tup[i] + test_tup[i+1]\n        # append the next element to the pairwise_sum list\n        pairwise_sum.append(next_elem)\n\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input. It finds the product of the array multiplied modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and an integer n and returns the product of the array's\n    multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product as 1\n    product = 1\n\n    # Iterate over each element in the array\n    for num in arr:\n        # Calculate the product of the current element and the product so far\n        product = (product * num) % n\n\n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array 'arr' and an integer 'n' as input.\n    It returns the product of the array multiplication modulo n.\n\n    The algorithm used to find the product of the array multiplication modulo n is as follows:\n    1. Initialize a variable 'product' to 1.\n    2. Iterate over the array 'arr'.\n    3. For each element in 'arr', calculate the product of 'product' and that element modulo n.\n    4. Set 'product' to the result obtained in step 3.\n    5. After iterating over the entire array, return the value of 'product'.\n\n    This function has a time complexity of O(n), where n is the length of the array 'arr'.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    # create a set to keep track of the numbers we have seen so far\n    seen = set()\n    # iterate over the list\n    for num in l:\n        # check if num is already in the set\n        if num in seen:\n            # if it is, we have found a consecutive number\n            return True\n        else:\n            # if not, add it to the set and continue iterating\n            seen.add(num)\n    # if we have iterated through the entire list and have not found a consecutive number, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            count += 1\n        else: \n            count = 1\n    if count == len(l): \n        return True\n    else: \n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an input and checks whether it contains consecutive numbers or not.\n    Returns True if the list contains consecutive numbers, else returns False.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        test_list1 (list): List of tuples.\n        test_list2 (list): List of tuples.\n\n    Returns:\n        list: A new list containing only the elements that exist in both test_list1 and test_list2.\n    \"\"\"\n\n    # Create a set to store unique elements from the first list\n    unique_set = set(test_list1[0])\n\n    # Iterate through the second list\n    for elem in test_list2:\n        # If an element is in the set, add it to the result list\n        if elem in unique_set:\n            result.append(elem)\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize an empty set to store the tuple intersection\n    tuple_intersection = set()\n    \n    # Loop through each element in test_list1\n    for item1 in test_list1:\n        # Loop through each element in test_list2\n        for item2 in test_list2:\n            # Check if the tuple (item1, item2) is in the set of tuple intersections\n            if (item1, item2) in tuple_intersection:\n                # If it is, add it to the set of tuple intersections\n                tuple_intersection.add((item1, item2))\n                break\n        else:\n            # If there is no break in the loop, it means that the tuple (item1, None) is not in the tuple intersections set.\n            # In this case, add it to the set.\n            tuple_intersection.add((item1, None))\n    \n    # Return the set of tuple intersections\n    return tuple_intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new list containing only the tuples that are present in both lists.\n    '''\n    intersection = []\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            intersection.append(test_list1[i])\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list to remove duplicates and then convert it to a tuple\n    set1 = tuple(set(test_list1))\n    # Create a set from the second list to remove duplicates and then convert it to a tuple\n    set2 = tuple(set(test_list2))\n    # Find the intersection of the two sets and convert it back to a list\n    intersect = list(set1.intersection(set2))\n    # Return the intersection as a tuple\n    return tuple(intersect)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the unique elements of the first list\n    unique_set1 = set()\n    \n    # loop through the first list and add each unique element to the set\n    for element in test_list1:\n        unique_set1.add(element)\n    \n    # create an empty set to store the unique elements of the second list\n    unique_set2 = set()\n    \n    # loop through the second list and add each unique element to the set\n    for element in test_list2:\n        unique_set2.add(element)\n    \n    # create an empty set to store the intersection of the two sets\n    intersection_set = unique_set1.intersection(unique_set2)\n    \n    # convert the set to a list and return the intersection list\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Remove duplicates from the first list using set()\n    unique_list1 = list(set(test_list1))\n    # Find the intersection of the two lists using the set intersection operation\n    intersection = list(set(unique_list1) & set(test_list2))\n    # Return the intersection as a tuple\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_tuples = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                common_tuples.append(t1)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize a set for the intersection of elements\n    intersection = set()\n\n    # iterate over the first list of tuples\n    for tup1 in test_list1:\n        # iterate over the second list of tuples\n        for tup2 in test_list2:\n            # if the tuples have the same elements, add the tuple to the intersection set\n            if tup1 == tup2:\n                intersection.add(tup1)\n                break\n\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Initialize an empty set to store the intersection of tuples\n    intersection = set()\n\n    # Loop through both lists simultaneously\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.add(test_list1[i])\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [x for x in test_list1 if x in test_list2 and x not in set(test_list1) - set(test_list2)]"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # initialize an empty string\n    result = \"\"\n    \n    # iterate over each character in the string\n    for char in str1:\n        # check if the character matches the search character\n        if char == ch:\n            # replace the character with the new character\n            result += newch\n        # if the character does not match the search character, add it to the result string\n        else:\n            result += char\n    \n    # return the modified string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): The string to be modified.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace the old character with.\n\n    Returns:\n    str: The modified string with the replaced character.\n    \"\"\"\n\n    # Use a loop to iterate through each character in the string\n    new_str = \"\"\n    for char in str1:\n        # If the character is the old character, replace it with the new character\n        if char == ch:\n            new_str += newch\n        else:\n            # If the character is not the old character, add it to the new string\n            new_str += char\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in two parameters: a string `str1` and two characters `ch` and `newch`.\n    It replaces all occurrences of `ch` with `newch` in `str1` and returns the modified string.\n    \"\"\"\n    # Initialize an empty string to hold the modified string\n    modified_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the current character is not equal to the specified character ch\n        if char!= ch:\n            # Append the current character to the modified string\n            modified_str += char\n        # If the current character is equal to the specified character ch\n        else:\n            # Append the new character to the modified string\n            modified_str += newch\n    \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to be inserted.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n\n    # initialize an empty string to store the modified string\n    result = \"\"\n\n    # iterate over each character in the input string\n    for char in str1:\n\n        # if the current character is not the specified character to be replaced\n        if char!= ch:\n\n            # add the current character to the result string\n            result += char\n\n        # if the current character is the specified character to be replaced\n        else:\n\n            # add the new character to the result string\n            result += newch\n\n    # return the modified string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string\n    ch (str): The character to be replaced\n    newch (str): The new character to replace the old character\n\n    Returns:\n    str: The modified string with replaced characters\n    '''\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    # Iterate over each character in the input string\n    for char in str1:\n        # If the character is equal to the character to be replaced, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        # Otherwise, append the character to the modified string\n        else:\n            modified_str += char\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object to sort by value\n    counter = Counter(dict1)\n    \n    # sort the counter by value\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    \n    # convert the sorted counter back to a dictionary and return it\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n    \"\"\"\n    if len(nums) < 2:\n        return None  # We need at least two values to find the sum\n\n    # Find the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = min(nums)\n    smallest = max(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    big_sum = largest + smallest\n    \n    # Return the big sum\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # find the largest value\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # find the smallest value\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # finding the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # summing the largest and smallest value\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sorting the array in ascending order\n    nums.sort()\n    # finding the sum of largest and smallest value\n    sum_l = nums[0] + nums[-1]\n    # finding the sum of the array\n    sum_arr = sum(nums)\n    # returning the sum of largest and smallest value and the sum of the array\n    return sum_l, sum_arr"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    # Add the largest and smallest values and return the sum\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values to the first element of the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a new string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to check if the given string is in lower case or not.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.findall(r'[a-z]+', str1)\n    for i in range(len(lowercase)):\n        str1 = str1.replace(lowercase[i], '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    \n    # Use the `findall()` method to find all the lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    \n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the search() method to search for all matches in the string\n    matches = pattern.findall(str1)\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = r'[a-z]+'\n    return re.sub(lowercase_pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :\n    '''\n    This function takes an integer as input and returns the first digit of that integer.\n    '''\n    first_digit = n // 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Find the first digit of the string\n    first_digit = num[0]\n    # Convert the first digit back to an integer\n    first_digit = int(first_digit)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the input is a number\n    if isinstance(n, int):\n        # extract the first digit of the number\n        first_digit = n % 10\n        # return the first digit of the number\n        return first_digit\n    else:\n        # return an error message if the input is not a number\n        return \"Error: Input is not a number\""
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_num = n // 10 ** (n.bit_length() // 10)\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # find the length of the input number\n    length = len(str(n))\n\n    # initialize a variable to store the first digit\n    first_digit = None\n\n    # iterate through each digit of the number\n    for i in range(length):\n        # convert the digit to an integer and check if it's the first digit\n        digit = int(str(n)[i])\n        if first_digit is None:\n            first_digit = digit\n        else:\n            first_digit = None\n            break\n\n    # return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # extract the first digit of the number\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to string\n    num_str = str(n)\n    # Convert the string to list\n    num_list = list(num_str)\n    # Return the first element of the list\n    return num_list[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # Create an empty list to store the odd numbers\n    odd_list = []\n\n    # Iterate through the list of integers\n    for num in list:\n        # If the number is odd, add it to the odd_list\n        if num % 2 == 1:\n            odd_list.append(num)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list: \n        if i % 2!= 0: \n            odd_list.append(i)\n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([num**3 for num in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural_numbers += i\n    \n    return sum_cubes - sum_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        This function returns the sum of cubes of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n+1):\n            total += i ** 3\n        return total\n\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        This function returns the sum of the first n natural numbers.\n        \"\"\"\n        total = 0\n        for i in range(1, n+1):\n            total += i\n        return total\n\n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n    difference_sum = sum_of_cubes_n - sum_of_natural_numbers_n\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # calculating sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # calculating sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # finding the difference\n    diff = sum_cubes - sum_natural\n    \n    # returning the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i*i*i for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    \n    return sum_cubes - sum(range(1, n+1))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    \n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # find the difference between the two sums\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculate the sum of first n natural numbers\n    sum_nums = sum(range(1, n+1))\n\n    # find the difference between the two sums\n    diff = sum_cubes - sum_nums\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = (n * (n + 1) * (2 * n + 1)) // 6\n    # calculate the sum of the first n natural numbers\n    sum_natural = n * (n + 1) // 2\n    # calculate the difference between the sum of cubes and the sum of natural numbers\n    diff = abs(sum_cubes - sum_natural)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in a list A and an integer N.\n    It returns the number of pairs whose xor value is odd.\n    '''\n    # Initialize two variables to keep track of the sum and the count of pairs\n    sum_of_A = sum(A)\n    count = 0\n    \n    # Loop through each element of the list A\n    for i in range(len(A)):\n        # Calculate the xor of the current element and the sum of A\n        xor_sum = sum_of_A - A[i]\n        # If the xor is odd, increment the count\n        if xor_sum % 2!= 0:\n            count += 1\n    \n    # Return the count of pairs whose xor value is odd\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    count = 0\n    xor_val = 0\n\n    # Iterate through the array\n    for i in range(N):\n        # Calculate xor of current element and remaining elements\n        xor_val = xor_val ^ A[i]\n\n        # Check if xor value is odd\n        if xor_val % 2!= 0:\n            # If yes, increment count by 1\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count and xor variable\n    count = 0\n    xor = 0\n    \n    # Loop through the array A\n    for i in range(N):\n        # Calculate the xor value for each element A[i]\n        xor = xor ^ A[i]\n        \n        # Check if the xor value is odd and increment count if it is\n        if xor % 2!= 0:\n            count += 1\n    \n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes two lists A and N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    # Concatenate the two lists into a single list\n    lst = A + N\n    # Sort the list in ascending order\n    lst.sort()\n    # Initialize two variables to store the count of odd pairs and the sum of the xor values\n    count = 0\n    xor_sum = 0\n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is odd\n        if lst[i] % 2!= 0:\n            # Update the count of odd pairs and xor_sum\n            count += 1\n            xor_sum += lst[i]\n    # Return the count of odd pairs and xor_sum\n    return count, xor_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # initialize a variable to store the count of odd pairs\n    count = 0\n    # loop through all pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # compute the xor value of the pair\n            xor = A[i] ^ A[j]\n            # check if the xor value is odd\n            if xor & 1 == 1:\n                # increment the count of odd pairs\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create a new string where each character is toggled based on its current case\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char.upper()\n        new_string += new_char\n    # convert the new string back to uppercase\n    return new_string.upper()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.islower() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, make it lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, make it uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # return the modified string\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings to be able to perform arithmetic operations\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Loop through each character in both strings and add the difference to the sum variable\n    for i in range(len(str_n1)):\n        if str_n1[i]!= str_n2[i]:\n            diff = int(str_n1[i]) - int(str_n2[i])\n            sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Remove any leading zeros from the numbers\n    n1 = int(str(n1)[-1:])\n    n2 = int(str(n2)[-1:])\n    \n    # Find the difference between the numbers\n    diff = n1 - n2\n    \n    # Initialize a variable to store the sum of the per-digit differences\n    digit_sum = 0\n    \n    # Iterate through each digit in the difference\n    while diff > 0:\n        # Extract the last digit from the difference\n        digit = diff % 10\n        \n        # Calculate the per-digit difference\n        digit_diff = abs(n1 - n2) - abs(n2 - n1)\n        \n        # Add the per-digit difference to the sum\n        digit_sum += digit_diff\n        \n        # Remove the last digit from the difference and move to the next digit\n        diff //= 10\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= n2:\n        n1 = n1 // 10\n        n2 = n2 // 10\n        diff += n1 - n2\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the integers to lists of digits\n    digit_lists1 = [int(digit) for digit in str(n1)]\n    digit_lists2 = [int(digit) for digit in str(n2)]\n\n    # create a dictionary to store the difference between each pair of digits\n    digit_diff_dict = {}\n\n    # iterate through each pair of digits\n    for i in range(len(digit_lists1)):\n        # if the current digit is not already in the dictionary, add it with a value of 1\n        if digit_lists1[i] not in digit_diff_dict:\n            digit_diff_dict[digit_lists1[i]] = 1\n        # otherwise, increment the value by 1\n        else:\n            digit_diff_dict[digit_lists1[i]] += 1\n\n        # if the current digit is not already in the dictionary, add it with a value of 1\n        if digit_lists2[i] not in digit_diff_dict:\n            digit_diff_dict[digit_lists2[i]] = 1\n        # otherwise, increment the value by 1\n        else:\n            digit_diff_dict[digit_lists2[i]] += 1\n\n    # calculate the sum of the per-digit difference\n    digit_diff_sum = sum(digit_diff_dict.values())\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Args:\n    - n1 (int): first integer to compare\n    - n2 (int): second integer to compare\n\n    Returns:\n    - int: the sum of the per-digit difference between n1 and n2\n    \"\"\"\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum and count variables\n    digit_sum = 0\n    count = 0\n    # convert the numbers to lists of digits\n    num1 = [int(x) for x in str(n1)]\n    num2 = [int(x) for x in str(n2)]\n    # loop through the digits and calculate the sum and count of differences\n    for i in range(len(num1)):\n        diff = abs(num1[i] - num2[i])\n        digit_sum += diff\n        count += 1\n    # return the sum of differences and the count of differences\n    return digit_sum, count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    # calculate the difference between the two lists of digits\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n    # calculate the sum of the differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integer arguments and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # Initialize a variable to store the sum of per-digit differences\n    total_sum = 0\n    \n    # Iterate over each digit in n1 and n2\n    for i in range(10):\n        # Calculate the difference between the digits at positions i and i+1 in n1 and n2\n        diff = abs(n1//10**i - n2//10**i)\n        \n        # Add the difference to the total sum\n        total_sum += diff\n        \n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum to 0\n    total_sum = 0\n\n    # loop through each digit in the two numbers\n    for i in range(len(str(n1))):\n        # get the digits of the two numbers\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n\n        # calculate the per-digit difference\n        diff = abs(digit1 - digit2)\n\n        # add the difference to the total sum\n        total_sum += diff\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    per_digit_diff = 0\n    for i in range(len(str(abs(diff)))):\n        per_digit_diff += abs(diff) // (10 ** i)\n        diff %= (10 ** i)\n    return per_digit_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list and calculate the sum of the current subarray\n    for i in range(len(a)):\n        current_sum += a[i]\n\n        # If the current subarray is greater than the maximum subarray so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current subarray is greater than the size of the list, start a new subarray with the next element\n        if i >= size - 1:\n            current_sum -= a[i-size+1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    while end < size:\n        if current_sum < 0:\n            current_sum = 0\n            start = end\n        current_sum += a[end]\n        end += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list 'a' and a size'size' as input and returns the sum of the largest contiguous sublist in the list.\n\n    The function uses Kadane's algorithm to find the largest contiguous sublist sum and then calculates the sum of the sublist.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size, len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    return a[start_index:start_index+size], max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_ending_here = 0\n\n    # Loop through the list and calculate the sum of the maximum sublist ending at each index\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_sum:\n            max_sum = max_ending_here\n        if i > 0 and max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        raise ValueError('Input list must have at least {} elements'.format(size))\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples to form a single tuple\n    union_tuple = test_tup1 + test_tup2\n\n    # Convert the single tuple to a set to remove duplicates\n    unique_tuple = set(union_tuple)\n\n    # Convert the set back to a sorted tuple\n    sorted_tuple = tuple(sorted(unique_tuple))\n\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = test_tup1.union(test_tup2)\n    # Convert the set to a list\n    union_list = list(union_set)\n    # Sort the list in ascending order\n    union_list.sort()\n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Sort the combined list in ascending order\n    combined_list.sort()\n\n    # Iterate over the sorted list and print each element\n    for element in combined_list:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(set(union))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples using the + operator\n    combined_tup = test_tup1 + test_tup2\n    \n    # convert the combined tuple to a set to remove any duplicates\n    unique_set = set(combined_tup)\n    \n    # convert the set back to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    \n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Convert the tuple to a set to eliminate duplicates\n    unique_tup = set(combined_tup)\n\n    # Convert the set back to a tuple and sort it\n    sorted_tup = sorted(unique_tup)\n\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, we combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n\n    # Next, we remove any duplicates from the combined tuple\n    unique_tup = tuple(set(combined_tup))\n\n    # Finally, we sort the unique tuple and output it\n    sorted_tup = sorted(unique_tup)\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # concatenate the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # sort the combined list in ascending order\n    combined_list.sort()\n\n    # create a new list to store the unique elements\n    unique_list = []\n\n    # iterate over the combined list\n    for item in combined_list:\n        # if the current item is not in the unique list, add it to the list\n        if item not in unique_list:\n            unique_list.append(item)\n\n    # convert the unique list into a tuple and output it\n    output_tuple = tuple(unique_list)\n    print(output_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    union_list = test_tup1 + test_tup2\n    # Remove duplicates and sort the result\n    unique_list = sorted(list(set(union_list)))\n    return unique_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1 + test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the longest sublists in the list.\n    '''\n    # Initialize a variable to store the length of the longest sublist found so far\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Initialize a variable to store the length of the current sublist\n        current_length = len(sublist)\n\n        # Loop through each subsequent sublist in the list\n        for subsequent_sublist in lst:\n            # If the current sublist contains the subsequent sublist, update the length of the current sublist\n            if current_length >= len(subsequent_sublist):\n                current_length = len(subsequent_sublist)\n\n        # If the length of the current sublist is greater than the max_length found so far, update the max_length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the max_length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if i == 0:\n                max_length = max(max_length, len(lst[j]))\n            else:\n                max_length = max(max_length, len(lst[j])+max_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    curr_length = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 1\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize max_length with the first element of the list\n    max_length = len(lst[0])\n    \n    # Loop through the remaining elements of the list\n    for i in range(1, len(lst)):\n        \n        # Get the length of the current sublist\n        current_length = len(lst[i])\n        \n        # If current_length is greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n\n    max_length = 0\n    current_length = 0\n    current_sublist = []\n\n    for item in lst:\n        if len(current_sublist) == 0:\n            current_sublist.append(item)\n            current_length += 1\n        else:\n            current_sublist.append(item)\n            current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n            max_sublist = current_sublist\n            current_sublist = []\n\n    return max_sublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the maximum length as 0\n    max_length = 0\n\n    # Iterate through each sublist\n    for sublist in lst:\n\n        # Calculate the length of the sublist\n        sublist_length = len(sublist)\n\n        # Update the maximum length if the current sublist is longer\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    # Return the maximum length of all sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i:]\n        if len(sub_lst) > max_length:\n            max_length = len(sub_lst)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    current_length = 0  \n    for i in lst:  \n        current_length += 1  \n        if current_length > max_length:  \n            max_length = current_length  \n        elif current_length < 0:  \n            current_length = 0  \n    return max_length  "
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern for matching values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use re.findall() function to find all the values between quotation marks in the text\n    values = re.findall(pattern, text)\n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=')\\w+(?=')\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+(?:(?<=\\s)\\s?\\w+)*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern to match between quotation marks\n    pattern = r'(?<=\\b)(\".*?\")'\n    # Use re.findall to extract all values between quotation marks in the string\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        if match.startswith(\"$\") or match.startswith(\"#\") or match.startswith(\"%\"):\n            values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n\n    :param text: A string containing values between quotation marks.\n    :return: A list of extracted values.\n    '''\n    # Using regular expression to extract values between quotation marks\n    values = re.findall(r'\"(\\w+)\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"([^\\\"]*)\"(?!\\\\)')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        if match.startswith('\"') and match.endswith('\"'):\n            values.append(match[1:-1])\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    characters = []\n\n    # loop through each character in the word\n    for char in word:\n        # add each character to the list\n        characters.append(char)\n\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert the character to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum variable\n        sum_digits += digit_int\n    # Return the sum\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the last digit from the integer\n        n = n // 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string and then convert it back to an integer\n    num_str = str(n)\n    num_int = int(num_str)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Loop through each digit in the string and add it to the sum\n    for digit in num_str:\n        sum_digits += int(digit)\n    # Return the sum of the digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer\n        digit = int(char)\n        \n        # Add the integer to the sum of digits\n        sum_of_digits += digit\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its digits\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    A function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return True\n    \n    # Check if the first element of the list is greater than the last element\n    if lst[0] > lst[-1]:\n        return False\n    \n    # Check if all elements except the last one are less than or equal to the next element\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    # If the function reaches here, it means that the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] <= list1[1]:\n        for i in range(1, len(list1)):\n            if list1[i] <= list1[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] >= list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty or not\n    if len(list1) == 0:\n        return True\n\n    # check the first element with the second element\n    if list1[0] > list1[1]:\n        return False\n\n    # check the first two elements with the third and fourth elements\n    for i in range(len(list1)-2):\n        if list1[i+1] < list1[i+2]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of the input list\n    for sublist in list1:\n        # Sort the sublist in place using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing only the unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        unique_nums += list(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Check if input is a list of lists\n    if not all(isinstance(lst, list) for lst in nums):\n        raise ValueError('Input must be a list of lists.')\n\n    # Create a set from the first list\n    set1 = set(nums[0])\n\n    # Iterate over the rest of the lists and add their unique elements to the set\n    for lst in nums[1:]:\n        set1 |= set(lst)\n\n    # Convert the set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize an empty list to store the unique numbers\n    unique_nums = []\n    # iterate through each list in the input list\n    for lst in nums:\n        # iterate through each number in the list\n        for num in lst:\n            # if the number is not already in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Flatten the lists\n    flat_nums = [num for sublist in nums for num in sublist]\n    # Remove duplicates\n    unique_nums = list(set(flat_nums))\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # convert the input list to a set to remove duplicates\n    unique_nums = set(list_data)\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers and returns the product of the unique numbers.\n    \"\"\"\n    # Use a set to remove duplicates from the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    return unique_numbers[0] * unique_numbers[-1]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers\n    product = 1 # initialize the product to 1\n    for num in unique_numbers: # loop through each number in the unique numbers set\n        product *= num # multiply the product by the current number\n    return product # return the product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to set to get unique elements\n    unique_numbers = set(list_data)\n    # calculate the product of the unique elements\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list into a set to remove duplicates\n    unique_numbers = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*r*h + 2*math.pi*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area\n\nprint(surfacearea_cylinder(5, 10))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    area (float): the surface area of the cylinder\n\n    \"\"\"\n\n    area = math.pi * r**2 + 2 * math.pi * r * h + math.pi * h**2\n\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of a cylinder\n    area = 2 * pi * r * h\n    print(\"The surface area of the cylinder is\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r: float\n        The radius of the cylinder.\n    h: float\n        The height of the cylinder.\n\n    Returns:\n    float\n        The surface area of the cylinder.\n    \"\"\"\n    pi = 3.1415926535897932384626433832795\n    area = pi * r**2 + 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A \n    if len(B) <= len(A): \n        for i in range(len(A)-len(B)+1): \n            if A[i:i+len(B)] == B: \n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input, A and B. It returns True if B is a sublist of A, else False. \n    '''\n\n    # If A is empty, then B is a sublist of A.\n    if not A:\n        return True\n\n    # If B is empty, then A is not a sublist of B.\n    if not B:\n        return False\n\n    # Initialize two pointers, i and j, to the beginning of the lists.\n    i = 0\n    j = 0\n\n    # Traverse the lists until i is greater than j.\n    while i < len(A) and j < len(B):\n\n        # If the elements at i and j are same, then increment both i and j.\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n\n        # If the elements at i and j are not same, then move j to the next element in B.\n        else:\n            j = j + 1\n\n    # If all elements in A are traversed completely, then B is a sublist of A.\n    if i == len(A):\n        return True\n\n    # If all elements in B are traversed completely, then A is not a sublist of B.\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i=0\n    j=0\n    while j < len(B):\n        if A[i] == B[j]:\n            i+=1\n            if i==len(A):\n                return True\n        j+=1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    # Check if the second list is a sublist of the first list\n    if len(A) >= len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function checks whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    if A[:len(B)] == B: \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if A is a sublist of B\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Args:\n        A (list): A list.\n        B (list): Another list.\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n\n    # Check if A is a sublist of B or not \n    i = 0 \n    j = 0 \n\n    while i < len(A): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = j \n            j = 0 \n\n    if j == len(B): \n        return True \n\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n!= 0:\n        n //= 10\n    return n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    # loop through digits of number\n    while n > 0:\n        last_digit = n % 10\n        # check if last digit is prime\n        if is_prime(last_digit):\n            return last_digit\n        n = n // 10\n        \n    # if loop completes, return 0 (as last digit in factorial cannot be found)\n    return 0\n\ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Find the last digit in the factorial of a given number.\n\n    Args:\n    n (int): A positive integer\n\n    Returns:\n    int: The last digit of the factorial of n.\n    \"\"\"\n    # Convert n to a string and take the last digit\n    last_digit = int(str(n)[-1])\n    # Calculate the factorial of n using integer division\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    #convert number to string\n    n = str(n)\n    #get the last digit of the number\n    last_digit = int(n[-1])\n    #use recursion to calculate factorial\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize a variable to store the last digit of factorial\n    last_digit = 0\n    # initialize a variable to store the factorial\n    factorial = 1\n    # loop through each digit of the number and multiply by factorial\n    while n > 0:\n        digit = n % 10\n        last_digit = digit\n        factorial *= digit\n        n //= 10\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Factorial of negative number is not possible.\")\n        return\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n -= 1\n        return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list1[i] <= list3[k] <= list2[j]:\n            result.append(list3[k])\n            k += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize a new list to store the interleaved list\n    interleaved_list = []\n\n    # iterate over each list and add its elements to the new list in a cyclical pattern\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): First list of the same length.\n        list2 (list): Second list of the same length.\n        list3 (list): Third list of the same length.\n\n    Returns:\n        list: Interleaved list of the 3 input lists.\n    \"\"\"\n    # Get the length of all input lists\n    length = len(list1)\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each element of the input lists\n    for i in range(length):\n        # Add the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the second element of the first list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the third element of the first list to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Flatten the lists into a single list\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through the 3 lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # set up empty lists to hold the dissimilar elements\n    dissimilar_list1 = []\n    dissimilar_list2 = []\n\n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # if the element in tuple 1 is different from the element in tuple 2\n        if test_tup1[i]!= test_tup2[i]:\n            # add the element to the dissimilar list for tuple 1\n            dissimilar_list1.append(test_tup1[i])\n            # add the element to the dissimilar list for tuple 2\n            dissimilar_list2.append(test_tup2[i])\n\n    # return the two lists containing the dissimilar elements in each tuple\n    return dissimilar_list1, dissimilar_list2"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Set up an empty dictionary to store the dissimilar elements\n    dissimilar_dict = {}\n\n    # Loop through the tuples and compare each element\n    for elem in test_tup1:\n        # If the element is not in the other tuple, add it to the dissimilar dictionary\n        if elem not in test_tup2:\n            dissimilar_dict[elem] = test_tup1.count(elem)\n\n    # Loop through the other tuple and compare each element\n    for elem in test_tup2:\n        # If the element is not in the first tuple, add it to the dissimilar dictionary\n        if elem not in test_tup1:\n            dissimilar_dict[elem] = test_tup2.count(elem)\n\n    # Return the dissimilar dictionary with the count of each element\n    return dissimilar_dict"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    # Loop through the first tuple and check if the corresponding element exists in the second tuple\n    for elem1 in test_tup1:\n        if elem1 not in test_tup2:\n            dissimilar_list.append(elem1)\n    \n    # Loop through the second tuple and check if the corresponding element exists in the first tuple\n    for elem2 in test_tup2:\n        if elem2 not in test_tup1:\n            dissimilar_list.append(elem2)\n    \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.add(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_list = []\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # creating sets of the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # finding the union of the two sets\n    union = set1.union(set2)\n    # subtracting the intersection from the union and returning the elements\n    return list(union.difference(intersection))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == list:\n            result.extend(even_fnc(item))\n        else:\n            result.append(even_fnc(item))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a list to store even elements\n    even_list = []\n    \n    # Iterate through the tuple and check if each element is even\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_list.append(elem)\n    \n    # Return the even list as the result\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple: \n        if isinstance(item, (list, tuple)): \n            result.append(even_ele(item, even_fnc)) \n        else: \n            result.append(even_fnc(item)) \n    return result \n\ndef even_mult(num): \n    '''\n    A function to check if a number is even or odd.\n    '''\n    return num % 2 == 0 "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    # Define a helper function that checks if an element is even\n    def is_even(elem):\n        try:\n            int(elem)\n            return True if int(elem) % 2 == 0 else False\n        except ValueError:\n            return False\n\n    # Apply the even_fnc function to each element of the nested tuple\n    for elem in test_tuple:\n        if is_even(elem) and not even_fnc(elem):\n            test_tuple.remove(elem)\n\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function to check if a value is even or odd\n    def is_even(value):\n        return value % 2 == 0\n\n    # Check if all elements in the nested mixed tuple are even using the is_even function\n    for elem in test_tuple:\n        if not is_even(elem):\n            # If an uneven element is found, remove it from the tuple using the even_fnc function\n            test_tuple = even_fnc(test_tuple)\n            break\n\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = ((1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12))\nresult_tuple = even_ele(test_tuple, is_even)\nprint(result_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(sublist):\n        return [x for x in sublist if even_fnc(x)]\n\n    return [remove_uneven(sublist) for sublist in test_tuple]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = ((1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11, 12), (13, 14, 15, 16, 17, 18, 19))\nnew_tuple = even_ele(test_tuple, is_even)\nprint(new_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + 6 * b * s + 8 * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2 * b * s) + (2 * b * b) + (2 * s * s) + (4 * b * b * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s) + (b*s) + (s*b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (1/2) * b * s # surface area = (1/2) * base * height\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two parameters, base_edge and height, and returns the surface area of a square pyramid.\n    '''\n    return (base_edge * height) + (base_edge * height) + base_edge + (2 * base_edge * height)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the side of the pyramid\n    side = 2*b\n    # calculate the area of each triangle in the pyramid\n    area1 = 0.5*b*b\n    area2 = 0.5*s*s\n    # calculate the total surface area\n    total = area1 + area2\n    # return the total surface area\n    return total"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in the base edge and height of a square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n    area = 0.5 * b * s * b # Formula for finding the surface area of a square pyramid\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = b * s * 2 # calculate the surface area of the base\n    print(\"The surface area of the square pyramid is:\", surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b+2*s)*(b+s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes two arguments, b and s, which represent the base and height of the square pyramid respectively.\n    It calculates and returns the surface area of the square pyramid.\n    \"\"\"\n    area = b * s + b * b + s * s\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (1-0.5*(n-1)) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number using matrix exponentiation.\n\n    Note: This implementation uses matrix exponentiation to compute the Catalan number.\n    The Catalan number is defined as the number of ways to partition a set into two non-empty disjoint subsets such that the number of elements in the intersection of the two subsets is equal to the number of elements in the first subset.\n\n    The formula for the Catalan number is:\n\n    C(n) = binomial(2n, n) * C(n-1)\n\n    where binomial(n, k) is the binomial coefficient.\n\n    Args:\n        n: The index of the Catalan number to compute.\n\n    Returns:\n        The nth Catalan number.\n    \"\"\"\n\n    def binomial(n, k):\n        \"\"\"\n        Compute the binomial coefficient using memoization.\n\n        Args:\n            n: The upper limit of the binomial coefficient.\n            k: The index of the coefficient.\n\n        Returns:\n            The binomial coefficient.\n        \"\"\"\n        memo = {0: 1, 1: 1}\n        for i in range(2, n + 1):\n            memo[i] = memo[i - 1] * i\n        return memo[k]\n\n    def matrix_power(matrix, n):\n        \"\"\"\n        Compute the nth power of a matrix using matrix exponentiation.\n\n        Args:\n            matrix: The matrix to compute the power of.\n            n: The exponent.\n\n        Returns:\n            The nth power of the matrix.\n        \"\"\"\n        if n == 1:\n            return matrix\n        elif n % 2 == 0:\n            half_power = matrix_power(matrix, n // 2)\n            return half_power @ half_power\n        else:\n            return matrix @ matrix_power(matrix, n - 1)\n\n    n_plus_1 = n + 1\n    return binomial(2 * n_plus_1, n) * matrix_power([[1, 1], [1, 0]], n_plus_1 - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    This is a recursive formula for the Catalan number:\n\n    C(n) = n(n-1)(2n-1)/(factorial(n))\n\n    where factorial(n) is the factorial function.\n\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n*(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    # Initialize the sum of Catalan numbers\n    sum_cat = 0\n    # Initialize the binomial coefficient\n    binom = 1\n    # Calculate the factorial of n\n    fact_n = 1\n    for i in range(1, n+1):\n        fact_n *= i\n    # Calculate the factorial of (2n+1)\n    fact_2n_plus_1 = 1\n    for i in range(2, 2*n+2):\n        fact_2n_plus_1 *= i\n    # Calculate the binomial coefficient\n    for i in range(n+1):\n        binom *= i\n        binom /= (i-1)\n    # Calculate the Catalan number\n    sum_cat = fact_n / (fact_2n_plus_1 * binom)\n    return sum_cat"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using the formula:\n\n    C(n) = (2n)!/(n!(n-1)!)\n\n    Note: This function uses recursion to calculate the factorials.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n)/(n*(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        # Calculate catalan number using formula\n        return binomial(2*num, num)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n) = (2n)! / [(2n-1)! * (n-1)!]\n\n    This formula is derived from the fact that the number of ways of partitioning n items into two groups of size m\n    is the same as the number of ways of partitioning n items into m-1 groups of size m, but not including the\n    n-th item. Thus, the number of ways of partitioning n items into two groups of size m can be expressed as\n    the product of the number of ways of partitioning n-1 items into two groups of size m-1 and the number of\n    ways of partitioning n-1 items into one group of size m.\n\n    The base case is when m=1, in which case C(n) = 2n.\n\n    Args:\n        n (int): The number for which the Catalan number is to be found.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-1)*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n        n (int): The position of the Catalan number to be returned.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nn = int(input(\"Enter a position for the Catalan number: \"))\nprint(\"The\", n, \"Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) + catalan_number(n//2)\n    else:\n        return catalan_number(n//2) - catalan_number(n//2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    positions = [match.start() for match in matches]\n    return matches, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for matching adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through each match and print the position and adverb\n    for i, match in enumerate(matches):\n        print(f'{i+1}. {match}')\n\n    # Return the list of positions and adverbs\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function will find all the adverbs ending with \"ly\" in a given string.\n    It will return a list of tuples containing the starting and ending positions of the adverbs.\n    \"\"\"\n    pattern = r'\\b(ed|ing|ingly|ingly|ly)\\b'\n    adverbs = re.findall(pattern, text)\n    positions = []\n\n    for i in range(len(adverbs)):\n        if adverbs[i][-2:] == 'ly':\n            positions.append((text.find(adverbs[i]), text.find(adverbs[i])+len(adverbs[i])-2))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b(ly)\\b\\s*(?=\\w)')\n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.start(), match.end())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text, re.IGNORECASE)\n    positions = [match.start() for match in re.finditer(r'\\bly\\b', text, re.IGNORECASE)]\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression to match the adverb ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and find their positions in the text\n    for i, match in enumerate(matches):\n        # Find the position of the first character of the match\n        pos = text.index(match)\n\n        # Print the adverb and its position in the text\n        print(f'{match}: {pos}')\n\n    # Return the list of adverb positions\n    return [pos for pos, match in enumerate(matches) for _ in range(text.count(match))]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    \n    # Find all occurrences of adverbs in the text using re.findall()\n    adverbs = re.findall(pattern, text)\n    \n    # Initialize empty list for positions of adverbs\n    positions = []\n    \n    # Loop through all adverbs found and append their position to positions list\n    for i, adverb in enumerate(adverbs):\n        positions.append((i, adverb))\n    \n    # Return a tuple of adverbs and positions\n    return adverbs, positions\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and return a list of tuples containing the adverb and its positions\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, (start, end)))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = []\n    for match in adverbs:\n        positions.append(text.index(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[a-z]*ly\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Initialize an empty list to store the adverb positions\n    adverbs = []\n    # Iterate over the matches and store their positions in the 'adverbs' list\n    for match in matches:\n        start, end = match.start(), match.end()\n        adverbs.append((start, end))\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the dataset in descending order based on their value\n    items.sort(reverse=True)\n\n    # Return the top n items from the sorted dataset\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return [heap[0][1] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the number of items to return\n    as arguments. It sorts the items in descending order based on their price,\n    and then returns the top n items as a list.\n    '''\n\n    # Sort the items in descending order based on their price\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the top n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items list and add each item to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the size of the heap exceeds n, remove the item with the lowest value\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the list of n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    # Iterate through the items\n    for item in items:\n        # Add the item to the min heap\n        heapq.heappush(min_heap, item)\n        # If the min heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list containing the n most expensive items in the dataset.\n    '''\n    \n    # Convert the items to a heap (min-heap)\n    heap = [-x for x in items]\n    heapq.heapify(heap)\n    \n    # Extract the n most expensive items\n    result = []\n    for _ in range(n):\n        result.append(-heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a min-heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add each item to the min-heap if it's not already there\n    for item in items:\n        if item not in min_heap:\n            heapq.heappush(min_heap, item)\n\n        # Remove the least expensive item from the min-heap if its value is greater than the current item\n        while len(min_heap) > n:\n            if heapq.heappop(min_heap) > item:\n                break\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            # If the heap is already full, check if the current item is cheaper\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    split_list = l[:n] + [l[n]]\n    # join the list and return\n    return ''.join(split_list)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        return [l[n]] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is valid\n    if n < 0 or n > len(l):\n        return 'Invalid input. Please enter a valid index.'\n    \n    # split the list at n element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # concatenate the first and second parts\n    new_list = second_part + first_part\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    return l[:mid] + l[mid:] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # check if the length of the list is less than n\n    if len(l) < n:\n        print(\"The length of the list is less than n.\")\n        return l\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    new_list = first_part + second_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if len(l) <= n:\n        raise ValueError('list has less than n elements')\n    first = l[:n]\n    rest = l[n:]\n    return rest + first"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"Error: List must have at least two elements\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # find the difference between the two values\n    diff = largest - smallest\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    elif len(nums) == 1:\n        return \"List has only one element\"\n    else:\n        # sort the list in descending order\n        nums.sort(reverse=True)\n        # return the difference between the smallest and largest value\n        return nums[0] - nums[-1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculating the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize empty list to store perfect squares\n    perfect_squares = []\n\n    # loop through a range of values from a to b\n    for num in range(a, b+1):\n        # check if the current number is a perfect square\n        if num == int(num**0.5)**2:\n            perfect_squares.append(num)\n\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i*i == b:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # To find perfect squares between a and b, we need to iterate\n    # through all the values of n such that n^2 <= b and n^2 >= a\n    # and add up the squares of those values.\n    result = 0\n    for n in range(int(a**0.5), int(b**0.5) + 1):\n        if n**2 == a or n**2 == b:\n            continue  # skip squares that are equal to a or b\n        result += n**2\n\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == i and i > 0:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a and b are positive integers\n    if not isinstance(a, int) or not isinstance(b, int) or a <= 0 or b <= 0:\n        raise ValueError(\"a and b must be positive integers.\")\n\n    # Create a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Iterate from a to b\n    for i in range(a, b+1):\n        # Calculate the square root of i\n        sqrt_i = int(i ** 0.5) + 1\n\n        # Check if i is a perfect square\n        if i == sqrt_i ** 2:\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num == perfect_square(num):\n            print(num, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            if i*i + j*j == a*a or i*i + j*j == b*b:\n                squares.append([i, j])\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the square root of the number is an integer\n        if int(num**0.5) ** 2 == num:\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return []\n    if a % 2 == 0:\n        a -= 1\n    squares = []\n    while b > 0:\n        if b % 2 == 0:\n            squares.append(a)\n            b -= 1\n            a += 2\n        else:\n            b -= 1\n            a += 2\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if r == 0:\n        return 0,0\n    else:\n        return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple of x and y coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    - r: The radius of the circle.\n    - theta: The angle of the coordinate system in radians.\n\n    Returns:\n    - x: The x-coordinate of the point.\n    - y: The y-coordinate of the point.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes in the polar coordinates (r, theta) and returns the rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle from radians to degrees\n    angle = cmath.degrees(cmath.phase(x + y*1j))\n\n    # Calculate length\n    length = cmath.sqrt(x*x + y*y)\n\n    # Convert to rectangular coordinates\n    x_rect = length*cmath.cos(angle*cmath.pi/180)\n    y_rect = length*cmath.sin(angle*cmath.pi/180)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius\n    theta (float): The angle in radians\n    \n    Returns:\n    tuple: The rectangular coordinates (x, y)\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Args:\n    r (float): The radius.\n    phi (float): The angle in radians.\n    \n    Returns:\n    tuple: A tuple containing the rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the input list is empty or not\n    if len(newList) < 2:\n        print(\"Input list must have at least two elements.\")\n        return None\n\n    # Interchange the first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    # Print the updated list\n    print(\"Updated List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # use slicing to access the last element of the list\n    last = newList[-1] \n    # remove the last element from the list using slicing\n    newList = newList[:-1] \n    # add the last element to the front of the list using slicing\n    newList = [last] + newList \n    # return the modified list\n    return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"Error: List must have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        return \"The list must have at least two elements to be interchanged.\"\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initializing the length of the list\n    length = len(newList)\n    # swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # returning the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: The list must have at least two elements.\"\n    \n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Printing the modified list\n    print(newList)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_coeff = 0\n    for i in range(1, k+1):\n        sum_coeff += ((n-i+1) * i) // k\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        if k == 0:\n            return 1\n        else:\n            return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize sum to 0\n    sum_coeff = 0\n    \n    # Loop through all possible combinations of k consecutive numbers\n    for i in range(n-k+1):\n        # Calculate the product of the k consecutive numbers and add to sum\n        sum_coeff += n-i+1 \n        \n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + n*binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1 # initialize the first coefficient to 1\n    \n    # loop through k terms\n    for i in range(k): \n        # update the coefficient by multiplying it by (n-i)\n        coeff *= (n-i)\n        \n    # return the sum of the first k coefficients\n    return sum(coeff)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(n+1):\n        if i >= k:\n            sum += (n-i+1)*binomial_Coeff(n-1,k-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k or n == 0 or k == 0:\n        return 1\n\n    first_coeff = n - k + 1\n    second_coeff = n - k\n\n    return first_coeff * second_coeff\n\ndef sum_product_of_consecutive_coeffs(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 0\n\n    product = 1\n    for i in range(1, n + 1):\n        product *= binomial_Coeff(n, i)\n\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    if n == 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeros\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\D+(\\d+)$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^0+\\d+\"\n    return re.sub(pattern, \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?!\\d)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from the IP address\n    ip = re.sub(r'^(0\\.)+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\b|\\B\\d+\\b)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+(\\d+)\", r\"\\1\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(\\d)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.\\d+\\.\\d+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    # find the first even number in the list\n    even_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    # find the first odd number in the list\n    odd_num = None\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n\n    # calculate the difference between the first even and first odd numbers\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count == 2:\n            count += num - list1[0]\n            even_count = 0\n            odd_count = 0\n        elif odd_count == 2:\n            count += num - list1[0]\n            even_count = 0\n            odd_count = 0\n    return count"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        even_index = 0\n    else:\n        even_index = 1\n    if odd % 2 == 0:\n        odd_index = 1\n    else:\n        odd_index = 0\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            if count == 1:\n                print(\"Even number:\", i)\n            else:\n                print(\"Odd number:\", i)\n        else:\n            if count == 1:\n                print(\"Odd number:\", i)\n            else:\n                print(\"Even number:\", i)\n    return count - 1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # initialize even and odd variables to 0\n    even_count = odd_count = 0\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # increment even count\n            even_count += 1\n        # check if the number is odd\n        else:\n            # increment odd count\n            odd_count += 1\n\n    # find the difference between the first even and first odd numbers\n    diff = even_count - odd_count\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n\n    # Filter out the even and odd numbers\n    even_nums = list(filter(lambda x: x % 2 == 0, lst))\n    odd_nums = list(filter(lambda x: x % 2!= 0, lst))\n\n    # If there are less than 2 even and odd numbers, return None\n    if len(even_nums) < 2 or len(odd_nums) < 2:\n        return None\n\n    # Calculate the sum of even and odd numbers\n    even_sum = sum(even_nums)\n    odd_sum = sum(odd_nums)\n\n    # Return the difference\n    return even_sum - odd_sum"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even = first_even - num\n        elif num % 2 == 1:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd = first_odd - num\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if even == [] or odd == []:\n        print(\"The list doesn't have any even or odd numbers.\")\n        return None\n    return abs(even[0] - odd[0])"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary numbers to decimal numbers\n    dec1 = int(str1,2)\n    dec2 = int(str2,2)\n    \n    # Find the difference between the two decimal numbers\n    diff = dec2 - dec1\n    \n    # Sort the difference in descending order\n    diff_list = sorted(diff, reverse=True)\n    \n    # Count the number of swaps required to convert the binary number to decimal number\n    count = 0\n    for i in range(len(diff_list)):\n        if diff_list[i]!= 0:\n            count += 1\n            diff_list[i] = 0\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * n for i in range(n+1)]\n    min_swaps = float('inf')\n    \n    for i in range(n+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == '0' and str2[j-1] == '0':\n                dp[i][j] = dp[i-1][j-1]\n            elif str1[i-1] == '0' and str2[j-1] == '1':\n                dp[i][j] = dp[i-1][j] + 1\n            elif str1[i-1] == '1' and str2[j-1] == '0':\n                dp[i][j] = dp[i][j-1] + 1\n            elif str1[i-1] == '1' and str2[j-1] == '1':\n                dp[i][j] = min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j]) + 1\n                \n    min_swaps = dp[n][n]\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Check if both the binary strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Both binary strings must be of equal length.\"\n    \n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables to store the number of swaps required\n    swaps = 0\n    carry = 0\n    \n    # Perform binary addition to convert the integers to their equivalent binary strings\n    while num1!= num2:\n        if num1 > num2:\n            # Add the carry to the least significant bit of num1\n            num1 = num1 ^ carry\n            carry = num1 & (num1 + 1)\n            # Increment the number of swaps required\n            swaps += 1\n        else:\n            # Add the carry to the least significant bit of num2\n            num2 = num2 ^ carry\n            carry = num2 & (num2 + 1)\n            # Increment the number of swaps required\n            swaps += 1\n    \n    # Add the carry to the least significant bit of the final binary string\n    if carry!= 0:\n        swaps += 1\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # Convert both strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    \n    # Compare binary strings\n    diff = 0\n    for i in range(max(n1, n2)):\n        if i >= n1:\n            diff += 1\n        elif i >= n2:\n            diff -= 1\n        elif bin1[i]!= bin2[i]:\n            diff += 1\n            \n    # Return minimum number of swaps required to convert binary strings\n    return abs(diff)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    binary1 = []\n    binary2 = []\n    count = 0\n    for digit in str1 :\n        if digit == '1' :\n            binary1.append(1)\n        else :\n            binary1.append(0)\n    for digit in str2 :\n        if digit == '1' :\n            binary2.append(1)\n        else :\n            binary2.append(0)\n    int1 = int(''.join(str(x) for x in binary1))\n    int2 = int(''.join(str(x) for x in binary2))\n    while int1!= int2 :\n        count += 1\n        for i in range(len(binary1)) :\n            if binary1[i]!= binary2[i] :\n                binary1[i],binary2[i] = binary2[i],binary1[i]\n                break\n        int1 = int(''.join(str(x) for x in binary1))\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables for counting swaps\n    swaps = 0\n    temp = \"\"\n    # Convert both numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Convert the binary numbers to lists of digits\n    num1_list = [int(digit) for digit in str1]\n    num2_list = [int(digit) for digit in str2]\n    # Iterate through the digits of the binary numbers\n    for i in range(len(num1_list)):\n        # Check if the digits are equal\n        if num1_list[i]!= num2_list[i]:\n            # If they are not, count a swap\n            swaps += 1\n            # Swap the digits\n            num1_list[i], num2_list[i] = num2_list[i], num1_list[i]\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings as input and returns the minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n    # Convert the input strings to binary lists\n    binary1 = [int(i) for i in str1]\n    binary2 = [int(i) for i in str2]\n\n    # Initialize variables\n    swaps = 0\n    i, j = 0, 0\n\n    # Iterate through the lists\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n        else:\n            # Swap the bits if the digits are different\n            binary1[i], binary1[j] = binary1[j], binary1[i]\n            binary2[i], binary2[j] = binary2[j], binary2[i]\n            swaps += 1\n            i += 1\n            j += 1\n\n    # Calculate the number of remaining bits in the binary lists\n    while i < len(binary1):\n        binary1[i], binary1[j] = binary1[j], binary1[i]\n        binary2[i], binary2[j] = binary2[j], binary2[i]\n        swaps += 1\n        i += 1\n        j += 1\n\n    while j < len(binary2):\n        binary1[i], binary1[j] = binary1[j], binary1[i]\n        binary2[i], binary2[j] = binary2[j], binary2[i]\n        swaps += 1\n        i += 1\n        j += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to lists of integers\n    binary1 = [int(bit) for bit in str1]\n    binary2 = [int(bit) for bit in str2]\n\n    # Calculate the length of the shorter binary string\n    n = min(len(binary1), len(binary2))\n\n    # Initialize variables to keep track of swaps and the current swap index\n    swaps = 0\n    current_swap = 0\n\n    # Iterate over the binary strings until we reach the length of the shorter string\n    for i in range(n):\n        # If the binary strings are equal at this point, we don't need to swap anything\n        if binary1[i] == binary2[i]:\n            pass\n        # If the binary strings are different at this point, we need to swap one character\n        else:\n            # Increment the swap count\n            swaps += 1\n\n            # If the current swap index is at the end of the list, we need to start over from the beginning\n            if current_swap == len(binary1):\n                current_swap = 0\n\n            # Swap the characters at the current swap index with the characters at the other end of the list\n            binary1[i], binary1[current_swap] = binary1[current_swap], binary1[i]\n            binary2[i], binary2[current_swap] = binary2[current_swap], binary2[i]\n\n            # Increment the current swap index\n            current_swap += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize variables\n    count = 0\n    temp = 0\n    # Loop through each character in the two binary strings\n    for i in range(len(str1)):\n        # Check if the current characters are different\n        if str1[i]!= str2[i]:\n            # If they are different, swap them and increment the count\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # iterate through the bits of the numbers and find the minimum number of swaps required\n    swaps = 0\n    while num1!= num2:\n        # check if the bits are different\n        if num1 & num2:\n            # if they are, swap the bits\n            num1 = (num1 ^ num2) ^ ((num1 & num2) << 1)\n            num2 = (num2 ^ num1) ^ ((num2 & num1) << 1)\n            swaps += 1\n        else:\n            # if they are the same, move the numbers one bit to the right\n            num1 = (num1 >> 1) << 1\n            num2 = (num2 >> 1) << 1\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # Calculate the size in bytes of the tuple\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple_obj in tuple_list:\n        total_size += sys.getsizeof(tuple_obj)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the total size in bytes of the tuple\n    total_size = 0\n    for element in tuple_list:\n        # Determine the size in bytes of the element\n        element_size = sys.getsizeof(element)\n        total_size += element_size\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"The size of the tuple is: \")\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    sys.stdout.write(str(total_size) + \" bytes.\\n\")\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input, and returns the size in bytes of the largest tuple.\n    '''\n    # Iterate over the list of tuples\n    max_size = 0\n    for tup in tuple_list:\n        # Get the size in bytes of the tuple\n        size = sys.getsizeof(tup)\n        # Update the maximum size if necessary\n        if size > max_size:\n            max_size = size\n    return max_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    # initialize two pointers for each array\n    i, j = 0, 0\n    # initialize the kth element\n    kth = None\n    # loop through both arrays until one of them is exhausted\n    while i < len(arr1) and j < len(arr2):\n        # if arr1[i] is smaller than arr2[j], increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # if arr1[i] is greater than arr2[j], increment j\n        else:\n            j += 1\n        # if we have found k elements so far, return that element\n        if i == len(arr1) and j == len(arr2):\n            return kth\n        # if we have found k elements and one array has been exhausted, return the remaining elements from the other array\n        if i == len(arr1):\n            kth = j\n            return kth\n        # if we have found k elements and the other array has been exhausted, return the remaining elements from the other array\n        if j == len(arr2):\n            kth = i\n            return kth\n    # if we have not found k elements, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # initialize variables to keep track of the index of arr1 and arr2\n    i, j = 0, 0\n    \n    # initialize variable to keep track of the count of elements in the result array\n    count = 0\n    \n    # while both arrays are not empty and the count is less than k\n    while i < n1 and j < n2 and count < k:\n        # compare the elements at index i and j of arr1 and arr2\n        if arr1[i] <= arr2[j]:\n            # if arr1[i] is less than or equal to arr2[j], add it to the result array and increment the count\n            result.append(arr1[i])\n            i += 1\n            count += 1\n        else:\n            # if arr1[i] is greater than arr2[j], add it to the result array and increment the count\n            result.append(arr2[j])\n            j += 1\n            count += 1\n            \n    # if k is greater than the number of elements in the result array, return -1\n    if count < k:\n        return -1\n    # otherwise, return the kth element from the result array\n    else:\n        return result[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    # Initialize variables to keep track of the current indices\n    i = 0\n    j = 0\n    # Initialize variables to keep track of the current min_idx value\n    min_idx = 0\n    # Initialize variables to keep track of the count of elements from arr1 and arr2\n    count1 = 0\n    count2 = 0\n    # Loop until we have counted k elements from both arrays\n    while count1 + count2 < k:\n        if i == m:\n            # We have counted k elements from arr1, so add the remaining elements from arr2\n            for _ in range(count2, n):\n                arr1[min_idx + count1] = arr2[_]\n                count1 += 1\n        elif j == n:\n            # We have counted k elements from arr2, so add the remaining elements from arr1\n            for _ in range(count1, m):\n                arr2[min_idx + count2] = arr1[_]\n                count2 += 1\n        elif arr1[i] < arr2[j]:\n            # arr1[i] is smaller, so add it to arr1 and increment i\n            arr1[min_idx + count1] = arr1[i]\n            i += 1\n            count1 += 1\n        else:\n            # arr2[j] is smaller, so add it to arr2 and increment j\n            arr2[min_idx + count2] = arr2[j]\n            j += 1\n            count2 += 1\n        # Update the minimum index if we have counted k elements from both arrays\n        min_idx += count1\n    # Return the kth element\n    return arr1[min_idx + k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left = 0\n    right = len(arr1) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr1[mid] < arr2[0]:\n            left = mid + 1\n        elif arr1[mid] > arr2[0]:\n            right = mid - 1\n        else:\n            if mid == k - 1:\n                return arr2[0]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize variables to keep track of the index of the smallest element in both arrays\n    i, j = 0, 0\n\n    # Initialize the variable to keep track of the index of the kth element\n    kth_index = 0\n\n    # Loop until we have found the kth element\n    while kth_index < k and i < len(arr1) and j < len(arr2):\n        # If the element at index i is smaller than the element at index j, move the index of i one position to the right\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the element at index i is larger than the element at index j, move the index of j one position to the right\n        else:\n            j += 1\n        # Increment the kth index\n        kth_index += 1\n\n    # Return the kth element\n    return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n                j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # Use two pointers to find the kth element\n    i = 0\n    j = 0\n    while i < len(merged_arr) and j < len(merged_arr):\n        if merged_arr[i] < merged_arr[j]:\n            i += 1\n        elif merged_arr[i] > merged_arr[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return merged_arr[i]\n            i += 1\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n        else:\n            if k == n1 + 1 - j:\n                return arr2[j]\n            j += 1\n        k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments:\n    arr1: A list of sorted integers.\n    arr2: A list of sorted integers.\n    k: The integer k for which we want to find the kth element in the two arrays.\n    \"\"\"\n\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # Keep track of the number of elements in both arrays\n    total_elements = len(arr1) + len(arr2)\n\n    # Iterate until we have found the kth element\n    while i < len(arr1) and j < len(arr2):\n        # If the current element in arr1 is less than the current element in arr2, increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element in arr1 is greater than the current element in arr2, increment j\n        else:\n            j += 1\n\n        # If we have found the kth element, return it\n        if i == k:\n            return arr1[i - 1]\n        elif j == k:\n            return arr2[j - 1]\n\n        # If we have checked all elements in both arrays, return None\n        if i + j == total_elements:\n            return None\n\n    # If we have not found the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        num_str = str(number)\n        sum = 0\n        for digit in num_str:\n            digit_int = int(digit)\n            sum += digit_int ** len(num_str)\n        if sum == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to store the length of the number\n    length = len(str(number))\n\n    # iterate over the digits of the number and calculate the sum of their powers\n    sum_of_powers = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_powers += digit ** length\n        temp //= 10\n\n    # if the sum of the powers equals the original number, then it is an armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    # converting the number into a string\n    num_str = str(num)\n    # initializing the sum of the digits\n    sum = 0\n    # iterating over each digit of the number\n    for digit in num_str:\n        # converting each digit into an integer and adding it to the sum\n        sum += int(digit) ** len(num_str)\n    # returning True if the sum of the digits is equal to the original number\n    return sum == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    str_num = str(number)\n    # Initialize the sum of the powers of the digits to zero\n    sum_of_powers = 0\n    # Iterate over each digit in the string\n    for digit in str_num:\n        # Convert each digit to an integer and square it\n        power = int(digit) ** 2\n        # Add the square to the sum of powers\n        sum_of_powers += power\n    # Check if the sum of powers equals the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    n = int(n)\n    return all(int(digit) ** len(str(n)) == n for digit in str(n))\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    if is_armstrong_number(number):\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a number is armstrong or not.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return n == s"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n    # Calculate the sum of the squares of each digit in the number\n    sum_of_squares = sum([int(digit)**len(num_str) for digit in num_str])\n    # Check if the sum of the squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    \n    num = str(number)\n    power = len(num)\n    \n    sum = 0\n    for i in range(len(num)):\n        temp = int(num[i])\n        sum += temp ** power\n    \n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num = int(num)\n    sum = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    if num < 10:\n        return False\n    else:\n        power = len(str(num))\n        sum = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** power\n            temp //= 10\n        if sum == num:\n            return True\n        else:\n            return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    print(\"Sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"Average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate n times and add each natural number to sum and count\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # calculate and print the sum and average\n    average = sum / count\n    print(\"The sum of first\", number, \"natural numbers is:\", sum)\n    print(\"The average of first\", number, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize sum and average variables to 0\n    sum_of_numbers = 0\n    average = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # Add each number to the sum\n        sum_of_numbers += i\n\n        # Calculate the average\n        average = sum_of_numbers / number\n\n    # Return the sum and average as a tuple\n    return (sum_of_numbers, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    # initialize sum and count variables\n    total = 0\n    count = 0\n    \n    # iterate n times to calculate sum and average\n    for i in range(1, n+1):\n        total += i\n        count += 1\n        \n    # calculate sum and average\n    average = total/count\n    \n    # print the results\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum_list = 0\n    count = 0\n    # loop through numbers\n    while count < number:\n        # add number to list\n        sum_list += count\n        # increment count\n        count += 1\n    # calculate average\n    avg = sum_list / number\n    # return sum and average\n    return sum_list, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    # loop through numbers and update sum and count\n    for i in range(number):\n        sum += i\n        count += 1\n    # calculate and return average\n    return sum / count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum of the first n natural numbers and the average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n\n    for i in range(number):\n        sum_ += i\n        count += 1\n\n    average = sum_ / count\n\n    return sum_, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Iterate through each character in the string and update the frequency in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Iterate through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # Loop through the dictionary again to find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] == 2:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    If there is no repeated character, it will return None.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store the frequency of each character\n    freq_dict = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    # initialize the first repeated character to be None\n    first_rep_char = None\n    # loop through the characters in the string again and find the first repeated character\n    for char in str1:\n        # if the character is already in the dictionary and its frequency is greater than 1, update the first repeated character\n        if char in freq_dict and freq_dict[char] > 1:\n            if first_rep_char is None or char < first_rep_char:\n                first_rep_char = char\n    # return the first repeated character\n    return first_rep_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store characters and their counts\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment its count by 1\n            char_count[char] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            char_count[char] = 1\n            \n    # loop through the dictionary to find the first repeated character\n    for char in char_count:\n        # if the count of the character is greater than 1, it must be the first repeated character\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if all(i%j!= 0 for j in range(2, i//2+1)):\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n):\n        if i % 3 == 0 and i % 5 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(2, n+1):\n        if i > 2:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_list.append(i)\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n+1):\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n):\n        lucid_numbers.append(i + 1)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i == 2:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i**2)\n        else:\n            lucid_numbers.append(i + 2)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i == 0:\n            ludic.append(0)\n        elif i == 1:\n            ludic.append(0)\n        elif i > 1:\n            ludic.append(2*ludic[i-1] + 1)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a number is lucid or not.\n    '''\n    if n < 10:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the input string into words\n    words = s.split()\n    # Reverse each word and join them with a space\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse the words\n    words.reverse()\n    # join the words back into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # convert string to list of words\n    words = s.split()\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back into a string\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # Check for all odd numbers greater than 3\n    elif num % 2 == 1 and num > 3:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n    # If the number is not divisible by 2 or 3, it is a prime number\n    else:\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if num is greater than 1\n    if num <= 1:\n        return False\n    # loop through all numbers from 2 to sqrt(num)\n    for i in range(2, int(num ** 0.5) + 1):\n        # check if num is divisible by i\n        if num % i == 0:\n            return False\n    # num is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match found: {literal}, start index: {start_index}, end index: {end_index}\")\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a given string for a given regex pattern and returns the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append(match.group())\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        print(f\"Found literal {match} at index {start} to {end}\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return matches[0].group(), matches[0].start(), matches[0].end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    else:\n        b = 0\n        for i in range(1, n+1):\n            b += bell_number(i)\n        return b\n\ndef bell_number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n*bell_number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (2 * (n - 1) + 1) * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first two bell numbers\n    a = 1\n    b = 1\n    # Use a loop to find the nth bell number\n    for i in range(2, n+1):\n        # Compute the next bell number as the sum of the two previous ones\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth bell number\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number. \n    Bell numbers are numbers that occur with the same frequency as prime numbers. \n    The nth Bell number is the number with the same parity (odd or even) as the nth prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def parity(n):\n        if n % 2 == 0:\n            return 'even'\n        else:\n            return 'odd'\n    \n    def nth_prime(n):\n        primes = [2]\n        i = 3\n        while len(primes) < n:\n            if is_prime(i):\n                primes.append(i)\n            i += 2\n        return primes\n    \n    def nth_bell(n, primes):\n        bells = []\n        for prime in primes:\n            if prime % 2 == parity(n):\n                bells.append(prime)\n        return bells\n    \n    primes = nth_prime(n)\n    nth_bell_num = nth_bell(n, primes)[0]\n    return nth_bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nprint(bell_Number(5))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        bell = 0\n        while True:\n            bell = bell + 1\n            if bell == n:\n                return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # Recursive case\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and k as input and returns a list with the same elements but the k'th element removed.\n    '''\n    if k >= len(list1):\n        return []\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Parameters:\n        list1 (list): the list from which to remove the k'th element.\n        L (int): the value of k.\n\n    Returns:\n        list: the list with the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    for i in range(L-1):\n        if list1[i] == list1[L-1]:\n            k -= 1\n            if k == 0:\n                break\n    if k == 0:\n        return list1[:L-1]\n    else:\n        return list1[:k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L == 1:\n        return []\n    elif L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n    # Use a loop to remove the k'th element\n    count = 0\n    for num in set_list:\n        count += 1\n        if count == L:\n            set_list.remove(num)\n            break\n    # Convert the set back to a list and return it\n    return list(set_list)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the kth element from a list.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input is not a list.\")\n    if not isinstance(k, int):\n        raise ValueError(\"k is not an integer.\")\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k is out of range.\")\n\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    # check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    # find the length of the longest row\n    max_length = max(len(row) for row in test_list)\n    \n    # loop over the rows of the matrix and find then'th column\n    result = []\n    for row in test_list:\n        if N >= len(row):\n            raise ValueError(f\"N must be less than the length of each row, but N = {N}\")\n        result.append(max(row[n] for n in range(max_length)))\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    max_val = 0\n    for i in range(n):\n        if i == N-1:\n            for j in range(m):\n                if test_list[i][j] > max_val:\n                    max_val = test_list[i][j]\n            return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the number of rows in the matrix\n    num_rows = len(test_list)\n\n    # Initialize a variable to keep track of the maximum value in then'th column\n    max_value = -float('inf')\n\n    # Iterate through each row in the matrix and check if then'th column value is greater than the current maximum value\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n\n    # Return the maximum value in then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = None\n    for row in test_list:\n        if max_val is None or row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i][N - 1]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Calculate the maximum value of then'th column\n    max_value = 0\n    for i in range(num_rows):\n        if i < N or i >= num_rows - N:\n            if max_value < test_list[i][N-1]:\n                max_value = test_list[i][N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if len(test_list[i]) > N:\n            if test_list[i][N] > max_val:\n                max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in matrix:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # First, get the length of the first row\n    first_row_length = len(matrix[0])\n\n    # Second, iterate over the first row and get then'th column value\n    for i in range(first_row_length):\n        max_value = max(matrix[j][i] for j in range(len(matrix)))\n        print(f\"The max value of column {N} is {max_value}\")"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        new_sublist = [first_element, second_element]\n        merged.append(new_sublist)\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def sort_sublists(sublists):\n        for i in range(len(sublists)):\n            sublists[i].sort()\n        return sublists\n\n    def merge_sublists(sublists):\n        merged_sublists = []\n        while sublists:\n            first_sublist = sublists.pop(0)\n            second_sublist = sublists.pop(0)\n            merged_sublists.append([first_sublist[0], second_sublist[0]])\n            merged_sublists.append([first_sublist[1], second_sublist[1]])\n        return merged_sublists\n\n    sorted_lst = sort_sublists(lst)\n    merged_lst = merge_sublists(sorted_lst)\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # iterate through the list of tuples and add the value to the cumulative sum\n    for value in test_list:\n        cum_sum += value\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples as input and returns the cumulative sum of all the values present in the tuples.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum list\n    cumulative_sum = []\n    # loop through the list of tuples\n    for t in test_list:\n        # initialize the current cumulative sum to zero\n        current_sum = 0\n        # loop through the list of values in each tuple\n        for i in t:\n            # add the value to the current cumulative sum\n            current_sum += i\n        # append the current cumulative sum to the cumulative sum list\n        cumulative_sum.append(current_sum)\n    # return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Loop through the tuple list\n    for num in test_list:\n        # Add the current number to the cumulative sum\n        cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(test_list[i][0] + sum_list[i-1] if i>0 else test_list[i][0])\n    return sum_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(sum(i)/len(i))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg.append(total / len(nums[i]))\n    return avg"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    total = 0\n    count = 0\n    result = []\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total / count)\n        total = 0\n        count = 0\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        average = sum(num)/len(num)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = sum(i)\n        length = len(i)\n        average = total/length\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    reach_y = 0\n    index = 0\n    steps_left = steps\n    while steps_left > 0:\n        if reach_y == d:\n            jumps += 1\n            reach_y = 0\n            index += 1\n            steps_left -= 1\n        elif reach_y < d:\n            reach_y += 1\n            steps_left -= 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n    \n    # Iterate until all steps are taken\n    while i < steps:\n        # Move towards the point (d, 0)\n        if j < d:\n            j += 1\n        else:\n            # Check if next point is (d, 0)\n            if i + j == steps:\n                return count\n            \n            # Move to next point\n            i += j\n            j = 0\n            count += 1\n    \n    # If all steps are taken, return count\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_y = 0\n    current_x = 0\n    target_x = steps + d\n    if target_x < 0:\n        return jumps\n    while current_x <= steps:\n        if current_x + d >= steps:\n            current_x = target_x\n            jumps += 1\n            break\n        current_x += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = sorted(steps)\n    start = 0\n    end = len(steps) - 1\n    jumps = 0\n\n    # Check for special cases\n    if steps[start] == 0:\n        return 0\n    if steps[end] == d:\n        return 1\n\n    # Check for the case when the end point is greater than the start point\n    if steps[end] > steps[start]:\n        start = end - 1\n        end = start + 1\n        while end < len(steps) and steps[end] <= steps[start]:\n            end += 1\n        jumps += end - start\n        return jumps\n\n    # Check for the case when the end point is less than the start point\n    if steps[end] < steps[start]:\n        start = end + 1\n        end = start + 1\n        while end < len(steps) and steps[end] >= steps[start]:\n            end += 1\n        jumps += end - start\n        return jumps\n\n    # If the end point is same as the start point\n    if steps[end] == steps[start]:\n        return 0\n\n    # If the end point is equal to the start point, the number of jumps is not possible\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    # Define a list to store the possible jumps\n    jumps = []\n    \n    # Initialize the current position and the number of jumps required\n    curr_pos = 0\n    jumps_required = 0\n    \n    # Loop through all the positions\n    for pos in range(steps):\n        # Check if the current position is at the top of the dime\n        if pos == d:\n            # Add the number of jumps required to the list\n            jumps.append(jumps_required)\n            # Reset the current position and number of jumps required\n            curr_pos = 0\n            jumps_required = 0\n        # If the current position is greater than d, then the jumps required are atleast 1\n        elif pos > d:\n            # Update the number of jumps required\n            jumps_required = min(jumps_required+1, pos-d)\n        # If the current position is equal to or less than d, then the jumps required are atleast 0\n        else:\n            # Update the number of jumps required\n            jumps_required = min(jumps_required+1, pos)\n        # If the current position is 0, then the jumps required are atleast 0\n        if curr_pos == 0:\n            jumps_required = min(jumps_required+1, pos)\n            \n    # Return the minimum number of jumps required\n    return min(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # initialize variables\n    current_position = (0, 0)\n    current_position_history = set()\n    jumps = 0\n    \n    while True:\n        current_position = tuple(map(lambda x: x + 1, current_position))\n        current_position_history.add(current_position)\n        \n        if current_position in current_position_history and current_position[0] == d:\n            return jumps\n        \n        jumps += 1\n        steps -= 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    \n    # Check if d is a multiple of steps\n    if d % steps!= 0:\n        return \"Error: d must be a multiple of steps.\"\n    \n    # Initialize variables\n    jumps = 0\n    current_x = 0\n    \n    # Calculate the number of jumps required to reach d, 0\n    while current_x < d:\n        jumps += 1\n        current_x += steps\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    #initialize variables\n    curr_x = 0 #starting x-coordinate\n    curr_y = 0 #starting y-coordinate\n    num_jumps = 0 #initializing number of jumps to 0\n\n    #loop through the number of steps\n    for i in range(steps): \n        #check if current point is at the destination point (d, 0)\n        if curr_x == d and curr_y == 0:\n            #return the number of jumps\n            return num_jumps\n        #check if the current point is a valid point to jump to (x, y)\n        elif (0 <= curr_x <= d and 0 <= curr_y <= 1) or (d <= curr_x <= 0 and 1 <= curr_y <= d):\n            #if the current point is valid, move to the next point\n            curr_x = curr_x + 1 if curr_x < d else 0\n            curr_y = curr_y + 1 if curr_y < d else 0\n            #increment the number of jumps\n            num_jumps += 1\n        else:\n            #if the current point is invalid, move to the next point\n            curr_x = curr_x + 1 if curr_x < d else 0\n            curr_y = curr_y - 1 if curr_y > 1 else d\n    #if the end point is not reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Input:\n    - steps: Number of steps required to reach a point (d, 0) from origin\n    - d: The distance from origin to the point (d, 0)\n\n    Output:\n    - Number of jumps required to reach (d, 0) from origin\n\n    Steps:\n    - If steps is less than or equal to d, then return 0\n    - If steps is greater than d, then calculate the number of jumps required as steps // d\n    - If the result is still greater than 1, then add 1 to the result\n    \"\"\"\n    if steps <= d:\n        return 0\n    elif steps > d:\n        jumps = steps // d\n        if jumps > 1:\n            return jumps + 1\n        else:\n            return jumps\n    else:\n        return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    j = 0\n    steps += 1  # Add 1 to the number of steps to make sure we reach the point (d, 0)\n    while i < steps:\n        j += 1\n        if j == d:\n            jumps += 1\n            j = 0\n        if j > steps:\n            break\n        i += 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must be of the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs, nums1 and nums2, and returns a list of the same length as the input lists.\n    The function divides each element of the first list by the corresponding element of the second list and returns a list containing the quotient.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must be of the same length\")\n        return []\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists are of equal length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    else:\n        # Initialize an empty list to store the result\n        result = []\n        # Loop through both lists and divide each element\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            print(\"Error: Cannot divide by zero\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list of the element-wise division of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_str = ''.join(num_list)\n    num_str = num_str.upper()\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    final_str = ''\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the final_str\n        else:\n            final_str += char\n\n    # loop through the num_list and append it to the final_str in reverse order\n    for num in reversed(num_list):\n        final_str += num\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # Initialize an empty list to store the numbers\n    numbers = []\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # If the character is a digit, add it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n    \n    # Convert the numbers list to a string and return it\n    return ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n    nums += test_str.replace(nums, \"\")\n    return nums"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = \"\"\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n\n    for num in num_list:\n        new_str += num\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing an empty string to store the numbers\n    number_str = \"\"\n    # iterating through each character of the input string\n    for char in test_str:\n        # if the character is a number, appending it to the number_str variable\n        if char.isdigit():\n            number_str += char\n        # if the character is not a number, appending it to the end of the original string\n        else:\n            test_str += char\n    # returning the final string with the numbers moved to the end\n    return number_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # Create a list of digits in the string\n    num_list = [char for char in test_str if char.isdigit()]\n\n    # Sort the list in descending order\n    num_list.sort(reverse=True)\n\n    # Join the sorted list to get the final string\n    final_str = ''.join(num_list)\n\n    # Return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    # initialize variables to store the index of the last non-number character and the index of the last number character\n    last_non_num_index = -1\n    last_num_index = -1\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the character is a number, update the last_num_index variable\n        if test_str[i].isdigit():\n            last_num_index = i\n        # if the character is not a number, update the last_non_num_index variable\n        else:\n            last_non_num_index = i\n    # if there are no numbers in the string, return the original string\n    if last_num_index == -1:\n        return test_str\n    # otherwise, return the original string with all the numbers moved to the end\n    else:\n        return test_str[:last_non_num_index+1] + test_str[last_num_index:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_found = False\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n            num_found = True\n        else:\n            if num_found:\n                test_str = test_str.replace(num_str, '', 1)\n                test_str += num_str\n                num_found = False\n                num_str = ''\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # Find the maximum number in the list\n    max_num = max(a)\n\n    # Initialize variables to keep track of the subsets\n    subset_size = 1\n    max_subset_size = 1\n\n    # Loop through the list\n    for num in a:\n        # Calculate the number of times num can divide into max_num\n        num_divs = max_num // num\n\n        # If the number of divisors is smaller than the current subset size, update the subset size and max subset size\n        if num_divs < subset_size:\n            subset_size = num_divs\n            max_subset_size = subset_size\n\n        # If the current subset size is larger than the max subset size, update max subset size\n        elif num_divs > max_subset_size:\n            max_subset_size = num_divs\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables to keep track of the maximum size of a subset\n    max_size = 0\n    # Initialize variables to keep track of the subset of numbers\n    subset = []\n    # Loop through each number in the list\n    for num in a:\n        # Loop through each number in the list again, but exclude the current number\n        for i in range(len(a)):\n            # If the current number is divisible by the excluded number, update the maximum size and subset\n            if a[i] % num == 0 and i!= num:\n                max_size = max(max_size, i - num + 1)\n                subset = [num] + subset\n                break\n    # Return the maximum size and subset of numbers\n    return max_size, subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in non-decreasing order\n    a.sort()\n\n    # Initialize variables\n    n = len(a)\n    count = 0\n    max_count = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Initialize the current count\n        temp_count = 1\n\n        # Iterate through the remaining elements in the list\n        for j in range(i+1, n):\n            # Check if the current element is divisible by the next element\n            if a[i] % a[j] == 0:\n                temp_count += 1\n            else:\n                # If not divisible, exit the inner loop and update the count\n                break\n\n        # If the count is greater than the current maximum count, update the maximum count\n        if temp_count > max_count:\n            max_count = temp_count\n            count = temp_count\n\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    \n    # Loop through the list of numbers\n    for i in range(len(a)):\n        # Check if the current number is divisible by all previous numbers\n        divisible = True\n        for j in range(i):\n            if a[i] % a[j]!= 0:\n                divisible = False\n                break\n        # If the current number is divisible, update the current size\n        if divisible:\n            current_size += 1\n        # If the current size is greater than the maximum size so far, update the maximum size\n        if current_size > max_size:\n            max_size = current_size\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Find the sum of all the numbers in the list\n    total_sum = sum(a)\n\n    # Initialize a dictionary to store the sum of every subset size\n    subset_sums = {}\n\n    # Initialize the maximum size of the subset found so far\n    max_size = 0\n\n    # Loop through all possible subsets sizes\n    for i in range(len(a) + 1):\n        for j in range(1, len(a) + 1):\n            # Calculate the sum of the subset\n            subset_sum = sum(a[:i]) + sum(a[:j])\n\n            # Check if the subset is divisible by 2\n            if subset_sum % 2 == 0:\n                # If it is, update the dictionary with the current size of the subset\n                subset_sums[i] = subset_sum\n\n                # If the size of the subset is greater than the maximum size found so far, update it\n                if i > max_size:\n                    max_size = i\n\n    # Return the size of the largest subset found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize variables to keep track of the largest subset and the size of it\n    max_subset = [a[0]]\n    max_size = 1\n    # Initialize variables to keep track of the current subset and its size\n    subset = [a[0]]\n    size = 1\n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the current number is divisible by the last number in the subset, add it to the subset and increment its size\n        if a[i] % subset[-1] == 0:\n            subset.append(a[i])\n            size += 1\n        # If the size of the current subset is greater than the size of the largest subset, update the largest subset and its size\n        elif size > max_size:\n            max_size = size\n            max_subset = subset[:]\n        # If the size of the current subset is less than or equal to the size of the largest subset, check if it is a subset of the largest subset\n        elif size <= max_size:\n            for j in range(len(max_subset)):\n                if subset[j] > max_subset[j]:\n                    break\n            else:\n                max_subset = subset[:]\n                max_size = size\n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers\n    a.sort()\n    # Initialize variables\n    max_size = 1\n    current_size = 1\n    # Iterate through the list and update variables\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize variables\n    max_size = 0\n    curr_size = 0\n    # loop through the list\n    for i in range(len(a)):\n        # find the largest subset of even numbers that ends at a[i]\n        subset = []\n        j = i\n        while j < len(a) and a[j] % 2 == 0:\n            subset.append(a[j])\n            j += 1\n        # update the maximum size\n        if len(subset) > max_size:\n            max_size = len(subset)\n        # update the current size\n        curr_size = max(curr_size, len(subset))\n    # return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a) # get the length of the list\n    \n    # initialize variables\n    max_size = 1\n    current_size = 1\n    \n    # loop through the list\n    for i in range(1, n):\n        # check if the current number is divisible by the next number\n        if a[i] % a[i-1] == 0:\n            current_size += 1 # increment the current size if it is\n        else:\n            # if the current number is not divisible by the next number, reset the current size to 1 and update the max size if needed\n            current_size = 1\n            if max_size < current_size:\n                max_size = current_size\n    \n    # return the max size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if both lists have same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have same size.\")\n    # merge the two lists\n    merged = arr1 + arr2\n    # sort the merged list\n    sorted_list = sorted(merged)\n    # find the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    arr = arr1 + arr2\n\n    # sort the concatenated list\n    arr.sort()\n\n    # calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n\n    Parameters:\n    arr1: list of integers\n    arr2: list of integers\n    n: integer\n\n    Returns:\n    float: median of arr1 and arr2\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Find the maximum of the two arrays\n    max_arr = max(arr1, arr2)\n\n    # Find the index where the maximum occurs in the first array\n    first_max_index = arr1.index(max_arr)\n\n    # Find the index where the maximum occurs in the second array\n    second_max_index = arr2.index(max_arr)\n\n    # Swap the elements at the maximum index with the elements at the first max index\n    arr1[first_max_index], arr1[second_max_index] = arr1[second_max_index], arr1[first_max_index]\n\n    # Find the median\n    if n % 2 == 0:\n        # If the array size is even, find the average of the two max elements\n        median = (arr1[first_max_index] + arr1[second_max_index]) / 2\n    else:\n        # If the array size is odd, find the middle max element\n        median = arr1[first_max_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Calculate the total size of both arrays\n    total_size = n * 2\n\n    # Concatenate both arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # If the total size is odd, the median is the middle element\n    if total_size % 2 == 1:\n        return arr[total_size // 2]\n\n    # If the total size is even, the median is the average of the two middle elements\n    else:\n        mid = total_size // 2\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Calculate the median index\n    mid = n // 2\n    \n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    \n    # If the length of the array is even, return the average of the two middle elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge both lists into a single sorted list\n    merged_list = sorted(arr1 + arr2)\n\n    # Find the median index\n    mid = n // 2\n\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the two middle numbers\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_list = arr1 + arr2\n    mid = n // 2\n\n    sorted_list = sorted(merged_list)\n\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = [num**n for num in nums]\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize a new list to store the n-th powers of each number\n    powers = []\n\n    # Iterate through each number in the list and compute the n-th power\n    for num in nums:\n        power = num ** n\n        powers.append(power)\n\n    # Return the n-th powers list\n    return powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than or equal to 2\n    if len(newList) >= 2:\n        # Swap the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Extract the last element from the list\n    last_element = newList.pop()\n    # Insert the last element at the beginning of the list\n    newList.insert(0, last_element)\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and interchanges the first and last elements of the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than 2\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"List must have at least 2 elements.\")\n        return\n    \n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the new list\n    print(\"The new list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2: \n        print(\"The list must have at least two elements to swap the first and last elements.\")\n        return\n    \n    # Interchange the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the updated list\n    print(\"The updated list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has length greater than 1\n    if length > 1:\n        # Get the first and last element of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        \n        # Replace the first and last element of the list with each other\n        newList[0] = last_element\n        newList[-1] = first_element\n        \n        return newList\n    else:\n        print(\"Error: List must have length greater than 1 to swap the first and last elements.\")"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the semi-circle radius\n    s = (2 * r * math.sin(math.pi / 6)) / (1 + math.cos(math.pi / 6))\n    \n    # Find the area of the smallest triangle inscribed in the semicircle\n    a = (2 * r * math.sin(math.pi / 3)) / (1 + math.cos(math.pi / 3))\n    \n    # Calculate the area of the largest triangle inscribed in the semicircle\n    b = math.pi * (r ** 2)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    c = math.pi * (s ** 2)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    d = math.pi * ((2 * r * math.sin(math.pi / 6)) ** 2)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the entire circle\n    area_max = (a + b + c + d) / 2\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = (math.pi * r * r) / 4\n    return math.sqrt(s)\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(3) / 2  # semi-major axis of the triangle\n    h = 2 * r  # half the radius\n    area = a * h  # calculate the area using the formula for a triangle\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using the formula of the triangle inequality to find the area of the largest triangle\n    s = math.sqrt(3) / 4\n    area = (r ** 2) * (s - 1) / (3 * s)\n\n    # Returning the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # formula for area of a triangle given the semi-perimeter and the base\n    area = (3*r*r)/4\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius r.\n    '''\n    \n    # Formula to find area of a triangle given its base and height\n    def triangle_area(base, height):\n        return 0.5 * base * height\n\n    # Find the height of the triangle that can be inscribed in a semicircle with radius r\n    height = 2*r/3\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = triangle_area(r, height)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = 2 * r * math.sin(math.pi / 3)\n\n    # Calculate the area of the triangle using Heron's formula\n    area = (s * (s - r) * (s - 2 * r)) ** 0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r**2) / (4 * math.tan(math.pi / 3))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.pi * (r**2)\n    b = 0.5 * math.sqrt(r**2 - (r/2)**2)\n    return a + b"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n    \n    #Calculate the semi-area of a triangle with base 2 and height sqrt(2)\n    semi_area = (semi_perimeter**2) / 4\n    \n    #Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (semi_area * (semi_perimeter + (semi_area**2))**0.5) / 2\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end == None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        elif array[i] > i:\n            return i\n        else:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n    array: list of natural numbers\n\n    Returns:\n    int: the smallest missing number\n\n    Example:\n    >>> find_First_Missing([1, 2, 4, 6, 8, 10])\n    3\n\n    \"\"\"\n\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If `end` is not given, then it will find the missing number up to the maximum number in the list.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): List of natural numbers in ascending order.\n        start (int, optional): Starting index of the array (default is 0).\n        end (int, optional): Ending index of the array (default is the last index of the array).\n\n    Returns:\n        int: Smallest missing number from the sorted list of natural numbers.\n\n    Examples:\n        >>> find_First_Missing([1, 2, 3, 4, 5])\n        6\n        >>> find_First_Missing([3, 5, 1, 4, 2])\n        7\n        >>> find_First_Missing([1, 2, 3, 4, 5, 6])\n        7\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i] - i!= i:\n            return i\n    return end+1+start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a list of even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes a coordinate tuple as input and returns a list of adjacent coordinates.\n    '''\n    r, c = ele\n    # get the coordinates of adjacent cells\n    adj = []\n    if c!= 0:\n        adj.append((r, c-1))\n    if c!= 2:\n        adj.append((r, c+1))\n    if r!= 0:\n        adj.append((r-1, c))\n    if r!= 2:\n        adj.append((r+1, c))\n    # check for adjacent cells in the same row\n    if r!= 0 and c!= 0:\n        adj.append((r-1, c-1))\n    if r!= 0 and c!= 2:\n        adj.append((r-1, c+1))\n    if r!= 2 and c!= 0:\n        adj.append((r+1, c-1))\n    if r!= 2 and c!= 2:\n        adj.append((r+1, c+1))\n    # check for adjacent cells in the same diagonal\n    if r!= 0 and c!= 2:\n        adj.append((r-1, c+1))\n    if r!= 2 and c!= 0:\n        adj.append((r+1, c-1))\n    # return the adjacent coordinates\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    for adj in adjacent:\n        if adj not in sub:\n            sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        for i in range(len(ele)):\n            sub.append(tuple(ele[:i] + ele[i+1:]))\n        return sub\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if not sub:\n        sub = []\n    sub.append(ele)\n    adj = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    adj = [x for x in adj if 0 <= x[0] < len(grid) and 0 <= x[1] < len(grid[0])]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # adjacent coordinates\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    # remove the given coordinate from the list of adjacent coordinates\n    adj_coords.remove(ele)\n    # add the adjacent coordinates to the sublist\n    sub.extend(adj_coords)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    row, col = ele\n    \n    # convert tuple to list for easy manipulation\n    row_list = list(row)\n    col_list = list(col)\n    \n    # add up adjacent cells to the list of elements to process\n    if row_list[0]!= 0:\n        sub.append((row_list[0], col))\n    if row_list[1]!= 0:\n        sub.append((row_list[1], col))\n    if row_list[2]!= 0:\n        sub.append((row_list[2], col))\n    if col_list[0]!= 0:\n        sub.append((row, col_list[0]))\n    if col_list[1]!= 0:\n        sub.append((row, col_list[1]))\n    if col_list[2]!= 0:\n        sub.append((row, col_list[2]))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    adj = []\n    if y > 0 and (x, y - 1) not in sub:\n        adj.append((x, y - 1))\n    if y < 25 and (x, y + 1) not in sub:\n        adj.append((x, y + 1))\n    if x > 0 and (x - 1, y) not in sub:\n        adj.append((x - 1, y))\n    if x < 25 and (x + 1, y) not in sub:\n        adj.append((x + 1, y))\n        \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #extracting x and y coordinates from the input tuple\n    x, y = ele\n    \n    #creating a list to store adjacent coordinates\n    adj = []\n    \n    #iterating through all the possible adjacent coordinates\n    for i in range(-1,2):\n        for j in range(-1,2):\n            #checking if the adjacent coordinate is within the boundaries of the board\n            if (0 <= x+i < 8) and (0 <= y+j < 8):\n                #adding the adjacent coordinate to the list\n                adj.append((x+i, y+j))\n                \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a coordinate tuple (x,y) as input and returns all the adjacent coordinates of that tuple.\n    If sub is given, it returns all the adjacent coordinates of the sub-coordinate tuple.\n    '''\n    if sub is None:\n        return [(ele[0]-1,ele[1]), (ele[0]+1,ele[1]), (ele[0],ele[1]-1), (ele[0],ele[1]+1)]\n    else:\n        return [(ele[0]-1,ele[1]), (ele[0]+1,ele[1]), (ele[0],ele[1]-1), (ele[0],ele[1]+1), (ele[0]-1,sub[1]), (ele[0]+1,sub[1]), (ele[0],sub[1]-1), (ele[0],sub[1]+1)]"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n\n    # replace underscores with whitespaces\n    final_text = new_text.replace(\"_\", \" \")\n\n    return final_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isalnum():\n            if char.isspace():\n                new_text += '_'\n            else:\n                new_text += char\n        else:\n            new_text += '_'\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    text = ''.join(e for e in text if e.isalnum()).lower()\n\n    # Replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n\n    # Replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Splitting the text into words\n    words = text.split()\n    # Looping through the words\n    for i in range(len(words)):\n        # Checking if the word contains a whitespace character\n        if any(char.isspace() for char in words[i]):\n            # Replacing spaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        # Checking if the word contains an underscore character\n        if any(char == '_' for char in words[i]):\n            # Replacing underscores with spaces\n            words[i] = words[i].replace('_','')\n    # Replacing the words with a single string\n    new_text =''.join(words)\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Initialize two variables to keep track of the first and last non-zero values in the list\n    first_nonzero_index = -1\n    last_nonzero_index = -1\n    \n    # Iterate through the list and update the first and last non-zero values\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            # If we find a non-zero value, update the first and last non-zero values accordingly\n            if first_nonzero_index == -1:\n                first_nonzero_index = i\n            last_nonzero_index = i\n    \n    # If there are zeroes in the list, move them to the end of the list after the non-zero values\n    if first_nonzero_index!= -1 and last_nonzero_index!= -1:\n        for i in range(last_nonzero_index, first_nonzero_index, -1):\n            num_list[i], num_list[first_nonzero_index] = num_list[first_nonzero_index], num_list[i]\n            first_nonzero_index -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index is not None:\n        for i in range(len(num_list) - 1, zero_index - 1, -1):\n            num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            num_list.pop()\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Initialize two pointers, one for the front of the list and one for the back\n    front = 0\n    back = len(num_list) - 1\n\n    # Loop through the list until both pointers meet\n    while front < back:\n        # If the element at the front of the list is not zero, move it to the back of the list\n        if num_list[front]!= 0:\n            # Move the element at the front of the list to the back of the list\n            num_list[front], num_list[back] = num_list[back], num_list[front]\n            # Move the front pointer one position to the right\n            front += 1\n        # If the element at the back of the list is zero, move it to the front of the list\n        elif num_list[back] == 0:\n            # Move the element at the back of the list to the front of the list\n            num_list[back], num_list[front] = num_list[front], num_list[back]\n            # Move the back pointer one position to the left\n            back -= 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for i in range(len(num_list) - 1, zero_index - 1, -1):\n        num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize pointers for the first and last non-zero elements\n    first_non_zero = 0\n    last_non_zero = len(num_list) - 1\n\n    # Traverse the list from both ends, swapping non-zero elements with the pointers\n    while first_non_zero <= last_non_zero:\n        if num_list[first_non_zero]!= 0:\n            num_list[first_non_zero], num_list[last_non_zero] = num_list[last_non_zero], num_list[first_non_zero]\n            last_non_zero -= 1\n        else:\n            first_non_zero += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # Swap the current element with the last non-zero element\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            # Reduce the length of the list\n            len_list = len(num_list)\n            while i < len_list - 1 and num_list[i] == 0:\n                i += 1\n            num_list = num_list[:i + 1]\n            len_list = len(num_list)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of numbers and returns the sum of their xor.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum of xor of all pairs as 0\n    xor_sum = 0\n    \n    # Iterate over the list and calculate the xor of all pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # XOR operation\n    def xor(a, b):\n        return a ^ b\n\n    # Initialize the sum to zero\n    xor_sum = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # XOR the current element with all the previous elements\n        xor_sum = xor(xor_sum, arr[i])\n\n    # Return the XOR sum of all pairs\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum of xor to zero\n    sum_xor = 0\n    # Loop through the array and find the sum of xor of all pairs of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor = sum_xor ^ arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n    # Sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a list\n    lst = list(iterable)\n    # Convert the list to a max heap\n    hq.heapify(lst)\n    # Sort the list in descending order\n    hq.heapify(lst, 0, len(lst)-1)\n    # Convert the max heap back to a list and return it\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n\n    # Extract the min elements and add them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable = iterable[1:]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    min_heap = hq.nsmallest(len(iterable), iterable)\n    \n    # Convert the min-heap to a sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(min_heap.pop())\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the given iterable into a heap\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap, i)\n\n    # Pop the smallest elements from the heap\n    result = []\n    while heap:\n        result.append(heap[0])\n        heap[0] = hq.heappop(heap)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    heap_size = len(heap)\n    for i in range(heap_size // 2 - 1, -1, -1):\n        hq.heapify(heap, heap_size, i)\n    for i in range(heap_size - 1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, heap[i])\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # convert the given list to a max heap\n    hq.heapify(iterable)\n\n    # extract the maximum element from the heap and append it to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a min heap of the iterable\n    hq.heapify(iterable)\n    \n    # Sort the iterable using heap sort\n    for _ in range(len(iterable)):\n        # Remove the smallest element from the heap\n        heapq.heappop(iterable)\n    \n    # Return the sorted iterable\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    n = len(heap)\n    \n    for i in range(n//2-1, -1, -1):\n        hq.heapify(heap, n, i)\n        \n    for i in range(n-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, heap[i])\n        \n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    sorted_list = []\n\n    while heap:\n        smallest = hq.heappop(heap)\n        sorted_list.append(smallest)\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"The amount is a profit!\")\n    elif actual_cost > sale_amount:\n        print(\"The amount has a loss!\")\n    else:\n        print(\"The amount is a loss!\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        print(\"The amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The amount does not have no profit and no loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost: \n        return \"No profit\"\n    elif sale_amount < actual_cost: \n        return \"No loss\"\n    else: \n        return \"No profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n\n    :param actual_cost: actual cost of the sale\n    :param sale_amount: amount paid for the sale\n    :return: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    return actual_cost >= sale_amount"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return False, \"Actual cost is greater than sale amount\"\n    elif sale_amount - actual_cost >= actual_cost:\n        return False, \"Sale amount minus actual cost is greater than actual cost\"\n    else:\n        return True, \"Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function will check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss!\")\n    else:\n        print(\"Profit or loss!\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if there is a profit or loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit_loss = sale_amount - actual_cost\n\n    if profit_loss == 0:\n        print(\"The amount has no profit or loss.\")\n        return True\n    else:\n        print(\"The amount has a profit or loss.\")\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Conversion factors from km/h to m/s and Celsius to Kelvin\n    km_to_ms = 1.609344  # m/s\n    C_to_K = 273.15    # K\n\n    # Convert the input temperature and wind velocity to Kelvin\n    v_K = v * km_to_ms + C_to_K\n    t_K = t + C_to_K\n\n    # Calculate the wind chill index\n    wc = math.ceil((13.12 + 0.6215 * v_K) / (1.0001 + 0.3965 * v_K + 11.37 * math.exp(-0.1331 * v_K)))\n\n    # Convert the wind chill index to an integer\n    wc = int(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index using the given formula.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n    t_c = t - 273.15  # Convert temperature from Celsius to Kelvin\n    w = v * math.cos(math.radians(t_c))  # Calculate wind speed at constant pressure\n    delta_t = 1.0  # Constant temperature change\n    f = 1.0 / (math.exp(17.27 * w / (t_c + 237.3)) + math.exp(17.27 * w / (t_c + 237.3)))  # Calculate relative humidity factor\n\n    # Calculate wind chill index\n    wc = f * (t_c + delta_t)\n\n    # Round wind chill index to the next integer\n    wc_int = math.floor(wc + 0.5)\n\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.0065\n    f = math.floor((t - 273.15) * 9/5 + 32)\n    return round(f - c * (v * 1.60934))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill temperature using the given formula\n    wind_chill_temp = round(35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v))\n    return wind_chill_temp"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 1.3\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    heat_capacity = 1.4  # J/kg/K\n    heat_capacity_air = 0.418  # J/kg/K\n    alpha = 0.62197  # dimensionless parameter\n    beta = 7.5519  # dimensionless parameter\n    gamma = 17.27  # dimensionless parameter\n    delta = 13.12  # dimensionless parameter\n    epsilon = 0.016  # dimensionless parameter\n    \n    if t < -40:\n        # below freezing point, assume 0\u00b0C as temperature\n        t = 0\n    \n    if wind_speed < 1:\n        # assume zero wind speed\n        wind_speed = 1\n    \n    if t > 25:\n        # above freezing point, use 25\u00b0C as temperature for lowered resistance\n        t = 25\n    \n    if t > 40:\n        # above 40\u00b0C, use 40\u00b0C as temperature for increased resistance\n        t = 40\n    \n    if v > 11:\n        # wind speed above 11 km/h, use 11 km/h as wind speed for lowered resistance\n        v = 11\n    \n    if v > 17:\n        # wind speed above 17 km/h, use 17 km/h as wind speed for increased resistance\n        v = 17\n    \n    if v > 24:\n        # wind speed above 24 km/h, use 24 km/h as wind speed for increased resistance\n        v = 24\n    \n    # calculate resistance coefficient\n    resistance_coeff = math.exp((-alpha * (t - delta)) - (beta * (v - gamma)) + (gamma * (t - delta)) - (delta * v))\n    \n    # calculate heat transfer coefficient\n    heat_transfer_coeff = math.exp((-epsilon * (t - 20)) + (2 * epsilon * (t - 20) * (v - 11)) + (epsilon * (t - 20) * (22 - v)))\n    \n    # calculate heat transfer rate\n    heat_transfer_rate = heat_capacity_air * (t - 20) * (v - 11) / 100\n    \n    # calculate specific heat capacity\n    specific_heat_capacity = heat_capacity * (t - 20) / 100\n    \n    # calculate effective heat capacity\n    effective_heat_capacity = specific_heat_capacity * resistance_coeff\n    \n    # calculate wind chill index\n    wind_chill_index = math.degrees(math.atan(math.exp(heat_transfer_rate / effective_heat_capacity) - 1)) / 45\n    \n    # round wind chill index to nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the dew point temperature\n    dew_point = 243.04 * (1 - (0.0065 * t) + (t * t * 0.0458))\n\n    # Calculate the wind chill temperature\n    wind_chill_temp = (dew_point - 273.15) / 1.8 + 273.15\n\n    # Calculate the wind chill index\n    wind_chill_index = (v * 0.622 * (0.14 - 0.14 * (v / 10))) / ((1.8 * wind_chill_temp) - 273.15)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = int(math.ceil(wind_chill_index))\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature from Celsius to Kelvin\n    T_kelvin = t + 273.15\n    \n    # Calculate the wind speed in m/s\n    v_mps = v * 1000\n    \n    # Calculate the air density at sea level\n    rho_sea_level = 1.219\n    \n    # Calculate the relative vapor pressure\n    R = 287.058\n    alpha = 0.621971895\n    P_vapor = math.exp(alpha * ((T_kelvin - 273.15) / (T_kelvin - 273.15 + 237.3)))\n    \n    # Calculate the heat of vaporization\n    q_vapor = 2.501e-6 * P_vapor ** 2 * T_kelvin\n    \n    # Calculate the latent heat of vaporization\n    h_vapor = 2.501e-6 * T_kelvin\n    \n    # Calculate the absolute vapor pressure\n    P_abs_vapor = P_vapor / (1 + (P_vapor / h_vapor) ** (1/R))\n    \n    # Calculate the latent heat of fusion\n    h_fusion = 2.493e-5 * T_kelvin\n    \n    # Calculate the latent heat of sublimation\n    h_sublimation = 10000.0\n    \n    # Calculate the latent heat of condensation\n    h_condensation = 404.0\n    \n    # Calculate the latent heat of sublimation\n    h_sublimation = 10000.0\n    \n    # Calculate the latent heat of fusion\n    h_fusion = 2.493e-5 * T_kelvin\n    \n    # Calculate the sensible heat flux\n    q_sensible = (2 * h_vapor * T_kelvin) / (math.exp((h_vapor - h_sublimation) / (h_vapor - h_sublimation + h_fusion)) - 1)\n    \n    # Calculate the net heat flux\n    q_net = q_vapor + q_sensible\n    \n    # Calculate the heat capacity at constant pressure\n    cp = 1004.67 * T_kelvin / (math.exp(17.625 * (T_kelvin - 273.15)) - 1)\n    \n    # Calculate the specific heat capacity at constant pressure\n    Cp = cp / rho_sea_level\n    \n    # Calculate the heat capacity at constant volume\n    cv = Cp * v_mps\n    \n    # Calculate the heat capacity ratio\n    eta = q_net / cv\n    \n    # Calculate the surface skin temperature\n    Ts = T_kelvin - 0.0065 * q_net + 17.27 * math.exp(-0.133 * T_kelvin)\n    \n    # Calculate the skin temperature\n    T_skin = math.exp(35.86 / (T_kelvin + 237.3)) * T_kelvin\n    \n    # Calculate the effective skin temperature\n    T_eff = T_skin + 0.006 * T_skin ** 2\n    \n    # Calculate the wind chill index\n    Wc = math.ceil(23.4 * eta ** (-0.16)) + 32\n    \n    # Return the wind chill index rounded to the nearest integer\n    return Wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0 or v < 0:\n        return \"Invalid input!\"\n    \n    elif t <= 0 or t >= 25:\n        return \"Invalid input!\"\n    \n    elif v < 1 or v > 6:\n        return \"Invalid input!\"\n    \n    else:\n        wind_speed = v * 0.621371  # Convert km/h to m/s\n        wind_speed_f = math.floor(wind_speed)  # Convert m/s to km/h\n        \n        if t < 20:\n            t_f = math.floor(t * 1.1)\n        else:\n            t_f = math.floor(t)\n        \n        wind_chill_f = (13.12 + 0.6214 * t_f + 11.37 * math.pow(wind_speed_f, 0.16) - 0.3965 * math.pow(wind_speed_f, 0.16) * math.pow(t_f, 0.16)) * 1.8\n        \n        if wind_chill_f > 100:\n            wind_chill_f = 100\n        \n        wind_chill_i = round(wind_chill_f)\n        \n        return wind_chill_i"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n\n    # calculate wind chill index\n    chill = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*math.pow(v, 0.16)*t\n    \n    # round to the nearest integer\n    chill_int = int(chill)\n\n    # return the wind chill index\n    return chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * (1 + 0.6215*math.exp((t-273.15)/(237.3)))\n    wc = round(w)\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize a variable to store the sum of lengths of valid names\n    valid_sum = 0\n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # Add the length of the name to the valid_sum\n        valid_sum += len(name)\n    # Return the valid_sum\n    return valid_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, ignore it\n            continue\n        # Otherwise, add the length of the name to the sum\n        else:\n            sum += len(name)\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name.isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list to store the cleaned names\n    cleaned_names = []\n\n    # iterate over each name in the input list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if the name starts with a lowercase letter, skip it\n            continue\n        else:\n            # if the name does not start with a lowercase letter, add it to the cleaned_names list\n            cleaned_names.append(name)\n\n    # sum the lengths of all the names in the cleaned_names list\n    total_length = sum(len(name) for name in cleaned_names)\n\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names after removing the lowercase ones\n    result = []\n    # Loop through the input list of sample names\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, skip it and move on to the next name\n            continue\n        # If the first character is not a lowercase letter, add its length to the result list\n        result.append(len(name))\n    # Return the sum of the lengths of the names in the result list\n    return sum(result)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            name_sum += len(name)\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for name in sample_names:\n        if not name[0].islower():\n            name_list.append(name)\n    sum_length = sum([len(name) for name in name_list])\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Removes parenthesis from a given string and returns the result.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\(.*?\\)\"\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis and what's inside them from the string using regular expressions\n    regex = r'\\((.*?)\\)'\n    items = re.sub(regex, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove all parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # remove any leading or trailing whitespaces from the string\n    items = items.strip()\n    # return the cleaned string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to remove the parenthesis from the string\n    pattern = re.compile(r'\\((.*)\\)')\n    result = pattern.sub('', items)\n    # Remove any white spaces from the result\n    result = result.strip()\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r\"\\([^)]*\\)\"\n    items = re.sub(pattern, \"\", items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to match and remove all parenthesis from the string\n    result = re.sub(r'\\([^)]*\\)', '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^)]*\\)')\n    return regex.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Define the sum of the squares of the nonagonal numbers up to n\n    sum_squares = 2 * (n * (n + 1))\n\n    # Calculate the value of n * (n + 1)\n    n_plus_one = n * (n + 1)\n\n    # Return the sum of the squares of the nonagonal numbers up to n\n    return sum_squares - n_plus_one"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Define the number of rows and columns\n    rows = 1\n    cols = 2 * n - 1\n\n    # Initialize the nonagonal number\n    nonagonal = 1\n\n    # Loop through each row\n    for i in range(rows):\n        # Loop through each column\n        for j in range(cols):\n            # Check if the current position is nonagonal\n            if (i + j) % 2 == 1:\n                # Increment the nonagonal number\n                nonagonal += 1\n\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of first and last row\n    sum1 = 1\n    sum2 = 1\n    \n    # Calculate the nth nonagonal number\n    for i in range(2, n+1):\n        # Add the sum of first and last row\n        sum = sum1 + sum2\n        \n        # Update the sum of first and last row\n        sum1 = sum2\n        sum2 = sum\n        \n        # Print the nth nonagonal number\n        if i == n:\n            print(sum)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a, b = 1, 2\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n*n + n - 4)/2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    \n    # Using a formula to find the nth nonagonal number\n    return n * (n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for i in range(2, n+1, 2):\n        sum_even += i\n    for i in range(1, n+1, 2):\n        sum_odd += i\n    return sum_even + sum_odd"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of nonagonal numbers\n    sum_nonagonal = 0\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Calculate the sum of nonagonal numbers\n        sum_nonagonal += (2 * (i * (i+1) - 1))\n\n    # Return the sum of nonagonal numbers\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*n - (n-1)*2 + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize nonagonal counter and sum\n    count = 0\n    sum = 0\n    # iterate through rows from 1 to n-1\n    for i in range(1, n):\n        # iterate through columns from i to n-i\n        for j in range(i, n-i):\n            # add the current nonagonal number to the sum\n            sum += (i*i+j*j)\n            # increment the counter\n            count += 1\n            # stop if the sum exceeds 2*n\n            if sum > 2*n:\n                break\n    # return the nonagonal number at the nth position\n    return count"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word and check if it contains 'z' at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            print(word)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    word_pattern = r'\\b[a-z]+[sz]?\\b'\n    match = re.search(word_pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z' or word[-1] == 'z':\n            print(f'{word} contains a z outside of the middle')\n        else:\n            print(f'{word} contains a z at the middle')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z' or word[-1] == 'z':\n            return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate over the words\n    for word in words:\n        # Check if the word starts or ends with 'z'\n        if word[0] == 'z' or word[-1] == 'z':\n            # If it does, return True\n            return True\n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\w*\\b')\n    match = pattern.search(text)\n\n    if match:\n        z_count = text.count('z') - 1\n        start_index = match.start()\n        end_index = match.end()\n        \n        if start_index == 0 and end_index == len(text) - 1:\n            return True\n        elif start_index == 0:\n            return z_count == 1\n        elif end_index == len(text) - 1:\n            return z_count == 1\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall('\\w+', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            print(f\"'{word}' is not allowed\")\n        elif word[0] == 'z' or word[-1] == 'z':\n            print(f\"'{word}' is allowed\")\n        else:\n            continue\n    return words"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input): \n        return input \n    else: \n        left, right = 0, k-1 \n        while left < right: \n            input[left], input[right] = input[right], input[left] \n            left += 1 \n            right -= 1 \n        return reverse_Array_Upto_K(input, k+1) "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array\n    input = input[::-1]\n    \n    # Reverse upto the position k\n    input = input[:k][::-1] + input[k:]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in two arguments:\n    input: the input array\n    k: the position to reverse to\n    '''\n    # check if input is a list\n    if not isinstance(input, list):\n        raise TypeError(\"Input must be a list\")\n    # check if k is a positive integer\n    elif not isinstance(k, int) or k <= 0:\n        raise TypeError(\"K must be a positive integer\")\n\n    # reverse the array up to position k\n    input[:k] = input[:k][::-1]\n\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        temp = []\n        for i in range(k-1, -1, -1):\n            temp.append(input[i])\n        for i in range(k, n):\n            temp.append(input[i])\n        for i in range(n-1, k-1, -1):\n            input[i] = temp.pop()\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the start to the k-1th index\n    input[:k] = input[:k][::-1]\n    # Reverse the array from the k-1th to the end index\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Create a new empty list to store the reversed array\n    reversed_list = []\n    # Iterate over the input array\n    for i in range(len(input)):\n        # If the index is less than k, append the current element to the reversed list\n        if i < k:\n            reversed_list.append(input[i])\n        # If the index is equal to or greater than k, append the current element to the input list\n        else:\n            input[i] = input[i] - k\n            input[input[i]] = input[i]\n            input[i] = input[i] + k\n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to the k-1 position\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the array from the k-1 to the end position\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the input array\n    n = len(input)\n\n    # If k is greater than or equal to the length of the array, reverse the entire array\n    if k >= n: \n        input.reverse() \n        return input\n\n    # Reverse the array from 0 to k-1\n    input[:k] = reversed(input[:k])\n\n    # Reverse the array from k to n-1\n    input[k:] = reversed(input[k:])\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the array\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # adding the dictionary to the tuple\n    result_tup = test_tup + (test_dict,)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    new_list = [(key, value) for key, value in test_dict.items()]\n    # concatenate the tuple and the list of tuples to create the new tuple\n    new_tup = test_tup + new_list\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new tuple with the dictionary added to the first element of the tuple\n    new_tup = (test_dict, *test_tup)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup) + tuple(test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a list so we can append to it\n    test_list = list(test_tup)\n    # Convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # Append the dictionary to the tuple\n    test_list.extend(dict_list)\n    # Convert the list back to a tuple\n    result_tup = tuple(test_list)\n    return result_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, path_cost, path_visited):\n        if i == N-1 and j == N-1:\n            global max_path_cost, max_path_visited, max_path_avg\n            if path_cost > max_path_cost:\n                max_path_cost = path_cost\n                max_path_visited = path_visited\n                max_path_avg = path_cost / path_visited\n            return\n        \n        if i < N and j < N:\n            dfs(i+1, j, path_cost+cost[i][j], path_visited+1)\n            dfs(i, j+1, path_cost+cost[i][j], path_visited+1)\n            dfs(i-1, j, path_cost+cost[i][j], path_visited+1)\n            dfs(i, j-1, path_cost+cost[i][j], path_visited+1)\n    \n    N = len(cost)\n    max_path_cost, max_path_visited, max_path_avg = float('-inf'), float('-inf'), float('-inf')\n    dfs(0, 0, 0, 0)\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    def backtrack(i, j, path_cost):\n        nonlocal max_avg\n\n        if i == N - 1 and j == N - 1:\n            nonlocal max_path\n            if len(path) > len(max_path):\n                max_path = path\n                max_avg = path_cost / len(path)\n\n        if i < N and j < N:\n            path.append((i, j))\n            if i < N - 1:\n                backtrack(i + 1, j, path_cost + cost[i][j])\n            if j < N - 1:\n                backtrack(i, j + 1, path_cost + cost[i][j])\n            path.pop()\n\n    max_avg = 0\n    max_path = []\n    for i in range(N):\n        backtrack(0, i, cost[0][i])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def is_valid_move(i, j, direction):\n        # Check if the move is valid\n        if direction == 'R':\n            return i < N-1\n        elif direction == 'D':\n            return j < N-1\n        else:\n            return False\n\n    def dfs(i, j, direction, total_cost, num_cells, max_avg):\n        # Base case\n        if i == N-1 and j == N-1:\n            if total_cost > max_avg:\n                max_avg = total_cost\n            return\n\n        # Check if we can move in the current direction\n        if not is_valid_move(i, j, direction):\n            return\n\n        # Move in the current direction and update the total cost and number of cells visited\n        new_total_cost = total_cost + cost[i][j]\n        new_num_cells = num_cells + 1\n\n        # Check if the current move leads to a better path\n        if direction == 'R':\n            dfs(i+1, j, 'D', new_total_cost, new_num_cells, max_avg)\n            dfs(i+1, j, 'R', new_total_cost, new_num_cells, max_avg)\n        elif direction == 'D':\n            dfs(i, j+1, 'L', new_total_cost, new_num_cells, max_avg)\n            dfs(i, j+1, 'D', new_total_cost, new_num_cells, max_avg)\n        else:\n            dfs(i-1, j, 'U', new_total_cost, new_num_cells, max_avg)\n            dfs(i-1, j, 'L', new_total_cost, new_num_cells, max_avg)\n\n    # Start at the top-left cell and move right and down to reach the bottom right cell\n    max_avg = 0\n    dfs(0, 0, 'R', 0, 1, max_avg)\n    dfs(0, 0, 'D', 0, 1, max_avg)\n\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        max_avg = max(max_avg, dp[i][0])\n    for i in range(1, N):\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, dp[0][i])\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg/((N-1)*(N-1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Let's implement this algorithm in Python.<|im_sep|>"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_sum = 0\n    max_avg = 0\n    curr_sum = 0\n    curr_avg = 0\n    num_cells = 0\n    \n    # Iterate over each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if the cell is the bottom right cell\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                curr_sum += cost[i][j]\n                curr_avg = curr_sum / num_cells\n                max_avg = max(max_avg, curr_avg)\n                curr_sum = 0\n                num_cells = 0\n                continue\n            \n            # If the cell is not the bottom right cell, move right or down\n            if i < len(cost)-1:\n                curr_sum += cost[i+1][j]\n                curr_avg = curr_sum / (num_cells+1)\n                max_avg = max(max_avg, curr_avg)\n                curr_sum = 0\n                num_cells = 0\n            \n            if j < len(cost[0])-1:\n                curr_sum += cost[i][j+1]\n                curr_avg = curr_sum / (num_cells+1)\n                max_avg = max(max_avg, curr_avg)\n                curr_sum = 0\n                num_cells = 0\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    # Initialize diagonal values\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # Fill rest of the matrix\n    for i in range(1, N):\n        for j in range(i):\n            # Calculate left and right values\n            left = float('-inf') if j == 0 else dp[j][i-1]\n            right = float('-inf') if i == N-1 else dp[j+1][i]\n\n            # Calculate top and bottom values\n            top = float('-inf') if j == 0 else dp[j][j]\n            bottom = float('-inf') if i == N-1 else dp[j][i]\n\n            # Update dp[i][j]\n            dp[i][j] = max(cost[i][j], left+right+top+bottom)\n\n    # Find maximum value in the last row\n    max_val = max(dp[N-1])\n\n    return max_val"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n    :param cost: A square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    :return: The maximum average of all existing paths.\n    \"\"\"\n    n = len(cost)\n    # Initialize the variables to store the maximum and current paths\n    max_avg = float('-inf')\n    path = [[0, 0]]\n    # Iterate through all possible paths and compute the average\n    for i in range(1, n - 1):\n        for j in range(1, n - 1):\n            # Check if the current cell is part of the current path\n            if i == 0 or j == 0 or i == n - 1 or j == n - 1:\n                # If it is not, check the neighboring cells\n                if cost[i][j] > cost[i][j - 1] and cost[i][j] > cost[i - 1][j]:\n                    # If the cost is greater than both of its neighboring cells, update the path\n                    path = [[i, j]]\n                elif cost[i][j] > cost[i - 1][j] and cost[i][j] > cost[i][j - 1]:\n                    # If the cost is greater than the left cell and the top cell, update the path\n                    path = [[i, j]]\n            else:\n                # If it is, check the neighboring cells\n                if cost[i][j] > cost[i - 1][j] and cost[i][j] > cost[i][j - 1]:\n                    # If the cost is greater than both of its neighboring cells, update the path\n                    path.append([i, j])\n                elif cost[i][j] > cost[i - 1][j]:\n                    # If the cost is greater than the left cell, update the path\n                    path.append([i, j])\n                else:\n                    # If the cost is greater than the top cell, update the path\n                    path.append([i, j])\n            # Compute the total cost and the number of cells visited in the path\n            total_cost = sum(cost[i][j] for x, y in path)\n            num_cells = len(path)\n            # Update the maximum average if the current path has a higher average\n            if total_cost / num_cells > max_avg:\n                max_avg = total_cost / num_cells\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Get the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables for finding the maximum average\n    max_avg = 0\n    max_path = []\n\n    # Loop through all paths in the matrix\n    for i in range(N):\n        for j in range(N):\n            # Check if this cell is the last cell in the path\n            if i == N - 1 and j == N - 1:\n                # If it is, set the max average and the path to be the current cell\n                max_avg = cost[i][j]\n                max_path = [(i, j)]\n            else:\n                # If it's not, generate all possible paths from this cell\n                paths = []\n                if i < N - 1:\n                    paths.append((i + 1, j))\n                if j < N - 1:\n                    paths.append((i, j + 1))\n\n                # Calculate the total cost of each path\n                total_cost = 0\n                for path in paths:\n                    total_cost += cost[path[0]][path[1]]\n\n                # Calculate the average cost of each path\n                avg_cost = total_cost / len(paths)\n\n                # If this path has a higher average cost, update the max average and path\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = paths\n\n    # Return the maximum average and path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_cost = 0\n\n    # Base cases\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                max_cost = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i][j-1])\n                max_cost = max(max_cost, dp[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j])\n                max_cost = max(max_cost, dp[i][j])\n\n    # Dynamic programming\n    for k in range(N):\n        for i in range(N-k-1):\n            for j in range(N-k-1):\n                if i == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j+1])\n                elif j == 0:\n                    dp[i][j] = max(dp[i][j], dp[i+1][j])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i][j+1], dp[i+1][j])\n\n    # Find the maximum average path\n    max_avg = 0\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, -1, -1):\n            if i == N-1 and j == N-1:\n                max_avg = dp[i][j] / (i+1)\n                break\n            elif i == 0:\n                max_avg = max(max_avg, dp[i][j] + dp[i][j+1] / (j+1))\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j] + dp[i+1][j] / (i+1))\n            else:\n                max_avg = max(max_avg, dp[i][j] + dp[i][j+1] / (j+1), dp[i+1][j] + dp[i+1][j+1] / (i+1))\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Define an empty dictionary to store the filtered students\n    filtered_students = {}\n    # Iterate through the students dictionary\n    for name, (height, weight) in students.items():\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the name and height and weight of the filtered students to the dictionary\n            filtered_students[name] = (height, weight)\n    # Return the filtered students dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        if data[0]>h and data[1]>w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter the students by height and weight\n    filtered_students = {name: student for name, student in students.items() if student[0] > h and student[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height,weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power -= 1\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Args:\n    base: the base number\n    power: the power to which to raise the base\n\n    Returns:\n    The sum of all digits of the base raised to the specified power.\n    \"\"\"\n    total = 0\n    base_str = str(base)\n    for digit in base_str:\n        digit = int(digit)\n        total += digit ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can manipulate it\n    base_str = str(base)\n    \n    # Initialize a variable to hold the sum\n    total = 0\n    \n    # Loop through each digit in the base\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the total\n        total += int(digit)\n        \n    # Calculate the power of the total\n    total_pow = total ** power\n    \n    # Return the total raised to the power of the power\n    return total_pow"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # add the digit to the digit sum\n        digit_sum += int(digit)\n    # multiply the digit sum by the power and return the result\n    return digit_sum * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # initialize sum variable\n    sum_of_digits = 0\n    # iterate through digits of base and add them to sum_of_digits\n    for digit in base_str:\n        sum_of_digits += int(digit)\n    # multiply sum_of_digits by power and return result\n    return sum_of_digits * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power -= 1\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    # Iterate through each digit of the base string and add it to the sum of digits\n    for digit in base_str:\n        sum_digits += int(digit)\n    # Calculate the sum of digits raised to the specified power\n    result = sum_digits ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # calculate the sum of digits raised to the power and return the result\n    return sum ** power"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n\n    # Extract values between quotation marks\n    values = []\n    for match in matches:\n        values.append(match[1:-1])\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # define the regular expression pattern for matching quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # use the re.findall() function to find all the matches of the pattern in the given text\n    matches = re.findall(pattern, text1)\n\n    # return a list of all the matched quotation marks as strings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression pattern to match strings between quotation marks\n    pattern = re.compile(r'\"([^\"]+)\"')\n\n    # Find all the matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n\n    # Remove duplicates and return the final list of strings\n    return list(set(matches))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regular expression to match the opening quotation mark \" \"\n    pattern = r'\\\"'\n\n    # Use findall() method to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # Use list comprehension to remove duplicates\n    unique_matches = list(set(matches))\n\n    # Join the unique matches into a single string\n    result = ''.join(unique_matches)\n\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    # Find all the matches of the pattern in the given string\n    matches = pattern.findall(text)\n    # Return a list of all the matches found\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup)\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i]*test_tup[i+1])\n    \n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    result_tup.append(test_tup[-1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    new_tup = ()\n    for i in range(t_len-1):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2  # calculate the length of the resulting tuple\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[4], test_tup[3] * test_tup[5], test_tup[4] * test_tup[6], test_tup[5] * test_tup[7], test_tup[6] * test_tup[8], test_tup[7] * test_tup[9], test_tup[8] * test_tup[10], test_tup[9] * test_tup[11], test_tup[10] * test_tup[12], test_tup[11] * test_tup[13], test_tup[12] * test_tup[14], test_tup[13] * test_tup[15], test_tup[14] * test_tup[16], test_tup[15] * test_tup[17], test_tup[16] * test_tup[18], test_tup[17] * test_tup[19], test_tup[18] * test_tup[20], test_tup[19] * test_tup[21], test_tup[20] * test_tup[22], test_tup[21] * test_tup[23], test_tup[22] * test_tup[24], test_tup[23] * test_tup[25], test_tup[24] * test_tup[26], test_tup[25] * test_tup[27], test_tup[26] * test_tup[28], test_tup[27] * test_tup[29], test_tup[28] * test_tup[30], test_tup[29] * test_tup[31])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to hold the result\n    result_tup = ()\n    # iterate over the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the i-th element of the input tuple with (i+1)-th element\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    # add the last element of the input tuple to the result tuple\n    result_tup = result_tup + (test_tup[-1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty list to store the multiplied elements\n    multiplied_tup = []\n    # iterate through the tuple and multiply each element with the next element\n    for i in range(len(test_tup) - 1):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    # add the last element of the tuple to the end of the list\n    multiplied_tup.append(test_tup[-1])\n    # return the list of multiplied elements\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i]*test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i]*test_tup[i+1],)\n    new_tup += (test_tup[-1]*test_tup[-1],)\n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if input lists are of same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both input lists should have same length.\")\n    # initialize an empty list to store the sum of the two lists\n    sum_list = []\n    # loop through both lists and add the corresponding elements\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    # return the sum list\n    return sum_list"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the sum of the two lists\n    result = []\n    # loop through the two lists and add the corresponding elements together\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # return the summed list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n]\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for item in nums:\n        if item not in result:\n            result.append(item)\n        else:\n            continue\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(lambda x: ''.join(x), groupby(sorted(set(nums)))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    it = iter(nums)\n    prev = None\n    result = []\n    for item in groupby(it):\n        if prev is not None and prev == item:\n            continue\n        result.append(item)\n        prev = item\n    return list(result)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return [list(group)[0] for key, group in groupby(enumerate(nums), lambda x: x[1] - x[0])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(nums, key=lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if not g]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a groupby object from the input list\n    grouped_nums = groupby(sorted(set(nums)))\n\n    # iterate over the grouped_nums object and keep track of the current and previous value\n    prev_val = None\n    result = []\n\n    for key, group in grouped_nums:\n        # check if the current value is equal to the previous value\n        if prev_val is not None and prev_val == key:\n            # if yes, add the current value to the result list, and set the previous value to None\n            result.append(key)\n            prev_val = None\n        else:\n            # if not, add the previous value to the result list and set the previous value to the current value\n            result.append(prev_val)\n            prev_val = key\n\n    # check if the last value is equal to the previous value\n    if prev_val is not None:\n        result.append(prev_val)\n\n    # return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(enumerate(nums), lambda x: x[1] == x[0])\n    return [num for group in grouped for num in group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (1/3)*math.pi*r**2*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the surface area of a cone using the formula: s = pi*r^2*h\n    s = math.pi * r**2 * h\n    \n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    '''\n    s = math.pi * r ** 2 # side\n    area = (3 * h / 2) * math.sqrt(s) # lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the base area\n    base_area = math.pi * r**2\n\n    # Calculate the lateral surface area\n    lateral_area = 2 * base_area * math.sin(math.pi/4)\n\n    # Calculate the total surface area\n    total_area = base_area + lateral_area\n\n    return total_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using the formula: s = \u03c0r\u00b2 * h\n    s = math.pi * r**2 * h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone\n    lateral_surface = 2*math.pi*(r**2 + h**2)/3\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * r ** 2) / 3  # side length of the cone\n    lateral_surface = 2 * math.pi * r * h  # lateral surface area of the cone\n    total_surface = s * (1 + math.cos(math.pi/3)) + lateral_surface\n    return total_surface"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n    # replace commas with colons\n    text = re.sub(r',', ':', text)\n    # replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    # replace multiple colons with one\n    text = re.sub(r':+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expressions to replace all spaces, commas, or dots with a colon\n    pattern = r'[.,\\s]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[., ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Create a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # Use the re.sub() function to replace all occurrences of the special characters with a colon\n    result = pattern.sub(':', text)\n\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile('[,.]')\n    colon_replacement = ':'\n    text = special_chars.sub(colon_replacement, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s*,\\s*|\\s*\\.+\\s*')\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array and a number x as input and returns the index of the first occurrence of x.\n\n    If x is not present in the array, the function should return -1.\n\n    The array may contain duplicate elements, and the function should find the first occurrence of x.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            # Found first occurrence of x\n            return mid\n        elif A[mid] < x:\n            # Search in right half\n            low = mid + 1\n        else:\n            # Search in left half\n            high = mid - 1\n\n    # x not found in array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize index to -1\n    index = -1\n    # loop through the array\n    for i in range(len(A)):\n        # if the current element is equal to x, set index to i\n        if A[i] == x:\n            index = i\n            # break out of the loop because we found the first occurrence of x\n            break\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index where x is present in A\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # If x is present at mid, then we need to search the right half of the array\n            right = mid - 1\n        elif A[mid] < x:\n            # If x is greater than mid element, then it can only be present in the right half of the array\n            left = mid + 1\n        else:\n            # If x is smaller than mid element, then it can only be present in the left half of the array\n            right = mid - 1\n\n    # If x is not present in the array, then return -1\n    return -1 if x not in A else left\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index variable to -1\n    i = -1\n    # iterate over the array using a while loop\n    while i < len(A) - 1:\n        # if the current element is equal to x, increment the index variable\n        if A[i] == x:\n            i += 1\n        # if the current element is greater than x, decrement the index variable\n        else:\n            i -= 1\n    # if the while loop completes without finding a match, return -1\n    if i == -1:\n        return -1\n    # otherwise, return the index variable\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Find the index of the first occurrence of x using binary search\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # iterate through the array and check if the current element is equal to x\n    # if it is, return the index\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    # if the loop completes without finding the element, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index of the first occurrence to -1\n    first_occurrence_index = -1\n\n    # loop through the array and compare each element with the target element\n    for i in range(len(A)):\n        if A[i] == x:\n            # if the element is equal to the target, set the first_occurrence_index to the current index\n            first_occurrence_index = i\n            break\n\n    return first_occurrence_index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    product = 1\n    ans = 0\n    for i in range(n):\n        product *= arr[i]\n        for j in range(i, n):\n            ans += product\n            product *= arr[j]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    # Initialize prefix sum array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = arr[0]\n    \n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    # Calculate product of subarray from index i to n\n    def product_of_subarray(i):\n        return prefix_sum[n] - prefix_sum[i] * (i - 1)\n    \n    # Calculate sum of products of subarrays from index i to n\n    def sum_of_subarray_prod(i):\n        return sum(product_of_subarray(j) * (j - i + 1) for j in range(i, n + 1))\n    \n    for i in range(n):\n        result += sum_of_subarray_prod(i)\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Create a list of products for each sublist\n    products = []\n    for i in range(len(arr)):\n        sublist = arr[i:]\n        product = 1\n        for j in range(len(sublist)):\n            product *= sublist[j]\n        products.append(product)\n\n    # Calculate sum of products\n    total_product = 1\n    for product in products:\n        total_product *= product\n\n    return total_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    max_so_far = 0\n    prefix_sum = 0\n\n    for i in range(n):\n        prefix_sum += arr[i]\n        max_so_far = max(max_so_far, prefix_sum)\n        if i >= 2:\n            max_so_far = max(max_so_far, prefix_sum - arr[i-1])\n\n    return max_so_far"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    product = 1\n    subarray_product = 1\n    subarray_sum = 0\n    for i in range(n):\n        subarray_product *= arr[i]\n        subarray_sum += arr[i]\n        product *= subarray_product\n    return product - subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            result += product\n            \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    subarray_sums = [0] * (2 * n)\n    subarray_prod = [0] * (2 * n)\n    \n    # calculate the sum of products of all subarrays\n    for i in range(n):\n        for j in range(n, 2*n):\n            subarray_sums[j] += arr[i] * arr[j]\n            subarray_prod[j] = subarray_sums[j]\n    \n    # calculate the sum of products of all sublists\n    for i in range(1, 2*n):\n        subarray_prod[i] *= subarray_prod[i-1]\n    \n    # sum of products of all possible sublists\n    return sum(subarray_prod[:n+1])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two variables to store the sum of products of subarrays and the sum of subarrays\n    subarray_prod_sum = 0\n    subarray_sum = 0\n    # Initialize two variables to store the product of the first element and the rest of the array\n    prod_prev = arr[0]\n    prod_current = 1\n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Update the current product with the previous product and the current element\n        prod_current *= arr[i]\n        # Update the sum of subarrays with the sum of the current element and the sum of the previous element\n        subarray_sum += arr[i]\n        # Update the sum of products of subarrays with the previous product, current product and the sum of subarrays\n        subarray_prod_sum += (prod_prev * prod_current)\n        # Update the previous product with the current product\n        prod_prev = prod_current\n    # Return the sum of products of subarrays\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Function to find sum of products of all possible sublists of size i\n    def sum_products(i):\n        # Initialize the sum of products of all possible sublists of size i\n        sum_prod = 0\n\n        # Initialize the power of subarray size i\n        power = 1\n\n        # Loop through all possible starting positions for subarrays of size i\n        for start in range(n - i + 1):\n            # Calculate the sum of products of the subarray\n            prod_sum = 1\n\n            # Loop through all elements of the subarray\n            for j in range(start, start + i):\n                prod_sum *= arr[j]\n\n            # Update the sum of products of all possible sublists of size i\n            sum_prod += prod_sum * power\n\n            # Update the power of subarray size i\n            power *= arr[start + i - 1]\n\n        return sum_prod\n\n    # Find the sum of products of all subarrays of size 1 to n\n    sum_prod_1 = sum_products(1)\n\n    # Find the sum of products of all subarrays of size 2 to n\n    sum_prod_2 = sum_products(2)\n\n    # Find the sum of products of all subarrays of size 3 to n\n    sum_prod_3 = sum_products(3)\n\n    # Find the sum of products of all subarrays of size 4 to n\n    sum_prod_4 = sum_products(4)\n\n    # Find the sum of products of all subarrays of size 5 to n\n    sum_prod_5 = sum_products(5)\n\n    # Find the sum of products of all subarrays of size 6 to n\n    sum_prod_6 = sum_products(6)\n\n    # Find the sum of products of all subarrays of size 7 to n\n    sum_prod_7 = sum_products(7)\n\n    # Find the sum of products of all subarrays of size 8 to n\n    sum_prod_8 = sum_products(8)\n\n    # Find the sum of products of all subarrays of size 9 to n\n    sum_prod_9 = sum_products(9)\n\n    # Find the sum of products of all subarrays of size 10 to n\n    sum_prod_10 = sum_products(10)\n\n    # Find the sum of products of all subarrays of size 11 to n\n    sum_prod_11 = sum_products(11)\n\n    # Find the sum of products of all subarrays of size 12 to n\n    sum_prod_12 = sum_products(12)\n\n    # Find the sum of products of all subarrays of size 13 to n\n    sum_prod_13 = sum_products(13)\n\n    # Find the sum of products of all subarrays of size 14 to n\n    sum_prod_14 = sum_products(14)\n\n    # Find the sum of products of all subarrays of size 15 to n\n    sum_prod_15 = sum_products(15)\n\n    # Find the sum of products of all subarrays of size 16 to n\n    sum_prod_16 = sum_products(16)\n\n    # Find the sum of products of all subarrays of size 17 to n\n    sum_prod_17 = sum_products(17)\n\n    # Find the sum of products of all subarrays of size 18 to n\n    sum_prod_18 = sum_products(18)\n\n    # Find the sum of products of all subarrays of size 19 to n\n    sum_prod_19 = sum_products(19)\n\n    # Find the sum of products of all subarrays of size 20 to n\n    sum_prod_20 = sum_products(20)\n\n    # Find the sum of products of all subarrays of size 21 to n\n    sum_prod_21 = sum_products(21)\n\n    # Find the sum of products of all subarrays of size 22 to n\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        prefix_sum = 1\n        suffix_sum = 1\n\n        for j in range(i, n):\n            total_sum += arr[j]\n            prefix_sum *= arr[j]\n            suffix_sum *= arr[j]\n\n        total_sum -= arr[i]\n\n    return total_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the binary representation of n to an integer\n    n = int(n, 2)\n    # Toggle the middle bit of the integer\n    n = n ^ (1 << 1)\n    # Convert the integer back to its binary representation\n    n = bin(n)[2:]\n    # Add leading zeros to the binary representation if it's shorter than 32 bits\n    n = '0'*(32-len(n)) + n\n    # Convert the binary representation back to an integer and return it\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    n = n >> 1\n    last_bit = n & 1\n    n = n >> 1\n    middle_bits = (n & 1) << 1\n    n = n >> 1\n    n = n ^ middle_bits\n    n = n ^ first_bit\n    n = n ^ last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Initialize the first and last bit as the same as the middle bit\n    first_bit = n & 1\n    last_bit = n & 1\n    \n    # Shift the middle bit to the left to get the middle two bits\n    middle_bit = (n >> 1) & 1\n    \n    # Toggle the middle bit and add it back to the left side\n    toggled_middle = middle_bit ^ 1\n    \n    # Toggle the first and last bits and add them back to the left side\n    toggled_first = first_bit ^ 1\n    toggled_last = last_bit ^ 1\n    \n    # Combine the toggled bits to get the final result\n    final_result = (toggled_first << 31) + (toggled_middle << 30) + (toggled_middle << 29) + (toggled_last << 28)\n    \n    # Return the final result\n    return final_result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    n = bin(n)[2:] # convert integer to binary\n    n = n[1:-1] # extract middle bits\n    for i in range(len(n)):\n        if n[i] == '0':\n            n[i] = '1'\n        else:\n            n[i] = '0'\n    return int(n, 2) # convert binary back to integer"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 1) & 1\n    \n    # toggle all the bits except first and last\n    n = n ^ ((n ^ first_bit) & ((n ^ last_bit) ^ 1))\n    \n    # shift the first and last bits to the first and last positions\n    n = (n << 1) | first_bit | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the first and last bits of the number\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 0\n\n    # Toggle all bits except the first and the last bit\n    for i in range(31, -1, -1):\n        n ^= 1 << i\n\n    # Combine the first and last bits with the toggled bits\n    n = (n ^ first_bit ^ last_bit)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the position of the first and last bits in the binary representation of n\n    first_bit_pos = bin(n)[2:].index('1')\n    last_bit_pos = bin(n)[2:].index('0')\n\n    # Toggle the first and last bits of the number except those two bits\n    for i in range(first_bit_pos + 1, last_bit_pos):\n        n = n ^ (1 << i)\n\n    # Toggle the last bit of the number except the first and last bits\n    if n & (1 << last_bit_pos):\n        n = n ^ (1 << last_bit_pos)\n    else:\n        n = n ^ (1 << last_bit_pos)\n\n    # Toggle the first bit of the number except the first and last bits\n    if n & (1 << first_bit_pos):\n        n = n ^ (1 << first_bit_pos)\n    else:\n        n = n ^ (1 << first_bit_pos)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # Toggle the first and last bit\n        n = n ^ (1 << 31)\n        n = n ^ (1 << 0)\n        # Toggle the middle bits\n        n = n ^ ((1 << 1) | (1 << 30))\n    else:\n        # Toggle the first and last bit\n        n = n ^ (1 << 31)\n        n = n ^ (1 << 0)\n        # Toggle the middle bits\n        n = n ^ ((1 << 1) | (1 << 30))\n        # Toggle the next bit\n        n = n ^ (1 << 31)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the count of 1s in the number\n    count_ones = sum(int(digit) for digit in str(bin(n)[2:]))\n\n    # Toggle the middle bit\n    middle_bit = (n ^ (n >> 1)) & 1\n\n    # Count the number of 1s after toggling the middle bit\n    count_ones_after_toggle = sum(int(digit) for digit in str(bin(n ^ middle_bit)[2:]))\n\n    # Calculate the difference between the count of 1s in the number and the count of 1s after toggling the middle bit\n    diff = count_ones_after_toggle - count_ones\n\n    # Return the number with the middle bit toggled\n    return n ^ diff"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_half = n & (n ^ ((~n) & (n ^ (-1))))\n    last_half = n & (n ^ ((n ^ (-1)) & (~n)))\n    return first_half | last_half"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    if a[left] == x:\n        return left\n    if a[left] < x:\n        return left_insertion(a[left+1:], x)\n    return bisect.bisect_left(a[:left], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect.bisect_left() returns the index of the first insertion point\n    # if the value is not present, the index of the first element greater than the value is returned\n    index = bisect.bisect_left(a, x)\n    # if the index is 0, it means the value is already in the list\n    if index == 0:\n        return index\n    # if the value is greater than the element at index - 1, then the value should be inserted before that element\n    elif a[index-1] < x:\n        return index-1\n    # if the value is less than or equal to the element at index - 1, then the value should be inserted after that element\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x) # Find the index of the first element greater than or equal to x\n    if i == len(a):\n        return i # If x is greater than all elements in the list, i is the index of the last element in the list.\n    elif a[i] == x: # If x is equal to the element at i, then there is no insertion point.\n        return i\n    else:\n        return i - 1 # Otherwise, return the index of the element immediately to the left of x."
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    # Initialize the left and right pointers\n    left, right = 0, len(a) - 1\n    \n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the element is present at the middle itself\n        if a[mid] == x:\n            return mid\n        \n        # If the element is greater, ignore left half\n        elif a[mid] < x:\n            left = mid + 1\n            \n        # If the element is smaller, ignore right half\n        else:\n            right = mid - 1\n    \n    # If the element is not present in the array\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*' \n    if re.match(regex, string): \n        return True\n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    # Define a regular expression pattern for a starting vowel\n    regex = '^[aeiouAEIOU]'\n\n    # Use the re.match function to check if the string matches the pattern\n    match = re.match(regex, string)\n\n    # If the match is not None, the string starts with a vowel, otherwise it doesn't\n    return match is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    \n    return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return geometric_sum(n-1) + geometric_sum(n-2)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1 / (1 - 1/n)) * (1 / (1 - 1/n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    \n    # The smallest triangular number with n digits is 10^(n-1) * 10^n. \n    # We can find the triangular number using the formula Tn = (10^n-1) * 10^n. \n    triangular_num = 10 ** n - 1\n    \n    # We can also find the index of the triangular number using binary search. \n    # We can start by looking for the first triangular number greater than or equal to triangular_num. \n    index = 0\n    while index * (index + 1) <= triangular_num:\n        index += 1\n    \n    # Now we can find the index of the smallest triangular number with n digits. \n    while math.log10(triangular_num) >= n:\n        triangular_num -= 1\n        index -= 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 1\n    b = math.factorial(n-1)\n    c = (n-1)*math.factorial(n-2)\n    tri = a + b + c \n    print(\"The smallest triangular number with\", n, \"digits is\", tri)\n    return tri\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Create a list of all possible triangular numbers with n digits\n    triangular = [0] * (n + 1)\n    triangular[0] = 0\n    triangular[1] = 1\n\n    # Use the Sieve of Eratosthenes algorithm to find all prime numbers up to the square root of the largest triangular number\n    p = 2\n    while p * p <= n:\n        if triangular[p] == 0:\n            for i in range(p * p, n + 1, p):\n                triangular[i] = p\n        p += 1\n\n    # Find the smallest triangular number with n digits\n    smallest = None\n    for i in range(2, n + 1):\n        if triangular[i] == i:\n            smallest = i\n            break\n\n    # Find the index of the smallest triangular number\n    index = 0\n    while triangular[n - index]!= n - index:\n        index += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    if n < 1:\n        return \"Please enter a positive integer value greater than or equal to 1\"\n\n    index = 1\n    while True:\n        triangular_number = (math.factorial(n) * (2 * index + 1)) // math.factorial(2 * index + 1)\n        if triangular_number % 10 == 0:\n            return index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Loop from 1 to n and calculate the triangular number\n    triangular_number = [0] * n\n    triangular_number[0] = 1\n    for i in range(1, n):\n        triangular_number[i] = int(math.sqrt(i * (i + 1)))\n    # Initialize the variable to store the smallest triangular number with n digits\n    smallest_triangular_number = 1\n    # Loop from n-1 to 0 and find the index of smallest triangular number with n digits\n    for i in range(n-1, -1, -1):\n        if triangular_number[i] >= smallest_triangular_number:\n            smallest_triangular_number = triangular_number[i]\n            index = i\n            break\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n\n    # Initialize a counter and a variable to store the smallest triangular number with n digits\n    count = 1\n    smallest_triangular = 1\n\n    # Loop through the digits of n\n    while count <= n:\n\n        # Calculate the next triangular number with n digits\n        next_triangular = smallest_triangular * 10 ** count\n\n        # Check if the next triangular number is smaller than the smallest triangular number\n        if next_triangular < smallest_triangular:\n\n            # If it is, update the smallest triangular number\n            smallest_triangular = next_triangular\n\n        # Increment the counter\n        count += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Initialize variables for storing the smallest triangular number with n digits and its index\n    smallest_triangular = float('inf')\n    index = 0\n\n    # Loop through all possible triangular numbers with n digits\n    for i in range(1, 10 ** n + 1):\n        # Check if the triangular number is smaller than the current smallest triangular number\n        if i * (i + 1) // 2 < smallest_triangular:\n            smallest_triangular = i * (i + 1) // 2\n            index = i\n\n    # Return the index of the smallest triangular number with n digits\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Index(n-1) + n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n):\n    # initialize variables\n    t = 0\n    count = 0\n    digit = 1\n    \n    # calculate the smallest triangular number with n digits\n    while len(str(t)) < n:\n        t += digit\n        count += 1\n        digit *= 10\n    \n    # find the index of smallest triangular number with n digits\n    index = count - n + 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    #initializing the list with 0s\n    triangular_numbers = [0]*(n+1)\n    #initializing the index to 1\n    index = 1\n    #looping through all digits of n\n    for digit in range(1,n+1):\n        #finding the maximum value of the current digit in the triangular numbers list\n        max_value = triangular_numbers[index-digit]\n        #looping through all previous indices of the current digit\n        for i in range(index-digit):\n            #finding the value of the current triangular number and adding it to the maximum value\n            current_triangular_number = triangular_numbers[i] + digit\n            #checking if the current triangular number is smaller than the maximum value\n            if current_triangular_number < max_value:\n                max_value = current_triangular_number\n        #updating the maximum value in the triangular numbers list\n        triangular_numbers[index] = max_value\n        #incrementing the index\n        index += 1\n    #returning the index of the smallest triangular number with n digits\n    return triangular_numbers.index(1)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary that contains the values of the elements in the tuple.\n    The dictionary is constructed using adjacent elements.\n    \"\"\"\n    return dict(zip(range(len(test_tup)), test_tup))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    i = 0\n    while i < len(test_tup):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Iterate through the tuple using a for loop and range() function\n    for i in range(len(test_tup)-1):\n        # Add the current key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n    test_tup: tuple of any length\n\n    Returns:\n    dict: key-value dictionary where the keys are adjacent elements in the input tuple\n    \"\"\"\n\n    # Initialize the dictionary with an empty list for the values\n    d = {}\n\n    # Loop through the input tuple\n    for i in range(len(test_tup)):\n\n        # Check if the current index is adjacent to the previous index\n        if i < len(test_tup) - 1:\n\n            # Add the current index and the adjacent index to the dictionary\n            d[(i, i+1)] = test_tup[i]\n\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    dictionary = {}\n    # iterate over the tuple, starting from the second element\n    for i in range(1, len(test_tup), 2):\n        # extract the key and value from the tuple\n        key = test_tup[i-1]\n        value = test_tup[i]\n        # add the key-value pair to the dictionary\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    count = 0\n    for i in range(len(test_tup)-1):\n        test_dict[count] = test_tup[i], test_tup[i+1]\n        count += 1\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    num_elements = len(test_tup)\n    if num_elements % 2!= 0:\n        print('Error: The tuple should have an even number of elements')\n        return None\n    \n    # create an empty dictionary\n    dict_obj = {}\n    \n    # iterate over the tuple and add key-value pairs to the dictionary\n    for i in range(0, num_elements, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    \n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # loop through all the characters in the string\n    for char in s:\n        # if the first character is not equal to the current character, return False\n        if first_char!= char:\n            return False\n        # if all characters are equal, update the first character\n        else:\n            first_char = char\n    \n    # if all characters are equal, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initializing the count of characters\n    count = {}\n    \n    # loop through the string s\n    for char in s:\n        # if the character is not in the count dictionary, add it and set its count to 1\n        if char not in count:\n            count[char] = 1\n        # if the character is in the dictionary, increment its count by 1\n        else:\n            count[char] += 1\n    \n    # loop through the dictionary count and check if all the counts are equal to 1\n    for char in count:\n        if count[char]!= 1:\n            return False\n    \n    # if all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        return s[0] == s[-1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the input string to a list of characters\n    chars = list(s)\n    \n    # Check if the length of the list is zero, which means all characters are same\n    if len(chars) == 0:\n        return True\n    \n    # Check if all the characters in the list are the same\n    for i in range(len(chars)-1):\n        if chars[i]!= chars[i+1]:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n    # check if all characters are the same\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to lowercase\n    s = s.lower()\n    # get the length of the string\n    n = len(s)\n    # check if the length of the string is 1\n    if n == 1:\n        return True\n    # check if all the characters are same\n    for i in range(n):\n        if s[i]!= s[0]:\n            return False\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.25 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    return math.sqrt(s * (s - 1) * (s - 2) * (s - 3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + math.sqrt(3))) / 4\n    return math.sqrt(s) ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (4 * side ** 2) / (s ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side * side / 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    s = (1 + math.sqrt(5))/2\n    return math.sqrt(s*(s-1)*(-a)**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Find the length of the list\n    n = len(list)\n    # If the m is greater than or equal to the length of the list, then no rotation is required\n    if m >= n:\n        return list\n    \n    # Find the number of items to be rotated\n    k = m % n\n    \n    # If k is 0, then no rotation is required\n    if k == 0:\n        return list\n    \n    # If k is less than n, then rotate the list to the right by k items\n    list = list[k:] + list[:k]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst[:m], lst[m:] = lst[m:], lst[:m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate the given list to the right by the specified number of items.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    list.append(list.pop(0))\n    return list[:n-m] + list[n-m:]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n # Calculate the number of items to be rotated\n    \n    # If number of items to be rotated is more than length of the list, then reverse the list and rotate by n items\n    if m > n:\n        lst = lst[::-1]\n        m = n\n        \n    # Reverse the first m items of the list\n    lst = lst[-m:] + lst[:-m]\n    \n    # Reverse the entire list\n    lst = lst[::-1]\n    \n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < m:\n        print(\"Not enough elements in the list to rotate\")\n        return\n    else:\n        list.reverse()\n        list = list[-m:] + list[:-m]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    if m >= n:\n        return list\n    else:\n        m = n - m\n        left_rotate = list[:m]\n        right_rotate = list[m:]\n        result = left_rotate + right_rotate\n        return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m], list[n-m:] = list[n-m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and checks if there are any none values in it.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_values = [None, '', 0, False]\n    for value in test_tup:\n        if value in none_values:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) % i == 0 for i in range(1,10)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda n: all(int(d) in str(n) for d in str(n))\n\n    # Loop through each number between startnum and endnum\n    for num in range(startnum, endnum+1):\n        # Check if the current number is divisible by every digit it contains\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: len(str(x)) == len(set(str(x))), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 1000))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(int(digit) % int(num) == 0 for digit in str(num))\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        return all(int(digit) % num == 0 for digit in str(num))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda n: all(int(digit) in str(n) for digit in str(n))\n\n    # Loop through each number within the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit it contains\n        if all(num % digit == 0 for digit in range(10)):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function that checks if a number is divisible by every digit it contains\n    check_divisor = lambda num: all(digit in str(num) for digit in str(num))\n    \n    # Use a list comprehension to generate all numbers within the given range that satisfy the check_divisor lambda function\n    result = [num for num in range(startnum, endnum+1) if check_divisor(num)]\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        num_str = str(num)\n        digits_list = [int(digit) for digit in num_str]\n        return all(digit in digits_list for digit in digits_list)\n\n    result = list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_list = []\n    for num in range(startnum, endnum+1):\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum % 10 == 0:\n            divisible_list.append(num)\n    return divisible_list\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # checking if the angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # calculating the area of the sector using the formula:\n    # area = (pi * r^2 * sin(a/180*pi)) / 360\n    area = (math.pi * r**2 * math.sin(a/180*math.pi)) / 360\n    \n    # returning the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * math.sin(a/180*math.pi)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    # calculate the area of the sector using the formula A = r * (sin(a/360) * r)\n    sina = math.sin(math.radians(a/360))\n    area = r * sina * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * math.pi * (a/360) ** 2"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area using formula for sector\n    area = math.pi * r * r * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r*r*math.sin(math.radians(a/360))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dictionary to store the length of the LCS of two strings in the third string\n    dp = {}\n    \n    # Initialize the length of the LCS of two empty strings with 0\n    dp[(0, 0)] = 0\n    \n    # Iterate through the third string\n    for i in range(len(Z)):\n        # Iterate through the first two strings\n        for j in range(len(X)):\n            # Check if the current character in the third string is the same as the character at the same position in both the first two strings\n            if Z[i] == X[j] and Z[i] == Y[j]:\n                # If it is, check if the current LCS of the two previous strings is greater than the current LCS of the first two previous strings\n                if (j + 1, i - 1) in dp and dp[(j + 1, i - 1)] > dp[(j, i)]:\n                    # If it is, update the LCS length in the dictionary\n                    dp[(j + 1, i)] = dp[(j + 1, i - 1)] + 1\n                else:\n                    # If it's not, update the LCS length in the dictionary\n                    dp[(j + 1, i)] = dp[(j, i)] + 1\n    \n    # Extract the LCS of the three strings and return it\n    return Z[:dp[(len(X), len(Y))]]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store the lengths of LCS for subsequences of X[0..i], Y[0..j], and Z[0..k]\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][k] = dp[i-1][k-1] + 1\n                else:\n                    dp[i][k] = max(dp[i-1][k], dp[i][k-1], dp[i-1][k-1])\n\n    # print the lengths of all LCS subsequences\n    for i in range(m+1):\n        for j in range(p+1):\n            if j == 0:\n                continue\n            print(\"LCS for X[0..{}], Y[0..{}], and Z[0..{}] is {}\".format(i-1, j-1, i, dp[i][j]))\n\n    # find the length of the LCS\n    LCS_length = dp[m][p]\n\n    # create a list to store the LCS subsequences\n    LCS_subseq = []\n\n    # backtrack to find the LCS subsequences\n    i, j, k = m, p, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            LCS_subseq.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][k] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the LCS subsequences and join them into a string\n    LCS_subseq = LCS_subseq[::-1]\n    LCS_subseq_str = ''.join(LCS_subseq)\n\n    return LCS_length, LCS_subseq_str"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store the length of LCS\n    L = [[0] * (p + 1) for _ in range(n + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n    # backtrack to find the longest common subsequence\n    i = n\n    j = m\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] > L[i][j - 1] and L[i - 1][j] > L[i][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the LCS\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    # function to find the length of the longest common subsequence\n    def lcs(X, Y):\n        m, n = len(X), len(Y)\n        L = [[0]*(n+1) for _ in range(m+1)]\n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n        return L\n\n    # find the length of the longest common subsequence for each string\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # find the length of the longest common subsequence for the three strings\n    L_abc = [[0]*(o+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L_abc[i][j][k] = 0\n                elif X[i-1] == Z[k-1] and Y[j-1] == Z[k-1]:\n                    L_abc[i][j][k] = L[i-1][j-1] + 1\n                else:\n                    L_abc[i][j][k] = max(L_abc[i-1][j][k], L_abc[i][j-1][k], L_abc[i][j][k-1])\n\n    # find the length of the longest common subsequence for the four strings\n    m_abc = max(m, n, o)\n    L_abc_def = [[0]*(m_abc+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                for l in range(m_abc+1):\n                    if i == 0 or j == 0 or k == 0 or l == 0:\n                        L_abc_def[i][j][k][l] = 0\n                    elif X[i-1] == Z[k-1] and Y[j-1] == Z[k-1]:\n                        L_abc_def[i][j][k][l] = max(L_abc_def[i-1][j][k][l], L_abc_def[i][j-1][k][l], L_abc_def[i][j][k-1][l]) + 1\n                    else:\n                        L_abc_def[i][j][k][l] = max(L_abc_def[i-1][j][k][l], L_abc_def[i][j-1][k][l], L_abc_def[i][j][k-1][l])\n\n    # find the length of the longest common subsequence for the five strings\n    m_abc_def = max(m, n, o, m_abc, L_abc_def[m][n][o])\n    lcs_length = L_abc_def[m][n][o][m_abc]\n\n    return lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Initialize three empty arrays for storing lengths of common prefixes and suffixes\n    LCP = [0] * (len(X) + 1)\n    LCS = [0] * (len(X) + 1)\n    # Step 2: Traverse through each string and calculate lengths of common prefixes and suffixes\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCP[i] = LCP[j] + LCP[k] + 1\n                    LCS[i] = max(LCS[i], LCP[i], LCS[j], LCS[k])\n    # Step 3: Extract the longest common subsequence from the arrays\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCP[i] > LCP[j]:\n            i -= 1\n        elif LCP[j] > LCP[k]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function returns the longest common subsequence of three string sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store lengths of longest common subsequences\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the 3D table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Create a list of strings to represent the longest common subsequence\n    lcs_list = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Convert the list of strings to a string\n    lcs_str = ''.join(lcs_list[::-1])\n\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # Create a table to store lengths of LCS of substrings \n    L = [[0] * (n+1) for i in range(m+1)] \n  \n    # Fill table in bottom up manner. Note that L[i][j] will contain length of LCS of \n    # X[0...i-1] and Y[0...j-1] and Z[0...p-1] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Initialize resultant LCS array \n    lcs = [] \n    i = m \n    j = n \n    p = p \n\n    # Fill LCS array in top down manner \n    while i > 0 and j > 0 and p > 0: \n        if X[i-1] == Y[j-1] and Z[p-1] == X[i-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            p -= 1 \n        elif X[i-1] == Y[j-1]: \n            i -= 1 \n        elif X[i-1] == Z[p-1]: \n            j -= 1 \n        else: \n            j -= 1 \n            p -= 1 \n  \n    # Reverse the LCS array \n    lcs.reverse() \n  \n    # Print the LCS array \n    return ''.join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Function to find LCS of two strings \n    def lcs(X, Y): \n        m = len(X) \n        n = len(Y) \n  \n        # create a table to store lengths of LCS of subsequences of X and Y \n        L = [[0] * (n+1) for i in range(m+1)] \n  \n        # fill table L[][] in bottom up manner \n        for i in range(m+1): \n            for j in range(n+1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n        # return the length of LCS \n        return L[m][n] \n  \n    # find LCS of X and Y \n    len_x_y = lcs(X, Y) \n  \n    # find LCS of Y and Z \n    len_y_z = lcs(Y, Z) \n  \n    # find LCS of X and Z \n    len_x_z = lcs(X, Z) \n  \n    # find LCS of all three strings \n    len_all = max(len_x_y, len_y_z, len_x_z) \n  \n    # find LCS by taking the minimum of the length of LCS of X and Y, LCS of Y and Z and LCS of X and Z \n    len_lcs = min(len_x_y, len_y_z, len_x_z) \n  \n    # return LCS of all three strings \n    return len_all == len_lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Taking input for string sequences X, Y, Z \n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n\n    # Creating a 2D table to store length of longest common subsequence for all prefixes of X, Y and Z \n    table = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n\n    # populating the table\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # backtracking to find the longest common subsequence of X, Y and Z\n    i = len(X)\n    j = len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reversing the list and returning it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common subsequences of prefixes of X, Y and Z\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill the table in bottom up manner.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Print the length of the LCS for each prefix of X, Y and Z\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    print(0, end=' ')\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    print(L[i][j][k], end=' ')\n                else:\n                    print(max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1]), end=' ')\n\n    # Return the length of the LCS for the given string sequence\n    return L[m][n][p]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern for matching capitalized words\n    pattern = re.compile(r'(?<!\\w\\.\\w.)(?<!\\w\\.)([A-Z][a-z]+(?=[A-Z]|$)|\\w\\.)')\n    \n    # Find all the matches in the string using the pattern\n    matches = re.findall(pattern, str1)\n    \n    # Loop through the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match[0].lower() + match[1:])\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # join the words with spaces\n    new_str =''.join(words)\n    # replace capital letters with their lowercase equivalent\n    new_str = re.sub(r'([A-Z])', r' \\1', new_str)\n    # return the modified string\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(''+ word)\n        else:\n            result.append(word)\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n\n    # convert string to lowercase\n    string = string.lower()\n\n    # find all capital words and replace them with spaces\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    for word in words:\n        string = string.replace(word,'' + word +'')\n\n    # remove leading and trailing spaces\n    string = re.sub(r'\\s+','', string).strip()\n\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string by spaces and capital letters\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # iterate over the words and capitalize the first letter\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # using regular expression to find all the capital words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # iterating over the words and putting spaces between them\n    for i in range(len(words)):\n        words[i] ='' + words[i] +''\n    \n    # rejoining the words with spaces\n    result = ''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    words = [word.strip().title() for word in words]\n    words = [word.replace(\".\", \"\") for word in words]\n    words = [word.replace(\",\", \"\") for word in words]\n    words = [word.replace(\"!\", \"\") for word in words]\n    words = [word.replace(\"?\", \"\") for word in words]\n    words = [word.replace(\":\", \"\") for word in words]\n    words = [word.replace(\";\", \"\") for word in words]\n    words = [word.replace(\"-\", \"\") for word in words]\n    words = [word.replace(\"_\", \"\") for word in words]\n    words = [word.replace(\"(\", \"\") for word in words]\n    words = [word.replace(\")\", \"\") for word in words]\n    words = [word.replace(\"[\", \"\") for word in words]\n    words = [word.replace(\"]\", \"\") for word in words]\n    words = [word.replace(\"{\", \"\") for word in words]\n    words = [word.replace(\"}\", \"\") for word in words]\n    words = [word.replace(\"|\", \"\") for word in words]\n    words = [word.replace(\"'\", \"\") for word in words]\n    words = [word.replace(\"\\\"\", \"\") for word in words]\n    words = [word.replace(\"<\", \"\") for word in words]\n    words = [word.replace(\">\", \"\") for word in words]\n    words = [word.replace(\"*\", \"\") for word in words]\n    words = [word.replace(\"+\", \"\") for word in words]\n    words = [word.replace(\",\", \"\") for word in words]\n    words = [word.replace(\"#\", \"\") for word in words]\n    words = [word.replace(\"$\", \"\") for word in words]\n    words = [word.replace(\"%\", \"\") for word in words]\n    words = [word.replace(\"^\", \"\") for word in words]\n    words = [word.replace(\"&\", \"\") for word in words]\n    words = [word.replace(\"*\", \"\") for word in words]\n    words = [word.replace(\"~\", \"\") for word in words]\n    words = [word.replace(\"=\", \"\") for word in words]\n    words = [word.replace(\"`\", \"\") for word in words]\n    words = [word.replace(\"!\", \"\") for word in words]\n    words = [word.replace(\"@\", \"\") for word in words]\n    words = [word.replace(\"\\\\\", \"\") for word in words]\n    words = [word.replace(\"|\", \"\") for word in words]\n    words = [word.replace(\"(\", \"\") for word in words]\n    words = [word.replace(\")\", \"\") for word in words]\n    words = [word.replace(\"[\", \"\") for word in words]\n    words = [word.replace(\"]\", \"\") for word in words]\n    words = [word.replace(\"{\", \"\") for word in words]\n    words = [word.replace(\"}\", \"\") for word in words]\n    words = [word.replace(\",\", \"\") for word in words]\n    words = [word.replace(\".\", \"\") for word in words]\n    words = [word.replace(\";\", \"\") for word in words]\n    words = [word.replace(\":\", \"\") for word in words]\n    words = [word.replace(\"?\", \"\") for word in words]\n    words = [word.replace(\"-\", \"\") for word in words]\n    words = [word.replace(\"_\", \"\") for word in words]\n    words = [word.replace(\" \", \"\") for word in words]\n    words = [word.replace(\"'\", \"\") for word in words]\n    words = [word.replace(\"\\\"\", \"\") for word in words]\n    words = [word.replace(\"<\", \"\") for word in words]\n    words = [word.replace(\">\", \"\") for word in words]\n    words = [word.replace(\"*\", \"\") for word in words]\n    words = [word.replace(\"+\", \"\") for word in words]\n    words = [word.replace(\",\", \"\") for word in words]\n    words = [word.replace(\"#\", \"\") for word in words]\n    words = [word.replace(\"$\", \"\") for word in words]\n    words = [word.replace(\"%\", \"\") for word in words]\n    words = [word.replace(\"^\", \"\") for word in words]\n    words = [word.replace(\"&\", \"\") for word in words]\n    words = [word.replace(\"*\", \"\") for word in words]\n    words = [word.replace"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    result = []\n    for word in words:\n        if word.istitle():\n            result.append(word +'')\n        else:\n            result.append(word)\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Use regex to find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Iterate over each word and capitalize the first letter and add spaces between them\n    new_words = []\n    for word in words:\n        capitalized_word = word[0].upper() + word[1:]\n        new_words.append(capitalized_word)\n\n    # Join the new words with spaces and return the result\n    return''.join(new_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # sort the numeric values in ascending order\n    nums.sort()\n\n    # convert the sorted numeric values back to strings\n    sorted_nums = [str(num) for num in nums]\n\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as input, sorts them numerically using the built-in `sorted()` function,\n    and returns the sorted list.\n    '''\n    # Convert all strings to float\n    nums = [float(num) for num in nums_str]\n\n    # Sort the float list using the sorted() function\n    sorted_nums = sorted(nums)\n\n    # Convert the sorted float list back to string\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda s: int(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers numerically\n    nums.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    :param nums_str: a list of strings of numbers\n    :return: a sorted list of strings of numbers\n    \"\"\"\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers\n    nums.sort()\n\n    # Convert the sorted list of integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    \n    nums.sort()\n    \n    nums_str = [str(num) for num in nums]\n    \n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        # convert string to float and check if it's a number\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            continue\n    # sort the list numerically\n    nums.sort()\n    # convert sorted list back to strings and return\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all strings to float\n    nums = [float(x) for x in nums_str]\n    # sort the list\n    nums.sort()\n    # convert back to strings\n    sorted_nums = [str(x) for x in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings and returns the sorted list of strings in numerical order.\n    \"\"\"\n    # split the list into individual strings\n    nums = [num for num in nums_str]\n    # convert each string to a float\n    nums = [float(num) for num in nums]\n    # sort the list using the built-in sort method\n    nums.sort()\n    # convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all string to int\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list numerically\n    nums.sort()\n    \n    # Convert the sorted list back to string\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # Return the sorted list\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a new list and add the elements of the given tuple\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add tuple to list\n    test_list.append(test_tup)\n    # print updated list\n    print(\"Updated list:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Using list comprehension to add the given tuple to the given list\n    test_list.extend(test_tup)\n    print(f\"The sum of {test_tup} and {test_list} is {sum(test_list)}\")"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add tuple to list\n    for item in test_list:\n        if isinstance(item, tuple):\n            test_list.remove(item)\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] <= arr[i//2]:\n        return True\n    else:\n        return False\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n//2+1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef min_heapify(arr, i):\n    '''\n    Rearrange the array to make it a min heap.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, smallest)\n\ndef build_min_heap(arr):\n    '''\n    Build a min heap from the given array.\n    '''\n    for i in range(len(arr)//2 - 1, -1, -1):\n        min_heapify(arr, i)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if not is_min_heap(arr):\n        return False\n    for i in range(1, len(arr)//2 + 1):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef heap_sort(arr):\n    '''\n    Sort the given array using min heap.\n    '''\n    build_min_heap(arr)\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        min_heapify(arr, 0)\n    return arr\n\ndef main():\n    arr = [12, 11, 13, 5, 6, 7]\n    print(\"Original array:\", arr)\n    heap_sort(arr)\n    print(\"Sorted array:\", arr)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not is_min_heap_helper(arr, i, n):\n            return False\n    return True\n\n\ndef is_min_heap_helper(arr, i, n):\n    '''\n    Helper function to check if a given array represents min heap or not.\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the current node is greater than its children, then it is not a min heap\n    if i >= len(arr) // 2:\n        return True\n\n    # If the left child is less than the current node, then it is a min heap\n    if arr[2 * i + 1] < arr[i]:\n        return False\n\n    # Recursively check the left child and its right child\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if i < 0:\n        return True\n    \n    # check if current element is greater than or equal to its children\n    if arr[i] >= min(arr[2*i+1], arr[2*i+2]):\n        return False\n    \n    # check recursively for the next element\n    return check_min_heap_helper(arr, i-1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if len(arr) < 2:\n        return True\n    \n    # check if current element is greater than or equal to its children\n    return check_min_heap_helper(arr, len(arr)-2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < 0:\n        return True\n    \n    if arr[i] < arr[i//2] or (arr[i] == arr[i//2] and i//2 >= 0):\n        return False\n    \n    return check_min_heap_helper(arr, i-1)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    \n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] > arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    # If the index is out of bounds, then the array is not a heap\n    if i < 0 or i >= len(arr):\n        return False\n    \n    # If the left child index is valid and the left child is greater than the current node, then return False\n    if i*2 + 1 < len(arr) and arr[i*2 + 1] < arr[i]:\n        return False\n    \n    # If the right child index is valid and the right child is greater than the current node, then return False\n    if i*2 + 2 < len(arr) and arr[i*2 + 2] < arr[i]:\n        return False\n    \n    # Otherwise, return True\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    # If the length of the array is less than or equal to 1, then the array is already a heap\n    if len(arr) <= 1:\n        return True\n    \n    # Initialize the last node as the root of the heap\n    last_node = len(arr) - 1\n    \n    # Loop through the array from 0 to the last node\n    for i in range(0, last_node):\n        # Check if the current node is a min heap\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    # If the loop completes without returning False, then the array is a min heap\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2) + 1\n    else:\n        return 2*jacobsthal_num((n-1)//2) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\",n,\"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_lst = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n    return jacobsthal_lst[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + 1\n    else:\n        return 3*jacobsthal_num(n//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    j = 0\n    l = 1\n    jacobsthal_list = [0, 1]\n\n    # Loop until nth jacobsthal number is found\n    while len(jacobsthal_list) < n+1:\n        # Calculate next jacobsthal number\n        j = jacobsthal_list[-1] + jacobsthal_list[-2]\n        # Calculate next lucas number\n        l = l + j\n\n        # Append lucas number to list\n        jacobsthal_list.append(l)\n\n    # Return nth jacobsthal number\n    return jacobsthal_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef jacobsthal_num(n):\n    return fibonacci(n)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (3*jacobsthal_num(n-1) + jacobsthal_num(n-2)) % 10"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    while True:\n        j += 1\n        if j == n:\n            return j\n        if j == n - 2:\n            return j\n        if j % 2 == 0:\n            j += 1\n        else:\n            j += 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n\n    # initialize the variables\n    j = 0\n    l = 1\n\n    # loop through the numbers\n    while l < n:\n        # update the variables\n        j += 1\n        temp = j\n        j = l\n        l = temp + j\n\n    # return the final value\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = 1\n        jacob_prev_num = 0\n        for i in range(2, n+1):\n            jacob_num = jacob_prev_num + jacob_num\n            jacob_prev_num = jacob_num - jacob_prev_num\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the variables\n    num = 0\n    prev = 0\n    j = 0\n    prev_j = 0\n    \n    # loop through the numbers\n    while j < n:\n        # if the number is odd, add it to the sum\n        if j % 2 == 1:\n            num += j\n        \n        # calculate the next number\n        temp = j * (j + 1)\n        \n        # update the values\n        j = temp - prev_j\n        prev_j = prev\n        prev = temp\n        \n        # print out the number\n        print(num)\n        \n    return num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    min_val = test_list[0][1]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    min_list = [test_list[min_index]]\n    for i in range(K - 1):\n        min_val = min(test_list, key=lambda x: x[1])[1]\n        min_list.append((test_list[min_list.index((test_list[min_list.index(min_val)]))][0], min_val))\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for item in test_list:\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # iterate through the sorted dictionary and check if the current element is the minimum k\n    min_k_index = 0\n    for i in range(K):\n        if sorted_dict[list(sorted_dict.keys())[i]] == i + 1:\n            min_k_index = i\n            break\n\n    # create a new list to store the minimum k records\n    min_k_records = []\n    for item in test_list:\n        if count_dict[item[0]] == min_k_index + 1:\n            min_k_records.append(item)\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list of tuples based on the second element in the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum count of k records\n    min_count = K\n\n    # Initialize the minimum record list\n    min_list = []\n\n    # Loop through the sorted list and count the number of occurrences of each element in the first element of the tuple\n    for record in sorted_list:\n        if len(min_list) < min_count:\n            if record[0] not in min_list:\n                min_list.append(record[0])\n        else:\n            break\n\n    # Return the minimum record list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize minimum count as infinite\n    min_count = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        count = 1  # Initialize count as 1\n        # Iterate over the next elements of the sorted list\n        for j in range(i+1, K):\n            # Check if the second element of the current tuple is greater than the second element of the next tuple\n            if sorted_list[j][1] > sorted_list[i][1]:\n                count += 1  # Increment count if it is greater\n        # Check if the count of duplicates is less than minimum count\n        if count < min_count:\n            min_count = count\n\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # convert the list of tuples to a dictionary\n    test_dict = {}\n    for test in test_list:\n        test_dict[test] = test_dict.get(test, 0) + 1\n    \n    # sort the dictionary based on the values in descending order\n    sorted_dict = dict(sorted(test_dict.items(), key=lambda item: item[1], reverse=True))\n    \n    # find the minimum k records\n    min_records = []\n    for i in range(K):\n        min_key = min_records.pop(0) if len(min_records) > 0 else None\n        min_value = sorted_dict[min_key] if min_key is not None else float('inf')\n        min_records.append((min_key, min_value))\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list by the first element of the tuple (i.e., their values)\n    test_list.sort(key=lambda x: x[0])\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n    # Iterate over the sorted list of tuples\n    for i in range(len(test_list)):\n        # If we have collected enough records, exit the loop\n        if len(min_k_records) == K:\n            break\n        # If the current record is greater than or equal to the minimum k records, add it to the list\n        if test_list[i][0] >= min_k_records[-1][0]:\n            min_k_records.append(test_list[i])\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Initialize min_list and count to store minimum records\n    min_list = []\n    count = 0\n\n    # Iterate through the test_list\n    for tup in test_list:\n        # Check if the length of the current tuple is less than or equal to K\n        if len(tup) <= K:\n            # If the length of the tuple is less than or equal to K, add it to min_list\n            min_list.append(tup)\n            # Increment the count\n            count += 1\n        # If the length of the tuple is greater than K, add the first K elements to min_list\n        else:\n            min_list.append(tuple(tup[:K]))\n            count += 1\n            # If the count is equal to K, return the min_list\n            if count == K:\n                return min_list\n    \n    # If the loop completes and count is less than K, return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    min_count = K\n    min_sum = float('inf')\n    for i in range(len(test_list)):\n        if min_count == 0:\n            break\n        if test_list[i][0] + test_list[i][1] <= min_sum:\n            min_count -= 1\n            min_sum = test_list[i][0] + test_list[i][1]\n    return min_sum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    test_list.sort()\n    min_list = []\n    for i in range(len(test_list)-K+1):\n        min_list.append(test_list[i])\n    return min_list\n\ntest_list = [(4, 2), (2, 5), (1, 3), (7, 1), (6, 8)]\nprint(min_k(test_list, 2))"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n\n    # Sort the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum count and minimum element\n    min_count = K\n    min_elem = test_list[0][1]\n\n    # Iterate through the list and update minimum count and minimum element\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_elem:\n            min_count = i + 1\n            min_elem = test_list[i][1]\n\n    # Return the minimum count and minimum element\n    return min_count, min_elem"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common = []\n    \n    # loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # check if the i-th element in l1 is also in l2 and l3\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # if it is, add it to the common list\n            common.append(l1[i])\n    \n    # return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n\n    # Iterate over each index in l1 and l2\n    for i in range(len(l1)):\n        # If the element at the current index is in both lists, add it to the common_elements list\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through each index of each list\n    for i in range(len(l1)):\n        # Check if the element at the current index is common for all lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the list of common elements\n            common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # create an empty dictionary to store the counts of common elements\n    common_counts = {}\n    # loop over the first list\n    for i in range(len(l1)):\n        # check if the element exists in the second list and third list\n        if l1[i] in l2 and l1[i] in l3:\n            # if it does, increment the count for the element in the dictionary\n            if l1[i] in common_counts:\n                common_counts[l1[i]] += 1\n            else:\n                common_counts[l1[i]] = 1\n    # create a list of the common elements\n    common_elements = [key for key, value in common_counts.items() if value == len(l1)]\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store common elements\n    common_dict = {}\n    # Loop through each list and add common elements to the dictionary\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_dict[l1[i]] = True\n    # Return a list of common elements\n    return list(common_dict.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two numbers\"\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # Find the second smallest number\n    second_smallest_num = sorted_list[1]\n\n    return second_smallest_num"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'(?<=a)\\w*b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return 'Not found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b+'\n    return bool(re.search(pattern, text))\n\ntext = \"abbbbaaa\"\nprint(text_match_zero_one(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found!\")\n    else:\n        print(\"Match not found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b|)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=a)(.*?)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return \"No match found\""
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Iterate over the strings in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        # Convert the sorted list back to a string\n        sorted_string = ''.join(char_list)\n        # If the sorted string is present in the dictionary, add 1 to the count\n        if sorted_string in count_dict:\n            count_dict[sorted_string] += 1\n        # Otherwise, add the sorted string to the dictionary with a count of 1\n        else:\n            count_dict[sorted_string] = 1\n    \n    # Return the count of reverse pairs\n    return sum(count_dict.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize variables\n    count = 0\n    pairs_count = {}\n\n    # Loop through each string in the list\n    for string in test_list:\n        # Reverse the string and compare it with all other strings in the list\n        for i in range(len(string)):\n            # Skip the first character since it is already checked in the previous loop\n            for j in range(i+1, len(string)):\n                # Compare the first character of the reversed string with the second character of the original string\n                if string[i] == string[j][::-1]:\n                    # If the reversed string is found in the original string, increment the count of pairs\n                    if string[j] in pairs_count:\n                        pairs_count[string[j]] += 1\n                    else:\n                        pairs_count[string[j]] = 1\n\n    # Loop through the pairs_count dictionary to count the pairs of reverse strings\n    for pair in pairs_count:\n        if pairs_count[pair] % 2 == 1:\n            count += pairs_count[pair]\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Create an empty dictionary to store the frequency of characters in each string\n    freq = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n        # Convert the string to a set to remove duplicates\n        set_string = set(string)\n\n        # Add the characters in the set to the dictionary with their frequency\n        for char in set_string:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n\n    # Loop through the list of strings again\n    pair_count = 0\n    for string1 in test_list:\n        # Convert the first string to a set to remove duplicates\n        set_string1 = set(string1)\n\n        # Loop through the remaining strings and check if the characters in the set of the second string can be reversed\n        for string2 in test_list[test_list.index(string1) + 1:]:\n            # Convert the second string to a set to remove duplicates\n            set_string2 = set(string2)\n\n            # Loop through the characters in the set of the second string and check if they can be reversed in the first string\n            for char in set_string2:\n                # Check if the character can be reversed in the first string\n                if char in set_string1:\n                    pair_count += 1\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    # Create an empty dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Create a new string by reversing the current string\n        reverse_str = test_list[i][::-1]\n\n        # Check if the reversed string is already in the dictionary\n        if reverse_str in count_dict:\n            # If it is, add 1 to its count in the dictionary\n            count_dict[reverse_str] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[reverse_str] = 1\n\n    # Loop through the dictionary and count the reverse pairs\n    count = 0\n    for i in count_dict.values():\n        count += i * (i - 1) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\n\ndef is_reverse(string):\n    \"\"\"\n    Check if a given string is a reverse of itself.\n    \"\"\"\n    return string == string[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_tuple = tuple(list1[i:j])\n            if sublist_tuple not in sublist_dict:\n                sublist_dict[sublist_tuple] = 1\n            else:\n                sublist_dict[sublist_tuple] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert each list to a tuple and count its occurencies\n    sublists = {}\n    for sublist in list1:\n        count = sublist in sublists\n        if count:\n            sublists[sublist] += 1\n        else:\n            sublists[tuple(sublist)] = 1\n\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every sublist is converted to a tuple and the value of the tuple is the number of times that sublist appears in the original list.\n    \"\"\"\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple to ensure uniqueness\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count by 1\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n            \n    # Return the dictionary of unique sublists and their count\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for lst in list1:\n        tup = tuple(lst)\n        if tup not in count:\n            count[tup] = 0\n        count[tup] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary if it doesn't exist yet\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            # Increment the count of the sublist in the dictionary if it exists already\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create a dictionary to store the number of times each list occurs in the original list\n    count_dict = {}\n\n    # iterate over each element in the list\n    for i in range(len(list1)):\n        # check if the current element is a list\n        if isinstance(list1[i], list):\n            # convert the list to a tuple and add it to the count_dict\n            count_dict[tuple(list1[i])] = count_dict.get(tuple(list1[i]), 0) + 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique lists\n    counts = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # Check if the element is a list\n        if isinstance(elem, list):\n            # Convert the list to a tuple and check if it's already a key in the dictionary\n            if tuple(elem) in counts:\n                # If the list is already a key, increment its count by 1\n                counts[tuple(elem)] += 1\n            else:\n                # If the list is a new key, add it to the dictionary with a count of 1\n                counts[tuple(elem)] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for i in list1:\n        for j in list1:\n            if j not in i:\n                tuple_list = tuple(sorted(list(i + j)))\n                if tuple_list in list_dict:\n                    list_dict[tuple_list] += 1\n                else:\n                    list_dict[tuple_list] = 1\n    return list_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Convert the string to a float and check its precision\n    num = float(num)\n    if num.is_integer():\n        return True\n    elif abs(num - int(num)) < 0.01:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return num.is_integer() and round(num, 2) == num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    # check if string is a decimal number with 2 decimal places\n    if len(num) > 2 and '.' in num:\n        # check if the number contains at least one digit after the decimal point\n        if num[num.index('.')+1:].isdigit():\n            # check if the number has a maximum of 2 digits before and after the decimal point\n            if len(num) <= 4 or len(num) == num.index('.')+2:\n                # check if the number is within the allowed range\n                if int(num) <= 100000 and int(num) >= 1000:\n                    return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for digit in num:\n        if digit not in '0123456789.':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    for digit in num.split('.')[0]:\n        if not digit.isdigit() or int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.count('.') == 1:\n        decimal_part, whole_part = num.split('.')\n        return len(decimal_part) <= 2 and len(whole_part) <= 2\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    # check if the given string is a float\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    \n    # check if the float is a decimal number with a precision of 2\n    if num.is_integer():\n        if num % 1 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #checking if the list has only one element\n    if len(arr) == 1:\n        return True\n    #checking if the list has more than one element\n    elif len(arr) > 1:\n        #checking if all the elements are unique or not\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_count += 1\n            break\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the unique set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            days_in_months[1] = 29\n        return days_in_months[monthnum3-1]\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and is_leap_year(year):\n            days_in_month[monthnum3-1] = 29\n        return days_in_month[monthnum3-1]\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        print(\"Invalid month number. Months are given as number from 1 to 12.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the given month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number. Month numbers must be between 1 and 12.\")\n        return\n\n    # Check if the month number has 30 days or not\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The given month number has 30 days.\")\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The given month number has 31 days.\")\n    else:\n        print(\"Invalid month number. Month numbers must be between 1 and 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    month_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            return \"The given month number contains 30 days\"\n        else:\n            return \"The given month number does not contain 30 days\"\n    else:\n        return \"Invalid month number. Please enter a valid month number between 1 and 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"contains 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # converting the month number to string format\n    monthnum = str(monthnum3)\n\n    # checking if the month number contains 30 days\n    if monthnum in ['3', '5', '7', '8', '10', '12']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check for the valid range of months\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid Month Number\"\n    \n    # Get the number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the number of days in the month is 30\n    if days_in_month[monthnum3-1] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference to the difference between the first and second elements\n    min_diff = abs(arr[1] - arr[0])\n\n    # Iterate over the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and its size n and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = [arr[i], arr[j]]\n    return min_pair, min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference as infinity\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])  # Calculating the absolute difference\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum elements\n    min_diff = float('inf')\n    min_elem = arr[0]\n    max_elem = arr[n-1]\n\n    # Calculate the minimum difference\n    for i in range(n):\n        diff = abs(arr[i]-min_elem)\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to the first element\n    min_diff = arr[1] - arr[0]\n\n    # Traverse through the array starting from the second element\n    for i in range(1, n - 1):\n        # Calculate the current element minus the previous element\n        curr_diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the previous one\n        min_diff = min(min_diff, curr_diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    min_pair = (-1, -1)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n    return min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n elements and returns the minimum difference between any two elements in the array.\n\n    Args:\n        arr (list): An array of n elements.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize minimum difference to a large value\n    min_diff = float('inf')\n\n    # Loop through all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair of elements\n            diff = arr[j] - arr[i]\n\n            # Update the minimum difference if the current difference is smaller than the current minimum difference\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # sort the array\n    arr.sort()\n\n    # initialize the minimum difference\n    min_diff = abs(arr[1] - arr[0])\n\n    # iterate over the array\n    for i in range(1, n):\n        # calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array\n    min_diff = float('inf')  # initialize minimum difference as infinity\n    for i in range(n - 1):\n        # calculate the difference between arr[i] and arr[i+1]\n        diff = arr[i + 1] - arr[i]\n        # check if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # First, we need to find the polite number up to n.\n    polite_numbers = [1]\n    while polite_numbers[-1] < n:\n        polite_numbers.append(polite_numbers[-1] + 1)\n\n    # Now, we need to find the nth polite number.\n    for i in range(len(polite_numbers)):\n        if i == len(polite_numbers) - 1:\n            return polite_numbers[i]\n        elif i == len(polite_numbers) - 2:\n            if polite_numbers[i] == polite_numbers[i + 1]:\n                return polite_numbers[i]\n            else:\n                return polite_numbers[i + 1]\n        else:\n            if (polite_numbers[i] + polite_numbers[i + 1]) % 2 == 0:\n                return polite_numbers[i]\n            elif (polite_numbers[i] + polite_numbers[i + 1]) % 2 == 1:\n                return polite_numbers[i + 1]\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite_count = 0\n    polite_number = 1\n\n    while polite_count < n:\n        polite_count += 1\n        polite_number += 1\n\n        if polite_number > 1000000:\n            polite_number = 1\n\n        if polite_number % 2 == 0:\n            polite_number += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef nth_polite(n):\n    if n <= 1:\n        return 1\n    if not is_prime(n):\n        return nth_polite(n - 1)\n    return n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Initialize variables\n    x = 2\n    y = 1\n    is_prime = False\n\n    # Iterate n-1 times\n    for i in range(1, n):\n        # Check if x is prime\n        while x % 2 == 0:\n            x //= 2\n\n        # Check if y is prime\n        while y % 2 == 0:\n            y //= 2\n\n        # If x and y are both odd, x is prime and we can move on to the next iteration\n        if x * y == 1:\n            is_prime = True\n            break\n\n    if is_prime:\n        return x * y\n    else:\n        return math.inf"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize two variables for the polite numbers\n    polite_num = 1\n    odd_polite_num = 2\n\n    # Loop to find the nth polite number\n    for i in range(1, n+1):\n        # If i is even, increment odd_polite_num\n        if i % 2 == 0:\n            odd_polite_num += 2\n            # Update polite_num with the new value\n            polite_num = odd_polite_num\n        else:\n            polite_num += 2\n\n    return polite_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n    count_flag = True\n    \n    # Iterate until the nth polite number is found\n    while count < n:\n        # Check if the number is a polite number\n        if count_flag and (num % 2 == 0):\n            count += 1\n            count_flag = False\n        elif not count_flag and (num % 2 == 1):\n            count += 1\n            count_flag = True\n        \n        # If the nth polite number has been found, return it\n        if count == n:\n            return num\n        \n        # Increment the number by 1\n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number using the following rules:\n    - If n is odd, return the n^th even number.\n    - If n is even, return the (2*n)^th odd number.\n    \"\"\"\n    if n % 2 == 1:\n        # n is odd, return the n^th even number\n        return math.pow(2, n//2)\n    else:\n        # n is even, return the (2*n)^th odd number\n        return math.pow(2*n, 2) - 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if math.gcd(i, n) == 1:\n            count += 1\n            if count == n:\n                return True\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n\n    Parameters:\n    n (integer): The index of the polite number to be returned.\n\n    Returns:\n    integer: The nth polite number.\n    \"\"\"\n\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return is_polite(n // 2) + 1\n    else:\n        return is_polite((n - 1) // 2) + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    polite_num = 1\n    for i in range(n):\n        if i == 0:\n            continue\n        else:\n            polite_num *= (i + 1)\n    return math.factorial(n) // (math.factorial(polite_num) * math.factorial(n - polite_num))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if len(l1) <= 1:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Traverse the array and check if the sum of adjacent elements is equal to the given sum\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    diff_set = set1.symmetric_difference(set2)\n    diff_list = list(diff_set)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1) - set(li2))\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, li1 and li2, and returns a new list containing the difference between the two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(2, 2*n, 2):\n        # calculate the fourth power of the current number\n        fourth_power = i**4\n        # add the fourth power to the sum\n        sum += fourth_power\n        # increment the count\n        count += 1\n        \n    # return the sum of the fourth powers of the odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i*i\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    while num <= n:\n        sum += num ** 4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = list(range(n)) # create a list of odd numbers from 0 to n-1\n    odd_numbers.append(2*n) # add the number of odd numbers to the list\n    odd_numbers.append(3*n) # add the number of odd numbers to the list\n    sum_of_fourth_powers = 0 # initialize sum of fourth powers to 0\n\n    for num in odd_numbers:\n        fourth_power = num ** 4 # find the fourth power of the current number\n        sum_of_fourth_powers += fourth_power # add the fourth power to the sum\n\n    return sum_of_fourth_powers # return the sum of fourth powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:  # only consider odd numbers\n            sum += i ** 4  # add fourth power of odd number\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n\n    for i in range(1, n + 1, 2):\n        sum_of_fourth_powers += i ** 4\n\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    i = 1\n    \n    while i <= n:\n        sum_of_fourth_powers += i**4\n        i += 2\n    \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in '([{':\n            stack.append(c)\n        elif c in ')]}':\n            if not stack:\n                return False\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    brackets = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in '}])':\n            if not stack:\n                return False\n            if brackets[char] == stack.pop():\n                continue\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Define the opening and closing parentheses\n    open_parentheses = {'(', '[', '{'}\n    close_parentheses = {')', ']', '}'}\n\n    # Create a stack to store the opening parentheses\n    stack = deque()\n\n    # Iterate through the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char in open_parentheses:\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the corresponding opening parenthesis from the stack\n        elif char in close_parentheses and stack:\n            if close_parentheses[char] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        # If the character is neither an opening nor a closing parenthesis, return False\n        else:\n            return False\n\n    # If the stack is not empty, the expression is not balanced\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n    # create a list of words with length greater than K\n    long_words = [word for word in words if len(word) > K]\n    # join the words with spaces\n    result =''.join(long_words)\n    # return the modified string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lower case\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the result list\n            result.append(word)\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove all the words with length K\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the new words back into a string\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store words with k length\n    result = []\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to k\n        if len(word)!= K:\n            # If the length is not equal to k, add the word to the result list\n            result.append(word)\n    # Join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Check if pattern is a regex pattern\n    if re.search(r'^\\d+.*\\d+$', pattern):\n        pattern = r''.join(re.findall(r'\\d+', pattern))\n\n    # Find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # Check if any occurrences are found\n    if matches:\n        # Sort matches based on the position of the first occurrence\n        matches.sort(key=lambda x: x[0])\n        # Get the first match\n        first_match = matches[0]\n        # Get the position of the first occurrence of the pattern in the text\n        first_occurrence_position = first_match[0]\n        # Get the length of the pattern\n        pattern_length = len(first_match[0])\n        # Find the length of the text before the first occurrence of the pattern\n        text_before_occurrence = text[:first_occurrence_position]\n        # Find the length of the text after the first occurrence of the pattern\n        text_after_occurrence = text[first_occurrence_position + pattern_length:]\n        # Return the position of the first occurrence and the length of the text before and after the first occurrence\n        return (first_occurrence_position, len(text_before_occurrence), len(text_after_occurrence))\n\n    # If no match is found, return None\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to search for pattern in text\n    match = re.search(pattern,text)\n    \n    # If match found, return tuple of (match object, start index, end index)\n    if match:\n        return (match, match.start(), match.end())\n    else:\n        # If no match found, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # Find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return None\n    if not matches:\n        return None\n    \n    # Create a dictionary to store the positions and occurrences of each match\n    result = {}\n    \n    # Iterate through each match and add it to the result dictionary\n    for i, match in enumerate(matches):\n        result[match] = (i, matches.count(match))\n    \n    # Sort the result dictionary by the positions of the matches\n    sorted_result = dict(sorted(result.items(), key=lambda item: item[1][0]))\n    \n    # Return the first match and its position and occurrence\n    return sorted_result.popitem()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if len(match) == 0:\n        return None\n    result = {}\n    for i in range(len(match)):\n        result[match[i]] = i\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to find pattern in text\n    match = re.search(pattern,text)\n    if match:\n        # Return the match object and its position in the text\n        return match, match.start()\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        for match in result:\n            index = text.find(match)\n            print(f\"Occurrence found at index {index}: '{match}'\")\n        return result\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 1]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2!= 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0: # if index is even, check next index\n            if nums[i] % 2!= 0: # if current number is even, check next number\n                return False # if odd number found in even index, return False\n        elif nums[i] % 2!= 0: # if current number is odd, check next number\n            return False # if odd number found in odd index, return False\n    return True # if all odd indices contain odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a Python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if the index is even\n            continue # skip this index if it is\n        count = 0 # count the number of odd numbers in this index\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n        if count % 2!= 0: # check if the count is odd\n            return False # if it is, return False\n    return True # if the loop completes without finding any odd count, return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1 or (test_str[i-1] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate through the list and add unique elements to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # calculate the sum of the unique elements\n    unique_sum = sum(unique_set)\n\n    # return the sum of the unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_dict = {}\n\n    for num in arr:\n        if num not in unique_dict:\n            unique_dict[num] = 1\n        else:\n            del unique_dict[num]\n\n    return sum(unique_dict.values())"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    # Convert the set to a list to store it in a different data type\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_list)\n    # Return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of unique elements in the array\n    unique_elements = set(arr)\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # Iterate through the unique elements\n    for element in unique_elements:\n        # Add the element to the sum\n        non_repeated_sum += element\n    \n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # convert the set back to a list\n    unique_list = list(unique_set)\n    # initialize a variable to hold the sum\n    total_sum = 0\n    # loop through each element of the list\n    for i in range(len(unique_list)):\n        # add the value of the current element to the total sum\n        total_sum += unique_list[i]\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    \n    # create a list to store the sum of non-repeated elements in the list\n    non_repeated_sum = []\n    \n    # loop through the unique elements in the set\n    for element in unique_set:\n        # loop through the list and add the element to the sum if it's not repeated\n        for i in range(len(arr)):\n            if arr[i] == element:\n                if i == 0:\n                    non_repeated_sum.append(element)\n                else:\n                    break\n    \n    # calculate the sum of the non-repeated elements in the list\n    non_repeated_sum_sum = sum(non_repeated_sum)\n    \n    # return the sum of non-repeated elements in the list\n    return non_repeated_sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Find the sum of elements in the set\n    sum_set = sum(unique_set)\n\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(unique_set))\n\n    # Find the sum of non-repeated elements in the sorted list\n    sum_sorted = sum(sorted_list)\n\n    # Return the sum of non-repeated elements\n    return sum_set - sum_sorted"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # iterate through the list and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize the sum variable to zero\n    total_sum = 0\n    \n    # iterate through the dictionary and add up the non-repeated elements\n    for key, value in freq.items():\n        if value == 1:\n            total_sum += int(key)\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Use a set to remove duplicates from the list\n    arr_set = set(arr)\n    \n    # Convert the set back to a list and calculate the sum\n    sum_list = list(arr_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    This function takes in a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # convert the set to a list to get the elements\n    unique_list = list(unique_set)\n    \n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # iterate through the list and add each element to the total sum if it's not already in the unique_list\n    for num in arr:\n        if num not in unique_list:\n            total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = list(group)\n            result.append(group)\n        else:\n            group = list(group)\n            for i in range(len(group)):\n                group[i] = [group[i]]\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if k == 0]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of integers, pack consecutive duplicates of the same element into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(enumerate(lst), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(sorted(list1))\n    packed = []\n    for key, group in grouped:\n        if key == group[0]:\n            packed.append(list(group))\n        else:\n            for item in group:\n                packed.append([item])\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    grouped_list = [(k, list(g)) for k, g in grouped_list]\n    grouped_list = sorted(grouped_list, key=lambda x: x[0])\n    packed_list = []\n    for key, group in grouped_list:\n        if not packed_list or packed_list[-1][0] + 1!= key:\n            packed_list.append((key, group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for item, group in groupby(list1):\n        if group:\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list\n    \"\"\"\n    # create an empty dictionary to store the count of unique sublists\n    count = {}\n    # loop through the list and for each item, create a tuple of its sublists\n    for item in lst:\n        sublists = tuple(sublist for sublist in lst if item in sublist)\n        # check if the tuple of sublists exists in the count dictionary\n        if sublists in count:\n            # increment the count of the tuple of sublists\n            count[sublists] += 1\n        else:\n            # otherwise, add the tuple of sublists to the dictionary with a count of 1\n            count[sublists] = 1\n    # return the dictionary of unique sublists and their counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store unique sublists and their count\n    unique_sublists_dict = {}\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's in the dictionary\n        if tuple(sorted(sublist)) in unique_sublists_dict:\n            # If it is, increment the count of the sublist by 1\n            unique_sublists_dict[tuple(sorted(sublist))][1] += 1\n        else:\n            # If it's not, add the tuple to the dictionary and set its count to 1\n            unique_sublists_dict[tuple(sorted(sublist))] = (sublist, 1)\n    # Return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple already exists in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count for the tuple in the dictionary\n            sublist_count[sublist_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n            if item in sublists:\n                sublists[item] += 1\n            else:\n                sublists[item] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the unique sublists and their counts\n    count_dict = {}\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n        # Create a tuple from the current element and append it to a list\n        current_sublist = (lst[i],)\n\n        # Check if the current sublist is already in the dictionary\n        if current_sublist in count_dict:\n            # Increment the count for the current sublist\n            count_dict[current_sublist] += 1\n        else:\n            # Add the current sublist to the dictionary with a count of 1\n            count_dict[current_sublist] = 1\n\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublists_dict:\n            sublists_dict[sublist_tuple] = 1\n        else:\n            sublists_dict[sublist_tuple] += 1\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list of lists as input, and returns a dictionary where every list is turned to a tuple and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        for j in i:\n            list2.append(j)\n    list2 = list(set(list2))\n    dict1 = {}\n    for i in list2:\n        count = list1.count(i)\n        dict1[i] = count\n    return dict1"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all combinations of sums with tuples in the given list.\n    '''\n    total_sum = sum(test_list)\n    return list(combinations(test_list, len(test_list)-1))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function finds all the combinations of sums of tuples in the given tuple list.\n    \"\"\"\n    # Combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                yield tuple(sorted((test_list[i][0]+test_list[j][0]+test_list[k][0], test_list[i][1]+test_list[j][1]+test_list[k][1], test_list[i][2]+test_list[j][2]+test_list[k][2])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def sum_tuple(t):\n        return sum(t)\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if (sum_tuple(test_list[i]), sum_tuple(test_list[j]), sum_tuple(test_list[k])) in test_list:\n                    print(f\"Combination of sums found: {test_list[i]}, {test_list[j]}, {test_list[k]}\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n    \n    # iterate through the tuple list and add unique tuples to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # create an empty list to store the combinations\n    result = []\n    \n    # iterate through the unique tuples and generate all combinations with a sum\n    for tup in unique_tuples:\n        for combo in combinations(tup, len(tup)):\n            # check if the combination has a unique tuple in the set\n            if combo not in unique_tuples:\n                result.append(combo)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # sort the list of tuples\n    test_list.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Function to find the combinations of sums\n    def find_combination(lst, target_sum):\n\n        # If target sum is 0, add the current tuple to the result list\n        if target_sum == 0:\n            result.append(lst)\n\n        # If target sum is negative or tuple is empty, return\n        elif target_sum < 0 or not lst:\n            return\n\n        # Otherwise, find the sub-combinations of the current tuple\n        for i in range(len(lst)):\n\n            # Recursive call to find sub-combinations of remaining tuples\n            find_combination(lst[i+1:], target_sum - lst[i])\n\n    # Call the recursive function to find the combinations\n    find_combination(test_list, 0)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    k = len(test_list[0])\n    comb = []\n    for i in range(n-k+1):\n        comb.append(tuple(test_list[j][i:i+k] for j in range(n)))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Use itertools.combinations() function to generate all combinations of sums\n    comb_list = list(combinations(test_list, r=2))\n    # Remove the duplicates from the list\n    comb_list = list(set(comb_list))\n    # Sort the list in ascending order\n    comb_list.sort()\n    # Print the list\n    print(comb_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            all_combinations.append(tuple(combo))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    result = []\n\n    # Iterate through all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # If the sum of the current and next tuples is equal to the target, append them as a tuple to the result list\n            if test_list[i][0] + test_list[j][0] == target:\n                result.append((test_list[i], test_list[j]))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    def find_combinations_helper(lst, target, temp_lst, res):\n        if not temp_lst:\n            res.append(tuple(temp_lst))\n            return\n        for i in range(len(lst)):\n            if target - lst[i] >= 0:\n                temp_lst.append(lst[i])\n                find_combinations_helper(lst[:i] + lst[i+1:], target - lst[i], temp_lst, res)\n                temp_lst.pop()\n                \n    res = []\n    for i in range(len(test_list)):\n        find_combinations_helper(test_list, sum(test_list[i]), [], res)\n    return res"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.append(i)\n            n //= i\n            i += 1\n    if n > 1:\n        divisors.append(n)\n    divisor_count = len(divisors)\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # initialize count of divisors as 0\n    count = 0\n\n    # calculate the square root of n\n    sqrt_n = int(math.sqrt(n))\n\n    # iterate from 1 to sqrt_n\n    for i in range(1, sqrt_n + 1):\n        # if n is divisible by i, add i to count\n        if n % i == 0:\n            count += 1\n\n    # check if count is even or odd\n    if count % 2 == 0:\n        # if even, print \"Even\"\n        print(\"Even\")\n    else:\n        # if odd, print \"Odd\"\n        print(\"Odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    if divisor_count == 0:\n        divisor_count = 1\n    return n - divisor_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True\n\nprint(count_divisors(22)) # Output: True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the count of divisors of a number n using the Euclidean algorithm.\n    \"\"\"\n    if n <= 1:\n        return 0\n    count = 0\n    d = 2\n    while d*d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    def count_div(num): \n        count = 0 \n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                count += 1 \n                if num / i!= i: \n                    count += 1 \n        return count\n    \n    count_divisor = count_div(n)\n    print(\"Count of divisors of\", n, \"are:\", count_divisor)\n    \n    if count_divisor % 2 == 0: \n        print(\"The count of divisors is even.\")\n    else: \n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 20:\n                return False\n            if count % 2 == 0:\n                return False\n\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    # Calculate the number of divisors of n \n    divisors = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors += 1\n    \n    # Check if the count of divisors is even or odd \n    if divisors % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # initialize the sum of all odd length subarrays\n    sum_odd = 0\n    \n    # iterate through all possible subarrays\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            # check if the current subarray has odd length\n            if j-i+1 % 2 == 1:\n                # add the current subarray to the sum of all odd length subarrays\n                sum_odd += arr[i] + arr[j]\n            j += 1\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(1, n, 2):\n        for j in range(i, n, 2):\n            sum += sum_subarray(arr, i, j)\n    return sum\n\n\ndef sum_subarray(arr, start, end):\n    \"\"\"\n    Helper function to compute the sum of all odd length subarrays of a given array.\n    \"\"\"\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            if len(subarray) % 2!= 0:\n                sum_of_subarrays += sum(subarray)\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd_subarrays = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the remaining elements of the array starting from index i\n        for j in range(i+2, len(arr)+1):\n            # Check if the length of the current subarray is odd\n            if (j-i) % 2 == 1:\n                # Calculate the sum of the odd length subarray and add it to the sum_odd_subarrays variable\n                sum_odd_subarrays += sum(arr[i:j])\n\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum of odd length subarrays to 0\n    sum_odd = 0\n\n    # Loop through each element of the array\n    for i in range(len(arr)):\n        # Initialize a variable to keep track of the sum of the odd length subarrays\n        current_sum = 0\n\n        # Loop through each element of the array after the current element\n        for j in range(i+1, len(arr)):\n            # Add the current element and the element after the current element to the current sum\n            current_sum += arr[j]\n\n            # Check if the current sum is odd length\n            if j-i+1 % 2!= 0:\n                # Add the current sum to the sum of odd length subarrays\n                sum_odd += current_sum\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum = 0\n\n    # Loop through all possible subarrays from the input array\n    for i in range(len(arr)):\n\n        # Check if the current subarray has an odd length\n        if i % 2 == 1:\n\n            # Loop through all possible subarrays of length i\n            for j in range(i, len(arr)):\n\n                # Check if the current subarray has an odd length and contains all elements of the original array\n                if j % 2 == 1 and all(arr[k] == arr[j] for k in range(i, j)):\n\n                    # Add the sum of the current subarray to the sum variable\n                    sum += sum_subarray(arr[i:j+1])\n\n    return sum\n\ndef sum_subarray(arr):\n    '''\n    Write a helper function to compute the sum of an odd length subarray.\n    '''\n\n    # Initialize a variable to store the sum of the subarray\n    sum = 0\n\n    # Loop through all elements of the subarray\n    for i in range(len(arr)):\n\n        # Add the current element to the sum variable\n        sum += arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            sum_odd += arr[i:j].sum()\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr) - 1):\n        if len(arr[i:i+2]) % 2 == 1:\n            sum += sum(arr[i:i+2])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    count = 0\n    sum = 0\n\n    for i in range(n):\n        if i < n - 1 and arr[i] + arr[i + 1] % 2 == 1:\n            count += 1\n            sum += arr[i] + arr[i + 1]\n\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts rgb color to hsv color using the following formula:\n    h = (R + G + B) / 3\n    s = max(R, G, B) - min(R, G, B)\n    v = max(R, G, B)\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = None\n    s = None\n    v = max_val\n    d = max_val - min_val\n    if d == 0:\n        s = 0\n    else:\n        s = d / max_val\n    if max_val == r:\n        h = (g - b) / d\n        if h < 0:\n            h += 6\n        elif h > 6:\n            h -= 6\n    elif max_val == g:\n        h = (b - r) / d + 2\n        if h >= 6:\n            h -= 6\n    elif max_val == b:\n        h = (r - g) / d + 4\n        if h >= 6:\n            h -= 6\n    h = h * 60\n    if h < 0:\n        h += 360\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = max(0, min(h, 1))\n    s = delta / max_val\n\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV.\n\n    Args:\n        r (int): Red component of the color (0-255).\n        g (int): Green component of the color (0-255).\n        b (int): Blue component of the color (0-255).\n\n    Returns:\n        tuple: HSV color components as tuple of floats between 0 and 1.\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == min_color:\n        h = s = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_color\n\n    v = max_color\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red color value in range 0-255\n    :param g: Green color value in range 0-255\n    :param b: Blue color value in range 0-255\n    :return: Hue, Saturation, Value color values in range 0-1\n    \"\"\"\n\n    # Convert R, G, and B to values between 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the maximum and minimum values in the color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue, saturation, and value\n    if max_value == min_value:\n        # If the maximum and minimum values are equal, the hue is 0\n        hue = 0\n    elif max_value == r:\n        # If the maximum value is red\n        hue = (g - b) / delta\n    elif max_value == g:\n        # If the maximum value is green\n        hue = 2 + (b - r) / delta\n    else:\n        # If the maximum value is blue\n        hue = 4 + (r - g) / delta\n\n    hue = hue / 6\n\n    # Calculate the saturation and value\n    if delta == 0:\n        # If the color is a shade of gray, the saturation is 0\n        saturation = 0\n    else:\n        # If the color is different from gray, calculate the saturation\n        saturation = delta / max_value\n\n    value = max_value\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Find the maximum value in the RGB color\n    max_val = max(r, g, b)\n    \n    # Find the minimum value in the RGB color\n    min_val = min(r, g, b)\n    \n    # Find the chroma value\n    chroma = max_val - min_val\n    \n    # Find the hue value\n    if chroma == 0:\n        hue = 0\n    else:\n        if r == max_val:\n            hue = (g - b) / chroma\n        elif g == max_val:\n            hue = 2 + (b - r) / chroma\n        else:\n            hue = 4 + (r - g) / chroma\n        hue = hue / 6 if hue < 0 else hue / 6\n        \n    # Find the value value\n    value = max_val\n    \n    # Return the HSV color tuple\n    return (hue, chroma, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert rgb values to HSV values\n    h = r / 255.0\n    s = g / 255.0\n    v = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    # calculate hue\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        elif cmax == b:\n            h = 4 + (r - g) / delta\n        h = h / 6.0\n    # calculate saturation\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    # calculate value\n    v = max(cmax, cmin)\n    # convert values to integers and return\n    return int(h * 255), int(s * 255), int(v * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    :param r: Red color value between 0 and 255.\n    :param g: Green color value between 0 and 255.\n    :param b: Blue color value between 0 and 255.\n    :return: HSV color values in the form of a tuple.\n    \"\"\"\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, cmax)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color value.\n\n    :param r: int, float, or list of ints or floats representing red color components.\n    :param g: int, float, or list of ints or floats representing green color components.\n    :param b: int, float, or list of ints or floats representing blue color components.\n    :return: hsv value as a list of three integers.\n    \"\"\"\n    r, g, b = float(r), float(g), float(b)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / cmax\n\n    if cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = int(h * 60)\n    s = int(s * 100)\n    v = int(cmax * 100)\n\n    return [h, s, v]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_value - min_value\n    \n    # Calculate hue and saturation\n    if max_value == min_value:\n        hue = 0\n        saturation = 0\n    elif max_value == r:\n        hue = ((g-b)/delta) % 6\n    elif max_value == g:\n        hue = (b-r)/delta + 2\n    else:\n        hue = (r-g)/delta + 4\n    \n    # Calculate value and saturation\n    saturation = delta/max_value\n    value = max_value\n    \n    # Return hsv values\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables\n    even_product = 1\n    odd_product = 1\n\n    # iterate over the list and find the products of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    # return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return None\n    else:\n        return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            break\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as an input and returns their product of the first even and odd number.\n    \"\"\"\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n\n    if even and odd:\n        return even[0] * odd[0]\n    elif even:\n        return even[0]\n    elif odd:\n        return odd[0]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= 1\n            break\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = even * num\n        else:\n            odd = odd * num\n            \n        product = product * (even + odd)\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    # Loop through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    # Return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = []\n    for i in test_str:\n        if i.isdigit():\n            lst.append(int(i))\n        else:\n            return False\n    return tuple(lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int_tuple(str_val):\n        # convert string to integer tuple\n        int_tup = tuple(map(int, str_val.split(',')))\n        return int_tup\n\n    # convert string to integer tuple\n    int_tup = str_to_int_tuple(test_str)\n    return int_tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string by space\n    str_list = test_str.split()\n    # Converting each string element to integer\n    int_list = [int(i) for i in str_list]\n    # Converting the integer list to tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(x) for x in test_str.strip('[]').split(','))\n    except ValueError:\n        print(\"Invalid input\")\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the input string to a list of characters\n    chars = list(test_str)\n\n    # Initialize an empty list to store the integer tuples\n    result = []\n\n    # Iterate through the characters in the list\n    for i in range(len(chars)):\n        # Check if the character is a digit\n        if chars[i].isdigit():\n            # If it is, convert it to an integer and add it to the result list\n            int_num = int(chars[i])\n            result.append(int_num)\n\n    # Convert the list of integer tuples to a tuple and return it\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into tuple of strings\n    str_tuple = test_str.split(',')\n    \n    # Create an empty list to store the integer tuples\n    int_tuple_list = []\n    \n    # Loop through each string in the tuple\n    for str_num in str_tuple:\n        # Check if the string is an integer\n        if str_num.isdigit():\n            # Convert the string to an integer and append to the list\n            int_tuple_list.append(int(str_num))\n        else:\n            print(\"Error: Invalid integer string found.\")\n            return\n    \n    # Return the integer tuple list\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Split the string by spaces and convert each string to integer\n        int_tuple = tuple(int(i) for i in test_str.split())\n        return int_tuple\n    except ValueError:\n        # If any string cannot be converted to integer, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list\n    test_list = [int(x) for x in test_str]\n    # Convert list to tuple\n    test_tuple = tuple(test_list)\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = list(test_str)\n    int_list = []\n    for i in range(len(test_str_list)):\n        try:\n            int_list.append(int(test_str_list[i]))\n        except ValueError:\n            continue\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas and spaces\n    tup_str = test_str.split(',')\n    tup_str = [s.strip() for s in tup_str]\n    # Convert the string elements to integers\n    tup_int = tuple([int(i) for i in tup_str])\n    return tup_int"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the binary search algorithm to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif x > a[i-1]:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Use binary search to locate the right insertion point\n    i = bisect.bisect_right(a, x)\n\n    # Return the index of the right insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a) or a[idx]!= x:\n        return idx\n    else:\n        return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize index of the last element in the sorted sublist\n    i = len(a) - 1\n    # initialize index of the current sublist\n    j = i\n\n    # loop until the current sublist is empty\n    while j >= 0:\n        # compute the middle index\n        k = (i + j) // 2\n        # check if the middle element is greater than x\n        if a[k] >= x:\n            # if it is, update i to k\n            i = k\n        # if the middle element is less than or equal to x, update j to k\n        else:\n            j = k\n\n    # return the index of the first element in the sublist greater than x\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        print(f'Found {len(matches)} matches: {matches}')\n    else:\n        print('No matches found.')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\sb{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str + str(elem) for elem in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    tuple_list = tuple(test_list)\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Combine the two lists to create a new tuple\n    new_tuple = tuple_list + char_list\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given list to a tuple\n    new_list = tuple(test_list)\n    # Convert the given string to a tuple\n    new_tuple = tuple(test_str)\n    # Combine both tuples\n    new_tuple_final = new_list + new_tuple\n    return new_tuple_final"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the list and string\n    combined_string = test_str + ''.join(test_list)\n    # split the combined string into a list of substrings\n    substrings = [substring for substring in combined_string]\n    # join the substrings into a new tuple\n    new_tuple = tuple(substrings)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list.split(',')\n    new_list = [int(i.strip()) for i in new_list]\n    new_tuple = (test_str, new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str,) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through the list and check if the current number is even\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    \n    # If all numbers in the list are even, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                continue\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and (i % 2 == 0 or even_count > 0):\n            even_count += 1\n        elif nums[i] % 2!= 0 and (i % 2!= 0 or even_count > 0):\n            even_count = 0\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        flat_list = []\n        for item in test_tup:\n            if isinstance(item, tuple):\n                flat_list.extend(remove_nested(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    for i, x in enumerate(test_tup):\n        if type(x) == tuple:\n            del test_tup[i]\n            remove_nested(x)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result.extend(remove_nested(elem))\n        else:\n            result.append(elem)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n        else:\n            for nested_item in item:\n                flat_list.append(nested_item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            test_tup = test_tup[:i] + test_tup[i+1:]\n            i -= 1\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flatten_list = [item for sublist in test_tup for item in sublist]\n    return tuple(set(flatten_list))"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    This function takes in a list of lists and returns the number of lists in the original list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the last index of the element in the array.\n    \"\"\"\n    # initialize the left and right pointers to the first and last indices of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # initialize a flag to keep track of whether the element was found\n    found = False\n\n    # while the left pointer is less than the right pointer and the element was not found\n    while left < right and not found:\n        # calculate the midpoint of the array\n        mid = (left + right) // 2\n\n        # if the midpoint element is equal to the target element\n        if arr[mid] == x:\n            # set the found flag to True and the left pointer to mid+1 (since we need to include mid in the search)\n            found = True\n            left = mid + 1\n        # if the midpoint element is less than the target element\n        elif arr[mid] < x:\n            # update the left pointer to mid+1 (since we need to include mid in the search)\n            left = mid + 1\n        # if the midpoint element is greater than the target element\n        else:\n            # update the right pointer to mid-1 (since we need to include mid in the search)\n            right = mid - 1\n\n    # return -1 if the element was not found, otherwise return the left pointer\n    if not found:\n        return -1\n    else:\n        return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    If x is not found in the array, it returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function finds the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        x (int): The element to search for.\n\n    Returns:\n        int: The index of the last occurrence of x in arr.\n\n    Examples:\n        >>> arr = [1, 2, 3, 4, 5]\n        >>> last(arr, 3)\n        3\n        >>> last(arr, 6)\n        -1\n    '''\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    # Binary search to find the last occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments - the sorted array and the element to find its position.\n    It then returns the last position of the element in the array, if it exists, else it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize a variable to keep track of the last position\n    last_position = -1\n\n    # Iterate through the array using a for loop\n    for i in range(len(arr)):\n        # If the current element is equal to the x element, update the last position\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            left = mid\n            break\n\n        if arr[mid] < x:\n            left = mid + 1\n\n        if arr[mid] > x:\n            right = mid - 1\n\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return r"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    :param arr: sorted array\n    :type arr: list\n    :param x: element to be searched\n    :type x: int\n    :return: index of the last occurrence of the element in the array\n    :rtype: int\n    \"\"\"\n    # initialize variables\n    l = 0\n    r = len(arr) - 1\n\n    # binary search to find the last occurrence of the element\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    # return the index of the last occurrence of the element\n    return r if arr[r] == x else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a[^b]*b$')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba.+b$')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'(?<=a)([^\\s]*)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dictionary.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize a variable to store the sum of odd numbers\n    sum_of_odds = 0\n\n    # Iterate through the range of numbers from l to r (inclusive)\n    for i in range(l, r+1):\n        # Check if the number is odd and add it to the sum\n        if i % 2!= 0:\n            sum_of_odds += i\n\n    # Return the sum of odd numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the range of odd natural numbers from l to r\n    for i in range(l, r+1, 2):\n        # add the current number to the sum\n        total += i\n\n    # return the sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function takes an integer `n` and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    # initialize a variable to store the sum\n    sum = 0\n    \n    # loop through all numbers from 1 to n, checking if each number is odd\n    for i in range(1, n+1): \n        if i % 2!= 0: # if the number is odd, add it to the sum\n            sum += i\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range of odd natural numbers (l, r): \").split())\n    if l < 1 or r < 1:\n        print(\"Invalid range!\")\n        return\n    elif l > r:\n        print(\"Invalid range!\")\n        return\n    else:\n        sum = 0\n        for i in range(l, r+1):\n            if i % 2!= 0:\n                sum += i\n        print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)\n\nif __name__ == \"__main__\":\n    sum_odd()"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0   # initialize sum variable to zero\n    for i in arr:   # iterate through array elements\n        sum += i   # add each element to sum\n    return sum   # return sum at the end of the loop"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_of_array = 0\n    for num in arr:\n        sum_of_array += num\n    return sum_of_array"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32-d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    # Convert n to binary string and split into list of binary digits\n    binary_str = bin(n)[2:]\n    binary_digits = [int(digit) for digit in binary_str]\n    \n    # Rotate left by d bits\n    d_binary_digits = [0] * d\n    for i in range(d):\n        d_binary_digits[i] = binary_digits[-1]\n        binary_digits = binary_digits[:-1]\n    \n    # Convert rotated digits back to binary string and convert to integer\n    rotated_binary_str = ''.join(map(str, d_binary_digits))\n    rotated_n = int(rotated_binary_str, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    shift = 32 - d\n    n = n << d | (n >> shift) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d >= 32:\n        n = n << (d % 32)\n        d = d // 32\n    return n << d"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Compute the number of bits to rotate by\n    rotate_bits = d % 32\n\n    # Extract the bits to rotate\n    bits_to_rotate = n & ((1 << rotate_bits) - 1)\n\n    # Extract the bits to be rotated\n    bits_to_rotate = bits_to_rotate << (32 - rotate_bits)\n\n    # Extract the bits to be rotated and shifted\n    bits_to_rotate_shifted = (n & ((1 << (32 - rotate_bits)) - 1)) >> (rotate_bits)\n\n    # Combine the bits to be rotated and shifted with the bits to rotate\n    n = bits_to_rotate_shifted | bits_to_rotate\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    n_bits = len(binary_num)\n\n    # Calculate the rotation count\n    rotation_count = d % n_bits\n\n    # Calculate the number of bits to shift\n    shift_count = n_bits - rotation_count\n\n    # Shift the binary number\n    binary_num_shifted = binary_num[rotation_count:] + binary_num[:rotation_count]\n\n    # Convert the shifted binary number back to decimal\n    n_shifted = int(binary_num_shifted, 2)\n\n    return n_shifted"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the binary number to an integer\n    num = int(n, 2)\n\n    # rotate left d bits\n    new_num = (num << d) | (num >> (32 - d))\n\n    # convert the integer back to binary and return\n    return bin(new_num)[2:]"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary = bin(n)[2:].zfill(32)\n    # Convert the number of bits to rotate\n    rotate_bits = bin(d)[2:].zfill(32)\n    # Reverse the rotate bits\n    rotate_bits_reverse = rotate_bits[::-1]\n    # Reverse the binary string\n    binary_reverse = binary[::-1]\n    # Perform the left rotate\n    rotated = binary_reverse[rotate_bits_reverse]\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated, 2)\n    # Return the rotated integer\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1 #mask to remove d bits from the right\n    return (n << d) | (n >> (32 - d)) & mask #rotate left by d bits and mask the new bits to remove the leftmost d bits"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove any leading or trailing whitespaces from the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    # Using regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n\n    # Returning the string with all whitespaces removed\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    \n    # Remove all tabs using string slicing\n    text = text.replace('\\t', '')\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z or y == z and y == x or x == y and y == z:\n        count += 1\n    if y == x and y == z or x == y and y == z or x == z and y == z:\n        count += 1\n    if x == y and x == z or y == z and y == x or x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # initialize variables to store the count and the first number\n    count = 0\n    num = x\n\n    # loop through the remaining numbers and check if they are equal to num\n    for i in range(1, 3):\n        if z == num:\n            count += 1\n        num += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and y!= z:\n        count += 1\n    if x!= y and y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and y!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    if x == x and y == y and z == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function counts the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    '''\n    n = len(arr)\n    # Initialize the count variable to 0\n    count = 0\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Find the smallest element greater than the current element\n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]:\n            j -= 1\n        # If the smallest element greater than the current element has not been found, then the array is already sorted\n        if j < 0:\n            break\n        # Find the largest element smaller than the current element\n        k = n - 1\n        while k >= 0 and arr[k] < arr[i]:\n            k -= 1\n        # If the largest element smaller than the current element has not been found, then the array is already sorted\n        if k < 0:\n            break\n        # Swap the elements at the current index and the index of the smallest element greater than the current element\n        arr[i], arr[k] = arr[k], arr[i]\n        # Increment the count variable\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Initialize a variable to keep track of the number of rotations required\n    count = 0\n    \n    # Iterate over the array and check if the current element is greater than the minimum element\n    for i in range(1, len(arr)):\n        if arr[i] > min_element:\n            count += 1\n    \n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the maximum element in the array\n    max_elem = max(arr)\n    # Find the minimum element in the array\n    min_elem = min(arr)\n    # Create a boolean array to keep track of the elements in the array\n    visited = [False] * (max_elem - min_elem + 1)\n    # Traverse the array and mark the visited elements\n    for i in range(n):\n        visited[arr[i] - min_elem] = True\n    # Find the number of visited elements in the array\n    visited_count = sum(visited)\n    # If the number of visited elements is less than n, then the array is not rotated\n    if visited_count < n:\n        return 0\n    # If the number of visited elements is equal to n, then the array is rotated\n    return n - visited_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize a dictionary to store the count of elements that are less than or equal to max_element\n    count_less_than_or_equal_to_max_element = {}\n    # Initialize a dictionary to store the count of elements that are greater than or equal to min_element\n    count_greater_than_or_equal_to_min_element = {}\n    # Loop through the array to count the count of elements that are less than or equal to max_element and greater than or equal to min_element\n    for i in range(n):\n        count_less_than_or_equal_to_max_element[arr[i]] = count_less_than_or_equal_to_max_element.get(arr[i], 0) + 1\n        count_greater_than_or_equal_to_min_element[arr[i]] = count_greater_than_or_equal_to_min_element.get(arr[i], 0) + 1\n    # Find the maximum element in the dictionary count_less_than_or_equal_to_max_element\n    max_count_less_than_or_equal_to_max_element = max(count_less_than_or_equal_to_max_element.values())\n    # Find the minimum element in the dictionary count_greater_than_or_equal_to_min_element\n    min_count_greater_than_or_equal_to_min_element = min(count_greater_than_or_equal_to_min_element.values())\n    # Calculate the number of rotations required\n    rotations_required = max_count_less_than_or_equal_to_max_element + min_count_greater_than_or_equal_to_min_element\n    return rotations_required"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # Traverse the array to find the smallest element and its index\n    for i in range(n):\n        if arr[i] < arr[0]:\n            smallest = arr[i]\n            smallest_index = i\n            break\n\n    # If the smallest element is at the beginning, then no rotation is required\n    if smallest == arr[0]:\n        return 0\n\n    # Initialize the count variable\n    count = 0\n\n    # Traverse the array again to find the last element and its index\n    for i in range(n - 1, smallest_index - 1, -1):\n        if arr[i] > arr[0]:\n            last = arr[i]\n            last_index = i\n            break\n\n    # If the last element is at the end, then no rotation is required\n    if last == arr[n - 1]:\n        return 0\n\n    # If the last element is smaller than the smallest element, then a rotation is required\n    if last < smallest:\n        return count + 1\n\n    # If the last element is greater than the smallest element, then no rotation is required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    # base case\n    if len(arr) <= 1:\n        return 0\n    \n    # initialize variables\n    n = len(arr)\n    max_val = arr[0]\n    min_val = arr[n-1]\n    count = 0\n    \n    # check for min and max values\n    for i in range(n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n    \n    # check for max and min values in first half\n    for i in range(n//2):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            \n    # check for max and min values in second half\n    for i in range(n//2, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            \n    # count rotations\n    while max_val > min_val:\n        count += 1\n        min_val = min_val + 1\n        max_val = max_val - 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Calculate the maximum element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    # Calculate the minimum element in the array\n    min_val = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    # Calculate the difference between the maximum and minimum element\n    diff = max_val - min_val\n    # Calculate the number of rotations required\n    rotations = diff * (diff+1) // 2\n    # Return the number of rotations required\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Count the number of swaps required to generate a sorted array\n    count = 0\n    # Find the maximum element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    # If the maximum element is already at the end of the array, return 0 swaps\n    if max_val == arr[n-1]:\n        return 0\n    # If the maximum element is not at the end of the array, rotate the array to generate a sorted array\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n == 1 or n == -1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    elif n == 1 or n == 4:\n        return True\n    else:\n        d = 3\n        while d * d <= n:\n            if n % d == 0:\n                return False\n            d += 2\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    The function should return True if the given number is a perfect square, and False otherwise.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_square(num):\n        if num < 0:\n            return False\n        for i in range(int(num**0.5)+1):\n            if num % i**2!= 0:\n                return False\n        return True\n    \n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if is_prime(n):\n        return False\n    if is_square(n):\n        return False\n    for i in range(5):\n        if n % i == 0:\n            return False\n        if n % (i+2) == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is already a perfect square\n    if n == int(n**0.5)**2:\n        return True\n    # check if n is a square number and then multiply by 2 to get the next square number\n    for i in range(1, int(n**0.5)+1):\n        if n == i*i:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square, otherwise False.\n    \"\"\"\n    # First, we check if n is already a square.\n    if n == int(n**0.5**2):\n        return True\n    else:\n        # If n is not a square, we check whether it can be expressed as a sum of two squares.\n        for i in range(1, int(n**0.5) + 1):\n            square = i*i\n            if n == square + square:\n                return True\n        # If the above loop does not terminate, then n is not a perfect square.\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not. \n    It uses a recursive approach to calculate the square root of the given number.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return is_perfect_square(n//2)\n    else:\n        return is_perfect_square((n//2) + 1)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    x = int(math.sqrt(n))\n    if x*x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a perfect square, else False.\n    \"\"\"\n    if n < 0:\n        return False\n    x = n\n    y = n // 2\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks if a given number is a perfect square or not.\n    \"\"\"\n    # check if the given number is a square number\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i ** 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    # Using the Pythagorean theorem, we can check if the number is a perfect square or not.\n    # If the square of the number is equal to the given number, then it is a perfect square.\n    # Otherwise, it is not a perfect square.\n    # We can implement this using a nested loop.\n    for i in range(int(n**0.5)+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not arr:\n        return True\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and checks whether the product of the numbers is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of numbers in the list is even.\"\n    else:\n        return \"The product of numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as an argument and checks whether the product of all the numbers in the list is even or not.\n    '''\n    if len(arr) < 2:\n        return \"List should have at least two elements to check the product of their even and odd numbers.\"\n    \n    odd_product = 1\n    even_product = 1\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    if odd_product % 2 == 0 and even_product % 2 == 0:\n        return \"The product of all the even and odd numbers in the list is even.\"\n    elif odd_product % 2!= 0 and even_product % 2!= 0:\n        return \"The product of all the even and odd numbers in the list is odd.\"\n    else:\n        return \"The product of all the even and odd numbers in the list is neither even nor odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num \n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        arr (list): List of integers.\n\n    Returns:\n        bool: True if the product of numbers in the list is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for list_ in lists:\n        sum_ = sum(list_)\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = list_\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j > 0 and lists[i][j] < lists[i][j-1]:\n                continue\n            if i > 0 and lists[i][j] < lists[i-1][j]:\n                continue\n            if i > 0 and j > 0 and lists[i][j] < lists[i-1][j-1]:\n                continue\n            current_sum = sum(lists[i][k] for k in range(j, len(lists[i])))\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][k] for k in range(j, len(lists[i]))]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = current_sum + lists[i][j]\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    \n    for list in lists:\n        total = sum(list)\n        if total > max_sum:\n            max_sum = total\n            max_list = list\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through lists\n    for lst in lists:\n        # Find sum of elements in list\n        sum_lst = sum(lst)\n        \n        # Check if sum is higher than max sum\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    # Return list with highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Find the maximum sum in the list\n    max_sum = float('-inf')\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n\n    # Find the list in the original list of lists whose sum of elements is the maximum\n    max_lst = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst == max_sum:\n            max_lst = lst\n\n    # Return the list in the original list of lists whose sum of elements is the maximum\n    return max_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    max_run = 0\n    curr_run = 0\n    uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            if not uppercase:\n                curr_run = 0\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n            uppercase = True\n        else:\n            if uppercase:\n                if curr_run > max_run:\n                    max_run = curr_run\n            uppercase = False\n\n    if uppercase and curr_run > max_run:\n        max_run = curr_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = 0\n    current_run = 0\n    prev_char = None\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if prev_char is None or prev_char.isupper():\n                uppercase_run = max(uppercase_run, current_run)\n            current_run = 0\n            prev_char = char\n\n    if prev_char is None or prev_char.isupper():\n        uppercase_run = max(uppercase_run, current_run)\n\n    return uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    start = 0\n    max_run = 0\n    max_end = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if upper_count > max_run:\n                max_run = upper_count\n                max_end = i\n        else:\n            upper_count = 0\n            \n    return test_str[start:max_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    current_run = \"\"\n    for char in test_str:\n        if char.isupper():\n            if current_run == \"\":\n                current_run += char\n            else:\n                if char!= current_run[-1]:\n                    current_run += char\n        else:\n            if current_run:\n                run_length = max(run_length, len(current_run))\n                current_run = \"\"\n    if current_run:\n        run_length = max(run_length, len(current_run))\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    last_upper = False\n    # Loop through each character in the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the current run is greater than the previous maximum run\n            if current_run > max_run:\n                # Reset the current run counter\n                current_run = 1\n                # Update the maximum run counter\n                max_run = current_run\n                # Update the last upper flag\n                last_upper = True\n            else:\n                # Reset the current run counter\n                current_run = 1\n                # Update the last upper flag\n                last_upper = True\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # If the last character was uppercase\n            if last_upper:\n                # Update the maximum run counter\n                max_run += 1\n            # Reset the last upper flag\n            last_upper = False\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_length = 0\n    current_char = ''\n    \n    for char in test_str:\n        if char.isupper():\n            if char!= current_char:\n                run_length += 1\n                if run_length > max_run:\n                    max_run = run_length\n            else:\n                run_length = 1\n        current_char = char\n        \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    start = -1\n    end = -1\n    for i in range(n):\n        if test_str[i].isupper():\n            if i == n - 1:\n                max_run += 1\n            elif not test_str[i+1].isupper():\n                end = i\n                if max_run > end - start + 1:\n                    max_run = end - start + 1\n                start = i\n                end = i\n        else:\n            start = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    end = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            end = i\n        else:\n            if count > max_count:\n                max_count = count\n                start = end - count + 1\n            count = 0\n            end = 0\n    if count > max_count:\n        max_count = count\n        start = end - count + 1\n    return max_count, test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums: a list of integers\n\n    Returns:\n    The first odd number in the list.\n\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K-i]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a number K and checks if the tuple contains the given number K.\n    '''\n    if K in test_tup:\n        print(f\"{K} is present in the tuple {test_tup}\")\n    else:\n        print(f\"{K} is not present in the tuple {test_tup}\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples and returns True if the first tuple contains all the values of the second tuple and False otherwise.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] not in K:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is not smaller than {test_tup2[i]} in the first tuple.\")\n            return\n    \n    print(\"All elements of the second tuple are smaller than or equal to the corresponding elements in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same number of elements.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: First tuple and second tuple have different lengths.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: Second tuple has elements that are larger than their corresponding elements in the first tuple.\")\n            return\n    \n    print(\"The second tuple is smaller than the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]