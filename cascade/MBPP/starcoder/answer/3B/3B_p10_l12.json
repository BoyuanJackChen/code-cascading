[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the first list\n    first_list = test_tup1[0]\n\n    # get the second list\n    second_list = test_tup2[0]\n\n    # initialize an empty list to store the shared elements\n    shared_list = []\n\n    # loop through the first list\n    for item in first_list:\n        # if the item is present in the second list, add it to the shared list\n        if item in second_list:\n            shared_list.append(item)\n\n    # return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 == item2:\n                shared.append(item1)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty list to store the shared elements\n    shared_list = []\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element is in the second tuple\n        if test_tup1[i] in test_tup2:\n            # Add the element to the shared list\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize two empty sets to store the common elements\n    common_set1 = set()\n    common_set2 = set()\n\n    # Loop through each element of the two lists and add it to the set if it's common to both lists\n    for element in test_tup1:\n        if element in test_tup2:\n            common_set1.add(element)\n    for element in test_tup2:\n        if element in test_tup1:\n            common_set2.add(element)\n\n    # Return the set of common elements\n    return common_set1 & common_set2"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements\n    that are common between the two tuples.\n    \"\"\"\n\n    # Loop through the first tuple and check if each element is in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            # If the element is in the second tuple, add it to a new list\n            shared_list.append(elem)\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the shared elements\n    shared_elements = set1 & set2\n    # convert the set back to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function returns True if the given number is not a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns a boolean value.\n    True if the integer is prime and False otherwise.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the number is not divisible by any of the numbers from 2 to sqrt(n), it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1 or n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a Python function to identify non-prime numbers.\n    \"\"\"\n\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes in a list of numbers and returns the n largest integers from the list in descending order.\n    '''\n    # convert list to heap\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n\n    # extract and return n largest integers\n    largest_numbers = []\n    for i in range(n):\n        largest_numbers.append(max_heap[0])\n        hq.heappop(max_heap)\n\n    return largest_numbers"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    # initialize an empty list to store the n largest integers\n    result = []\n    # iterate over the remaining numbers in the list\n    for num in nums:\n        # if the number is greater than the smallest number in the heap, remove the smallest number from the heap and add the new number to the heap\n        while num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,num)\n        # if the number is equal to or less than the smallest number in the heap, simply add the number to the heap\n        else:\n            hq.heappush(heap,num)\n        # if the number is greater than or equal to the n-th largest number in the list, add it to the result list\n        if len(heap) == n:\n            result.append(heap[0])\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to min heap\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # convert min heap to list and reverse it to get the n largest integers\n    largest_nums = []\n    while min_heap:\n        largest_nums.append(heapq.heappop(min_heap))\n\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max-heap of size n\n    max_heap = hq.nlargest(n, nums, key=lambda x: x)\n\n    # Extract the n largest elements and return them\n    return [max_heap.pop() for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_nums = []\n    hq.heapify(largest_nums)\n\n    for num in nums:\n        hq.heappushpop(largest_nums, num)\n\n        if len(largest_nums) > n:\n            hq.heappop(largest_nums)\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap and add the first n elements of the list\n    heap = []\n    for num in nums[:n]:\n        heapq.heappush(heap, -num)\n    \n    # add the rest of the elements of the list to the min heap\n    for num in nums[n:]:\n        heapq.heappush(heap, -num)\n    \n    # return the elements of the min heap in descending order\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    # Add the first n elements to the heap\n    for num in nums[:n]:\n        hq.heappush(heap, -num)\n    # Remove the largest element from the heap and add it to the result list\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    # Insert the first n elements of the list into the heap\n    for i in range(n):\n        heapq.heappush(min_heap, nums[i])\n    # Pop the smallest element from the heap and append it to the result list\n    for i in range(n, len(nums)):\n        heapq.heappush(min_heap, -heapq.heappop(min_heap))\n        # If the heap has more than n elements, the smallest element is the one at the end of the list\n        min_heap[0] = -min_heap[0]\n        result.append(min_heap[0])\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Initialize an empty max heap\n    heap = []\n    # Iterate over the given list of numbers\n    for num in nums:\n        # Add the number to the heap if it's smaller than the current max\n        if len(heap) < n or num > heap[0]:\n            hq.heappush(heap, num)\n        # If the heap size is greater than n, remove the smallest number from the heap\n        elif len(heap) == n and num > heap[0]:\n            hq.heappop(heap)\n        # If the number is already in the heap, move it to the top of the heap\n        else:\n            hq.heapify(heap)\n    # Return the n largest integers from the heap\n    return heap[:n]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    for i in range(32):\n        if (x & (1 << i))!= 0 and (x ^ (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        x &= x - 1\n        if x == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Count the number of bits set to 1 in the binary representation of x\n    count = 0\n    while x > 0:\n        x &= x - 1  # clear the least significant bit set to 1\n        count += 1\n    \n    # Check if the count is 1 or 0 (if x is a power of 2)\n    if count == 1 or x == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0 or x == 1:\n        return True\n    else:\n        while x!= 1:\n            if x & 1 == 0:\n                x = x >> 1\n            else:\n                x = 3 * x + 1\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x > 0:\n        return (x & (x - 1)) == 0\n    else:\n        return (x & (x + 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return True\n\n    if x == 1:\n        return False\n\n    while x & (x-1)!= 0:\n        x &= (x-1)\n\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Convert the given integer x to binary representation\n    binary_x = bin(x)\n\n    # Get the length of binary representation\n    n = len(binary_x) - 2\n\n    # Initialize the count of 1's in binary representation\n    count = 0\n\n    # Iterate over the binary representation and count the number of 1's at each bit position\n    for i in range(n):\n        if binary_x[i] == '1':\n            count += 1\n\n    # Check whether the count of 1's is equal to 1 or not\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern for finding words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all the matches in the text string\n    matches = re.findall(pattern, text)\n    # Return a list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Create an empty list to store the words which are at least 4 characters long\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            # Append the word to the long_words list\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall('\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    for i in range(n):\n        if str[i]!= str[-(i+1)]:\n            return i\n    \n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        # Check if the current character is in the substring at index i\n        if str[i] in str[:i] + str[i+1:]:\n            # If it is, we can rotate the substring at index i to the left by i characters\n            # to make it equal to the rest of the string\n            return i+1\n    # If we reach this point, no rotations were required to get the same string\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert the input string to a set to remove duplicate characters and count their frequency\n    str_set = set(str)\n    freq_dict = {}\n    for char in str_set:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n\n    # Sort the frequency dictionary by frequency in descending order\n    sorted_freq = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = float('inf')\n\n    # Iterate through the sorted frequency dictionary and check if there exists a rotation that matches the input string\n    for char, freq in sorted_freq:\n        if len(freq_dict) == 1:\n            return 0\n        if char in str_set:\n            continue\n        if freq % 2 == 0:\n            # Check if there exists a rotation that rotates the character to the leftmost position\n            left_rotations = find_Rotations(str.replace(char, ''))\n            if left_rotations > 0:\n                min_rotations = min(min_rotations, left_rotations)\n        if freq % 2 == 1:\n            # Check if there exists a rotation that rotates the character to the rightmost position\n            right_rotations = find_Rotations(str.replace(char, '') + char)\n            if right_rotations > 1:\n                min_rotations = min(min_rotations, right_rotations)\n        if min_rotations == 1:\n            break\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the length of the string is less than 2\n    if len(str) < 2:\n        return 0\n    \n    # Initialize the minimum rotation count\n    min_rotations = 0\n    \n    # Loop through each character of the string\n    for i in range(len(str)):\n        # Initialize the count of rotations\n        count = 1\n        \n        # Loop through each character of the string starting from index i+1\n        for j in range(i+1, len(str)+1):\n            # Check if the current substring is a substring of the remaining string\n            if str[j-1:i] == str[i:j-1]:\n                # Increment the count of rotations\n                count += 1\n            # If the current substring is not a substring, exit the inner loop\n            else:\n                break\n        \n        # Update the minimum rotation count if the current count is greater than the minimum count\n        if count > min_rotations:\n            min_rotations = count\n    \n    # Return the minimum rotation count\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    if n < 2: \n        return 0\n    # check if string is already rotated \n    if str == str[::-1]: \n        return 0\n    # if not rotated, try to rotate string \n    for i in range(n // 2): \n        if str[i]!= str[n - i - 1]: \n            # if string is not rotated, return minimum rotations \n            return i + 1\n    # if string is already rotated, return 0 \n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # initialize two pointers - one for each string\n    i = 0\n    j = len(str)-1\n    \n    # while the two pointers are not at the same index\n    while i < j:\n        # if the characters at the two pointers are different,\n        # then the strings are different and there is no rotation required\n        if str[i]!= str[j]:\n            return 0\n        \n        # move the pointers towards the middle of the string\n        i += 1\n        j -= 1\n        \n    # if the two pointers are at the same index, then the strings are the same\n    # and there is no rotation required\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n <= 1: \n        return 0\n    \n    min_rotations = 0\n    for i in range(n): \n        if str[i]!= str[(n-i-1) % n]: \n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if the string is palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # find the longest palindrome substring\n    max_len = 1\n    left, right = 0, 0\n    while right < n:\n        while right < n and str[left] == str[right]:\n            max_len = max(max_len, right - left + 1)\n            left += 1\n            right += 1\n        right += 1\n    \n    # check if the longest palindrome substring is a palindrome itself\n    if str[left:left+max_len] == str[left:left+max_len][::-1]:\n        return max_len\n    \n    # try rotating the string\n    for i in range(1, max_len+1):\n        left = 0\n        right = i\n        while right < n and str[left] == str[right]:\n            max_len = max(max_len, right - left + 1)\n            left += 1\n            right += 1\n        right += 1\n        if str[left:left+max_len] == str[left:left+max_len][::-1]:\n            return max_len\n    \n    # if we get here, it means there is no rotation required\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    # Convert the given string into a set so that we can check if a character is present or not.\n    str_set = set(str)\n\n    # Initialize the minimum number of rotations as 0.\n    min_rotations = 0\n\n    # Initialize a counter to keep track of the number of characters present in the string.\n    count = 0\n\n    # Loop through the string and check if the character is present in the set.\n    for i in range(len(str)):\n        if str[i] in str_set:\n            count += 1\n\n            # If we have found all the characters, then break out of the loop.\n            if count == len(str_set):\n                break\n\n    # If we have found all the characters, then we have made a valid rotation.\n    # So, we increment the minimum number of rotations by 1.\n    if count == len(str_set):\n        min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    k = 0\n    \n    while n > 1:\n        k += 1\n        n //= 2\n    \n    return k"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # check if ch is present in s\n    if ch in s:\n        # split the string into a list of characters\n        lst = list(s)\n        # remove the first occurrence of ch\n        lst.remove(ch)\n        # remove the last occurrence of ch\n        lst.remove(ch)\n        # join the list of characters back into a string\n        result = ''.join(lst)\n    else:\n        # return the original string if ch is not present in s\n        result = s\n\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character\n    if s.find(ch) == 0:\n        return s[1:]\n    # Remove last occurrence of the character\n    elif s.find(ch) == len(s)-1:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    if len(s) == 0:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # split the string into characters\n    chars = list(s)\n    # find the index of the first occurrence of the character\n    idx = chars.index(ch)\n    # remove the first occurrence of the character\n    del chars[idx]\n    # find the index of the last occurrence of the character\n    idx = chars.index(ch)\n    # remove the last occurrence of the character\n    del chars[idx]\n    # join the remaining characters into a string\n    result = ''.join(chars)\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Splitting the string into a list of characters\n    lst = list(s)\n    # Initializing index variables for first and last occurrences of the character\n    i = j = 0\n    # Looping through the list of characters\n    while i < len(lst)-1:\n        # Checking if the current character matches the given character\n        if lst[i] == ch:\n            # If it does, checking if the next character is also the same character\n            if lst[i+1] == ch:\n                # If it is, then we don't need this character, so we skip it\n                i += 1\n            else:\n                # If it isn't, then we skip this character and move on to the next one\n                i += 1\n        else:\n            # If the current character doesn't match the given character, then we move on to the next one\n            i += 1\n    # Now we move back from the end of the list to the second last character and check if the last character is also the same character\n    while j < len(lst)-1:\n        if lst[j] == ch:\n            if lst[j-1] == ch:\n                j += 1\n            else:\n                j += 1\n        else:\n            j += 1\n    # If the last character is also the same character as the first character, then we remove it from the list\n    if lst[j] == ch:\n        lst.pop(j)\n    # Finally, we join the list of characters into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of the character from the string\n    s = s.replace(ch, '', 1)\n    # Removing last occurrence of the character from the string\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # last occurrence of the character\n    elif s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\", 1)\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function removes the first and last occurrence of a given character from a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0] + remove_Occ(s[1:],ch)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    # Reconstruct the sorted matrix\n    sorted_matrix = [[sorted_matrix.index(row) for row in M[i]] for i in range(len(M))]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Loop through each row\n    for i in range(n):\n        # Initialize the largest element in this row and its index\n        largest = M[i][i]\n        largest_index = i\n        \n        # Find the second largest element in this row and its index\n        for j in range(i+1, n):\n            if M[i][j] > largest:\n                largest = M[i][j]\n                largest_index = j\n        \n        # Swap the elements at largest_index and i\n        M[largest_index][i], M[i][i] = M[i][i], M[largest_index][i]\n        \n        # Sort the remaining elements in this row in ascending order\n        for k in range(i+1, n):\n            if M[i][k] < M[largest_index][k]:\n                # Swap the elements at largest_index and k\n                M[largest_index][k], M[i][k] = M[i][k], M[largest_index][k]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # transpose the matrix\n    M = M.T\n    # initialize the sorted matrix\n    sorted_M = [[] for _ in range(len(M))]\n    # sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        sorted_M[i] = sorted(M[i])\n    # transpose the sorted matrix\n    sorted_M = sorted_M.T\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    \n    # Rearrange the matrix according to the sorted rows\n    result = []\n    for i in range(len(sorted_rows)):\n        result.append(sorted_rows[i])\n    \n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the row with the maximum sum\n        max_sum = max(row)\n        max_row = [x for x in M if x == max_sum]\n        # Remove the row from the matrix\n        M = [x for x in M if x!= max_sum]\n        # Sort the remaining rows in ascending order of their sums\n        M.sort(key=lambda x: sum(x))\n        # Add the row back to the matrix\n        M.extend(max_row)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Get the dimensions of the matrix\n    rows, cols = len(M), len(M[0])\n\n    # Create a list to store the row sums\n    row_sums = []\n\n    # Iterate over each row in the matrix\n    for i in range(rows):\n        # Initialize the sum of the current row to 0\n        current_sum = 0\n\n        # Iterate over each column in the current row\n        for j in range(cols):\n            # Add the current element to the sum\n            current_sum += M[i][j]\n\n        # Append the current row sum to the list\n        row_sums.append(current_sum)\n\n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n\n    # Create a new matrix with the sorted row sums as the first column\n    sorted_matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            if j == 0:\n                row.append(row_sums[i])\n            else:\n                row.append(M[i][j - 1])\n        sorted_matrix.append(row)\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix according to the sum of each row\n    sorted_matrix = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    # First, we need to calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Then, we can sort the matrix based on the sum of each row\n    sorted_M = sorted(M, key=lambda x: sum(x))\n\n    # Finally, we can return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/3 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (1 / 2) * l * b\n    volume = (1 / 2) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism\n    V = 1/3 * l * b * h\n    # Return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 2\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes the length, width, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    # calculate the volume of the prism using Heron's formula\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    \"\"\"\n    This function finds the volume of a triangular prism with base length l, height h, and thickness b.\n\n    Parameters:\n    l (float): The length of the base of the triangular prism.\n    b (float): The height of the triangular prism.\n    h (float): The thickness of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    area = 0.5 * l * h\n    volume = area * b\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width, and height of a triangular prism as input parameters\n    and returns the volume of the prism as output.\n    '''\n    # Using Heron's formula to find the area and then multiplying it by the height to find the volume\n    area = 0.5 * l * b * h\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h  # formula for volume of a triangular prism\n    print(\"The volume of the triangular prism is\", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+_)+'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)([a-z])(?=\\b)'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # split the text into words\n    words = text.split()\n    \n    # loop through each word\n    for word in words:\n        # check if the word contains any uppercase letters\n        if re.search('[A-Z]', word):\n            # if there are any uppercase letters, return false\n            return False\n        \n        # check if the word contains any lowercase letters\n        if re.search('[a-z]', word):\n            # if there are any lowercase letters, check if it ends with an underscore\n            if word[-1] == '_':\n                # if it ends with an underscore, return true\n                return True\n                \n    # if we make it through the loop without finding any uppercase letters, return false\n    return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function takes a string as input and returns True if it contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    \"\"\"\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z_]*[a-z](?:[a-z_]*[a-z])*[a-z_]?$'\n\n    # Use the re.match() function to match the pattern against the input text\n    result = re.match(pattern, text)\n\n    # If the result is not None, then the input text matches the pattern, so return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<!^)(?=[a-z])(?<=[a-z])_\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Use regular expression to check if the input string contains sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z][a-z_]*[a-z]'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    # Convert the input strings to lists of characters\n    list1 = [ord(char) for char in string1]\n    list2 = [ord(char) for char in string2]\n\n    # Create a set of characters to remove\n    remove_set = set(list2)\n\n    # Create a new list with the characters from the first string not in the remove_set\n    result = []\n    for char in list1:\n        if char not in remove_set:\n            result.append(chr(char))\n\n    # Convert the result list back to a string\n    result_str = ''.join(result)\n\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string)\n    char_list = []\n    for char in list_str:\n        if char not in string:\n            char_list.append(char)\n    \n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and removes the characters present in another string from the first string.\n    '''\n    # create a list of characters to be removed\n    characters_to_remove = [chr(i) for i in range(NO_OF_CHARS) if chr(i) in string]\n\n    # create a new string with all the characters in the original string which are not present in the list of characters to be removed\n    result_string = ''.join([c for c in string if c not in characters_to_remove])\n\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(i)\n    for i in range(len(string)):\n        if string[i] not in char_list:\n            char_list.remove(string[i])\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the given string into a list of characters\n    char_list = list(string)\n    \n    # Remove characters present in the second string from the first string\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.remove(char_list[i])\n    \n    # Convert the list of characters back into a string\n    return \"\".join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    # Create a list of ASCII characters\n    ascii_list = [chr(i) for i in range(NO_OF_CHARS)]\n    # Create an empty list to store the characters that are present in the second string\n    common_chars = []\n\n    # Iterate through the first string\n    for char in string:\n        if char in ascii_list:\n            # Remove the characters from the ASCII list that are present in the second string\n            ascii_list.remove(char)\n            # Add the characters present in the second string to the list\n            common_chars.append(char)\n\n    # Convert the ASCII list to a string and return the result\n    return ''.join(common_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list to store the remaining characters\n    remaining_chars = []\n    # Loop through the string\n    for char in string:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # Add the character to the list\n            remaining_chars.append(char)\n    # Convert the list to a string and return it\n    return ''.join(remaining_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_set = set(string)\n    second_set = set('abcdefghijklmnopqrstuvwxyz')\n    result = [char for char in string if char not in first_set and char in second_set]\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for i in range(len(list_string)):\n        if list_string[i] in string:\n            del list_string[i]\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, exclude):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for c in string:\n        if c not in exclude:\n            result.append(c)\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each number in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # check if there is any number with a frequency greater than 1\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements and their count\n    element_count = {}\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # check if any element appears more than once\n    for count in element_count.values():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the number and its count\n    count_dict = {}\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add the number to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the dictionary to find if there are any duplicate numbers\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    # If the number has a factor of 7 or 11, then it's a woodball\n    if x % 7 == 0 or x % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return \"Not a woodball\"\n    else: \n        return \"A woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 11 or x == 21:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function will check if the given number is woodball or not.\n\n    :param x: The number to be checked.\n    :return: True if x is a woodball, False otherwise.\n    \"\"\"\n\n    # Define a set of numbers that represent woodballs\n    woodballs = {7, 11, 13, 17, 19, 23, 29, 31, 37}\n\n    # Check if x is in the set of woodballs\n    if x in woodballs:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5:\n        return \"Woodball\"\n    elif x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x == 4 or x == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: # checks if the number is even\n        if x >= 5 and x <= 35: # checks if the number is between 5 and 35\n            return \"Woodall number\"\n        else:\n            return \"Not a Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if a given number is woodall or not.\n    \"\"\"\n    if x in (1, 5, 10, 25):\n        return True\n    elif x in (2, 4, 8, 16):\n        return False\n    else:\n        return None"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == rev_num * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the given number to a string\n    num_str = str(num)\n\n    # initialize the reversed number\n    reversed_num = ''\n\n    # loop through each character of the number string\n    for char in num_str:\n\n        # append the character to the reversed number in reverse order\n        reversed_num = char + reversed_num\n\n    # convert the reversed number to an integer\n    reversed_num = int(reversed_num)\n\n    # check if the reversed number is one less than twice the original number\n    if num < 2 * reversed_num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    return (num-reverse) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Reverse the given number\n    reverse_num = 0\n    while num!= 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num = num // 10\n        \n    # Check if the reversed number is one less than twice the original number\n    if reverse_num - num < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # convert the reverse number to an integer and subtract one\n    rev_num = int(reverse_num) - 1\n    # check if the original number is one less than twice its reverse\n    if num == rev_num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    # convert the number to a string so we can reverse it\n    num_str = str(num)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # return whether the original number minus 1 is equal to the reversed number\n    return rev_num - 1 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse * 2 - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # get the reverse of the number\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # check if the original number is one less than twice its reverse\n    if num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Check if the input is a number\n    if type(num)!= int:\n        return \"Please enter a valid number.\"\n    \n    # Reverse the number\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = reversed_num * 10 + remainder\n        num //= 10\n    \n    # Check if the reversed number is less than 2 times the original number\n    if reversed_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    num = 0\n    for i in arr:\n        num += (10**i)\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initialize a list to store the remaining digits after each operation\n    remaining_digits = []\n    # loop through the given list of digits\n    for digit in arr:\n        # loop through all the remaining digits\n        for i in range(len(remaining_digits)):\n            # add the current digit to the remaining digits\n            remaining_digits.append(digit + remaining_digits[i])\n        # append the current digit to the remaining digits\n        remaining_digits.append(digit)\n    # sort the remaining digits in descending order and find the first element\n    max_num = max(remaining_digits)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_num = max(max_num, arr[i] + arr[j])\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the input list in descending order\n    arr.sort(reverse=True)\n    # Initialize the largest number to be 0\n    largest = 0\n    # Iterate through the sorted list of digits\n    for digit in arr:\n        # Calculate the next largest number by adding the current digit to the largest number\n        next_largest = largest + digit\n        # Update the largest number if the next largest number is greater than the current largest number\n        if next_largest > largest:\n            largest = next_largest\n    # Return the largest number found\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Create a list of digits to be used in the function\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n    # Create a variable to store the maximum number\n    max_num = 0\n\n    # Iterate through each digit in the list of digits\n    for digit in digits:\n        # Initialize a variable to store the number formed with the current digit\n        num = 0\n\n        # Iterate through each number in the input list\n        for num_str in arr:\n            # Check if the current number can be formed with the current digit\n            if len(str(int(num_str) * int(digit))) == len(num_str) + len(digit):\n                # If the current number is greater than the maximum number, update the maximum number\n                if int(num_str) * int(digit) > max_num:\n                    max_num = int(num_str) * int(digit)\n\n        # Check if the current digit can be added to the maximum number\n        if max_num + int(digit) > max_num:\n            # If the current digit can be added to the maximum number, update the maximum number\n            max_num += int(digit)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Function to check if a number is palindrome or not\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Function to check if a number can be formed with given digits or not\n    def can_form_with_digits(num, digits):\n        # Convert the given number to a string\n        num_str = str(num)\n\n        # Iterate over each digit in the list and check if it can form the number with the given digits\n        for digit in digits:\n            # Check if the digit is in the current number\n            if digit not in num_str:\n                return False\n\n        return True\n\n    # Initialize the variables to store the largest number and the digits that can form the largest number\n    max_num = 0\n    max_digits = []\n\n    # Iterate over each number in the given list of digits\n    for num in arr:\n        # Check if the number is palindrome or not\n        if is_palindrome(num):\n            # Check if the number can be formed with the given digits\n            if can_form_with_digits(num, max_digits):\n                # If the number is a palindrome and can be formed with the given digits, update the maximum number and the maximum digits\n                if num > max_num:\n                    max_num = num\n                    max_digits = []\n\n                if num < max_num:\n                    continue\n\n        # Check if the number can be formed with the current digits\n        if can_form_with_digits(num, max_digits):\n            # If the number can be formed with the current digits, check if it is larger than the current maximum number\n            if num > max_num:\n                max_num = num\n                max_digits = []\n\n            # If the number is less than the current maximum number, skip it\n            if num < max_num:\n                continue\n\n        # If the number cannot be formed with the current digits, check if the current maximum number can be formed with the next digit\n        for digit in max_digits:\n            # Check if the next digit can form the current maximum number\n            if can_form_with_digits(num * 10 + digit, max_digits):\n                # If the next digit can form the current maximum number, update the maximum number and the maximum digits\n                if num * 10 + digit > max_num:\n                    max_num = num * 10 + digit\n                    max_digits = [digit]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*10**(len(arr)-1-i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    num = 0\n    for digit in arr:\n        num = num*10 + digit\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    num = 0\n    for i in range(len(arr)):\n        num += (arr[i] ** i)\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Initialize the maximum number to be 0\n    max_num = 0\n    # Traverse through the list of digits\n    for digit in arr:\n        # Multiply the maximum number with 10\n        max_num *= 10\n        # Add the current digit to the maximum number\n        max_num += digit\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if their signs are opposite and False otherwise.\n    \"\"\"\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0:\n        return \"Both numbers are zero or both are non-zero, therefore, they have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"The first number is positive and the second number is positive, therefore, they have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The first number is negative and the second number is negative, therefore, they have opposite signs.\"\n    else:\n        return \"The first number is non-positive and the second number is non-positive, therefore, they have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Checks whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n\n    # Check if the two integers are of different signs\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x * y) < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x<0 and y<0 or x>0 and y>0: #if both are negative or both are positive\n        return False\n    elif x<0 and y>0 or x>0 and y<0: #if one is negative and other is positive or vice versa\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    # Check if x is greater than y\n    if x > y:\n        return \"The two numbers have the same sign\"\n    elif x < y:\n        # Check if y is greater than x\n        if y > x:\n            return \"The first number has the opposite sign to the second number\"\n        else:\n            return \"The second number has the opposite sign to the first number\"\n    else:\n        # x is equal to y\n        return \"The two numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Return True if x and y have opposite signs, otherwise return False\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_octagonal_helper(n, curr_num, prev_num):\n        if curr_num == n:\n            return True\n        elif curr_num < n:\n            if prev_num > curr_num:\n                return is_octagonal_helper(n, curr_num + 1, prev_num + 1)\n            else:\n                return is_octagonal_helper(n, curr_num + 1, prev_num - 1)\n        else:\n            return False\n\n    return is_octagonal_helper(n, 1, 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function returns True if the given number is an octagonal number and False otherwise.\n\n    A number is octagonal if it is a positive integer and the sum of the squares of its digits is equal to the cube of the number itself.\n    For example, 125 is an octagonal number because its sum of squares of its digits is 1^2 + 2^2 + 5^2 = 12 + 40 + 25 = 69.\n\n    The function takes a number as input and returns True if it is an octagonal number and False otherwise.\n    \"\"\"\n\n    def sum_of_squares(n):\n        \"\"\"\n        This function takes a number as input and returns the sum of the squares of its digits.\n        \"\"\"\n        return sum(int(digit)**2 for digit in str(n))\n\n    def cube_of_number(n):\n        \"\"\"\n        This function takes a number as input and returns its cube.\n        \"\"\"\n        return n**3\n\n    n = int(n)\n    if n < 1:\n        return False\n\n    if n == 1:\n        return True\n\n    sum_of_squares_of_digits = sum_of_squares(n)\n    cube_of_n = cube_of_number(n)\n\n    return sum_of_squares_of_digits == cube_of_n\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # check if n is positive integer\n    if type(n)!= int or n <= 0:\n        return None\n    \n    # define a function to calculate the nth octagonal number\n    def nth_octagonal(n):\n        return (n * (3 * n - 1)) // 2\n    \n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    num = 0\n    while num**2 < n:\n        num += 1\n    return (num**2 - n) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    i = 1\n    while len(octagonal_numbers) < n:\n        octagonal_numbers.append(4*i**2 - 3)\n        i += 1\n    return octagonal_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(n):\n        a += i * (2 * i - 1)\n    return a\n\nn = int(input(\"Enter the value of n: \"))\noct_n = is_octagonal(n)\nprint(f\"The {n}th octagonal number is {oct_n}.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # First, we need to find the number of squares needed to reach the nth octagonal number\n    num_squares = 0\n    while n > 0:\n        num_squares += 1\n        n = n // 2\n\n    # Next, we need to find the value of the nth square\n    nth_square = 1\n    for i in range(1, num_squares + 1):\n        nth_square *= i\n\n    # Finally, we can find the nth octagonal number by adding 1 to the nth square\n    nth_octagonal = nth_square + 1\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 ** 0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n ** 2 + 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def is_digit(c):\n        return c.isdigit()\n\n    def sum_of_digits(s):\n        return sum(int(d) for d in s if is_digit(d))\n\n    # Create a dictionary to store the number of substrings with a given sum of digits\n    substring_count = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n\n            # Check if the sum of digits of the substring is equal to its length\n            if sum_of_digits(substring) == len(substring):\n                substring_count[substring] += 1\n\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_of_digits(n):\n        '''\n        Calculate the sum of digits of a given number.\n        '''\n        return sum(int(digit) for digit in str(n))\n\n    # Dictionary to store the count of substrings with the given length\n    substrings_length = defaultdict(int)\n\n    # Traverse through each substring of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Check if the substring has the sum of digits equal to its length\n            if sum_of_digits(len(substring)) == len(substring):\n                substrings_length[len(substring)] += 1\n\n    # Return the count of substrings with the given length\n    return substrings_length"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            count[digits_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(d) for d in s[i:j+1]) == len(s[i:j+1]):\n                count[s[i:j+1]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the sum of digits of the substring as the key and the count as the value\n    digit_count = defaultdict(int)\n\n    # Loop through each character in the string and calculate the sum of digits\n    for i in range(len(s)):\n        digit_sum = sum(int(c) for c in s[i:i+len(s)-i])\n        # Update the count of the substring's sum in the dictionary\n        digit_count[digit_sum] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for i in range(1, len(s)+1):\n        count += digit_count[i]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    n = len(s)\n    count = defaultdict(int)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substr = s[i:j+1]\n            digits = [int(d) for d in substr]\n            counts[sum(digits)] += 1\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings for each digit\n    count = defaultdict(int)\n\n    # Loop through the characters in the string\n    for i in range(len(s)):\n        # Get the current character\n        curr = s[i]\n\n        # Check if the current character is a digit\n        if curr.isdigit():\n            # Convert the digit to an integer and add it to the count dictionary\n            count[int(curr)] += 1\n\n            # Loop through all the previous characters in the string\n            for j in range(i - 1, -1, -1):\n                # Get the previous character\n                prev = s[j]\n\n                # Check if the previous character is also a digit\n                if prev.isdigit():\n                    # Convert the previous digit to an integer and subtract it from the current count\n                    count[int(prev)] -= 1\n\n                    # If the sum of digits is equal to the length of the substring, increment the count\n                    if sum(count.values()) == len(curr):\n                        count[int(curr)] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(1 for count in count.values() if count == len(str(len(count))))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # initialize smallest number to be the first number in the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for num in xs[1:]:\n        # if the current number is smaller than the smallest so far, update the smallest\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize the maximum difference as 0\n    max_diff = 0\n    # Loop through the sorted list and compare the second elements of adjacent tuples\n    for i in range(len(sorted_list)-1):\n        # Calculate the absolute difference between the second elements of the current and next tuples\n        diff = abs(sorted_list[i+1][1] - sorted_list[i][1])\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n\n    # Sort the pairs based on their difference\n    pairs.sort(key=lambda x: abs(x[0] - x[1]))\n\n    # Return the maximum difference\n    return pairs[-1][0] - pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the maximum difference and current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through the sorted list\n    for i in range(len(test_list) - 1):\n        # Update the current difference with the difference between the next two numbers in the list\n        current_diff = test_list[i+1] - test_list[i]\n\n        # Update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a new list to store the sorted tuples\n    sorted_marks = []\n    # loop through the subject marks\n    for subject, mark in subjectmarks:\n        # if the current mark is greater than the previous marks in the sorted list, add a tuple to the list\n        if mark > sorted_marks[-1][1]:\n            sorted_marks.append((subject, mark))\n    # sort the sorted list in ascending order based on the second value of each tuple\n    sorted_marks.sort(key=lambda x: x[1])\n    # return the sorted list\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a new list to store the sorted tuples\n    sorted_marks = []\n\n    # loop through the list of tuples\n    for mark in subjectmarks:\n        # append the tuple to the sorted list\n        sorted_marks.append(mark)\n\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks.sort(key=lambda x: x[1])\n\n    # return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: add first element and sum of rest of list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        # Flatten the list and sum its elements\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define an empty list to store the flattened list\n    flat_list = []\n    # Define a recursive function to flatten a list and add its elements to the flat_list\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            flat_list.append(lst)\n    # Call the flatten function with the input list\n    flatten(data_list)\n    # Return the sum of all elements in the flat_list\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the head of the list to the sum of all the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of the list to the sum\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element and call the function again with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the list of Bell numbers\n    bell = []\n    for i in range(n+1):\n        bell.append(bell_number_helper(i))\n    return bell[n]\n\ndef bell_number_helper(k):\n    '''\n    Helper function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # If k is even, there is only one way to partition the set\n    if k % 2 == 0:\n        return 1\n\n    # If k is odd, count the number of ways to partition the set\n    count = 0\n    for i in range(2, k//2+1):\n        if k % i == 0:\n            count += bell_number_helper(k//i)\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    bell_numbers = [1, 1]\n\n    for i in range(2, n + 1):\n        bell_numbers.append(bell_numbers[i - 1] + bell_numbers[i - 2])\n\n    return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize a dictionary to store the count of ways to partition the set of Bell numbers\n    ways_to_partition = {0: 1, 1: 1}\n    \n    # Loop through all integers from 2 to n\n    for i in range(2, n+1):\n        # Loop through all integers from i+1 to n\n        for j in range(i+1, n+1):\n            # If i+j is a power of 2, increment the count for the number of ways to partition i+j\n            if (i+j) & ((i+j)-1) == 0:\n                ways_to_partition[i+j] = ways_to_partition.get(i+j, 0) + ways_to_partition.get(i, 0) + ways_to_partition.get(j, 0)\n                \n    # Return the count of ways to partition the set of Bell numbers\n    return ways_to_partition[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [0] * (n+1) # initialize list of bell numbers with zeros\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            bell_numbers[i] += bell_numbers[j-1] * bell_numbers[i-j]\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the memoization table\n    memo = [0]*(n+1)\n    # Base case\n    if n == 0 or n == 1:\n        memo[n] = 1\n        return memo[n]\n    # Initialize the first two Bell numbers\n    if n == 2:\n        memo[2] = 2\n        return memo[2]\n    # Initialize the first three Bell numbers\n    if n == 3:\n        memo[3] = 5\n        return memo[3]\n    # Initialize the first four Bell numbers\n    if n == 4:\n        memo[4] = 14\n        return memo[4]\n    # Compute the remaining Bell numbers\n    for i in range(5, n+1):\n        memo[i] = (memo[i-1] + memo[i-2] + memo[i-3]) % (10**9+7)\n    return memo[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \n    Parameters:\n    n (int): the maximum number of elements in the partition\n    \n    Returns:\n    int: the number of ways to partition the set of Bell numbers\n    \"\"\"\n    \n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Loop over the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Compute the number of ways to partition the current set of Bell numbers\n        ways_curr = 0\n        \n        # Loop over the first i elements of the partition\n        for j in range(i):\n            \n            # Compute the number of ways to partition the first j elements\n            ways_prev = 0\n            \n            # Loop over the previous partitions of the first j elements\n            for k in range(1, j+1):\n                \n                # Compute the number of ways to partition the remaining elements\n                ways_prev += (k*(k-1))//2\n            \n            # Compute the number of ways to partition the remaining elements\n            ways_curr += ways_prev\n        \n        # Add the number of ways to partition the current set of Bell numbers to the total\n        ways *= ways_curr\n    \n    # Return the total number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    # Bell numbers are defined as the number of ways to partition a set of n numbers into two subsets such that the sum of the elements in each subset is equal to n.\n    # Bell numbers can be represented as a binomial coefficient.\n    # For example, the first Bell number is the binomial coefficient of 2n and n, which is 2n(2n-1)/2.\n\n    # The Bell number is defined as the number of ways to partition a set of n numbers into two subsets such that the sum of the elements in each subset is equal to n.\n    # We can calculate the Bell number by using a recursive formula:\n    # Bell(n) = n * Bell(n-1) + n * (n-1) * (n-2) *... + n\n    # where Bell(0) = 1 and Bell(1) = 1.\n\n    # To avoid overflow errors, we need to limit the value of n.\n    if n < 2:\n        return 0\n\n    # Base case: if n = 2, we have only two possible subsets: {1,2} and {2,1}.\n    if n == 2:\n        return 2\n\n    # Recursive case: we need to calculate the Bell number for n.\n    # To calculate the Bell number for n, we need to calculate the Bell number for (n-1) and add the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n.\n    # We can use dynamic programming to calculate the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n.\n    # The number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n is given by the binomial coefficient of n and (n-1).\n    # This gives us the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n.\n\n    # Since we can calculate the Bell number for (n-1) in O(1) time, we can calculate the Bell number for n in O(n) time.\n    # Therefore, the time complexity of the Bell number is O(n).\n\n    # The base case for the recursive formula is Bell(0) = 1 and Bell(1) = 1.\n    # Therefore, the first two terms of the recursive formula are 1 and 1.\n    # For n >= 2, the third term of the recursive formula is n * Bell(n-1) + n * (n-1) * (n-2) *... + n,\n    # where Bell(0) = 1 and Bell(1) = 1.\n    # For each value of n, we need to calculate the Bell number for n-1 and then add the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n.\n    # The number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n is given by the binomial coefficient of n and (n-1).\n\n    # Therefore, we can calculate the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n using dynamic programming.\n    # We can initialize an array dp of size n+1 to store the Bell numbers.\n    # We can also initialize an array cnt to store the number of ways to partition the set {1,2,...,n-1} into two subsets such that the sum of the elements in each subset is equal to n.\n\n    # dp[i] stores the Bell number for i, which is equal to the number of ways to partition the set {1,2,...,i-1} into two subsets such that the sum of the elements in each subset is equal to i.\n    # cnt[i] stores the number of ways to partition the set {1,2,...,i-1} into two subsets such that the sum of the elements in each subset is equal to i.\n\n    # For example, if n = 5"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # If n is 1 or 0, there is only 1 way to partition the set\n    if n == 0 or n == 1:\n        return 1\n    # If n is greater than 1, there are at least 2 ways to partition the set\n    else:\n        # Initialize variables for counting number of ways to partition the set\n        ways = 0\n        # Iterate through all possible values of k such that 0 <= k <= n\n        for k in range(2, n+1):\n            # Find the number of ways to partition the set using k numbers\n            ways += bell_number(n-k)\n        return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    # check if the array is monotonic in the increasing order\n    elif A[0] <= A[1] and is_Monotonic(A[1:]):\n        return True\n    # check if the array is monotonic in the decreasing order\n    elif A[-1] >= A[-2] and is_Monotonic(A[:-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns a boolean value indicating whether the array is monotonic or not.\n    The function checks if the array is monotonic or not based on the following rules:\n    1. If the array has a single element, it is considered as monotonic.\n    2. If the array has a single zero element, it is not considered as monotonic.\n    3. If the array has a descending sequence, it is considered as monotonic.\n    4. If the array has an ascending sequence, it is considered as monotonic.\n    5. If the array has a descending sequence with any zero element, it is considered as monotonic.\n    6. If the array has an ascending sequence with any zero element, it is considered as monotonic.\n    '''\n    if len(A) == 1:\n        return True\n    if A[0] == 0:\n        return False\n    \n    if A[1] >= A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        if A[-1] >= A[-2]:\n            return True\n        return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        if A[-1] <= A[-2]:\n            return True\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array A is monotonic or not.\n\n    Parameters:\n    A (list): A list of integers.\n\n    Returns:\n    bool: True if A is monotonic, else False.\n    \"\"\"\n\n    # Check if the length of the array is less than or equal to 1\n    if len(A) <= 1:\n        return True\n\n    # Check if all elements are same or if the array is a monotonic increasing array\n    if A[0] <= A[-1] or (A[0] >= A[-1] and A[0] <= A[1]):\n        return True\n\n    # Check if all elements are same or if the array is a monotonic decreasing array\n    if A[0] >= A[-1] or (A[0] <= A[-1] and A[0] >= A[1]):\n        return True\n\n    # If none of the above conditions are met, then the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        if all(A[i] >= A[i+1] for i in range(len(A)-1)):\n            return True\n        elif all(A[i] <= A[i+1] for i in range(len(A)-1)):\n            return True\n        else:\n            return False\n    else:\n        if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n            return True\n        elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n            return True\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[-1]:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            pass\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] == A[-1]:\n        return True\n    elif A[0] < A[1] and A[-1] > A[-2]:\n        return True\n    elif A[0] > A[1] and A[-1] < A[-2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize the maximum and minimum values in the array\n    max_val = A[0]\n    min_val = A[0]\n    \n    # Iterate through the array and update the maximum and minimum values\n    for i in range(1, len(A)):\n        if A[i] > max_val:\n            max_val = A[i]\n        elif A[i] < min_val:\n            min_val = A[i]\n    \n    # If the maximum and minimum values are equal, the array is monotonic\n    if max_val == min_val:\n        return True\n    \n    # Check if the array is decreasing or increasing\n    if max_val < min_val:\n        return False\n    \n    # Check if the array is increasing and increasing in a cyclic manner\n    for i in range(1, len(A)-1):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input and returns True if the second list is a sublist of the first list, False otherwise.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n\n    return l[0] in s or is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the list is a sublist of the given sublist\n    for sublist in s:\n        if l in sublist:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the sublist is a sublist of the given list\n    for i in range(len(l)):\n        if s == l[i:]:\n            return True\n    # if the sublist is not found in the given list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Iterate through the list of tuples and check if all tuples have equal length\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input, list):\n        return \"Input must be a list.\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return \"All tuples must have equal length.\"\n    return \"All tuples have equal length.\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise it returns False.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    # Check if all the tuples have equal length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if all the given tuples have the same length\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(set(Input[i])) == len(Input[i]):\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Check if the length of the tuple is equal to 0\n        if len(tup) == 0:\n            return False\n        # Check if the length of the tuple is equal to the length of the first tuple\n        elif len(tup) == len(Input[0]):\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    count = 0\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            flag = False\n            count += 1\n            break\n    if flag:\n        print(\"All the tuples have equal length\")\n    else:\n        print(f\"Not all the tuples have equal length. There are {count} tuples with different length.\")"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = (gap * 10) // 13  # increase gap by 10%\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                # swap nums[j] and nums[j - gap] if they are not in order\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            # if gap is too small, try again with a larger gap\n            if j == i:\n                gap *= 1.3\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    # Find the length of the array\n    n = len(nums)\n\n    # Initialize the gap and the swapped flag\n    gap = n\n    swapped = True\n\n    # Do the sorting\n    while swapped:\n        swapped = False\n\n        # Increase the gap by a factor of 1.3\n        gap = int(gap * 1.3)\n\n        # Iterate through the array\n        for i in range(gap, n):\n            # If the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a simple sorting algorithm that works by repeatedly sorting subarrays of the list until no further sorting is necessary.\n\n    This algorithm has a time complexity of O(n^2) in the average and worst cases, but has a time complexity of O(n^2) in the best case, so it is not very efficient for large lists.\n\n    The algorithm works by maintaining two variables, a gap and a count. The gap is the increment between the start of each subarray, and the count is the number of elements in the subarray.\n\n    The algorithm starts by setting the gap to the length of the list, and the count to 0. It then enters a loop that continues as long as the gap is greater than 1:\n\n    1. For each iteration, the algorithm checks if the gap is greater than the count. If it is, then the gap is set to half of its previous value, and the count is set to 0. Otherwise, the algorithm increments the count and moves the gap closer to the end of the list.\n\n    2. The algorithm then enters another loop that continues as long as the count is greater than 0:\n\n    2.1. For each iteration of the inner loop, the algorithm shuffles the list by swapping adjacent elements.\n\n    2.2. The algorithm then sets the count to half the gap, and the gap to the new count.\n\n    2.3. The algorithm continues the inner loop until the count becomes 0.\n\n    The algorithm continues this process until the gap is less than or equal to 1, at which point the algorithm is done and the list is sorted.\n\n    This algorithm is not very efficient for large lists, but it is easy to implement and works well for small lists.\n    '''\n    n = len(nums)\n    gap = n\n    count = 0\n\n    while gap > 1:\n        for i in range(count):\n            j = i + gap\n            if j < n:\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n        count = int(gap/2)\n        gap = count\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    swapped = True\n    n = len(nums)\n    while swapped:\n        swapped = False\n        gap = n\n        while gap > 1:\n            gap = (gap + 1) // 2\n            for i in range(gap, n):\n                if nums[i] < nums[i-gap]:\n                    nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                    swapped = True\n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap //= 1.3\n        else:\n            gap = n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    gap = len(nums) // 2\n\n    while gap > 0:\n        sorted = True\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        gap = gap // 10\n\n        if sorted:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize the gap and the swapping flag\n    gap = 1\n    swapping = True\n\n    # while swapping is True, keep swapping until the gap is less than 1\n    while swapping:\n        # set the swapping flag to False\n        swapping = False\n\n        # iterate over the list from the gap size to the end of the list\n        for i in range(gap, len(nums)):\n\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapping = True\n\n        # shrink the gap by 1\n        gap = int(gap / 1.3)\n\n        # if the gap is less than 1, stop the algorithm\n        if gap < 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define parameters\n    gap = len(nums)\n    swapped = True\n    n = len(nums)\n\n    # loop until the array is sorted\n    while swapped:\n        swapped = False\n\n        # loop through the array and swap elements if they are in the wrong order\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # reduce the gap size and check if any more swaps were made\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        gap = int(gap / 1.3)\n        \n        if gap < 1:\n            gap = 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / 1.3)\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        sorted = swapped"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n / i == int(n / i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the input number is less than 0\n    if n < 0:\n        return \"The input number should be a non-negative integer.\"\n\n    # Check if the input number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0 and n % (n//i) == 0:\n            return \"Yes, the input number can be represented as the difference of two squares.\"\n\n    return \"No, the input number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is negative or zero\n    if n < 0:\n        return False\n    # Check if the number is already a square\n    elif n == int(n**0.5)**2:\n        return True\n    # Check if the number can be represented as the difference of two squares\n    elif n - int(n**0.5)**2 == int(n - int(n**0.5)**2)**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x, y = 0, n\n    while x**2 <= n:\n        if x**2 + y**2 == n:\n            return True\n        elif x**2 + y**2 < n:\n            y += 1\n        else:\n            x += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    # Find the square root of n\n    sqrt_n = round(n ** 0.5)\n    \n    # Check whether n can be represented as the difference of two squares\n    for i in range(1, sqrt_n + 1):\n        if n == i * i + i:\n            return \"Yes, it can be represented as the difference of two squares.\"\n    \n    return \"No, it cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not. \n    '''\n    # iterate over all possible difference values between squares\n    for i in range(1, int(n**0.5) + 1):\n        # check if the difference between squares is equal to the given number\n        if (i ** 2) + (n - i ** 2) == n:\n            return True\n    # if no difference was found, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is a multiple of 2\n    if n % 2 == 0:\n        return \"The number is not a difference of two squares.\"\n\n    # Check if the square root of n is an integer\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2!= n:\n        return \"The number is not a difference of two squares.\"\n\n    # Check if the difference between the square root and n is an integer\n    diff = n - sqrt_n\n    if diff % 2 == 0:\n        return \"The number is a difference of two squares.\"\n    else:\n        return \"The number is not a difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # Create a list of all possible squares from 1 to n\n    squares = [i*i for i in range(1, n+1)]\n    \n    # Check if the difference of any two squares in the list is equal to n\n    for i in range(len(squares)):\n        for j in range(i+1, len(squares)):\n            if squares[i] + squares[j] == n:\n                return True\n    \n    # If no pair of squares can make the difference, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_square(n):\n    '''\n    Check if a given number is a square or not.\n    '''\n    root = int(n**0.5)\n    return root*root == n\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        if is_square(i*i) and is_square(n-i*i):\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif dif_Square(n):\n    print(n, \"can be represented as the difference of two squares.\")\nelse:\n    print(n, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in two arrays, colors and patterns. The colors array contains the colors to be matched,\n    and the patterns array contains the sequences of colors to be matched.\n    The function checks whether the colors in the colors array follow the sequences in the patterns array.\n    If there is a mismatch, the function returns False. Otherwise, it returns True.\n    '''\n\n    # Loop through the colors array and check if each color matches its pattern\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    # If all colors match their patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern = colors[0]\n    for color in colors[1:]:\n        if color not in pattern:\n            return False\n        pattern = pattern[1:] + color\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = [0] * 4\n    for color in colors:\n        count[color] += 1\n    for pattern in patterns:\n        if count[pattern[0]] < pattern[1]:\n            return False\n        else:\n            count[pattern[0]] -= pattern[1]\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0 or len(colors) == 0 or len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    colors.sort()\n    patterns.sort()\n    \n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Parameters:\n    colors (list): A list of colors that represent the elements of the sequence.\n    patterns (list): A list of lists, where each inner list contains the colors that represent a sequence.\n\n    Returns:\n    bool: True if the sequence of colors follows the sequence given in the patterns array, False otherwise.\n    \"\"\"\n\n    # Define a helper function to check whether a pattern contains a given color\n    def check_pattern(pattern, color):\n        \"\"\"\n        Check whether a pattern contains a given color.\n\n        Parameters:\n        pattern (list): A list of colors that represent a sequence.\n        color (str): A color to check if it's in the pattern.\n\n        Returns:\n        bool: True if the color is in the pattern, False otherwise.\n        \"\"\"\n        return color in pattern\n\n    # Iterate through each pattern and check if it follows the sequence\n    for pattern in patterns:\n        if not check_pattern(colors, pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_length = len(patterns)\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i % pattern_length]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = colors[0]\n    for i in range(1, len(colors)):\n        if sequence == patterns[i]:\n            sequence = colors[i]\n        else:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        temp_list = test_list[i]\n        count = 0\n        for j in range(len(temp_list)):\n            if temp_list[j] % K == 0:\n                count += 1\n        if count == len(temp_list):\n            divisible_tuples.append(temp_list)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        all_divisible = True\n        for num in t:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    \n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples with all elements divisible by K from the given list of tuples\n    \"\"\"\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_list = []\n\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            filtered_list.append(tup)\n\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # Initialize an empty set to store the result\n    result = set()\n\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Check if the sum of all elements in the tuple is divisible by K\n        if sum(tup) % K == 0:\n            # Add the tuple to the result set\n            result.add(tup)\n\n    # Return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create a list to store the tuples that meet the condition\n    result = []\n    for i in test_list:\n        # Check if all the elements in the tuple are divisible by K\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if it is divisible by 11 and False otherwise.\n    '''\n    return n%11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        print(n, \"is divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \n    Returns True if the length of the word is odd, False otherwise.\n    '''\n    if len(s.split()[0]) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into individual words\n    for word in words:\n        if len(word) % 2!= 0:  # check if the length of the word is odd\n            return True  # if the length is odd, return True\n    return False  # if no odd length found, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Convert the word to lowercase\n        word = word.lower()\n\n        # Get the length of the word\n        length = len(word)\n\n        # Check if the length of the word is odd or even\n        if length % 2 == 0:\n            print(f\"{word} has an even length.\")\n        else:\n            print(f\"{word} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word, \"has an even length.\")\n        else:\n            print(word, \"has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, 'is odd.')\n        else:\n            print(word, 'is even.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() \n    for word in words: \n        if len(word) % 2 == 0: \n            print(word, \"is even length\") \n        else: \n            print(word, \"is odd length\") "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    word = s.split()[0]\n    length = len(word)\n    if length % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Calculate the value of n\n    n = n - 1\n    # Initialize the sum of tetrahedral numbers\n    sum_tetrahedral = 0\n    # Initialize the count of tetrahedral numbers\n    count_tetrahedral = 0\n    # Loop until count_tetrahedral equals n\n    while count_tetrahedral < n:\n        # Calculate the sum of tetrahedral numbers\n        sum_tetrahedral += (count_tetrahedral * (count_tetrahedral + 1) * (count_tetrahedral + 2) * (count_tetrahedral + 3))\n        # Increment the count of tetrahedral numbers\n        count_tetrahedral += 1\n    # Return the sum of tetrahedral numbers\n    return sum_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initializing the first three terms of the sequence\n    A = 1\n    B = 0\n    C = 1\n\n    # Looping till n terms are generated\n    for i in range(1, n+1):\n        # Adding the previous three terms of the sequence\n        D = A + B + C\n\n        # Updating the terms\n        A = B\n        B = C\n        C = D\n\n    # Returning the nth term of the sequence\n    return D"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    while n >= 1:\n        n -= 1\n        a, b, c, d = d, b, c, a + b + c + d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    result = 0\n    for i in range(n+1):\n        result += (1/3) * i**3\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (1 + 24 * n) // 6\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables to keep track of the number of tetrahedra found so far and the number of tetrahedra in the next number\n    tetrahedra_found = 0\n    next_tetrahedra = 0\n    \n    # Iterate through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of tetrahedra in the current number\n        num_tetrahedra = (i * (i - 1)) // 2\n        \n        # If there are more tetrahedra than the current number, increment the number of tetrahedra found by one\n        if num_tetrahedra > i:\n            tetrahedra_found += 1\n        \n        # If there are fewer tetrahedra than the current number, increment the next number by one\n        elif num_tetrahedra < i:\n            next_tetrahedra += 1\n    \n    # Add up the number of tetrahedra found and the next number to get the nth tetrahedral number\n    return tetrahedra_found + next_tetrahedra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Base case: 0th tetrahedral number is 1.\n    if n == 0:\n        return 1\n\n    # Base case: 1st tetrahedral number is 5.\n    if n == 1:\n        return 5\n\n    # Recursive case: formula for nth tetrahedral number is\n    # the sum of the (n-1)th and (n-2)th tetrahedral numbers.\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    num = 1\n    i = 1\n\n    # Loop through the number of terms\n    while i <= n:\n        # Check if current number is a tetrahedral number\n        if (num * (2 * num - 1)) == (4 * num - 3):\n            return num\n        # Increment current number and increment counter\n        num += 1\n        i += 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        return int(3*n*(n-1)*(n-2)) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    def nth_tetrahedron(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 14\n        else:\n            return nth_tetrahedron(n-1) + (n-1)*nth_tetrahedron(n-2) + n*nth_tetrahedron(n-3)\n\n    return nth_tetrahedron(n)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Use the formula V = 4/3 * \u03c0 * r^3\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 / 3 * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_temp in strr:\n        char += ord(char_temp)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the ASCII values of the characters of the string\n    ASCII_values = ''\n    \n    # loop through each character of the string\n    for char in strr:\n        # convert each character to its ASCII value and append it to the ASCII_values string\n        ASCII_values += str(ord(char))\n    \n    # convert the ASCII_values string to an integer and add 1 (to include the last character)\n    char_ASCII_value = int(ASCII_values) + 1\n    \n    # convert the character ASCII value to a character using the built-in chr() function\n    char = chr(char_ASCII_value)\n    \n    # return the character as the output of the function\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the character variable\n    char = ''\n\n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value to the character variable\n        char += chr(ascii_val)\n\n        # Add the ASCII value modulo 26 to the character variable\n        char += chr((ascii_val + 26) % 26 + 65)\n\n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    char_val %= 26\n    char_asc = chr(char_val + ord('a'))\n    return char_asc"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = 0\n    for char in strr:\n        sum_ASCII += ord(char)\n    return chr((sum_ASCII % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty list to store the ASCII values of characters in the string\n    ascii_values = []\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the list\n        ascii_values.append(ord(char))\n\n    # Initialize a variable to store the sum of ASCII values\n    sum_ascii = 0\n\n    # Iterate through each ASCII value in the list\n    for ascii_value in ascii_values:\n        # Add the ASCII value to the sum\n        sum_ascii += ascii_value\n\n    # Return the character made by adding the ASCII value of all characters in the string modulo 26\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the result\n    result = \"\"\n\n    # iterate through the characters of the string\n    for char in strr:\n        # convert the character to ASCII value\n        ascii_value = ord(char)\n\n        # add the ASCII value modulo 26 to the result\n        result += chr((ascii_value + ord('A')) % 26 + ord('A'))\n\n    # return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    sum_of_ascii = 0\n    for char in strr:\n        sum_of_ascii += ord(char)\n    return sum_of_ascii % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return ascii_value % 26"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n\n    for i in range(2, n + 1):\n        sequence[i] = (sequence[i - 1] + sequence[i - 2]) % 2\n\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 1\n    for i in range(2, n + 1):\n        a = (3 * a) % 26\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(2*sequence[i] + 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    a = 1\n    b = 2\n    while n > 0: \n        a, b = b, a + b\n        n -= 1\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1]  # initialize the sequence\n    for i in range(n-2):  # iterate n-2 times\n        next_sequence = [0] * (i+1)  # initialize the next sequence with zeros\n        for j in range(i+1):  # iterate i+1 times\n            if j == 0:  # the first element of the sequence is 1\n                next_sequence[j] = 1\n            elif j == i:  # the last element of the sequence is 1\n                next_sequence[j] = 1\n            else:  # the middle elements are alternating between 0 and 1\n                if sequence[j-1] % 2 == 0:  # if the previous element is even\n                    next_sequence[j] = 1\n                else:  # otherwise, it's odd\n                    next_sequence[j] = 0\n        sequence = next_sequence  # update the sequence with the next value\n    return sequence[-1]  # return the last element of the sequence, which is the nth number"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(sum(sequence[-1:]))\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        if sequence[i - 1] % 2 == 0:\n            sequence.append(sequence[i - 1] + sequence[i - 2])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 1\n    while count < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if sequence[i] == 0:\n                new_sequence.append(1)\n            else:\n                new_sequence.append(0)\n        sequence = new_sequence\n        count += 1\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2 # find surface area of sphere using formula for sphere surface area\n    return area # return surface area of sphere"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2  # Formula for surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = 4 * pi * r ** 2\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_number = 1\n    count = 1\n    while count <= n:\n        hex_number += 1\n        count += 1\n    centered_hex = hex_number - 1\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    # Convert the input to a float and check that it's an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    # Calculate the center point of the hexagon\n    center = 1/2 * n + 1/4\n    # Return the centered hexagonal number\n    return int(center * (center + 1))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n**2 + 2*n + 1) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (2 * n - 1)) // 6) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return centered_hexagonal_helper(n - 1) * 6 / 5\n    \n    return centered_hexagonal_helper(n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = n * (2 * n - 1)\n    centered_hexagonal_num = hexagonal_num // 2\n    return centered_hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to calculate the centered hexagonal number\n    def centered_hexagonal(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return centered_hexagonal(n-1) + centered_hexagonal(n-2) - centered_hexagonal(n-4)\n    \n    # Return the centered hexagonal number\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return (5 * (n-1) ** 2) // 2 + n - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon_base = (2 * n) ** 0.5\n    centered_hexagon = 6 * hexagon_base ** 2 - 6 * n\n    return centered_hexagon"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    hex_num = 2 * n + 1\n    # find the number of digits in hex_num\n    num_digits = len(str(hex_num))\n    # calculate the width of the hexagon based on the number of digits\n    hexagon_width = num_digits * 2 + 1\n    # calculate the center of the hexagon based on the number of digits\n    center_of_hexagon = hexagon_width // 2\n    # print the centered hexagon\n    print('#' * hexagon_width)\n    # print spaces between the numbers to center the hexagon\n    print(''* (center_of_hexagon - 1) + str(hex_num) +'' * (center_of_hexagon - 1))\n    # print the sides of the hexagon\n    for i in range(1, center_of_hexagon + 1):\n        print('#' * (2 * i - 1))\n    print('#' * hexagon_width)\n    # print the base of the hexagon\n    for i in range(1, center_of_hexagon + 1):\n        print('#' * i +'' + '#' * (center_of_hexagon - 2 * i + 1))\n    print('#' * hexagon_width)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2:\n            merged_dict[key] = [dict1[key], dict2[key]]\n        elif key in dict3:\n            merged_dict[key] = [dict1[key], dict3[key]]\n        else:\n            merged_dict[key] = [dict1[key]]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    \n    # Iterate over the keys of the three dictionaries\n    for key in dict1.keys():\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If it does, add the values of the three dictionaries\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        else:\n            # If it doesn't, simply add the key and the value of the first dictionary\n            merged_dict[key] = dict1[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    \n    # merge the first two dictionaries\n    for key in dict1.keys():\n        if key in dict2.keys():\n            merged_dict[key] = dict1[key]\n            merged_dict[key].update(dict2[key])\n        else:\n            merged_dict[key] = dict1[key]\n    \n    # merge the third dictionary with the merged first two dictionaries\n    for key in dict3.keys():\n        if key in merged_dict.keys():\n            merged_dict[key].update(dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n\n    # Iterate through the dictionaries and add their items to the merged dictionary\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): The first dictionary to be merged.\n    dict2 (dict): The second dictionary to be merged.\n    dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n    dict: A merged dictionary with the three input dictionaries merged together.\n\n    \"\"\"\n    # Merge the two dictionaries into one\n    merged_dict = ct.ChainMap(dict1, dict2)\n    \n    # Merge the merged dictionary with the third dictionary\n    final_dict = ct.ChainMap(merged_dict, dict3)\n    \n    return final_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for num in list1:\n        freq_dict[num] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create a dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n\n    # iterate over the list and update the frequency dictionary\n    for item in list1:\n        freq[item] += 1\n\n    # return the final frequency dictionary\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    min_n = n\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(i - n)\n        if diff < min_diff:\n            min_diff = diff\n            min_n = i\n    print(\"The closest smaller number to\", n, \"is\", min_n)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(2, int(N**0.5)+1):\n        if i > N:\n            break\n        if i**2 < N:\n            smallest = i\n        else:\n            break\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = N\n    for i in range(1, N):\n        if N-i < closest:\n            closest = N-i\n        elif i-N < closest:\n            closest = i-N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # get the minimum and maximum numbers in the range\n    min_num = min(N)\n    max_num = max(N)\n    \n    # calculate the difference between the minimum and maximum numbers\n    diff = max_num - min_num\n    \n    # initialize the closest number to the maximum number\n    closest = max_num\n    \n    # loop through the range and find the closest smaller number\n    for num in range(min_num, max_num+1):\n        if num < min_num or abs(num-closest) < abs(min_num-closest):\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 2\n        elif n == 5:\n            return 3\n        elif n == 6:\n            return 2\n        elif n == 7:\n            return 3\n        elif n == 8:\n            return 4\n        elif n == 9:\n            return 3\n        elif n == 10:\n            return 4\n        elif n == 11:\n            return 5\n        elif n == 12:\n            return 4\n        elif n == 13:\n            return 5\n        elif n == 14:\n            return 6\n        elif n == 15:\n            return 5\n        elif n == 16:\n            return 6\n        elif n == 17:\n            return 7\n        elif n == 18:\n            return 6\n        elif n == 19:\n            return 7\n        elif n == 20:\n            return 8\n        elif n == 21:\n            return 7\n        elif n == 22:\n            return 8\n        elif n == 23:\n            return 9\n        elif n == 24:\n            return 8\n        elif n == 25:\n            return 9\n        elif n == 26:\n            return 10\n        elif n == 27:\n            return 9\n        elif n == 28:\n            return 10\n        elif n == 29:\n            return 11\n        elif n == 30:\n            return 10\n        elif n == 31:\n            return 11\n        elif n == 32:\n            return 12\n        elif n == 33:\n            return 11\n        elif n == 34:\n            return 12\n        elif n == 35:\n            return 13\n        elif n == 36:\n            return 12\n        elif n == 37:\n            return 13\n        elif n == 38:\n            return 14\n        elif n == 39:\n            return 13\n        elif n == 40:\n            return 14\n        elif n == 41:\n            return 15\n        elif n == 42:\n            return 14\n        elif n == 43:\n            return 15\n        elif n == 44:\n            return 16\n        elif n == 45:\n            return 15\n        elif n == 46:\n            return 16\n        elif n == 47:\n            return 17\n        elif n == 48:\n            return 16\n        elif n == 49:\n            return 17\n        elif n == 50:\n            return 18\n        elif n == 51:\n            return 17\n        elif n == 52:\n            return 18\n        elif n == 53:\n            return 19\n        elif n == 54:\n            return 18\n        elif n == 55:\n            return 19\n        elif n == 56:\n            return 20\n        elif n == 57:\n            return 19\n        elif n == 58:\n            return 20\n        elif n == 59:\n            return 21\n        elif n == 60:\n            return 20\n        elif n == 61:\n            return 21\n        elif n == 62:\n            return 22\n        elif n == 63:\n            return 21\n        elif n == 64:\n            return 22\n        elif n == 65:\n            return 23\n        elif n == 66:\n            return 22\n        elif n == 67:\n            return 23\n        elif n == 68:\n            return 24\n        elif n == 69:\n            return 23\n        elif n == 70:\n            return 24\n        elif n == 71:\n            return 25\n        elif n == 72:\n            return 24\n        elif n == 73:\n            return 25\n        elif n == 74:\n            return 26\n        elif n == 75:\n            return 25\n        elif n == 76:\n            return 26\n        elif n == 77:\n            return 27\n        elif n == 7"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    # get the absolute difference between the input and the maximum value\n    diff = abs(N - float('inf'))\n    # loop through all the numbers less than the input\n    for i in range(N):\n        # calculate the difference between the input and the current number\n        current_diff = abs(N - i)\n        # if the current difference is smaller, update the difference and the closest number\n        if current_diff < diff:\n            diff = current_diff\n            closest_num = i\n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the smallest number greater than or equal to N\n    smallest = min(range(N, 0, -1))\n    # Find the smallest number smaller than N\n    smallest_less_than_N = max(range(N, smallest))\n    # Return the smaller number\n    return min(smallest_less_than_N, smallest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    diff = float('inf')\n\n    for num in range(1, N):\n        if abs(num - N) < diff:\n            diff = abs(num - N)\n            min_num = num\n\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        if num < N:\n            return num\n        elif num > N:\n            return N\n        else:\n            num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    smallest_num = N\n    closest_smaller_num = N\n\n    # loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # if current number is smaller than smallest number so far, update smallest number and closest smaller number\n        if num < smallest_num:\n            smallest_num = num\n            closest_smaller_num = smallest_num - 1\n        # if current number is between smallest number and closest smaller number, update closest smaller number\n        elif smallest_num - 1 < num < smallest_num:\n            closest_smaller_num = num\n\n    # return closest smaller number\n    return closest_smaller_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    word = ''\n    # loop through each word in the list\n    for word in list1:\n        # check if the length of the current word is greater than the current max_len\n        if len(word) > max_len:\n            # update max_len and word\n            max_len = len(word)\n            word = word\n    # return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize max_length to zero\n    max_length = 0\n\n    # Iterate through each word in the list\n    for word in list1:\n        # Find the length of the current word\n        length = len(word)\n\n        # Update max_length if the current word is longer\n        if length > max_length:\n            max_length = length\n\n    # Return the value of max_length\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is a perfect square\n    if n == int(n**0.5**2):\n        # calculate the number of digits in the square root\n        num_digits = len(str(int(n**0.5**2)))\n        # check whether the number of digits is even or odd\n        if num_digits % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 1 or n > 100:\n        return \"Invalid input\"\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return \"Not undulating\"\n        return \"Undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if the number is \n    undulating and False otherwise. A number is undulating if it has at least \n    two factors greater than 1.\n    '''\n    factors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.add(i)\n    return len(factors) >= 2"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if n is undulating, else False.\n    An undulating number is a number whose sum of its digits is equal to the original number.\n    For example, 16 is undulating, because 1+6=7.\n    '''\n    if n < 10:\n        return True\n    else:\n        digits_sum = sum(int(digit) for digit in str(n))\n        if digits_sum == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return not is_undulating((n - 1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is an odd number.\")\n        return False\n    else:\n        print(n, \"is an even number.\")\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n < 1:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return True\n    elif n % 7 == 0:\n        return True\n    elif n % 11 == 0:\n        return True\n    elif n % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:  # even number\n        return True\n    elif n == 1:  # single digit number\n        return True\n    elif n == 2 or n == 3:  # double digits or triple digits\n        return False\n    elif n > 3:  # triple digits or more\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n    else:  # n < 2\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        a = 1/a\n        b = -b\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b = b // 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Use a lambda function to extract the second value of each tuple\n    second_value = lambda x: x[1]\n    # Use the built-in min() function to find the index of the minimum second value\n    return min(range(len(test_list)), key=second_value)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the first value of the tuple with the smallest second value\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_val = test_list[0][1]\n    for i, (val1, val2) in enumerate(test_list[1:], 1):\n        if val2 < min_val:\n            min_val = val2\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the tuple with the smallest second element\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    # Sort the list of tuples by the second value in ascending order\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple (since we sorted the list based on the second value)\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(0,1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    for index, tup in enumerate(test_list):\n        if tup[1] < test_list[min_index][1]:\n            min_index = index\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n\n    # loop through each list in the list of lists\n    for sublist in lst:\n        # loop through each item in the list\n        for item in sublist:\n            # check if the current item's length is less than the current minimum\n            if len(str(item)) < min_length:\n                # update the minimum length\n                min_length = len(str(item))\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000  # assuming all lists have at least 1000 elements\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n\n    # Initialize the minimum length variable with the value of the first list in the list of lists\n    min_len = len(lst[0])\n\n    # Iterate through the list of lists to find the minimum length\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the length of the smallest list to infinity\n    min_length = float('inf')\n\n    # loop through each element in the list\n    for i in lst:\n        # loop through each sublist in the element\n        for j in i:\n            # check if the length of the sublist is less than the current minimum length\n            if len(j) < min_length:\n                # update the minimum length to the length of the sublist\n                min_length = len(j)\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list of lists.\n\n    Parameters:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list in the list of lists.\n    \"\"\"\n    # Find the length of the smallest list in the list of lists\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the minimum length of the list\n    min_length = lst[0][0]\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Compare the length of the sublist to the current minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the minimum length of the list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as an argument and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through all the numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n\n        # If n is divisible by i, add 1 to count\n        if n % i == 0:\n            count += 1\n\n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    else:\n        count = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                count += 2\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            div += 1\n    return div"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Traverse through each element in the list\n    for i in list1:\n        # Check if the element is already in the dictionary\n        if i in freq:\n            # Increment the frequency of the element by 1\n            freq[i] += 1\n        else:\n            # Otherwise, add the element to the dictionary with a frequency of 1\n            freq[i] = 1\n\n    # Return the final dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # If the item is a list, recursively call the function on it\n        if type(item) == list:\n            # Recursively find the frequency of the elements in the sublist\n            subfreq = frequency_lists(item)\n            # Add the sublist's frequency to the main dictionary\n            for key, value in subfreq.items():\n                if key in freq:\n                    freq[key] += value\n                else:\n                    freq[key] = value\n        # If the item is not a list, increment its frequency in the main dictionary\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    \n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through the flattened list of lists\n    for item in list1:\n        # If the item is not already in the dictionary, add it with a frequency of 1\n        if item not in freq:\n            freq[item] = 1\n        # If the item is already in the dictionary, increment its frequency by 1\n        else:\n            freq[item] += 1\n\n    # Return the dictionary of frequency of each element in the list\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create a dictionary to store frequency of each element in the flattened list\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n\n        # If the element is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    frequency = {}\n    for element in list1:\n        for sub_element in element:\n            if sub_element in frequency:\n                frequency[sub_element] += 1\n            else:\n                frequency[sub_element] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list and divide by the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for number in numbers:  \n        result *= number  \n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n\n    for num in numbers:\n        result *= num\n\n    result //= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    \n    # Iterate through each bit of the decimal number and append the corresponding binary digit to the string\n    while n > 0: \n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    \n    # Remove any leading zeros from the string\n    while binary_str.startswith(\"0\") and len(binary_str) > 1: \n        binary_str = binary_str[1:]\n        \n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n    # Remove leading zeros from the binary string\n    while binary_str.startswith('0') and len(binary_str) > 1:\n        binary_str = binary_str[1:]\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using bitwise operations\n    binary = bin(n)[2:]\n    \n    # Remove leading zeros\n    binary = binary.lstrip('0')\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary using recursion\n    def decimal_to_binary_helper(n, result):\n        if n == 0:\n            return result\n        else:\n            # Append the remainder of n divided by 2 to the result string\n            remainder = n % 2\n            result += str(remainder)\n            # Remove the last digit from n and recursively call the helper function with updated n and result\n            n //= 2\n            decimal_to_binary_helper(n, result)\n\n    # Call the helper function with initial n and empty result\n    binary_str = decimal_to_binary_helper(n, '')\n\n    # Remove leading zeros from the binary string\n    while binary_str.startswith('0'):\n        binary_str = binary_str[1:]\n\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case: if n is 0, return 0\n    if n == 0:\n        return '0'\n    # base case: if n has only 1 digit, return n itself as a binary string\n    if n < 10:\n        return str(n)\n    # recursive case: convert the last digit of n to binary recursively\n    last_digit = n % 2\n    # convert the rest of the number to binary recursively\n    rest_of_number = n // 2\n    # prepend the last digit to the rest of the binary string\n    binary_string = str(last_digit) + rest_of_number\n    # remove leading zeros from the binary string\n    while binary_string[0] == '0':\n        binary_string = binary_string[1:]\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary recursively\n    def decimal_to_binary_helper(num, binary):\n        if num == 0:\n            return binary\n        elif num % 2 == 0:\n            return decimal_to_binary_helper(num//2, binary + '0')\n        else:\n            return decimal_to_binary_helper(num//2, binary + '1')\n\n    # Convert decimal to binary string\n    binary = decimal_to_binary_helper(n, '')\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize variables\n    binary = ''\n    \n    # loop through each digit of the decimal number and append it to the binary string\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    # remove leading zeros from the binary string\n    while binary.startswith('0'):\n        binary = binary[1:]\n    \n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal number to binary\n    binary = ''\n    while n > 0:\n        rem = n % 2\n        n = n // 2\n        binary = str(rem) + binary\n\n    # Remove leading zeros\n    while binary.startswith('0'):\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to hold the binary equivalent\n    binary = \"\"\n\n    # loop through the digits of the decimal number\n    while n > 0:\n        # calculate the remainder of n divided by 2 and append it to binary\n        binary = str(n % 2) + binary\n        # discard the last digit of n (since it has already been appended)\n        n //= 2\n\n    # return the binary equivalent as a string with no leading zeros\n    return binary if binary!= '0' else binary.strip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of the input integer.\n    \"\"\"\n    # Convert the input integer to a string\n    input_str = str(num)\n    # Check if the first character is 0 or a 1 digit number\n    if input_str[0] == '0' or len(input_str) == 1:\n        # If it is, add 1 to the string and convert it back to an integer\n        next_str = str(int(input_str) + 1)\n        # Add 9 to the last character of the string\n        next_str = next_str[:-1] + str(int(next_str[-1]) + 9)\n        # Convert the next string to an integer and return it\n        return int(next_str)\n    else:\n        # If not, return the original integer\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    '''\n    Returns True if the number is palindrome, False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not is_palindrome(num):\n        num -= 1\n        while not is_palindrome(num):\n            num -= 1\n        return num\n    else:\n        return num + 1\n\nif __name__ == '__main__':\n    try:\n        num = int(input(\"Enter a number: \"))\n        result = next_smallest_palindrome(num)\n        print(\"The next smallest palindrome of\", num, \"is\", result)\n    except ValueError:\n        print(\"Invalid input. Please enter an integer.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    # Convert the integer to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Check if the original and reversed string are equal\n    return num == int(reversed_num)\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, return the number itself\n        return num\n\n    # Find the smallest number that is greater than the specified number\n    smallest_greater_than_num = num + 1\n    while not is_palindrome(smallest_greater_than_num):\n        smallest_greater_than_num += 1\n\n    # Find the next smallest palindrome greater than the specified number\n    next_smallest_palindrome = smallest_greater_than_num + 1\n    while not is_palindrome(next_smallest_palindrome):\n        next_smallest_palindrome += 1\n\n    # Return the next smallest palindrome\n    return next_smallest_palindrome - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Create a list of all possible palindromes of length num\n    palindromes = []\n    for i in range(10**(num-1), 10**(num-1)+10**num):\n        for j in range(i, i+10**num):\n            palindromes.append(str(j))\n\n    # Find the smallest palindrome that comes after the specified number\n    for i in range(len(palindromes)):\n        if int(palindromes[i]) > num:\n            return int(palindromes[i])"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Find the largest palindrome smaller than or equal to the given number\n    max_palindrome = 0\n    for i in range(10**num, 10**(num+1)):\n        if is_palindrome(i):\n            max_palindrome = i\n            break\n\n    # Find the next smallest palindrome greater than max_palindrome\n    next_palindrome = 1\n    while True:\n        if is_palindrome(next_palindrome) and next_palindrome > max_palindrome:\n            return next_palindrome\n        next_palindrome += 1\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given integer is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Compare the original number with its reversed version\n    return num == int(reversed_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # find the next smallest positive integer greater than num\n    i = num + 1\n    while True:\n        if is_palindrome(i):\n            return i\n        i += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = []\n    for i in range(10):\n        digits.append(i)\n    digits.append(0)\n    digits.append(1)\n\n    for i in range(1, num):\n        for j in range(len(digits)):\n            if digits[j] > i:\n                digits[j] = 0\n                break\n            elif digits[j] == i:\n                digits[j] += 1\n                break\n\n    result = int(''.join(map(str, digits)))\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        next_num = (num * 10) + 1\n        if is_palindrome(next_num):\n            return next_num\n        num += 1\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the largest palindrome less than or equal to the input number\n    max_palindrome = 0\n    for i in range(10, num-1, -1):\n        for j in range(10, num-1, -1):\n            palindrome = i*1000 + j\n            if palindrome <= num and palindrome > max_palindrome:\n                max_palindrome = palindrome\n    return max_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    def is_valid_palindrome(n):\n        if n > 10**6:\n            return True\n        if n < 10:\n            return True\n        s = str(n)\n        return s[0] == '0' or s[-1] == '0' or s[1:-1] == s[1:-1][::-1]\n    \n    if is_valid_palindrome(num):\n        return next_smallest_palindrome(num + 1)\n    \n    n = num - 1\n    while not is_valid_palindrome(n):\n        n -= 1\n        \n    return n + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[right - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Find the middle index of the array\n    middle = len(arr) // 2\n    \n    # If the middle index is equal to k, return the element at k-1\n    if k == middle + 1:\n        return arr[k-1]\n    \n    # If the middle index is less than k, search in the right half of the array\n    if k < middle + 1:\n        return kth_element(arr[:middle], k)\n    \n    # If the middle index is greater than k, search in the left half of the array\n    return kth_element(arr[middle:], k-middle-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is 1 or less\n    if k <= 0:\n        return None\n    \n    # check if k is greater than the length of the array\n    if k > len(arr):\n        return None\n    \n    # iterate through the array and count the number of elements smaller than the kth element\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < k:\n            count += 1\n        \n        # if we have found the kth element, return it\n        if count == k - 1:\n            return arr[i]\n    \n    # if we have not found the kth element, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Get the length of the array\n    n = len(arr)\n    # Initialize two variables for the left and right pointers\n    left = 1\n    right = n\n    # Loop until the left pointer reaches the middle of the array\n    while left <= right:\n        # Get the middle index\n        mid = (left + right) // 2\n        # If the mid element is equal to k-1, return it\n        if arr[mid] == k - 1:\n            return mid\n        # If the mid element is less than k-1, move the left pointer to the right\n        elif arr[mid] < k - 1:\n            left = mid + 1\n        # If the mid element is greater than k-1, move the right pointer to the left\n        else:\n            right = mid - 1\n    # If the left pointer has not been reached, the kth element is not in the array\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Initialize the current index and the count\n    current = 0\n    count = 0\n    \n    # Traverse the array and check if the current index equals k\n    while count < k:\n        if arr[current - 1] == arr[current]:\n            count += 1\n        current += 1\n    \n    # Return the kth element if it exists, else return None\n    if count == k:\n        return arr[current - 1]\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array has at least one element\n    if not arr:\n        return None\n    # Find the length of the array\n    n = len(arr)\n    # Check if k is within the bounds of the array\n    if k < 1 or k > n:\n        return None\n    # Check if k is the smallest element in the array\n    elif k == 1:\n        return arr[0]\n    # Otherwise, divide the array in half and recursively find the kth element in each half\n    else:\n        mid = n // 2\n        left = kth_element(arr[:mid], k)\n        right = kth_element(arr[mid:], k-mid)\n        return left if left is not None else right"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    # Find the middle index\n    mid = len(arr) // 2\n    \n    # If the middle element is the kth element, return it\n    if k == mid + 1:\n        return arr[k-1]\n    \n    # If the kth element is in the left half of the array, search in the left half recursively\n    elif k < mid + 1:\n        return kth_element(arr[:mid], k)\n    \n    # If the kth element is in the right half of the array, search in the right half recursively\n    else:\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i, char in enumerate(word):\n        if i == 0 and char.isupper():\n            result += char.lower()\n        elif char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in word_list]\n    # Join the words back into a string\n    camel_case_string = ''.join(camel_case)\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    first_letter = word[0].upper()\n    rest_of_word = word[1:].lower()\n    return first_letter + rest_of_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    # Convert the word to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first letter to upper case\n    first_letter = word[0].upper()\n    # Remove the first underscore from the word\n    word = word[1:]\n    # Convert the rest of the words to lower case and capitalize the first letter\n    camel_case_word = first_letter + word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    capitalize = True\n    camel_word = \"\"\n    for part in parts:\n        if capitalize:\n            camel_word += part.capitalize()\n            capitalize = False\n        else:\n            camel_word += part\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel += char.lower()\n        else:\n            camel += char\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_words = []\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_words.append(word.capitalize())\n        else:\n            camel_words.append(word.capitalize())\n    camel_case_word = \"\".join(camel_words)\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Function to calculate the sum of a(n, m) up to n terms\n    def sum_a_n_terms(n, m):\n        return n * (n + 1) // 2 * (m + 1) // 2\n\n    # Function to calculate the sum of a(n, m) up to n^2 terms\n    def sum_a_n_n_terms(n, m):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # Function to check if the sum of a(n, m) up to n terms is even\n    def is_even(sum_n_terms):\n        return sum_n_terms % 2 == 0\n\n    # Function to check if the sum of a(n, m) up to n^2 terms is even\n    def is_even_n_n_terms(sum_n_n_terms):\n        return sum_n_n_terms % 2 == 0\n\n    # Calculate the sum of a(n, m) up to n^2 terms\n    n_n_terms = sum_a_n_n_terms(n, m)\n\n    # Check if the sum of a(n, m) up to n terms is even\n    if is_even(n_n_terms):\n        # Calculate the sum of a(n, m) up to n terms\n        n_terms = sum_a_n_terms(n, m)\n\n        # Check if the sum of a(n, m) up to n^2 terms is even\n        if is_even_n_n_terms(n_n_terms):\n            print(\"Eulerian number:\", n_terms)\n        else:\n            print(\"a(n, m) up to n terms is even, but not a(n, m) up to n^2 terms\")\n    else:\n        print(\"a(n, m) up to n terms is odd, but not a(n, m) up to n^2 terms\")"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence\n    fib_sum = sum([1] * (n + 1))\n\n    # Calculate the maximum value of n that satisfies the condition\n    max_n = fib_sum // m\n\n    # Calculate the Eulerian number a(n, m)\n    eulerian_num = (max_n + 1) * (n // max_n)\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array to 0\n    a = [0] * (n+1)\n\n    # Initialize the maximum count to 0\n    max_count = 0\n\n    # Iterate through all possible values of n\n    for i in range(1, n+1):\n        # Initialize the current count to 1\n        count = 1\n\n        # Iterate through all possible values of m\n        for j in range(1, m+1):\n            # Add the value of the Eulerian number (i, j) to the current count\n            count += a[(i-1) % n] + a[(j-1) % n]\n\n            # Update the maximum count if the current count is greater\n            if count > max_count:\n                max_count = count\n\n        # Update the array with the current count\n        a[i] = count\n\n    # Return the maximum count\n    return max_count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a function to check if a number is prime \n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, num): \n            if num % i == 0: \n                return False \n        return True \n\n    # Define a function to calculate a(n, m) \n    def a_n_m(n, m): \n        if n == 1: \n            return (m + 1) * 1.0 / 2 \n        elif m == 1: \n            return (n + 1) * 1.0 / 2 \n        else: \n            if is_prime(n): \n                return a_n_m(n-1, m) * (1.0 / n) \n            else: \n                return a_n_m(n, m-1) * (1.0 / m) \n\n    return a_n_m(n, m) "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the matrix\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the first sub-matrix\n    matrix[1][1] = 1\n\n    # Fill the remaining elements of the matrix\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1]\n\n    # Return the last element of the last row of the matrix\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for j in range(n+1)] for i in range(m+1)]\n    a[0][0] = 1\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i == j:\n                a[i][j] = 2*a[i-1][j-1]\n            else:\n                a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n                \n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the grid with zeros\n    grid = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the grid with values\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            grid[i][j] = i * j\n\n    # Calculate the Eulerian number using the Floyd-Warshall algorithm\n    for k in range(1, m + 1):\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if grid[i][j] == 0:\n                    continue\n                if grid[i][k]!= 0 and grid[k][j]!= 0:\n                    grid[i][j] += grid[i][k] + grid[k][j]\n\n    # Return the last value in the grid\n    return grid[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Find all possible paths from (0, 0) to (n, m) \n    paths = []\n    for i in range(n+1):\n        for j in range(m+1):\n            paths.append((i, j))\n    # Calculate the number of paths that visit every cell \n    count = 0\n    for path in paths:\n        count += 1\n        i, j = path\n        for k in range(i+1):\n            for l in range(j+1):\n                if (k, l) in paths:\n                    count -= 1\n    # Return the Eulerian number a(n, m)\n    return (count + 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Calculate the value of a(n, m) using a recurrence relation\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n\n    elif n == 2:\n        return m*m*m + n*n*n + 1\n    elif m == 2:\n        return n*n*n + m*m*m + 1\n\n    # Calculate the value of a(n, m) using the formula for binomial coefficients\n    else:\n        return (n*m*(n-1)*(m-1))//(m*n-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define the function\n    def partition(n, m):\n        # Initialize the variables\n        num_ways = 0\n        i = 0\n\n        # Iterate through the numbers from 1 to m\n        while i <= m:\n            # Check if the sum of the numbers in each set is equal to n\n            if (m + i) % n == 0:\n                # Increment the number of ways\n                num_ways += 1\n            i += 1\n\n        return num_ways\n\n    # Call the function\n    result = partition(n, m)\n\n    return result"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # use a for loop to iterate over each sublist of the input list\n    for sublist in input_list:\n        # use the sort() method to sort the sublist in place\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Convert the sublist to a list of strings\n        sublist = [str(x) for x in sublist]\n        # Sort the list of strings\n        sublist.sort()\n        # Convert the sorted list back to a list of integers\n        sublist = [int(x) for x in sublist]\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sublist"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of both lists.\n    \"\"\"\n    new_list = list1 + list2\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    new_list.extend(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the tuple with the list\n    test_tuple = test_tuple + test_list\n    # Return the new tuple\n    return test_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the lists using the `+` operator\n    new_list = test_list + test_tup\n    \n    # Return the new list as a tuple\n    return tuple(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the given list to a tuple\n    test_tup = tuple(test_list)\n    # append the given list to the given tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    all_nums = num1 + num2 + num3\n\n    # Use heapq to sort the combined list\n    heapq.heapify(all_nums)\n    sorted_nums = []\n\n    # Extract elements from the heap and add them to the sorted list\n    while len(sorted_nums) < len(all_nums):\n        sorted_nums.append(heapq.heappop(all_nums))\n\n    return sorted_nums"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates.\n    set1 = set(num1)\n    set2 = set(num2)\n    set3 = set(num3)\n\n    # Merge the sets into a single list.\n    merged_list = list(set1.union(set2).union(set3))\n\n    # Sort the merged list in ascending order.\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge first two lists\n    merged_list = merge_lists(num1, num2)\n\n    # Merge the merged list with the third list\n    return merge_lists(merged_list, num3)\n\ndef merge_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # create a min heap for each list\n    min_heap1 = []\n    min_heap2 = []\n    min_heap3 = []\n\n    # insert elements into the min heaps\n    for num in num1:\n        heapq.heappush(min_heap1, num)\n    for num in num2:\n        heapq.heappush(min_heap2, num)\n    for num in num3:\n        heapq.heappush(min_heap3, num)\n\n    # merge the heaps into a single sorted list\n    merged_list = []\n    while min_heap1 and min_heap2 and min_heap3:\n        # get the smallest element from each min heap\n        num1 = heapq.heappop(min_heap1)\n        num2 = heapq.heappop(min_heap2)\n        num3 = heapq.heappop(min_heap3)\n\n        # add the smallest element to the merged list\n        merged_list.append(min(num1, num2, num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list using heapq module\n    heapq.heapify(combined_list)\n    \n    # Extract the sorted elements from the heap and return them as a list\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the elements in the input lists\n    merged_list = num1 + num2 + num3\n    # Use heapq to sort the list in ascending order\n    heapq.heapify(merged_list)\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the first two lists\n    merged = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged.append(num1[i])\n            i += 1\n        else:\n            merged.append(num2[j])\n            j += 1\n\n    # Merge the remaining elements from each list\n    while i < len(num1):\n        merged.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged.append(num2[j])\n        j += 1\n\n    # Merge the remaining elements from the third list\n    for i in range(len(num3)):\n        merged.append(num3[i])\n\n    # Return the merged list\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list in ascending order using heapq module\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    # convert the list to a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    # convert the min heap back to a list and return it\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    # Remove duplicates\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    binary_str = bin(int(s))[2:]\n    for i in range(n):\n        binary_str = binary_str[-len(binary_str):] + binary_str[:len(binary_str)-1]\n    for i in range(len(binary_str)):\n        if int(binary_str[i]) % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # check if the given string is valid or not\n    if len(s) % 2!= 0:\n        return \"Invalid string\"\n\n    # create a list of binary digits\n    binary_digits = [int(x) for x in s]\n\n    # rotate the binary digits the given number of times\n    for i in range(n):\n        binary_digits.append(binary_digits.pop(0))\n\n    # find the number of odd digits in the rotated binary string\n    count = 0\n    for digit in binary_digits:\n        if digit % 2!= 0:\n            count += 1\n\n    # return the count of odd digits in the rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    s = list(s)  # Convert the binary string to a list of characters\n    for i in range(n):\n        s.append(s.pop(0))  # Rotate the string n times\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes in a binary string and a number n and returns the number of odd values that can be obtained by rotating the string n times.\n\n    Example: \n    >>> odd_Equivalent('101010', 2)\n    2\n    '''\n\n    # Convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n\n    # Initialize a counter for the odd values\n    count = 0\n\n    # Iterate over the list of digits n times\n    for _ in range(n):\n\n        # Reverse the list of digits\n        binary_list = binary_list[::-1]\n\n        # Iterate over the list of digits and count the odd values\n        for digit in binary_list:\n            if digit % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s = s[::-1]\n        odd_count += s.count('1')\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # initialize the count variable to 0\n    count = 0\n    \n    # convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n    \n    # rotate the list by n positions to the left\n    rotated_list = binary_list[n:] + binary_list[:n]\n    \n    # iterate through the rotated list and count the odd numbers\n    for num in rotated_list:\n        if num % 2!= 0:\n            count += 1\n    \n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n as input, and returns the number of odd equivalents of the binary string s that are obtained by rotating it the given number of times.\n\n    The odd equivalents are the numbers obtained by rotating the binary string s by any number of 90 degrees clockwise rotations.\n\n    For example, if s = \"11010\" and n = 2, then the odd equivalents are 2, 6, 4, 12, 14, 10, 13, 11, 5, 8, 3, 7, and 1.\n\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Create a list of integers representing the binary string s\n    binary_list = [int(i) for i in s]\n\n    # Iterate n times\n    for i in range(n):\n\n        # Create a new list containing the rotated binary string\n        rotated_binary_list = [int(j) for j in str(binary_list[-1])] + binary_list[:-1]\n\n        # Count the number of odd numbers in the rotated binary string\n        for j in rotated_binary_list:\n            if j % 2!= 0:\n                count += 1\n\n        # Reverse the binary string list\n        binary_list = binary_list[::-1]\n\n    # Return the count of odd equivalents\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    This function takes a binary string s and a number n as input and returns the number of odd numbers in the rotated binary string after rotating it n times.\n    '''\n\n    # Convert the binary string to a list of binary digits\n    digits = list(bin(int(s, 2))[2:])\n\n    # Reverse the list\n    digits.reverse()\n\n    # Initialize a counter to keep track of the odd numbers\n    count = 0\n\n    # Iterate through the reversed list and check if the current digit is odd\n    for digit in digits:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    # Return the number of odd numbers in the rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to a list of characters\n    s_list = list(s)\n\n    # Initialize a variable to store the number of odd numbers\n    odd_count = 0\n\n    # Loop through the list of characters n times\n    for i in range(n):\n        # Reverse the list of characters\n        s_list = s_list[::-1]\n\n        # Initialize a variable to store the current odd count\n        current_count = 0\n\n        # Loop through the list of characters\n        for j in range(len(s_list)):\n            # If the current character is odd, increment the count\n            if int(s_list[j]) % 2 == 1:\n                current_count += 1\n\n        # Add the current count to the total count\n        odd_count += current_count\n\n    # Return the total odd count\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    common_elements.remove(nestedlist[i][j][k])\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        for elem in sublist:\n            if elem in common:\n                continue\n            else:\n                common.append(elem)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # convert nested list to set to remove duplicates\n    flatlist = set(sum(nestedlist, []))\n    # find common elements in flatlist\n    common = set()\n    for item in flatlist:\n        if all(x == item for sublist in nestedlist for x in sublist):\n            common.add(item)\n    return sorted(list(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize a set to store the common elements\n    common_elements = set()\n\n    # Iterate through each nested list\n    for lst in nestedlist:\n        # Iterate through each element in the list\n        for elem in lst:\n            # If the element is a common element, add it to the set\n            if elem in common_elements:\n                common_elements.remove(elem)\n            else:\n                common_elements.add(elem)\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # If the element is already in the common set, add it to the result set\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Loop through each element in the nested list\n        for elem in sublist:\n            # If the element is not already in the dictionary, add it\n            if elem not in common_dict:\n                common_dict[elem] = 1\n            # Otherwise, increment its count by 1\n            else:\n                common_dict[elem] += 1\n\n    # Loop through the dictionary keys and add them to the final list if their count is 1\n    result = []\n    for key, value in common_dict.items():\n        if value == 1:\n            result.append(key)\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store common elements\n    common = set()\n\n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the elements in the sublist\n        for element in sublist:\n            # If the element is already in the set, add it to the common set\n            if element in common:\n                common.add(element)\n            # Else, add the element to the set\n            else:\n                common.add(element)\n\n    # Return the common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    first_list = nestedlist[0]\n    result = []\n    for item in first_list:\n        if item in result:\n            continue\n        if all(item in sublist for sublist in nestedlist[1:]):\n            result.append(item)\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each list in the nested list\n    for list in nestedlist:\n        # Loop through each element in the list\n        for element in list:\n            # If the element is already in the set, add it to the common set\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Define a regular expression pattern to match integers\n    pattern = r'\\d+'\n\n    # Use the re.search() function to search for a match between the pattern and the text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    It returns True if the string represents an integer, False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(not dict1 for dict1 in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty list to store the integers\n    int_list = []\n    # loop through each number in the tuple\n    for num in nums:\n        # check if the number is an integer\n        if isinstance(num, int):\n            # if it is, add it to the list of integers\n            int_list.append(num)\n        # if the number is not an integer, raise an error\n        else:\n            raise TypeError(\"All elements in the tuple must be integers.\")\n    # if the list of integers is empty, raise an error\n    if not int_list:\n        raise ValueError(\"The tuple contains no integers.\")\n    # if there is only one integer in the list, return it\n    if len(int_list) == 1:\n        return int_list[0]\n    # if there are multiple integers in the list, raise an error\n    else:\n        raise ValueError(\"The tuple contains multiple integers.\")"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = (result << 8) + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to hold the sum of the integers in the tuple\n    total = 0\n    \n    # loop through each element in the tuple\n    for num in nums:\n        # add the integer to the total\n        total += num\n    \n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = (result * 10) + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if isinstance(nums, tuple):\n        if all(isinstance(num, int) and num > 0 for num in nums):\n            return sum(nums)\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # iterate through each element in the list\n    for i in range(len(test_list)):\n        # if the element is a list, recursively call the function on that list\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n            # if the element is a convertible type (int, float, str, etc.), convert it to a float and store it in the list\n            elif isinstance(test_list[i], (int, float, str, bool)):\n                test_list[i] = float(test_list[i])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, complex)):\n                element = float(element)\n            elif isinstance(element, list):\n                element = list_to_float(element)\n            row[row.index(element)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Convert all possible convertible elements in the list to floats\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                try:\n                    complex(subitem)\n                except ValueError:\n                    try:\n                        int(subitem)\n                    except ValueError:\n                        try:\n                            bool(subitem)\n                        except ValueError:\n                            continue\n                else:\n                    item[item.index(subitem)] = float(subitem)\n            else:\n                item[item.index(subitem)] = float(subitem)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, str):\n                try:\n                    float(subitem)\n                except ValueError:\n                    continue\n            else:\n                try:\n                    float(subitem)\n                except ValueError:\n                    try:\n                        float(str(subitem))\n                    except ValueError:\n                        continue\n                    else:\n                        item[subitem] = float(str(subitem))\n                else:\n                    item[subitem] = float(subitem)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the words to a list of strings\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Find the element that appears only once in the array\n    for i in freq:\n        if freq[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n    \n    # Loop through the array\n    for num in arr:\n        # If the current element is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add the current element to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n            \n    # Loop through the dictionary and find the element that appears only once\n    for key in count_dict:\n        if count_dict[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse the array and increment the frequency count in the dictionary for each element\n    for i in range(len(arr)):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Traverse the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a set to keep track of elements that appear only once\n    unique_set = set()\n\n    # Iterate through the array and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Check if there is only one element in the set\n    if len(unique_set) == 1:\n        # If there is only one element, return it\n        return list(unique_set)[0]\n    else:\n        # If there are multiple elements, return None\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Find the first element that appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize the frequency map with 0\n    freq = [0] * (max(arr)+1)\n\n    # Traverse through the array and update the frequency map\n    for num in arr:\n        freq[num] += 1\n\n    # Traverse through the array again to find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n    return arr[n-count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary to find the element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        elif arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    # Use a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    \n    # If no such element exists, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, pair_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_tuple = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n                max_product_tuple = [(list1[i][0], list1[i][1]), (list1[j][0], list1[j][1])]\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_pair_product = float('-inf')\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair_product = abs(lst[i][0] * lst[j][1])\n            if pair_product > max_pair_product:\n                max_pair_product = pair_product\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_pair_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    result = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                result = [(list1[i][0], list1[i][1]), (list1[j][0], list1[j][1])]\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = max(lst[i][0], lst[i][1]) * max(lst[j][0], lst[j][1])\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i][0] * lst[j][1]) > max_product:\n                max_product = (lst[i][0] * lst[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize the maximum absolute product and the maximum product in a tuple\n    max_product = -float('inf')\n    max_tuple_product = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining elements in the tuple\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two elements\n            abs_product = abs(list1[i][0] * list1[j][1])\n            # Update the maximum absolute product if the current absolute product is greater\n            max_product = max(max_product, abs_product)\n            # Update the maximum product in a tuple if the absolute product is greater\n            max_tuple_product = max(max_tuple_product, abs_product)\n\n    # Return the maximum absolute product in the list of tuples\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit+1):\n        if i == sum_of_amicable:\n            continue\n        if i % 2 == 0:\n            j = i // 2\n            if i == j:\n                continue\n            if i % j == 0:\n                sum_of_amicable += i\n                print(i, j)\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i == sum_of_proper_divisors(i):\n            sum += i\n    return sum\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to sum all proper divisors of a number.\n    '''\n    divisors = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors += i\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Function to find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, limit):\n        if is_prime(i) and is_prime(limit - i):\n            if i + limit - i == limit:\n                sum_amicable += i + limit - i\n    return sum_amicable\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Main function to find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        if i!= 1:\n            if is_amicable(i):\n                sum_amicable += i\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable to 1.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    sum_amicable = 0\n    for num in range(1, limit):\n        if num == sum_amicable:\n            continue\n        if num in amicable_numbers(num):\n            sum_amicable += num\n\n    return sum_amicable\n\ndef amicable_numbers(n):\n    '''\n    Write a function to find all amicable numbers to a specified number n.\n    '''\n\n    amicable_set = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            amicable_set.add(i)\n            if n//i!= i:\n                amicable_set.add(n//i)\n\n    return amicable_set"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable_pair(n):\n    '''\n    Helper function to check if a number is amicable pair.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        if is_amicable_pair(i) and is_amicable_pair(sum(int(j) for j in str(i))):\n            sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of two numbers as a key and the pair of numbers as a value\n    amicable_sum_dict = {}\n    for i in range(1, limit + 1):\n        if i == 1:\n            amicable_sum_dict[i] = None\n        else:\n            # Check if the number is a prime number\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            # Check if the number is amicable\n            if is_prime:\n                sum_of_numbers = i + sum(range(2, i))\n                if sum_of_numbers == i and i!= sum_of_numbers:\n                    amicable_sum_dict[i] = sum_of_numbers\n                elif sum_of_numbers!= i and sum_of_numbers in amicable_sum_dict:\n                    amicable_sum_dict[i] = sum_of_numbers\n    # Calculate the sum of all amicable numbers and return it\n    return sum(amicable_sum_dict.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num == sum(divisors(num)):\n            amicable_numbers.append(num)\n    \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef divisors(n):\n    '''\n    Return a list of all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a positive integer limit as input and returns the sum of all the amicable numbers up to that limit.\n    '''\n\n    # Initialize a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num in amicable_numbers:\n            continue\n\n        # Check if the number is divisible by any number in the list of amicable numbers\n        for i in amicable_numbers:\n            if num % i == 0:\n                break\n        else:\n            # If the number is not divisible by any number in the list, add it to the list of amicable numbers\n            amicable_numbers.append(num)\n\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    if num < 12:\n        return False\n    sum_of_squares = sum(int(digit)**2 for digit in str(num))\n    if sum_of_squares == num:\n        return True\n    sum_of_sum = sum(int(digit)**2 for digit in str(sum_of_squares))\n    return sum_of_sum == num\n\nprint(amicable_numbers_sum(10000)) # Output: 21124"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = angle / (2 * cmath.pi)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle_rad = cmath.phase(angle)\n    angle_deg = (angle_rad * 180) / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = cmath.phase(a - b * 1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    \n    # calculate the angle of the complex number\n    angle = cmath.phase(modulus + 1j*modulus)\n    \n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Convert the input to polar coordinates\n    r = cmath.sqrt(a.real**2 + a.imag**2)\n    theta = cmath.phase(a)\n    \n    # Convert back to cartesian coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Calculate the angle in radians\n    angle = cmath.phase(x + y*1j)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a+b*1j\n    angle = cmath.phase(complex_number)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            \n        if i >= 2:\n            if string[i] == string[i-2]:\n                if string[i-1] == '0':\n                    diff = one_count - zero_count\n                else:\n                    diff = zero_count - one_count\n                max_diff = max(max_diff, diff)\n                \n        if one_count > zero_count:\n            return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            diff = (count_0s(string[i:j]) - count_1s(string[i:j]))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n\ndef count_0s(substring):\n    return substring.count('0')\n\n\ndef count_1s(substring):\n    return substring.count('1')"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # initialize the count of 0s and 1s in the string\n    count_0 = 0\n    count_1 = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # check if the character is a 0 or a 1\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n    # find the maximum difference between the count of 0s and the count of 1s\n    max_diff = max(count_0, count_1) - min(count_0, count_1)\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            diff = abs(count_zeros - count_ones)\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            if count_zero - count_one > max_diff:\n                max_diff = count_zero - count_one\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = count_0 - count_1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize variables for zeros and ones count\n    zeros = ones = count = 0\n    # loop through each character of the binary string\n    for char in string:\n        # increment the count of zeros and ones for each character\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        # if the count of zeros is greater than the count of ones, update the count\n        if zeros > ones:\n            count = zeros\n        else:\n            count = ones\n    # return the maximum difference between the count of zeros and ones\n    return abs(zeros - ones)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to store the maximum difference and the length of the current sub-string\n    max_diff = 0\n    length = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the current character is a 0, increment the length counter\n        if char == '0':\n            length += 1\n        # If the current character is a 1, check if the length counter is greater than 0\n        elif length > 0:\n            # Calculate the difference between the length counter and the previous length counter\n            diff = length - length_prev\n            # If the difference is greater than the current maximum difference, update the maximum difference\n            if diff > max_diff:\n                max_diff = diff\n            # Reset the length counter to 0 for the next sub-string\n            length = 0\n    \n    # If the length counter is greater than 0, calculate the maximum difference between the length counter and the end of the string\n    if length > 0:\n        diff = length\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        Return a list of all the common divisors of the given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors_a = common_divisors(a)\n    divisors_b = common_divisors(b)\n\n    common_divisors_sum = 0\n    for divisor in divisors_a:\n        if divisor in divisors_b:\n            common_divisors_sum += divisor\n\n    return common_divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    c = a // b\n    # Find the sum of the common divisors\n    sum_cd = c * (c+1) // 2\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Use a set to find the common divisors\n    common_divisors = set()\n\n    # Find all common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize variables to store the sum of common divisors\n    sum_of_divisors = 0\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if the number is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # Add the common divisor to the sum\n            sum_of_divisors += i\n    # Return the sum of common divisors\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the greatest common divisor of the two numbers\n    gcd = __gcd(a, b)\n\n    # Sum of common divisors\n    sum_cd = 0\n\n    # Loop through all numbers between 1 and the greatest common divisor\n    for i in range(1, gcd + 1):\n        # If the first number is a common divisor of both the numbers, add it to the sum\n        if __gcd(a, i) == gcd and __gcd(b, i) == gcd:\n            sum_cd += i\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the formula:\n    sum_of_common_divisors(a, b) = sum_of_divisors(a) + sum_of_divisors(b) - sum_of_divisors(a * b)\n    \n    Where sum_of_divisors(n) is the sum of the divisors of n using the formula:\n    sum_of_divisors(n) = n * (n + 1) / 2\n    \n    This formula can be found in many books, tutorials, and online resources.\n    \"\"\"\n    \n    def sum_of_divisors(n):\n        return n * (n + 1) // 2\n    \n    return sum_of_divisors(a) + sum_of_divisors(b) - sum_of_divisors(a * b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisor(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns their common divisor.\n    \"\"\"\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            return i\n    return -1\n\ndef sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    div1 = common_divisor(a, b)\n    div2 = common_divisor(b, a)\n    return div1 + div2\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(\"Sum of common divisors:\", sum(a, b))"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(max(x, y)):\n        if x & (1 << i):\n            result += y & (1 << i)\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result = result ^ x\n\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to lowercase and split into a list of words\n    words = str.lower().split()\n    # Create an empty list to store the long words\n    long_words = []\n    # Loop through the words and check if each word is longer than n characters\n    for word in words:\n        if len(word) > n:\n            # Add the long word to the list\n            long_words.append(word)\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word) # append long words to list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all elements in the matrix are distinct\n    distinct = set(sum(row, []) for row in my_matrix)\n    if len(distinct)!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if the matrix has the pattern 4 1 6 3 9 8 7 5 2\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == 4 + 1 + 6 + 3 + 9 + 8 + 7 + 5 + 2:\n        return True\n    \n    # Check if the matrix has the pattern 3 5 7 9 1 4 6 2 8\n    if my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == 3 + 5 + 7 + 9 + 1 + 4 + 6 + 2 + 8:\n        return True\n    \n    # Check if the matrix has the pattern 6 1 4 7 9 2 8 3 5\n    if my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] == 6 + 1 + 4 + 7 + 9 + 2 + 8 + 3 + 5:\n        return True\n    \n    # Check if the matrix has the pattern 8 3 6 9 2 5 4 7 1\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == 8 + 3 + 6 + 9 + 2 + 5 + 4 + 7 + 1:\n        return True\n    \n    # Check if the matrix has the pattern 2 8 4 6 5 9 7 1 3\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == 2 + 8 + 4 + 6 + 5 + 9 + 7 + 1 + 3:\n        return True\n    \n    # Check if the matrix has the pattern 7 5 3 1 8 2 6 4 9\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == 7 + 5 + 3 + 1 + 8 + 2 + 6 + 4 + 9:\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    m = len(my_matrix[0])\n    \n    # Check if all rows have the same number of elements\n    for i in range(n):\n        if len(set(my_matrix[i]))!= m:\n            return False\n        \n    # Check if all columns have the same number of elements\n    for i in range(m):\n        if len(set(j for j in my_matrix[j] for k in range(n)))!= n:\n            return False\n        \n    # Check if the matrix is a magic square\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(m)]\n    square_sum = sum(sum(my_matrix[i][j] for i in range(n)) for j in range(m))\n    \n    return row_sums == col_sums == square_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if sum(my_matrix[i][j])!= total - (i * cols + j + 1):\n                return False\n            if sum(my_matrix[j][i])!= total - (j * rows + i + 1):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows - 3):\n        for j in range(cols - 3):\n            for k in range(4):\n                for l in range(4):\n                    if sum(my_matrix[i+k][j+l])!= total - (i * cols * 4 + j * rows * 4 + (k + l) + 1):\n                        return False\n    \n    # If we make it here, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of the elements of the matrix\n    matrix_sum = 0\n    for row in my_matrix:\n        for element in row:\n            matrix_sum += element\n\n    # check if the matrix is a magic square\n    if matrix_sum == 0:\n        return True\n    elif matrix_sum == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n\n    # Check if all columns have the same length\n    for col in zip(*my_matrix):\n        if len(set(col))!= len(col):\n            return False\n\n    # Check if all diagonals have the same length\n    diag1 = [row[i] for i in range(len(my_matrix))]\n    diag2 = [row[i] for i in range(len(my_matrix) - 1, -1, -1)]\n    if len(set(diag1))!= len(diag1) or len(set(diag2))!= len(diag2):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(map(sum, my_matrix))\n\n    # Check if the sum of the diagonal elements is equal to the sum of the matrix elements\n    if diagonal_sum == sum(map(sum, my_matrix)):\n        # Check if each row, column, and square is a magic square\n        for i in range(len(my_matrix)):\n            row_sum = sum(my_matrix[i])\n            column_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n            square_sum = sum(map(sum, my_matrix[(i//3)*3:(i//3+1)*3]))\n            if row_sum!= column_sum!= square_sum:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    square = []\n    for i in range(rows):\n        for j in range(cols):\n            square.append(my_matrix[i][j])\n    square.sort()\n    if square == list(range(1, rows*cols+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has a size of 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Initialize the sum of the diagonals\n    diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if diagonal_sum!= 15:\n        return False\n\n    # Initialize the sum of the left side of the matrix\n    left_sum = 0\n    for i in range(3):\n        left_sum += my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]\n    if left_sum!= 15:\n        return False\n\n    # Initialize the sum of the right side of the matrix\n    right_sum = 0\n    for i in range(3):\n        right_sum += my_matrix[i][2] + my_matrix[i][1] + my_matrix[i][0]\n    if right_sum!= 15:\n        return False\n\n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows\n        if sum(my_matrix[i])!= n**2:\n            return False\n        # Check columns\n        if sum([my_matrix[j][i] for j in range(n)])!= n**2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the dimensions of the matrix\n    n = len(my_matrix)\n    \n    # check if the matrix is a magic square\n    for i in range(n):\n        # check if the first row is a magic square\n        if sum(my_matrix[i]) == n**2:\n            return True\n        # check if the first column is a magic square\n        if sum(my_matrix[j][i] for j in range(n)) == n**2:\n            return True\n        # check if the main diagonal is a magic square\n        if sum(my_matrix[j][j] for j in range(n)) == n**2:\n            return True\n        # check if the secondary diagonal is a magic square\n        if sum(my_matrix[j][n-1-j] for j in range(n)) == n**2:\n            return True\n    \n    # if we get here, the matrix is not a magic square\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    # Find the maximum frequency of any item\n    max_freq = max(freq_dict.values())\n    # Find the item with the maximum frequency\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for num in freq_dict:\n        if freq_dict[num] == max_freq:\n            if max_item is None or num > max_item:\n                max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_count:\n            max_item = num\n            break\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of numbers and update the frequency count\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_item = None\n    max_count = 0\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_count = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_count:\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = []\n    for char in str1:\n        if char.lower() in vowels:\n            result.append(char)\n    return ''.join(reversed(result))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    rev_str = ''\n    for char in str1:\n        if char in vowels:\n            rev_str = char + rev_str\n    return rev_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n            reversed_str = char + reversed_str\n    if vowel_count > 0:\n        return reversed_str[::-1]\n    else:\n        return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_set = set(vowels)\n    result = []\n\n    for char in str1:\n        if char in vowels_set:\n            result.append(char)\n        else:\n            result.append(char)\n\n    result = ''.join(result[::-1])\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in str1:\n        if char.lower() in vowels:\n            result.append(char)\n    result = result[::-1]\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n    if vowel_count == 0:\n        return str1\n    else:\n        result = ''\n        i = 0\n        while i < len(str1):\n            if str1[i].lower() not in vowels:\n                result = str1[i] + result\n                i += 1\n            else:\n                i += 1\n        return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup:\n        string += str(item) + \" \"\n    return string.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(elem) for elem in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # join the elements of the list into a string\n    string = ''.join(lst)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 75\n    elif n == 5:\n        return 225\n    elif n == 6:\n        return 729"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the constants for the hexagonal number system\n    PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6*n*(n+1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n - 1) * 2 + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n\n    Args:\n        n (int): The index of the hexagonal number to find.\n\n    Returns:\n        int: The nth hexagonal number.\n\n    Example:\n        >>> hexagonal_num(1)\n        1\n        >>> hexagonal_num(2)\n        11\n        >>> hexagonal_num(3)\n        21\n        >>> hexagonal_num(4)\n        37\n        >>> hexagonal_num(5)\n        61\n        >>> hexagonal_num(6)\n        99\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 0: \n        return 0 \n    # Recursive case\n    else: \n        return 2 * (n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 4\n    \n    for i in range(1, n+1):\n        hex = (a * b) // c\n        print(hex)\n        a += 1\n        b -= 2\n        c -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((3 * n) - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Define the base and height of a hexagon\n    base = 1\n    height = 1\n\n    # Calculate the number of hexagons required to get to the nth hexagon\n    hexagons = 2 * (n - 1) + 1\n\n    # Calculate the nth hexagon using the formula:\n    # (n*(3n-1))/(2)\n    nth_hexagon = int(((n * (3 * n - 1)) / 2) ** 0.5)\n\n    # Calculate the length of the nth hexagon\n    hexagon_length = (nth_hexagon * (nth_hexagon + 1)) / 2\n\n    # Calculate the area of the nth hexagon\n    hexagon_area = 6 * base * height / 2\n\n    # Calculate the perimeter of the nth hexagon\n    hexagon_perimeter = 6 * (nth_hexagon * (nth_hexagon + 1))\n\n    # Return the nth hexagon\n    return nth_hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes.\n    '''\n\n    # Convert the input array to an array of type int64 so that we can use bitwise operations\n    nums = array('i', nums)\n\n    # Calculate the total number of elements in the array\n    total_elements = len(nums)\n\n    # Calculate the sum of all elements in the array\n    sum_of_elements = sum(nums)\n\n    # Calculate the number of zeroes in the array\n    count_zeroes = 0\n    for i in range(total_elements):\n        if nums[i] == 0:\n            count_zeroes += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count_zeroes / total_elements\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num) + 1] += 1\n        else:\n            ones[ones.index(num) + 1] += 1\n    ratio = 0\n    for num in zeros:\n        ratio += num\n    for num in ones:\n        ratio -= num\n    if ratio == 0:\n        return \"There are no zeroes in the array.\"\n    else:\n        return \"The ratio of zeroes to non-zeroes is: {:.2f}%\".format(ratio * 100 / len(nums))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    if len(zeros) == 0:\n        return 0\n    else:\n        return non_zeros.count(0) / len(zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = zero_count / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create a new array to store the non-zero numbers\n    non_zeros = array('i')\n\n    # Iterate through the input array\n    for num in nums:\n        # If the number is not zero, add it to the new array\n        if num!= 0:\n            non_zeros.append(num)\n\n    # Calculate the ratio of non-zeroes to zeroes\n    non_zeros_count = len(non_zeros)\n    zero_count = len(nums) - non_zeros_count\n    ratio = non_zeros_count / zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_ones = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_ones += 1\n    \n    return num_zeroes / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(num)\n    zero_count = sum(1 for num in num_list if num == 0)\n    non_zero_count = len(num_list) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Create a new array to store the count of each element\n    count_arr = array('i', [0]*len(nums_list))\n\n    # Iterate through the array and increment the count of each non-zero element\n    for num in nums_list:\n        if num!= 0:\n            count_arr[nums_list.index(num)] += 1\n\n    # Calculate the total count of elements\n    total_count = sum(count_arr)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    for num in count_arr:\n        if num!= 0:\n            ratio += num\n\n    return ratio/total_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) + is_Sum_Of_Powers_Of_Two(n//2+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is 0\n    if n == 0: \n        return True\n\n    # Check if the given number is 1\n    if n == 1: \n        return True\n\n    # Check if the given number is 2\n    if n == 2: \n        return True\n\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0: \n        return True\n\n    # Check if the given number can be represented as sum of powers of 2\n    while n % 2 == 0: \n        n = n // 2\n\n    # Initialize sum\n    sum_of_powers_of_two = 0\n\n    # Add powers of 2 to the sum\n    while n > 0: \n        if n % 2 == 1: \n            sum_of_powers_of_two += n\n\n        # Divide n by 2 to remove the power of 2\n        n = n // 2\n\n    # Check if the sum of powers of 2 is equal to the given number\n    if sum_of_powers_of_two == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if n == 2**i:\n            return True\n        elif n - 2**i == 0:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        for i in range(2,int(n**0.5)+1): \n            if n % i == 0: \n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    def helper(num):\n        if num == 1:\n            return 1\n        elif num == 2:\n            return 0\n        elif num % 2 == 0:\n            return 2 * helper(num // 2)\n        else:\n            return 2 * helper((num - 1) // 2) + 1\n\n    return helper(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check for base case\n    if n == 0:\n        return True\n\n    # Check for odd numbers\n    if n % 2!= 0:\n        return False\n\n    # Check for even numbers\n    if n == 2:\n        return True\n\n    # Check for even numbers that can be represented as sum of powers of 2\n    for i in range(3, n+1, 2):\n        if i**2 == n:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is 1\n    if n == 1:\n        return True\n\n    # Check if the number is 0 or negative\n    if n < 0:\n        return False\n\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # Check if the number can be represented as sum of powers of 2\n    i = 0\n    while n!= 0:\n        if n & 1 == 1:\n            if 1 << i > n:\n                return False\n            n -= 1 << i\n        i += 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    \n    # check if n is divisible by 2^i for some i\n    for i in range(0, 64):\n        if (1 << i) > n:\n            break\n        if n % (1 << i)!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Helper function to check if a number is power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # Helper function to check if a number can be represented as sum of non-zero powers of 2 or not\n    def can_be_sum_of_powers_of_two(num):\n        # Check if the number is power of 2 or not\n        if not is_power_of_two(num):\n            return False\n\n        # Initialize a variable to store the sum of powers of 2\n        sum_of_powers_of_two = 0\n\n        # Iterate through all numbers from 1 to n/2 and check if they can be represented as sum of powers of 2\n        for i in range(1, num // 2 + 1):\n            # Check if the sum of powers of 2 is equal to the given number\n            if num - (i * (i - 1)) == i * (i - 1):\n                return True\n\n        # If no number can be represented as sum of powers of 2, return False\n        return False\n\n    # Check if the given number can be represented as sum of powers of 2 or not\n    if can_be_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Helper function to check if a number is power of 2 or not\n    def is_power_of_two(num): \n        return (num!= 0) and ((num & (num-1)) == 0)\n\n    # Helper function to check if a number is sum of non-zero powers of 2 or not\n    def is_sum_of_powers_of_two(num): \n        if num == 0: \n            return True\n        elif is_power_of_two(num): \n            return is_sum_of_powers_of_two(num//2) or is_sum_of_powers_of_two(num-1)\n        else: \n            return False\n\n    # Check if the given number is a power of 2 or not\n    if is_power_of_two(n): \n        return True\n\n    # Check if the given number is sum of non-zero powers of 2 or not\n    if is_sum_of_powers_of_two(n): \n        return True\n\n    # If none of the above conditions are met, then the given number cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # formula for circumference\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*(r**2)\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sublist in test_list:\n        singly_list.extend(sublist)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # initialize an empty set to store the single numbers\n    singly_set = set()\n\n    # iterate through each list in the input list\n    for sublist in test_list:\n        # iterate through each number in the sublist\n        for number in sublist:\n            # add the number to the singly_set\n            singly_set.add(number)\n\n    # convert the set to a list and return it\n    return list(singly_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create a list to store the flattened numbers\n    flattened_list = []\n    \n    # Loop through each sub-list in the input list\n    for sublist in test_list:\n        # Loop through each element in the sub-list\n        for element in sublist:\n            # Add each element to the flattened list\n            flattened_list.append(element)\n    \n    # Return the flattened list as a set\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n    \n    flattened = flatten(test_list)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def swap(a, b):\n        a, b = nums[b], nums[a]\n        nums[a], nums[b] = b, a\n\n    n = len(nums)\n    for i in range(n):\n        max_pos = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_pos]:\n                max_pos = j\n        swap(i, max_pos)\n        for k in range(i, 0, -1):\n            swap(k, k-1)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Helper function to swap elements\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Inversion count will store the number of inversions\n    # required to sort the given array\n    inversion_count = 0\n    for i in range(n-1):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element\n        swap(nums, i, max_index)\n\n        # Count the number of inversions in the current array\n        inversion_count += i - max_index\n\n        # Reverse the remaining part of the array\n        for j in range(i+1, n):\n            swap(nums, j, i)\n\n    # Return the inversion count\n    return inversion_count"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the n variables\n    n = len(nums)\n    # loop through the list of elements\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        largest = max(nums[i:])\n        # swap the largest element with the element at the beginning of the unsorted part\n        nums[i], nums[nums.index(largest)] = nums[nums.index(largest)], nums[i]\n        # print the sorted list\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # Perform insertion sort for the first n - 1 elements\n    for i in range(len(nums) - 1):\n        j = i + 1\n        key = nums[i]\n\n        # Insert the key in its correct sorted position\n        while j > 0 and nums[j - 1] > key:\n            nums[j] = nums[j - 1]\n            j -= 1\n        nums[j] = key\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the remaining unsorted part of the list using two pointers\n        left = i + 1\n        right = n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Perform bubble sort on the list\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of numbers using the pancake sorting algorithm.\n\n    Args:\n        nums (list): A list of numbers to sort.\n\n    Returns:\n        A new list sorted in ascending order.\n    '''\n    # Helper function to reverse the order of a list\n    def reverse(nums):\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    # Helper function to perform a pancake sort step\n    def step(nums, k):\n        # Find the largest element\n        largest = nums[k]\n        i = k\n        while i < len(nums):\n            if nums[i] > largest:\n                largest = nums[i]\n            i += 1\n\n        # If the largest element is already at the end of the list, stop\n        if largest == nums[k]:\n            return\n\n        # Swap the largest element with the end of the list\n        nums[k], nums[len(nums) - 1] = nums[len(nums) - 1], nums[k]\n\n        # Reverse the list from the kth element to the end\n        reverse(nums[:k] + nums[k + 1:])\n\n    # Perform the pancake sort algorithm\n    for i in range(len(nums)):\n        # Find the index of the largest element\n        max_index = i\n        for j in range(i + 1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the element at the end of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the list from the i-th element to the end\n        reverse(nums[i:])\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # In each iteration, we will find the largest element and swap it with the last element in the list\n    # We will repeat this process for n-1 times and then the last element will be in its correct sorted position\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the remaining unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # Swap the largest element with the last element in the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(arr, n):\n        # helper function to reverse the array\n        for i in range(n//2):\n            arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\n    # reverse the array\n    for i in range(len(nums)//2):\n        nums[i], nums[-1-i] = nums[-1-i], nums[i]\n\n    # apply the pancake sort algorithm\n    for start in range(len(nums)-2, 0, -1):\n        # find the maximum element in the current sub-array\n        max_idx = start\n        for i in range(start+1, len(nums)):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # swap the maximum element with the first element of the sub-array\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # reverse the sub-array\n        helper(nums, max_idx-start)\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    for i in range(len(list2)):\n        if list2[i] == list3[i]:\n            count += 1\n    for i in range(len(list3)):\n        if list3[i] == list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if isinstance(i, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    This function will take a tuple as input and will return the number of lists present in the tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = arr[-1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = max(diff, arr[-1] - arr[i])\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    # Initialize variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array\n    for num in arr:\n        # Update the minimum and maximum values in the array\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = abs(max_val - min_val)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr) - 1):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n        if abs(arr[i] - arr[i+1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i+1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference to be the smallest integer value\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(len(arr)-1):\n        # Calculate the difference between the current and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given coefficients are valid\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4 * a * n\n    \n    # Check if there is a solution\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (int(-b / (2 * a)),)\n    else:\n        # Calculate the two solutions\n        x1 = (-b + discriminant**0.5) / (2 * a)\n        x2 = (-b - discriminant**0.5) / (2 * a)\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_list = []\n    y_list = []\n    for x in range(int(-n/b), int((n-1)/b)+1):\n        for y in range(int(-n/a), int((n-1)/a)+1):\n            if a*x + b*y == n:\n                x_list.append(x)\n                y_list.append(y)\n    if len(x_list) == 0:\n        return None\n    else:\n        return tuple(sorted(x_list)), tuple(sorted(y_list))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation has real roots\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        # there are no real roots\n        return None\n    elif discriminant == 0:\n        # one real root\n        x = -b / (2 * a)\n        return (x, x)\n    else:\n        # two real roots\n        x1 = (-b - discriminant**0.5) / (2 * a)\n        x2 = (-b + discriminant**0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are equal to zero, in which case there are no solutions\n    if a == 0 and b == 0:\n        return None\n    \n    # check if a and b are both negative, in which case there is only one solution\n    if a < 0 and b < 0:\n        x = -n // b\n        y = -n % b\n        return (x, y)\n    \n    # check if a is negative and b is positive, in which case there are two solutions\n    if a < 0 and b > 0:\n        x1 = -n // b\n        y1 = -n % b\n        x2 = n // b\n        y2 = n % b\n        return ((x1, y1), (x2, y2))\n    \n    # if all the above conditions are not met, there is only one solution\n    x = n // b\n    y = n % b\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, and n are integers\n    if not all(isinstance(x, int) for x in (a, b, n)):\n        return None\n\n    # Check if a and b are not zero\n    if a == 0 or b == 0:\n        return None\n\n    # Check if a and n have the same sign\n    if a * n < 0:\n        return None\n\n    # Compute the discriminant\n    discriminant = b * b - 4 * a * n\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n\n    # Compute the roots of the discriminant\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # Check if the roots are integers\n    if not all(isinstance(x, int) for x in (root1, root2)):\n        return None\n\n    # Return the solution as a tuple\n    return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(1, n+1):\n        x = -b/a * i + b/a * (n+1)\n        y = a * x + b/a\n        if a*x + b*y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if there is a solution\n    if discriminant < 0:\n        return None\n\n    # find the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n\n    # check if both solutions are valid\n    if x1**2 + x2**2!= n:\n        return None\n\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b, n are valid inputs\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # check if n is equal to 0 or 1\n    if n == 0 or n == 1:\n        return None\n\n    # use the extended Euclidean algorithm to find the gcd and inverse of a and b\n    x0, x1, y0, y1 = 1, 0, 0, 1\n    gcd, inverse = 0, 0\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x0, x1 = x0 - q * x1, x0\n        y0, y1 = y0 - q * y1, y0\n\n    # check if x0 and y0 are valid solutions\n    if a * x0 + b * y0!= n:\n        return None\n\n    # use the extended Euclidean algorithm to find the gcd and inverse of -a and -b\n    x0, x1, y0, y1 = 1, 0, 0, 1\n    gcd, inverse = 0, 0\n    while b:\n        q = -a // -b\n        a, b = -b, -a % -b\n        x0, x1 = x0 - q * x1, x0\n        y0, y1 = y0 - q * y1, y0\n\n    # check if x0 and y0 are valid solutions\n    if -a * x0 + -b * y0!= n:\n        return None\n\n    # return the valid solution as a tuple (x, y)\n    return (x0, y0)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    disc = b ** 2 - 4 * a * n\n    \n    # Check if there exists a solution\n    if disc < 0:\n        return None\n    elif disc == 0:\n        return (-b // (2 * a),)\n    else:\n        # Find two solutions\n        x1 = (-b + disc ** 0.5) // (2 * a)\n        x2 = (-b - disc ** 0.5) // (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the first list\n    for i in range(len(list1)):\n        # Check if the element is present in the second list\n        if list1[i] in list2:\n            # Remove the element from the list\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1 and remove the elements that are present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    # Return the list1 without the elements that are present in list2\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list2 to check if each element exists in list1\n    for element in list2:\n        # check if the element exists in list1\n        if element in list1:\n            # if it exists, remove it from list1\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through list2 and remove all elements that are present in list1\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list2.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list to store the unique elements of the first list\n    unique_list = []\n    \n    # Loop through the first list and add each element to the new list if it's not present in the second list\n    for element in list1:\n        if element not in list2:\n            unique_list.append(element)\n    \n    # Return the new list with all unique elements\n    return unique_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n-2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        x = n % 2\n        return sum_series(n - x) + x * (n - x) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    while n - 2*i >= 0:\n        sum_ = n - 2*i\n        print(sum_)\n        i += 1"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-2*l) + (l*(l-2*s) + l*s))/(4*(s-l)*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using Heron's formula\n    a = s / 2\n    area = tan(pi / l) * a**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * (math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi / l * i\n        x = s * tan(angle)\n        y = 0\n        area += s * s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l - 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter and area of the polygon\n    A = (s * l) / 2\n    area = (pi * (s**2)) / 4\n    \n    # calculate the tangents of the polygon using the formula tan(x) = sin(x)/cos(x)\n    t1 = tan((pi/2) + (2*pi/l))\n    t2 = tan((pi/2) - (2*pi/l))\n    \n    # calculate the area of each triangle using Heron's formula and the tangents\n    area1 = 0.5 * s * l * t1\n    area2 = 0.5 * s * l * t2\n    \n    # calculate the total area of the polygon using the formula A = 0.5 * s * l * (tan1 + tan2)\n    area = 0.5 * s * l * (area1 + area2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula: A = (s * (s - l) / 2) * tan(pi/l)\n    area = (s * (s - l) / 2) * tan(pi/l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes two integers as input, n and m, and returns True if their sum of divisors is the same,\n    and False otherwise.\n    '''\n\n    # Finding all divisors of n using a loop and the fact that a divisor is not greater than its square root.\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n // i:\n                divisors.append(i)\n                divisors.append(n // i)\n    \n    # Finding the sum of divisors.\n    sum_of_divisors = sum(divisors)\n\n    # Returning True if the sum of divisors is the same as n and m, and False otherwise.\n    if sum_of_divisors == n and n == m:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            if n // i == i: \n                return True \n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    if sum(div_list) == n:\n        print(\"The sum of the divisors is the same.\")\n    else:\n        print(\"The sum of the divisors is not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # function to find the sum of the divisors of a given number\n    def sum_divisors(num):\n        div_list = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_list.append(i)\n        return sum(div_list)\n\n    # function to check if the sum of the divisors of two numbers are the same\n    def check_div_sum(num1, num2):\n        return sum_divisors(num1) == sum_divisors(num2)\n\n    # main function\n    return check_div_sum(n, n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, n+1):\n        if n % i == 0:\n            div = math.factorial(i)\n            div_sum = n // i\n            if div == div_sum:\n                print(f\"The sum of the divisors of {n} is {div_sum}.\")\n            else:\n                print(f\"The sum of the divisors of {n} is not the same as {div_sum}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_1 = 0\n    div_2 = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_1 += i\n            if n//i == i:\n                div_2 += n//i\n    if div_1 == div_2:\n        print(f\"{n} and {div_2} are divisible by the same factors.\")\n    else:\n        print(f\"{n} and {div_1} are divisible by different factors.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1: \n        return \"Invalid input. Please enter a positive integer.\"\n    else: \n        div_sum = 0\n        div1 = 1\n        div2 = 1\n        while div1 <= math.sqrt(n): \n            if n % div1 == 0: \n                div_sum += div1\n                n //= div1\n            else: \n                div1 += 1\n        while div2 <= n: \n            if n % div2 == 0: \n                div_sum += div2\n            else: \n                div2 += 1\n        if n > 1: \n            div_sum += n\n        return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return False\n    \n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    \n    # Check if the sum of the divisors is the same\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = sum(divisors(n))\n    return div_sum\n\ndef divisors(n):\n    '''\n    Write a function to return a list of all the divisors of a given integer.\n    '''\n    divisors = []\n    if n <= 1:\n        return []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n//i\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Iterate over the string and count the number of characters that occur at the same position in the English alphabet\n    for char in str1:\n        # Check if the character is a letter and if it's in the English alphabet\n        if char.isalpha() and char.islower() and char in 'abcdefghijklmnopqrstuvwxyz':\n            # If the character is already in the dictionary, increment its count\n            if char in char_count:\n                char_count[char] += 1\n            # If the character is not in the dictionary, add it with a count of 1\n            else:\n                char_count[char] = 1\n    # Return the dictionary with the count of each character at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all the characters in the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # Check if the character is a letter from the English alphabet\n        if 'a' <= char <= 'z':\n\n            # If the character is a letter, check if it is already in the dictionary\n            if char in char_count:\n\n                # If it is, increment its count\n                char_count[char] += 1\n\n            # If the character is not in the dictionary, add it and set its count to 1\n            else:\n                char_count[char] = 1\n\n    # Loop through each position in the English alphabet and print the count of characters at that position\n    for position in range(len(str1)):\n\n        # Check if the character at that position is a letter from the English alphabet\n        if str1[position].lower() in char_count:\n\n            # If it is, print the count of that character\n            print(f\"Character at position {position} occurs {char_count[str1[position].lower()]} times\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    count = 0\n    for i in range(26): \n        if str1.lower().count(chr(i+97)) == len(str1.lower().count(chr(i+97))): \n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    # Return the count of each character in the English alphabet (case insensitive)\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(26):\n            if str1[i].lower() == chr(j+97).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for i in str1:\n        if i.lower() in alphabets.lower():\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        str2 = str1.lower()\n        if str2[i] == str1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in alphabet:\n        if char.lower() in str1.lower():\n            count += str1.count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    # Create a dictionary to store the character and its position in the string\n    char_dict = {} \n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Iterate over the characters in the string\n    for i, char in enumerate(str1): \n        # If the character is not already in the dictionary, add it with the position as the value\n        if char not in char_dict: \n            char_dict[char] = i\n        # If the character is already in the dictionary, update its position\n        else: \n            char_dict[char] = i\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate over the characters in the string again\n    for char in str1: \n        # If the character is in the dictionary and its position is the same as the current position, increment the counter\n        if char in char_dict and char_dict[char] == i: \n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the next power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # make sure n is positive\n    n |= n >> 1  # n = n | (n >> 1)\n    n |= n >> 2  # n = n | (n >> 2)\n    n |= n >> 4  # n = n | (n >> 4)\n    n |= n >> 8  # n = n | (n >> 8)\n    n |= n >> 16  # n = n | (n >> 16)\n    n += 1  # add 1 to get the next power of 2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return 1 << (n.bit_length() - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1 \n    else: \n        return 2 ** int(log2(n) + 1) \n\ndef log2(n): \n    '''\n    Write a python function to find the logarithm base 2 of a number.\n    '''\n    if n == 0: \n        return float('-inf') \n    else: \n        return int(log2(n/2) + 1) "
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        n = 1 << n.bit_length()\n        if n >= n:\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary representation and find the highest bit set to 1\n    highest_bit = bin(n)[2:].rfind('1')\n    \n    # calculate the next power of 2 by shifting the binary representation to the left by the highest bit set to 1\n    next_pow2 = 2 ** highest_bit\n    \n    # return the next power of 2\n    return next_pow2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    if n > 1:\n        n = n << 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 as 1\n    power_of_2 = 1\n\n    # Loop while the power of 2 is less than or equal to n\n    while power_of_2 <= n:\n        # If the power of 2 is equal to n, return n\n        if power_of_2 == n:\n            return n\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n\n    # If no power of 2 is greater than or equal to n, return None\n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the current power of 2\n    current_power = 1\n    \n    # While the current power is less than or equal to the square root of n\n    while current_power <= n**0.5:\n        \n        # If the current power is greater than n\n        if current_power > n:\n            \n            # Return the current power\n            return current_power\n        \n        # If the current power is equal to n\n        else:\n            \n            # Double the current power\n            current_power *= 2\n    \n    # If the loop completes without finding a power of 2 greater than or equal to n\n    return current_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as an input and returns the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize the power of 2 as 2^0\n    power_of_2 = 2\n    \n    # Loop until power_of_2 is greater than or equal to n\n    while power_of_2 >= n:\n        # Increment power_of_2 by 2\n        power_of_2 *= 2\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check that indices are within bounds\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError('Invalid indices')\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through the indices in the range and add the corresponding elements to the sum\n    for i in range(m, n+1):\n        total += list1[i]\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices\"\n    elif m > n:\n        return \"The end index should be greater than or equal to the start index\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return None\n    else:\n        return sum_range_list(list1, m+1, n)+list1[m]+sum_range_list(list1, m+1, n)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # initialize the sum variable to zero\n    sum_num = 0\n\n    # loop through the list using a while loop\n    while m <= n:\n        # add the element at the current index to the sum variable\n        sum_num += list1[m]\n        # increment the index by 1\n        m += 1\n\n    # return the sum of the numbers in the list within the specified range\n    return sum_num"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices m and n, and returns the sum of the numbers in the list\n    within the range m to n (inclusive). If the indices are out of order, the function returns None.\n    \"\"\"\n    if m > n:\n        return None\n    if m < 0 or n >= len(lst):\n        return None\n    sum_range = sum(lst[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Using the formula for the perimeter of a pentagon\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a + 10*math.sqrt(3)*a + 5*math.sqrt(3)*a*math.sqrt(3) + 5*math.sqrt(3)*a*math.sqrt(3)"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_len = len('std')\n    while True:\n        try:\n            index = s.index('std', count)\n            count += std_len\n        except ValueError:\n            break\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    start = s.find('std')\n    while start!= -1:\n        count += 1\n        start = s.find('std', start+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if there are any elements in the tuple\n    if not test_tuple:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Loop through the rest of the tuple and check if all elements have the same data type\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n\n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        # check if the data type of the element is different from the first element\n        if not isinstance(element, type(first_element)):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    # first, check if the tuple has at least one element\n    if not test_tuple:\n        return False\n    \n    # then, iterate over the tuple and check if all the elements have the same data type\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the type of the first element in the tuple\n    first_element_type = type(test_tuple[0])\n    # iterate over the remaining elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element's type is same as the first element's type\n        if type(element)!= first_element_type:\n            return False\n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize variables\n    count = 0\n    majority = 0\n    \n    # Iterate through the array and count occurrences of the element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Calculate the majority count\n    majority = count\n    \n    # Check if the majority is more than n/2\n    if majority > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        if(n & 1):\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize a counter variable to keep track of the number of set bits\n    count = 0\n\n    # Loop through each bit in the binary representation of n\n    while n:\n        # If the current bit is 1, increment the counter\n        if n & 1:\n            count += 1\n\n        # Shift the bits to the right by 1 bit position to check the next bit\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create a new string with odd index values removed\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string which will hold the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str:\n        # if the index of the character is odd, append it to the result string\n        if (ord(char) // 16) % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty list to store the odd values of the string\n    odd_values = []\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the index of the character is odd\n        if i % 2 == 1:\n            # Add the character to the list of odd values\n            odd_values.append(str[i])\n            \n    # Convert the list of odd values to a string and return it\n    return \"\".join(odd_values)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    This function takes three numbers as arguments and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    if a > b:\n        a,b = b,a\n    if a > c:\n        a,c = c,a\n    if b > c:\n        b,c = c,b\n\n    # Finding the minimum number\n    if a < b:\n        min_num = a\n    else:\n        min_num = b\n\n    if min_num > c:\n        min_num = c\n\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes in three numbers and returns the minimum value.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    # initializing minimum variable with the first number\n    min_num = a\n\n    # checking if the second number is less than the minimum number\n    if b < min_num: \n        min_num = b\n\n    # checking if the third number is less than the minimum number\n    if c < min_num: \n        min_num = c\n\n    # returning the minimum number\n    return min_num"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize all the bits of n to 0\n    n = n & ((1 << 32) - 1)\n    # Initialize all the bits of m to 0\n    m = ((1 << 32) - 1) & ((1 << 32) - 1)\n    # Iterate through the range [l,r]\n    for i in range(l, r+1):\n        # Set the bit at position i in m to 1\n        m |= (1 << i)\n        # Check whether all the bits of n are unset in the range [l,r]\n        if n & m!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if n < 0 or l < 0 or r < 0:  \n        return \"Invalid Input\"\n\n    if l > r:  \n        return \"Invalid Range\"\n\n    count = 0\n    mask = 1\n\n    for i in range(l, r+1):  \n        if n & mask:\n            count += 1\n        mask <<= 1\n\n    if count == r - l + 1:\n        return \"All bits are set in the given range\"\n    else:\n        return \"Some bits are set in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Function to check if a number contains a certain bit\n    def check_bit(num, bit):\n        return num & (1 << bit)!= 0\n\n    # Function to check if all bits are unset in a range\n    def all_bits_unset(num, l, r):\n        for i in range(l, r+1):\n            if check_bit(num, i):\n                return False\n        return True\n\n    # Main function\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return all_bits_unset(n, l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: n, l, and r. \n    n is the bitmask, l is the lower limit of the range, and r is the upper limit of the range. \n    It returns True if all the bits in the range [l, r] are set in the bitmask n and False otherwise.\n    '''\n    \n    # Calculate the number of bits in n\n    num_bits = len(bin(n)[2:])\n    \n    # Check if all the bits are set in the range [l, r]\n    for i in range(l, r+1):\n        if (i & n)!= i:\n            return False\n    \n    # If all the bits are set in the range [l, r] return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize variables for the current and next bit\n    current_bit = 0\n    next_bit = 1\n    # loop through the bits in the given range\n    while current_bit <= r:\n        # check if the current bit is set or unset in the given range\n        if (current_bit >= l and n & (1 << current_bit)):\n            return False\n        # shift the next bit to the right by 1\n        next_bit <<= 1\n        # increment the current bit\n        current_bit += 1\n    # if all bits are unset in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('0')!= bin(n).count('1'):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < 2:\n        return False\n    while l <= r:\n        if n & l == l:\n            return False\n        l <<= 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes in three integer parameters n, l, and r, where n is the number, l is the lower bound of the range and r is the upper bound of the range.\n    The function returns True if all the bits are unset in the given range, otherwise it returns False.\n    '''\n    # Convert the lower and upper bound of the range to binary format\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n    \n    # If the binary values of the lower and upper bounds are equal, then all bits are set.\n    if bin_l == bin_r:\n        return True\n    \n    # If the binary values of the lower and upper bounds are different, then there are unset bits in the range.\n    else:\n        # Get the number of bits in the range\n        num_bits = len(bin_l)\n        \n        # Iterate over the bits of the binary representation of the lower bound and check whether they are set or not\n        for i in range(num_bits):\n            if bin_l[i] == '1' and bin_r[i] == '0':\n                return False\n        \n        # If all the bits are unset, return True\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Iterate through all bits in the given range and check if they are set or unset\n    for i in range(l, r + 1):\n        if n & (1 << i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == r:\n        return False\n    if n == 0:\n        return True\n    if (n & 1) == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two empty lists\n    neg_list = []\n    pos_list = []\n\n    # iterate through the array and append elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n\n    # combine the two lists into one\n    new_list = neg_list + pos_list\n\n    # shuffle the order of the elements in the new list\n    for i in range(n):\n        j = i + randint(0, len(new_list) - i - 1)\n        temp = new_list[i]\n        new_list[i] = new_list[j]\n        new_list[j] = temp\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers for positive and negative elements\n    i, j = 0, n-1\n    # Traverse through the array\n    while i < j:\n        # Check if the current element is negative or positive\n        if arr[i] < 0:\n            # If it's negative, move it to the left\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            # If it's positive, move it to the right\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n        # Move the pointers towards each other\n        i += 1\n        j -= 1\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # Helper function to swap elements at indices i and j\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize negative and positive indices\n    neg = 0\n    pos = n - 1\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the element at index i is negative\n        if arr[i] < 0:\n            # If it is, swap it with the element at index neg\n            swap(arr, i, neg)\n            neg += 1\n        # If the element at index i is positive, swap it with the element at index pos\n        elif arr[i] > 0:\n            swap(arr, i, pos)\n            pos -= 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store positive and negative elements respectively\n    positive = []\n    negative = []\n\n    # Traverse through the given array and append positive and negative elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n\n    # Sort the negative elements in non-decreasing order\n    negative.sort()\n\n    # Traverse through the positive elements and insert negative elements before them\n    for i in range(n):\n        if len(negative) > 0:\n            arr[i] = negative.pop(0)\n        else:\n            arr[i] = positive.pop(0)\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a dictionary to store the position of each element\n    pos_dict = {}\n    neg_dict = {}\n    \n    # Iterate through the array and add elements to the dictionaries\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_dict[arr[i]] = i\n        else:\n            neg_dict[arr[i]] = i\n            \n    # Initialize two new arrays to store the re-arranged elements\n    neg_arr = []\n    pos_arr = []\n    \n    # Iterate through the positive and negative dictionaries to re-arrange the elements\n    for key in neg_dict:\n        pos_arr.append(key)\n        \n    for key in pos_dict:\n        neg_arr.append(key)\n        \n    # Concatenate the positive and negative arrays to get the final re-arranged array\n    arr_final = neg_arr + pos_arr\n    \n    # Sort the final array in ascending order\n    arr_final.sort()\n    \n    # Iterate through the original array and move elements to their new positions\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_dict[arr[i]] = i\n        else:\n            neg_dict[arr[i]] = i\n            \n    # Concatenate the new positive and negative arrays to get the final re-arranged array\n    arr_final = neg_arr + pos_arr\n    \n    # Sort the final array in ascending order\n    arr_final.sort()\n    \n    # Return the final array\n    return arr_final"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two lists to store the negative and positive elements\n    neg = []\n    pos = []\n    \n    # loop through the array and add negative elements to the neg list and positive elements to the pos list\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    \n    # sort the negative elements in ascending order\n    neg.sort()\n    \n    # concatenate the two lists and add the positive elements to the end of the array\n    arr = neg + pos\n    \n    # loop through the array again and add the negative elements to the end of the array\n    for num in arr:\n        if num < 0:\n            arr.remove(num)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n\n    while i < n:\n        if arr[i] < 0:\n            if i!= j:\n                arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n\n    while j < len(arr):\n        if arr[j] < 0:\n            if i!= j:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Iterate through the first n elements of the array\n    for i in range(n):\n        # Find the maximum element in the current sub-array\n        max_val = arr[i]\n        max_index = i\n\n        for j in range(i+1, n):\n            if arr[j] > max_val:\n                max_val = arr[j]\n                max_index = j\n\n        # If the current element is negative, swap it with the maximum element\n        if arr[i] < 0:\n            swap(arr, i, max_index)\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store negative and positive elements, respectively\n    neg_lst = []\n    pos_lst = []\n\n    # Iterate through the array and append elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_lst.append(num)\n        else:\n            pos_lst.append(num)\n\n    # Concatenate the two lists and sort them in ascending order\n    arr_lst = neg_lst + pos_lst\n    arr_lst.sort()\n\n    # Initialize an empty list to store the re-arranged elements\n    new_arr = []\n\n    # Iterate through the sorted array and append elements to the new list\n    for num in arr_lst:\n        if num >= 0:\n            new_arr.append(num)\n        else:\n            new_arr.append(num)\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initializing two pointers, one for positive and one for negative elements\n    i = 0\n    j = 0\n    # Traverse the array until n elements have been processed\n    while i < n:\n        # If the element at index i is positive, increment the positive pointer i\n        if arr[i] > 0:\n            i += 1\n        # If the element at index i is negative, increment the negative pointer j\n        elif arr[i] < 0:\n            j += 1\n        # If the element at index i is 0, skip to the next element\n        else:\n            i += 1\n            continue\n        # Swap the element at index i with the element at index j\n        arr[i], arr[j] = arr[j], arr[i]\n        j += 1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    # Replace blank spaces with the given character\n    str2 = str1.replace(' ', char)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        elif str1[i] == \" \":\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replacing blank spaces with the given character\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return ''.join([char if char.isspace() else char for char in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n and add the first n items from the list\n    heap = []\n    for i in range(min(n, len(list1))):\n        heapq.heappush(heap, list1[i])\n    # Add the remaining items to the heap\n    for i in range(len(list1)-min(n, len(list1))):\n        heapq.heappush(heap, -heapq.heappop(heap))\n    # Return the heap as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max-heap to find the n largest items in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the max-heap back to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list into a set so that duplicates are not counted\n    set1 = set(list1)\n    # create a min heap of the first n elements of the set\n    min_heap = []\n    for num in set1[:n]:\n        heapq.heappush(min_heap, num)\n    # add the remaining elements of the set to the min heap\n    for num in set1[n:]:\n        heapq.heappushpop(min_heap, num)\n    # return the elements of the min heap as a list\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1.pop())\n    # Append the remaining items to the min-heap\n    for item in list1:\n        heapq.heappush(min_heap, item)\n    # Return the n largest items from the min-heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(list1)\n    # create a list of tuples with the items and their indices\n    item_list = [(unique_set[i],i) for i in range(len(unique_set))]\n    # use heapq to sort the list by the first element (item) of each tuple\n    heapq.heapify(item_list)\n    # remove the n largest items from the heap and create a new list with the result\n    result = [heapq.heappop(item_list)[0] for i in range(n)]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # use heapq to sort the list in descending order\n    heapq.heapify(list1)\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize an empty heap\n    heap = []\n\n    # Iterate through the list\n    for num in list1:\n        # Add the current number to the heap\n        heapq.heappush(heap, num)\n\n        # Remove the smallest number from the heap if the heap size is greater than n\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n largest numbers from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    pi = 3.14159265359\n    return 2 * pi * r**2 + pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * (3.14 * r**2) * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters\n    and returns the lateral surface area of the cylinder.\n    '''\n    return 2 * (r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h + 2 * r * r\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * pi * (r ** 2 + h ** 2)\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2+h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * r\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder and calculates the lateral surface area.\n    '''\n    pi = math.pi\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, set it to 1, otherwise set it to 0\n        if n & (1 << i):\n            result.append(1)\n        else:\n            result.append(0)\n    # Convert the list of binary digits to an integer and return it\n    return int(''.join(str(bit) for bit in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of even bits set\n    even_count = 0\n\n    # Loop through each bit in the number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the bit to 1\n            n |= 1 << i\n            # Increment the count of even bits set\n            even_count += 1\n\n    # Return the number with all even bits set\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            n |= 1 << (n & 15)\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Convert the given number to binary representation\n    binary = bin(n)[2:]\n    \n    # Initialize an empty list to store the modified bits\n    modified_bits = []\n    \n    # Loop through each character of the binary representation\n    for char in binary:\n        \n        # If the character is 0, append it to the modified bits list\n        if char == '0':\n            modified_bits.append('0')\n            \n        # If the character is 1, append a 1 to the modified bits list\n        else:\n            modified_bits.append('1')\n            \n    # Convert the modified bits list to an integer and return it\n    return int(''.join(modified_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the modified number's bits\n    modified_bits = []\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append 1 to the modified_bits list\n        if bit == '1':\n            modified_bits.append(1)\n        # If the bit is odd, append 0 to the modified_bits list\n        else:\n            modified_bits.append(0)\n    # Convert the modified_bits list back to an integer and return it\n    return int(''.join(str(bit) for bit in modified_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            even_bits |= 1\n        n >>= 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to hold the number with even bits set to 1\n    even_set_number = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(len(bin(n)[2:])):\n        # Check if the current bit is even\n        if i % 2 == 0:\n            # Set the corresponding bit in the output number to 1\n            even_set_number |= 1 << i\n    \n    # Return the final number with even bits set to 1\n    return even_set_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    # loop through each bit in the number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # set the current bit in the result to 1\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n    \n    # Loop through each bit of n and append it to the list if it's even\n    while n:\n        if n & 1 == 0:\n            even_bits.append(n)\n        n >>= 1\n    \n    # Convert the list of even bits to an integer and return it\n    return sum(even_bits)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = Counter()\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Add the tuple to the dictionary if it doesn't already exist\n        count_dict[tup] += 1\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return dict(Counter(unique_tuples))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # loop through the test_list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary\n    dictionary = dict(counter)\n\n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    substrings = set()\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.add(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each substring that starts at i and ends at the end of the string\n        for j in range(i, len(str)):\n            # add one to count for each substring that starts and ends at i\n            count += 1\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n, and returns the total number of possible sequences of length n, where each element is a positive integer greater than or equal to twice the previous element and less than or equal to m.\n\n    For example, if m is 10 and n is 5, the function should return 10, as there are 10 possible sequences of length 5 with the given condition.\n\n    The function should use dynamic programming to avoid redundant calculations.\n    '''\n\n    # Initialize the memoization table\n    memo = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    # Initialize the first row and column\n    for i in range(m+1):\n        memo[i][0] = 1\n        memo[i][1] = 0\n\n    # Fill the rest of the table\n    for i in range(2, m+1):\n        for j in range(2, n+1):\n            if memo[i-2][j-1] == 1:\n                memo[i][j] = memo[i-2][j] + memo[i-1][j-1]\n\n    # Return the final answer\n    return memo[m][n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m < 3:\n        return 0\n\n    count = 0\n    prev = 2\n    for i in range(2, n + 1):\n        if prev >= m:\n            count += 1\n        prev = min(prev + 2, m)\n\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # create a list of positive integers from 2 to m\n    nums = [i for i in range(2, m+1)]\n\n    # calculate the number of possible sequences of length n\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)-n+1):\n            if nums[j] - 2*nums[i] >= 2 and nums[j] - 2*nums[i] <= m:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        return all(sequence[i] >= sequence[i-1]*2 and sequence[i] <= m for i in range(1, len(sequence)))\n\n    def get_sequences(current_number):\n        sequences = []\n        for i in range(2, n+1):\n            next_number = current_number + i\n            if is_valid_sequence(next_number):\n                sequences.append(next_number)\n        return sequences\n\n    total_sequences = sum(len(get_sequences(m)) for _ in range(1, n+1))\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n    for i in range(n+1):\n        count += m * (n - i) + i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Calculate the length of the sequence\n    sequence_length = n\n\n    # Initialize the current sequence\n    current_sequence = [0] * sequence_length\n\n    # Initialize the number of possible sequences\n    total_sequences = 1\n\n    # Loop through the values of m\n    for i in range(m // 2 + 1):\n        # Update the previous element of the sequence\n        previous_element = current_sequence[sequence_length - 2]\n\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if previous_element + 2 <= m and current_sequence[sequence_length - 1] < m:\n            # Update the current sequence\n            current_sequence[sequence_length - 1] = previous_element + 2\n\n            # Increment the number of possible sequences\n            total_sequences *= 2\n\n        # Check if the current element is less than or equal to twice the previous element but greater than or equal to the previous element\n        elif previous_element + 2 > m and current_sequence[sequence_length - 1] > previous_element + 2:\n            # Update the current sequence\n            current_sequence[sequence_length - 1] = previous_element + 2\n\n            # Increment the number of possible sequences\n            total_sequences *= 2\n\n    # Return the number of possible sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i == 0 or i == 1:\n            count += 1\n        else:\n            count += (m - 2 * i) // (i - 1) + (m - 2 * i) % (i - 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n\n    for i in range(2, n + 1):\n        current_count = 0\n        for j in range(2, m + 1):\n            if j >= 2 * i and j <= m and i > 0:\n                current_count += 1\n        count += current_count\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(n):\n        if i == 0:\n            total_sequences += (m - i)\n        else:\n            total_sequences += (m - i) * (i + 1) // 2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m // 2):\n        total += n - i\n    return total"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return \"Lists cannot be empty.\"\n\n    if len(list1)!= len(list2):\n        return \"The two lists must have the same length.\"\n\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Loop through the first list to find the last element\n    for i in range(length-1, -1, -1):\n        if i == length-1:\n            # Replace the last element with the elements of the second list\n            for j in range(len(list2)):\n                list1[i] = list2[j]\n        else:\n            # Remove the last element and add it back to the list\n            del list1[i]\n            list1.append(list2[len(list2)-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    list1.pop()\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # If the second list is empty, do nothing\n    if len(list2) == 0:\n        return list1\n\n    # Find the index of the last element of the first list\n    last_index = len(list1) - 1\n\n    # If the last element of the first list is not a list, convert it to a list\n    if type(list1[last_index])!= list:\n        list1[last_index] = [list1[last_index]]\n\n    # Copy the elements of the second list to the last position of the first list\n    for element in list2:\n        list1[last_index].append(element)\n\n    # Return the first list with the replaced last element\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Get the last element of the first list\n    last_element = list1[length - 1]\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[length - 1:length] = list2\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Args:\n        str1 (str): The input string.\n\n    Returns:\n        int: The total number of characters in the string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    return int(math.ceil(sqrt_N))**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Initialize variables\n    i = 1\n    p = 2\n\n    # Loop through until we find a perfect square greater than N\n    while p <= N:\n        i += 1\n        p = math.sqrt(i) ** 2\n\n    # Return the result\n    return p"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    num = sqrt_N * sqrt_N + 1\n    while True:\n        if num > N:\n            break\n        sqrt_num = int(math.sqrt(num))\n        if sqrt_num * sqrt_num == num:\n            break\n        num += 1\n    return num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        # find the square root of N\n        sqrt_N = int(math.sqrt(N))\n        # if sqrt_N is not an integer, increment it until it is\n        if sqrt_N!= math.floor(sqrt_N):\n            sqrt_N += 1\n        # calculate the next perfect square\n        next_sqrt = 2 * sqrt_N * sqrt_N\n        # if next_sqrt is greater than N, return it\n        if next_sqrt > N:\n            return next_sqrt\n        # otherwise, continue searching\n        else:\n            N = next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        sqrt_N += 1\n        if math.isqrt(sqrt_N**2) == sqrt_N:\n            break\n\n    return sqrt_N**2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 0:\n        return \"Invalid input\"\n    \n    #find the square root of N using math.sqrt() function\n    sqrt_N = math.sqrt(N)\n    \n    #take integer part of the square root and multiply by 1 to get the next perfect square\n    next_sqrt_N = int(sqrt_N)*1\n    \n    #check if next perfect square is greater than N\n    if next_sqrt_N > N:\n        #return next perfect square\n        return next_sqrt_N\n    else:\n        #if not, find the next perfect square using binary search\n        left = 0\n        right = sqrt_N\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            #check if mid is a perfect square\n            if math.isqrt(mid) * math.isqrt(mid) == mid:\n                #if yes, check if mid is greater than N and return it\n                if mid > N:\n                    return mid\n                else:\n                    #if not, move left boundary to mid\n                    right = mid - 1\n            else:\n                #if not, move right boundary to mid\n                left = mid + 1\n        \n        #if left boundary is greater than right boundary, return N+1, since no more perfect squares exist\n        return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the integer part of sqrt(N)\n    sqrtN = int(math.sqrt(N))\n\n    # check if N is already a perfect square\n    if sqrtN**2 == N:\n        # if N is already a perfect square, increment by 1 and check if it's a perfect square\n        while not (sqrtN**2 == N + 1):\n            sqrtN += 1\n            N = sqrtN**2\n\n        return N\n\n    # if N is not a perfect square, increment by 1 and check if it's a perfect square\n    while not (sqrtN**2 == N + 1):\n        sqrtN += 1\n        N = sqrtN**2\n\n    return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    i = 1\n    while True:\n        i = i * i\n        if i > N:\n            return i\n        i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the largest perfect square less than or equal to N\n    sqrtN = int(math.sqrt(N))\n    while sqrtN**2 <= N:\n        sqrtN -= 1\n    # find the next largest perfect square greater than sqrtN\n    next_sqrtN = int(sqrtN + math.sqrt(N - sqrtN**2))\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        return is_prime(int(math.sqrt(num)))\n\n    def is_square(num):\n        return num ** 2 == num\n\n    def is_greater(num1, num2):\n        return num1 > num2\n\n    def is_next_square(num1, num2):\n        return is_prime(int(math.sqrt(num1))) and is_prime(int(math.sqrt(num2)))\n\n    def next_square(num):\n        return int(math.sqrt(num)) ** 2\n\n    def next_prime(num):\n        for i in range(num + 1, 2000001):\n            if is_prime(i):\n                return i\n\n    # Step 1: Find the square number that is greater than N\n    square_num = next_square(N)\n    while not is_greater(square_num, N):\n        square_num = next_square(square_num)\n\n    # Step 2: Check if the next square is a perfect square\n    if is_perfect_square(square_num):\n        square_num = next_prime(square_num)\n\n    # Step 3: Check if the next square is a prime number greater than the current square\n    if is_next_square(square_num, N):\n        square_num = next_prime(square_num)\n\n    # Step 4: Return the next square number\n    return square_num"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    max_sum_left = arr[0]\n    max_sum_right = arr[-1]\n    min_sum_left = arr[1]\n    min_sum_right = arr[-2]\n\n    for i in range(1, len(arr)-1):\n        if arr[i] < min_sum_left:\n            min_sum_left = arr[i]\n        if arr[i] > max_sum_right:\n            max_sum_right = arr[i]\n        if arr[i] > min_sum_right:\n            min_sum_right = arr[i]\n        if arr[i] < max_sum_left:\n            max_sum_left = arr[i]\n\n    return max(max_sum_left, max_sum_right)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to store the maximum sum and the maximum subsequence\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the subsequence is increasing\n        if i == 0 or arr[i-1] < arr[i]:\n            # If yes, update the maximum sum and the maximum subsequence\n            if arr[i] + arr[i-1] > arr[i-1] + arr[i-2]:\n                max_sum = arr[i] + arr[i-1]\n                max_subseq = [arr[i], arr[i-1]]\n            else:\n                max_sum = arr[i-1] + arr[i-2]\n                max_subseq = [arr[i-1], arr[i-2]]\n\n    # Return the maximum sum and maximum subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to keep track of the maximum sum and the maximum subsequence\n    max_sum = arr[0]\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n\n        # Check if the current element is increasing and greater than the next element\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            # If the current element is decreasing, check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n            # Reset the current sum to 0\n            current_sum = 0\n\n    # Check if there are any remaining elements in the current sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # find the length of the longest increasing subsequence\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    # find the length of the longest decreasing subsequence\n    lds = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                lds[i] = max(lds[i], lds[j] + 1)\n    # find the maximum length subsequence\n    max_length = max(lis, lds)\n    # find the maximum sum of the longest subsequence\n    max_sum = 0\n    for i in range(n):\n        if lis[i] == max_length:\n            max_sum += arr[i]\n        elif lds[i] == max_length:\n            max_sum -= arr[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize two pointers to track the maximum subsequence ending at each index\n    max_left = 0\n    max_right = 0\n\n    # Initialize a variable to store the maximum sum found so far\n    max_sum = float('-inf')\n\n    # Loop through the array from left to right\n    for i in range(n):\n        # If the current element is increasing, update max_left if necessary\n        if i == 0 or arr[i] < arr[i-1]:\n            max_left = max(max_left + arr[i], arr[i])\n\n        # If the current element is decreasing, update max_right if necessary\n        if i == n-1 or arr[i] > arr[i+1]:\n            max_right = max(max_right + arr[i], arr[i])\n\n        # Update max_sum if necessary\n        max_sum = max(max_sum, max_left, max_right)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # check if the first element is the maximum\n        if arr[0] >= arr[1]:\n            return max(arr[0], arr[1]) + max_sum(arr[2:])\n        else:\n            return max(arr[1], arr[0]) + max_sum(arr[2:])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    # Create an array to store the sum of the increasing and decreasing subsequences.\n    increasing_sum = [0] * len(arr)\n    decreasing_sum = [0] * len(arr)\n\n    # Initialize the sum of the increasing subsequence to the first element of the array.\n    increasing_sum[0] = arr[0]\n\n    # Initialize the sum of the decreasing subsequence to the first element of the array.\n    decreasing_sum[0] = arr[0]\n\n    # Loop through the array from the second element.\n    for i in range(1, len(arr)):\n        # If the current element is greater than the previous element, then update the increasing subsequence sum.\n        if arr[i] > increasing_sum[i-1]:\n            increasing_sum[i] = increasing_sum[i-1] + arr[i]\n        # If the current element is less than the previous element, then update the decreasing subsequence sum.\n        elif arr[i] < decreasing_sum[i-1]:\n            decreasing_sum[i] = decreasing_sum[i-1] - arr[i]\n        # If the current element is equal to the previous element, then check if it is the first element of the increasing subsequence.\n        else:\n            if arr[i] == arr[i-1]:\n                increasing_sum[i] = increasing_sum[i-1] + arr[i]\n            else:\n                increasing_sum[i] = arr[i]\n\n        # If the current element is greater than the previous element, then update the decreasing subsequence sum.\n        if arr[i] < decreasing_sum[i-1]:\n            decreasing_sum[i] = decreasing_sum[i-1] - arr[i]\n        # If the current element is less than the previous element, then update the increasing subsequence sum.\n        elif arr[i] > increasing_sum[i-1]:\n            increasing_sum[i] = increasing_sum[i-1] + arr[i]\n        # If the current element is equal to the previous element, then check if it is the first element of the decreasing subsequence.\n        else:\n            if arr[i] == arr[i-1]:\n                decreasing_sum[i] = decreasing_sum[i-1] - arr[i]\n            else:\n                decreasing_sum[i] = arr[i]\n\n    # Find the maximum sum of the increasing and decreasing subsequences.\n    max_sum = max(increasing_sum[-1], decreasing_sum[-1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is bitonic\n    if is_bitonic(arr):\n        # Initialize variables\n        n = len(arr)\n        max_sum = float('-inf')\n        curr_sum = 0\n        prev_sum = 0\n\n        # Traverse the array and find the maximum sum\n        for i in range(1, n):\n            if arr[i] < arr[i-1]:\n                curr_sum += arr[i]\n            else:\n                curr_sum = 0\n\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n            if arr[i] < arr[i-1]:\n                prev_sum = curr_sum\n\n        return max_sum\n\n    else:\n        return \"The array is not bitonic.\""
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for the bitonic subsequence and its maximum sum\n    is_increasing = True\n    current_sum = arr[0]\n    max_sum = current_sum\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if is_increasing:\n                current_sum += arr[i]\n            else:\n                current_sum -= arr[i-1]\n            is_increasing = False\n        elif arr[i] < arr[i-1]:\n            if not is_increasing:\n                current_sum += arr[i-1]\n            else:\n                current_sum -= arr[i]\n            is_increasing = True\n        max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables for the current subsequence and the maximum sum\n    current_subseq = []\n    max_sum = float('-inf')\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            current_subseq.append(arr[i])\n        elif arr[i] < arr[i-1]:\n            if i > 1 and arr[i] > arr[i-2]:\n                current_subseq.append(arr[i])\n            elif i > 1 and arr[i] < arr[i-2]:\n                current_subseq.append(arr[i-2])\n                current_subseq.append(arr[i])\n            \n            # Calculate the maximum sum of the current subsequence and update the maximum sum\n            current_sum = sum(current_subseq)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 1\n    while abs(guess**2 - number) >= 0.0001:\n        if guess**2 < number:\n            guess += 0.0001\n        else:\n            guess -= 0.0001\n        i += 1\n    print(guess)\n    print(\"Number of iterations:\", i)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number / 2\n    x = guess\n    err = 0.00001\n    i = 0\n    \n    # Babylonian method\n    while err > 0.000001:\n        x = guess - (guess ** 2 - number) / (2 * guess)\n        err = abs(x - guess)\n        guess = x\n        i += 1\n        \n    # Print result\n    print(\"Babylonian method: Square root of\", number, \"is\", round(x, 6), \"after\", i, \"iterations.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the approximation of the square root\n    approximation = number / 2\n\n    # Calculate the number of iterations needed to get within 0.0001 of the exact square root\n    iterations = 0\n    while abs(number - approximation * approximation) > 0.0001:\n        approximation = approximation - (number / approximation)\n        iterations += 1\n\n    # Return the approximation of the square root\n    return approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0.0\n    high = number\n    while abs(high - low) > 1e-10:\n        mid = (high + low) / 2\n        if mid*mid < number:\n            low = mid\n        else:\n            high = mid\n    return high"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the variable to 1 and the variable to the square root of the input number\n    guess = 1\n    x = number ** 0.5\n    \n    # Iterate until the difference between the current guess and the square root of the input number is less than or equal to 0.00001\n    while abs(guess * guess - x) > 0.00001:\n        # Compute the next guess by computing the average of the current guess and the square root of the input number\n        guess = (guess + x / guess) / 2\n    \n    # Return the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Define the maximum number of iterations to perform\n    max_iterations = 100\n\n    # Initialize the guess and the count of iterations\n    guess = number // 2\n    count = 0\n\n    # Loop until the guess is within a tolerance of the actual square root\n    while count < max_iterations and abs(guess*guess - number) > 0.001:\n        guess = (guess + number // guess) // 2\n        count += 1\n\n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b = 0.5, 1.0\n    while True:\n        c = (a + b) / 2.0\n        if abs(number - c**2) < 0.0000001:\n            return c\n        elif number < c**2:\n            b = c\n        else:\n            a = c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10\n    guess = 1.0\n    prev_guess = 0.0\n\n    while abs(guess**2 - number) > epsilon:\n        prev_guess = guess\n        guess = 0.5 * (guess + number / guess)\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the guess and the upper and lower limits for the search\n    guess = number\n    upper = number * 1.1\n    lower = number * 0.9\n    \n    # compute the square root using the babylonian method\n    while abs(guess**2 - number) > 0.00001:\n        if guess**2 > number:\n            upper = guess\n        else:\n            lower = guess\n        guess = (upper + lower) / 2\n        \n    # return the guess as the square root\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the first row and column of the table with 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the rest of the table using the following recurrence relation\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j+1][i-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j], dp[j+1][i])\n\n    return dp[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            if i > 1 and str[i] == str[i - 2]:\n                dp[i] = max(dp[i - 1], dp[i - 2]) + 2\n            else:\n                dp[i] = max(dp[i - 1], dp[i])\n\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n                max_len = max(max_len, dp[start][end])\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize table to store lengths of palindromic subsequences\n    table = [[0] * n for _ in range(n)]\n    # Initialize length of longest palindromic subsequence\n    length = 0\n    # Iterate over all substrings of length 1\n    for i in range(n):\n        table[i][i] = 1\n        if s[i] == s[i]:\n            length = 1\n    # Iterate over all substrings of length 2 and update table accordingly\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = 2 + table[i + 1][j - 1]\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    # Return the length of longest palindromic subsequence\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    # Create a 2D table to store the length of the longest palindromic subsequence for each substring\n    table = [[0] * len(s) for _ in range(len(s))]\n    # Initialize the first row and first column\n    for i in range(len(s)):\n        table[i][i] = 1\n    # Fill in the rest of the table using dynamic programming\n    for i in range(1, len(s)):\n        for j in range(1, len(s)):\n            if s[i] == s[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store the lengths of longest palindromic subsequences for all prefixes of the string\n    L = [[0]*(n+1) for i in range(n+1)] \n    # Initialize the first row and column of the table\n    for i in range(n+1):\n        L[i][0] = 0\n        L[0][i] = 0\n    \n    # Fill in the rest of the table using dynamic programming approach\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str[i-1] == str[j-1]:\n                L[i][j] = L[i-1][j-1] + 2\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence\n    return L[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    # Initialize an empty list to store the lengths of LPS for each substring\n    lps_list = []\n\n    # Initialize a variable to store the length of the longest palindromic subsequence\n    max_lps = 0\n\n    # Initialize variables to store the start and end indices of the current substring\n    start = 0\n    end = 0\n\n    # Loop through the string\n    for i in range(len(str)):\n        # If the current character is odd, then the LPS for the substring starting from i to i+1 is 1\n        if (i % 2!= 0):\n            lps_list.append(1)\n\n        # If the current character is even, then find the LPS for the substring starting from i to j+1\n        else:\n            # Initialize a variable to store the length of the LPS for the substring starting from i to j+1\n            lps_sub = 0\n\n            # Loop through the substring from i to j\n            for j in range(i, len(str)):\n                # If the characters at i and j are the same, then the LPS for the substring starting from i to j is 2 + the LPS for the substring starting from i+1 to j-1\n                if (str[i] == str[j]):\n                    lps_sub = 2 + lps_list[j-i-1]\n\n                # If the characters at i and j are not the same, then the LPS for the substring starting from i to j is either 1 or 2 + the LPS for the substring starting from i+1 to j-1\n                else:\n                    lps_sub = max(lps_list[j-i], lps_sub)\n\n                # Update the LPS for the current substring if it is greater than the LPS for the longest palindromic subsequence found so far\n                if (lps_sub > max_lps):\n                    max_lps = lps_sub\n\n            # Add the LPS for the current substring to the LPS list\n            lps_list.append(lps_sub)\n\n    # Return the length of the longest palindromic subsequence\n    return max_lps"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a table to store the length of longest palindrome ending at each index \n    # in the string\n    table = [[0 for j in range(n)] for i in range(n)] \n    # base case: empty string has length 1 \n    table[0][0] = 1 \n    # fill in the table using dynamic programming \n    for i in range(1, n): \n        for j in range(1, n): \n            if str[i] == str[j]: \n                table[i][j] = table[i-1][j-1] + 2 \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 1:\n        return 1\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    max_len = 1\n    start = 0\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    sum_of_harmonics = 1\n\n    for i in range(n-1):\n        sum_of_harmonics += 1/i\n\n    return sum_of_harmonics"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # loop through from 1 to n-1\n    for i in range(1, n):\n        # add 1 to i\n        sum += i\n    # divide sum by n-1\n    harmonic_sum = sum / (n-1)\n    # return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes an integer n and returns the harmonic sum of n-1.\n\n    Steps to calculate the harmonic sum:\n    1. Initialize a variable sum to 0.\n    2. For i from 1 to n-1, add 1 to sum.\n    3. Return sum.\n\n    Args:\n    n: An integer greater than or equal to 1.\n\n    Returns:\n    An integer representing the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Calculate the harmonic sum using the formula:\n    # h = (1/n) + (1/n-1) +... + (1/1)\n    harmonic_sum = 1\n    for i in range(2, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    The harmonic sum of an integer n is defined as:\n    \n    sum = (1/n) * (1/n-1) + (2/n) * (2/n-1) +... + (n-1/n) * (n-1/n-1)\n    \n    For example, for n=6, the harmonic sum is:\n    \n    sum = 1/6 + 2/5 + 3/4 + 4/3 + 5/2 + 6/1 = 4.5\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n) + (1/(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return harmonic_sum(n-1) + 1/n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create sets to store unique elements from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(set1.intersection(set2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set for the second array\n    set_nums2 = set(array_nums2)\n\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number is in the second array\n        if num in set_nums2:\n            # If it is, add it to the intersection set\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # creating an empty dictionary to store the intersection of the two arrays\n    intersection_dict = {}\n    \n    # iterating through the array_nums1\n    for num1 in array_nums1:\n        # checking if the number is present in the array_nums2\n        if num1 in array_nums2:\n            # if it is present, incrementing the count in the intersection_dict\n            intersection_dict[num1] = intersection_dict.get(num1, 0) + 1\n    \n    # creating an empty list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # iterating through the intersection_dict\n    for num2 in array_nums2:\n        # checking if the count of the number in the intersection_dict is greater than 0\n        if intersection_dict.get(num2, 0) > 0:\n            # if it is, adding the number to the intersection_list and decrementing its count in the intersection_dict\n            intersection_list.append(num2)\n            intersection_dict[num2] -= 1\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the values in array_nums2, with the keys as the values in array_nums1\n    dictionary = {}\n    for num in array_nums1:\n        dictionary[num] = True\n\n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate over the values in array_nums2 and check if they are keys in the dictionary\n    for num in array_nums2:\n        if num in dictionary:\n            intersection.append(num)\n            # Remove the key from the dictionary to avoid duplicates\n            del dictionary[num]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    for num in set1:\n        if num in set2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two sets to store unique elements from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # find the intersection of the two sets and store them in a new set\n    intersection = set1.intersection(set2)\n\n    # convert the set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n\n    result = []\n\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        print(f'Complex number: {real} + {imag}i')\n        print(f'Polar coordinates: {magnitude} radians from the x-axis')\n        print(f'Angle (in degrees): {angle * 180/cmath.pi}')\n        print('------------------------------')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:  \n        if isinstance(num, complex):  \n            r = cmath.sqrt(num.real**2 + num.imag**2)  \n            phi = cmath.phase(num)  \n            print(\"({}, {})\".format(r, phi))  \n        else:  \n            print(\"Invalid input\")  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_coords.append((real, imag))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert complex number to polar coordinates\n        real, imag = cmath.polar(number)\n        \n        # Append the polar coordinates to the result list\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        x = num.real\n        y = num.imag\n        r = cmath.sqrt(x**2 + y**2)\n        phi = cmath.phase(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(\"Polar coordinates for\", num, \"are\", r, \"and\", theta, \"radians.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        try:\n            z = complex(num)\n            r = abs(z)\n            theta = cmath.phase(z)\n            result.append((r, theta))\n        except:\n            result.append(None)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # get the magnitude and phase of the complex number\n        mag = abs(num)\n        phase = cmath.phase(num)\n        \n        # convert the magnitude to degrees\n        mag_deg = cmath.degrees(mag)\n        \n        # create a tuple of polar coordinates\n        polar_coords = (mag_deg, phase)\n        \n        # append the polar coordinates to the result list\n        result.append(polar_coords)\n    \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n\n    # loop through the input list and convert each number to polar coordinates\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # add the polar coordinate to the list\n        polar_coords.append((r, theta))\n    \n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        raise ValueError(\"Length of list cannot be greater than length of combination\")\n    result = []\n    for comb in combinations_with_replacement(l, n):\n        result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combination = tuple(sorted(l[i:j]))\n            if len(combination) == n:\n                result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    return [tuple(combination) for combination in combinations_with_replacement(lst, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l, n):\n            color_combinations.append(tuple(comb))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is prime\n        is_prime = True\n        # Check if i divides n without leaving a remainder\n        for j in range(2, int(n**0.5)+1):\n            if n % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through numbers from 2 to n-1\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, increment count\n        if is_prime:\n            count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns the tuple that has the maximum sum of elements.\n    '''\n    max_sum = max(test_tup1[0], test_tup2[0]) # get the maximum element from the first tuple\n    for i in range(1, len(test_tup1)):\n        max_sum = max(max_sum + test_tup1[i], test_tup2[i]) # add the i-th element of the first tuple to the maximum sum\n    for i in range(1, len(test_tup2)):\n        max_sum = max(max_sum + test_tup2[i], test_tup1[i]) # add the i-th element of the second tuple to the maximum sum\n    return (max_sum, test_tup1, test_tup2) # return the maximum sum and the two tuples with the maximum sum"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the largest elements of the input tuples.\n    '''\n\n    if test_tup1[0] >= test_tup2[0] and test_tup1[0] >= test_tup1[1]:\n        return test_tup1\n    elif test_tup2[0] >= test_tup2[1]:\n        return test_tup2\n    else:\n        return (test_tup1[0], test_tup2[0])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Define a function that compares two tuples based on the length of the tuples\n    def compare_length(tup1, tup2):\n        \"\"\"\n        Define a function to compare the length of two tuples.\n        \"\"\"\n        if len(tup1) > len(tup2):\n            return tup1, tup2\n        elif len(tup1) < len(tup2):\n            return tup2, tup1\n        else:\n            return tup1, tup1\n    \n    # Call the compare_length function to find the tuple with the maximum length\n    max_tup = compare_length(test_tup1, test_tup2)[0]\n    \n    # Define a function that finds the maximum element in a tuple\n    def find_max(tup):\n        \"\"\"\n        Define a function to find the maximum element in a tuple.\n        \"\"\"\n        max_val = max(tup)\n        return max_val\n    \n    # Call the find_max function on the maximum tuple to find the maximum element in both tuples\n    max_val1 = find_max(max_tup)\n    max_val2 = find_max(max_tup)\n    \n    # Return the tuple with the maximum element\n    return (max_tup, max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    \n    # Find the maximum element(s) in each tuple\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    \n    # Create a new tuple with the maximum element(s)\n    new_tup = (max_1, max_2)\n    \n    # Return the new tuple with the maximum element(s)\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = max(test_tup1, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum sum.\n    If the two tuples have the same sum, it returns the first tuple with the maximum length.\n    '''\n    sum1 = sum(test_tup1)\n    sum2 = sum(test_tup2)\n    \n    if sum1 >= sum2:\n        if len(test_tup1) >= len(test_tup2):\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        if len(test_tup2) >= len(test_tup1):\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = max(test_tup1)\n    max_index = test_tup1.index(max_element)\n\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_element:\n            max_element = test_tup2[i]\n            max_index = i\n    \n    return (max_element, max_index)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store the maximum values of each tuple\n    max1 = max2 = float('-inf')\n\n    # Iterate through each element of the tuples and check if it's greater than the current maximum\n    for elem in test_tup1 + test_tup2:\n        if elem > max1:\n            max2 = max1\n            max1 = elem\n        elif elem > max2:\n            max2 = elem\n\n    # Return the maximum values of the two tuples\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # initialize variables for the maximum elements\n    max1 = max2 = None\n    \n    # loop through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max1 is None or test_tup1[i] > max1:\n                max1 = test_tup1[i]\n        elif test_tup1[i] < test_tup2[i]:\n            if max2 is None or test_tup1[i] > max2:\n                max2 = test_tup1[i]\n    \n    # check if any of the elements were maximized\n    if max1 is not None:\n        return max1, max2\n    elif max2 is not None:\n        return max2, max1\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b = 1, 1\n    while True:\n        if b**2 > 4*a**3 + 1:\n            a += 1\n            b = 1\n        else:\n            b += 1\n            if b**2 == 4*a**3 + 1:\n                return a + b - 2\n        if b**2 > 4*a**3 + n:\n            break"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    def sieve_of_eratosthenes(n):\n        \"\"\"\n        Generate a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n        \"\"\"\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return [i for i in range(2, n + 1) if primes[i]]\n\n    def is_newman_prime(n):\n        \"\"\"\n        Check if n is a newman-shanks-williams prime number.\n        \"\"\"\n        if n % 2 == 0:\n            return False\n        if n < 13:\n            return n in primes\n        if n < 29:\n            return n in sieve_of_eratosthenes(n)\n        return n in sieve_of_eratosthenes(28) + sieve_of_eratosthenes(29)\n\n    return next(x for x in range(2, n + 1) if is_newman_prime(x))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        A helper function to find the next prime number.\n        \"\"\"\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    count = 0\n    num = 3  # start with 3 since 2 is not a newman\u2013shanks\u2013williams prime\n    while count < n:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num = next_prime(num)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize a list to store the prime numbers\n    primes = []\n\n    # initialize the number to check\n    num = 2\n\n    # loop through the numbers from 2 to n\n    while len(primes) < n:\n        # check if num is a prime number\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n\n    # return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize counter variable\n    count = 0\n    # initialize a boolean variable to keep track of prime status\n    is_prime = True\n    \n    # iterate through numbers 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        # check if number is divisible by i\n        if n % i == 0:\n            # if number is divisible, set is_prime to False\n            is_prime = False\n            # break out of loop and return count\n            break\n            \n    # if is_prime is still True after iterating through all numbers, then n is a prime number\n    if is_prime:\n        count += 1\n        # return count if it is 1, otherwise return count + 1\n        return count if count == 1 else count + 1\n    else:\n        # if n is not a prime number, then return -1 to indicate error\n        return -1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 0\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, increment the current prime counter\n        if is_prime:\n            current_prime += 1\n            if current_prime == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize count of primes found to 0\n    count = 0\n    # Initialize a boolean variable to keep track of whether we've found a prime so far\n    found_prime = False\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a newman-shanks-williams prime\n        if i == 2 or i == 3:\n            count += 1\n        else:\n            # Initialize a boolean variable to keep track of whether we've found a prime so far\n            is_prime = True\n            # Loop through all numbers from 2 to sqrt(i)\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            # If i is a newman-shanks-williams prime, increment the count and set found_prime to True\n            if is_prime:\n                count += 1\n                found_prime = True\n    # If we haven't found a prime so far, return None\n    if not found_prime:\n        return None\n    # Otherwise, return the nth newman-shanks-williams prime number\n    else:\n        return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to store the number of primes found so far\n    count = 0\n\n    # Initialize a list to store the primes found so far\n    primes = []\n\n    # Start checking for primes from 2\n    for num in range(2, n+1):\n\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            primes.append(num)\n\n        # If we have found the nth prime, return the value\n        if count == n:\n            return primes[n-1]\n\n    # If we reach this point, no nth prime was found\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Function to check if a number is prime\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, num): \n            if num % i == 0: \n                return False \n        return True \n\n    # Initialize variables\n    count = 0\n    prime = 1\n\n    # Iterate through numbers until nth newman-shanks-williams prime number is found\n    while count < n: \n        prime += 1\n        count = 0\n        # Check if prime is newman-shanks-williams prime\n        for i in range(2, prime): \n            if prime % i == 0 and is_prime(i) and is_prime(prime // i): \n                count += 1\n                break\n        if count == 0: \n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    s = [True] * (n + 1)\n    s[0] = s[1] = False\n    p = 2\n    while p**2 <= n:\n        if s[p]:\n            for i in range(p**2, n + 1, p):\n                s[i] = False\n        p += 1\n    return next(i for i in range(n + 1) if s[i])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # checking if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples must have the same length.\"\n    \n    # initializing the result tuple with zeros\n    result_tup = (0, 0)\n    \n    # performing element-wise division and storing the result in the result tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] / test_tup2[i]\n    \n    # returning the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples should have equal length.\")\n        return\n\n    # Perform element-wise division of the tuples\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length.\")\n    \n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        test_tup1[i] /= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append('Error: Cannot perform division by zero.')\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_lst = []\n    # Loop through the elements of both input tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division operation between the corresponding elements of the input tuples\n        result_lst.append(test_tup1[i] / test_tup2[i])\n    # Return the resulting list\n    return result_lst"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n\n    # Perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: The divisor cannot be zero\")\n            return\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup += (division_elements(test_tup1[i], test_tup2[i]),)\n        elif type(test_tup1[i]) == tuple and type(test_tup2[i])!= tuple:\n            result_tup += (division_elements(test_tup1[i], test_tup2),)\n        elif type(test_tup1[i])!= tuple and type(test_tup2[i]) == tuple:\n            result_tup += (division_elements(test_tup1, test_tup2[i]),)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples should have the same length.\")\n        return\n\n    # perform element-wise division and return the result as a tuple\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length.'\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup += (None,)\n        else:\n            try:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            except ZeroDivisionError:\n                return 'Error: Division by zero.'\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = len(list1) // 2\n    \n    # Calculate the second part of the list\n    second_part_length = len(list1) - first_part_length\n    \n    # Split the list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # check if the length of the list is greater than L\n    if len(lst) > L:\n        # create a list of first L elements\n        first_part = lst[:L]\n        # create a list of last (len(lst)-L) elements\n        last_part = lst[L:]\n        # return the two parts in a tuple\n        return (first_part, last_part)\n    else:\n        # if the length of the list is less than or equal to L, return the original list as the first part\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    if n < L:\n        return (lst, [])\n    else:\n        return ([lst[:L]], [lst[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < 2 * L:\n        raise ValueError('The length of the list must be at least 2L.')\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    # check if L is larger than the length of lst\n    if L > len(lst):\n        raise ValueError(\"L is larger than the length of lst\")\n\n    # split the list into two parts and return them as a tuple\n    return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L > length:\n        print(\"Error: L cannot be greater than the length of the list.\")\n        return None\n    elif L == 0:\n        print(\"Error: L cannot be 0.\")\n        return None\n    else:\n        half = length // 2\n        first_part = list1[:half]\n        second_part = list1[half:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: List is too small.\")\n        return None\n    else:\n        mid = L // 2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    :param h_age: Height in inches.\n    :type h_age: int\n    :return: Age in dog years.\n    :rtype: float\n    \"\"\"\n    inches = 12 # inch = 12 inches = 1 yard\n    feet = h_age // inches # calculate feet\n    remaining_inches = h_age % inches # calculate remaining inches\n    age_in_dogs = (feet + (remaining_inches / 12)) / 7 # calculate age in dog years\n    return age_in_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n        h_age (int): The height of the dog in inches.\n\n    Returns:\n        float: The dog's age in dog's years.\n    \"\"\"\n\n    # Convert the height from inches to centimeters\n    height_cm = h_age * 2.54\n\n    # Calculate the dog's age in dog's years\n    age_years = height_cm / 70\n\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = h_age * 7\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) / 365"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 7 + h_age\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate dog's age in dog years\n    dog_age = (h_age - 12) * 7\n\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    # iterate over each index of the list\n    for i in range(0, len(S), step):\n        # create a new list with the current index and the next n-1 elements\n        new_list = S[i:i+step]\n        # append the new list to the result list\n        result.append(new_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    if step < 1:\n        raise ValueError(\"The step value must be a positive integer\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list `S` into a list of lists, where each inner list contains every `step`th element of `S`.\n\n    Parameters:\n    S (list): the list to split\n    step (int): the step size\n\n    Returns:\n    list of lists: a list of lists, where each inner list contains every `step`th element of `S`\n    \"\"\"\n    if not isinstance(S, list):\n        raise ValueError(\"Input must be a list\")\n    if step <= 0:\n        raise ValueError(\"Step size must be a positive integer\")\n\n    # Split the list into smaller lists\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('S must be a list')\n    if not isinstance(step, int):\n        raise TypeError('step must be an integer')\n    if step <= 0:\n        raise ValueError('step must be positive')\n    \n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = []\n    for i in range(n):\n        result.append(S[i*step:i*step+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l # formula for lateral surface area of a cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l # Formula for lateral surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l + l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    num = 1\n    \n    for i in range(1, n+1, 2):\n        sum += num**2\n        num += 2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    num = 1\n    while num <= n * 2:\n        if num % 2!= 0:\n            sum += num ** 2\n        num += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 1\n    sum_of_squares = 0\n    while count <= n:\n        sum_of_squares += count ** 2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current odd number to the sum\n        sum += i*i\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the sum\n        sum += i**2\n\n    # Return the sum of the squares of the odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    total = 0\n    for i in range(1, n + 1, 2):\n        total += i * i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 0\n    \n    # Loop through the numbers and count the number of stars\n    while count < n:\n        count += 1\n        num += 1\n        \n    # Return then'th star number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    for i in range(1, n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(\"*\", end=\"\")\n        print()\n        count += 1\n    print(\"\\nTotal number of stars:\", count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n > 1:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(n):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    # Initialize the result to an empty string\n    result = \"\"\n    \n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # If i is divisible by 3, append a * to the result\n        if i % 3 == 0:\n            result += \"*\"\n        \n        # If i is divisible by 5, append a * to the result\n        if i % 5 == 0:\n            result += \"*\"\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a variable to keep track of the current number\n    current_num = 1\n    \n    # Initialize a variable to keep track of the number of stars\n    num_stars = 1\n    \n    # Loop through the sequence of numbers from 1 to n\n    for i in range(1, n+1):\n        # If the current number is a multiple of 3, print a star\n        if current_num % 3 == 0:\n            print(\"*\", end=\"\")\n            # Increment the number of stars\n            num_stars += 1\n        else:\n            # If the current number is a multiple of 5, print a star\n            if current_num % 5 == 0:\n                print(\"*\", end=\"\")\n                # Increment the number of stars\n                num_stars += 1\n            else:\n                # If the current number is not a multiple of both 3 and 5, print a space\n                print(\" \", end=\"\")\n        # Increment the current number\n        current_num += 1\n    \n    # If the number of stars is odd, print a space after the stars\n    if num_stars % 2 == 1:\n        print(\" \")"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number variable to 1\n    star_num = 1\n    \n    # loop n-1 times to calculate the nth star number\n    for i in range(1, n):\n        # add the current value of star_num to the sum of the previous two values\n        star_num += i\n    \n    # return the final value of star_num\n    return star_num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    \"\"\"\n    This function takes a character and returns its ASCII value.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a string k and returns the ASCII value of the first character in the string.\n    '''\n    if len(k) == 0:\n        return 0\n    else:\n        return ord(k[0])"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            sum_even += arr[index]\n\n        if index % 2 == 0:\n            index += 1\n        else:\n            index += 2\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n\n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n                count += 1\n\n    if count > 0:\n        return sum\n    else:\n        return \"No even number found\""
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate over first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of i^5 using a loop to avoid calculating 5^0, 5^1,..., 5^i\n        sum += i**5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum_even += i**5\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 \n    for i in range(2, n+1): \n        sum += i ** 5 \n    return sum "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(2, n+1):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i ** 5 == i ** 5:\n            result += i\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i*i*i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Extract the rear element of the tuple and add it to the rear_list\n        rear_list.append(tup[-1])\n\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[1:]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # create a new tuple that contains the elements of test_tup1\n    new_tup = ()\n    \n    # iterate over the elements of test_tup1 and test_tup2\n    for i in range(len(test_tup1)):\n        # if the index of the element of test_tup1 is equal to the index of the element of test_tup2, add the difference between the two elements\n        if i == test_tup2.index(test_tup1[i]):\n            new_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            new_tup += (test_tup1[i],)\n    \n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of the same length.\")\n        return None\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the tuples and compare the elements by index\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        if test_tup1[index] == test_tup2[index]:\n            test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize an empty list to hold the result\n    result = []\n    # iterate through the first tuple using a for loop\n    for i in range(len(test_tup1)):\n        # if the index is within the bounds of the second tuple, subtract the corresponding elements and append the result to the result list\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        # if the index is out of bounds of the second tuple, append the first tuple element to the result list\n        else:\n            result.append(test_tup1[i])\n    # return the result list\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(n+1):\n        numerator = math.factorial(i)\n        denominator = math.factorial(2*n-i)\n        odd_binomial_coeff = numerator/denominator\n        if i%2 == 0:\n            sum_even += odd_binomial_coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(2, n-i+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n            else:\n                continue\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize a variable to keep track of the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Loop through the even indices of n\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # If it is, add it to the sum\n            even_sum += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize variables\n    coeff_sum = 0\n    index = 0\n\n    # loop through each index i\n    for i in range(1, n+1):\n        # calculate the binomial coefficient for i\n        coeff = math.comb(n, i)\n\n        # check if i is even\n        if i % 2 == 0:\n            # add the binomial coefficient to the sum\n            coeff_sum += coeff\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(1, n+1):\n        # check if the index is even\n        if i % 2 == 0:\n            # calculate the binomial coefficient for the index i\n            binomial_coeff = math.comb(n, i)\n            # check if the index is even and add to the sum if it is\n            if i % 2 == 0:\n                sum_even_binomial += binomial_coeff\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_index_binomial_coeffs = 0\n\n    # loop through all the values of i\n    for i in range(1, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # calculate the binomial coefficient of i and n-i\n            binomial_coeff = math.comb(n, i)\n            # check if the binomial coefficient is even\n            if binomial_coeff % 2 == 0:\n                # add the even index binomial coefficient to the sum\n                sum_even_index_binomial_coeffs += binomial_coeff\n\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        for j in range(2, i//2+1):\n            if i % 2 == 0 and j % 2 == 0:\n                sum_even_coeffs += math.comb(i, j)\n    return sum_even_coeffs\n\nn = 5\nprint(\"Sum of even index binomial coefficients for\", n, \"is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    # initialize sum to zero\n    sum_even = 0\n    # loop through even indices\n    for i in range(2, n+1, 2):\n        # calculate binomial coefficient for i and n-i\n        coeff = math.comb(n, i)\n        # add even term to sum\n        if i % 2 == 0:\n            sum_even += coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables for sum and index sum\n    sum_even_binomial = 0\n    even_index_sum = 0\n    \n    # iterate through even indices of the binomial coefficients\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i-1)\n        \n        # check if the coefficient is even\n        if i % 2 == 0:\n            # add the even coefficient to the sum\n            sum_even_binomial += binomial_coeff\n            \n            # add the even coefficient to the sum of even indices\n            even_index_sum += binomial_coeff\n            \n    # return the sum of even index binomial coefficients\n    return sum_even_binomial + even_index_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    total = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            total += (-1)**(i-j) * math.factorial(j-1) // math.factorial(i-1)\n\n    return total"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14159 * r**2 * h) / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    volume = (3/5) * pi * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = ((1/3) * 3.14159 * r * r * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for the volume of a cylinder is V = (1/3) * pi * r^2 * h\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    return (1/3) * 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and returns a new dictionary that contains only entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if i == 0:  # if the element is the first one in the tuple\n            continue  # skip it (it's the same as not counting it)\n        else:\n            count += 1  # count the element in the tuple\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((5 * n * n - 3 * n) / 2)\n\nfor i in range(1, 21):\n    print(is_num_decagonal(i))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 1\n    row = 1\n    \n    # Check if the input is positive\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    # Calculate the nth decagonal number\n    while row <= n:\n        decagonal += row\n        row += 1\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # initialize variables\n    prev_num = 1\n    current_num = 2\n    \n    # loop until nth decagonal number is found\n    for i in range(2, n+1):\n        # calculate next number\n        next_num = prev_num + current_num\n        \n        # update variables\n        prev_num = current_num\n        current_num = next_num\n    \n    # return the nth decagonal number\n    return current_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return n**2 + 2*n + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the decagonal number\n    decagonal = 0\n\n    # Calculate the nth term of the sequence\n    for i in range(1, n+1):\n        # Calculate the value of the decagonal number\n        decagonal += (i * (3*i-1) + 1) // 2\n\n    # Check if the decagonal number is equal to the input number\n    if decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += (10 ** i)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the variable to store the decagonal number\n    decagonal = 0\n    \n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the value of i to the decagonal number\n        decagonal += i\n        \n    # Return the decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num = decagonal_num * (10 * i - 5) // 10 + i\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the base value of the decagonal number\n    base_value = 1\n    # loop through the number of times specified by n\n    for i in range(n):\n        # add the base value to the sum of squares\n        sum_of_squares = (i * i) + (i * i + 1)\n        # update the base value by the sum of squares\n        base_value = sum_of_squares\n    # return the base value of the decagonal number\n    return base_value"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 1\n    i = 1\n    \n    # Loop through the numbers\n    while i <= n:\n        # Increment the decagonal number\n        decagonal += i\n        \n        # Increment the variable for the next iteration\n        i += 2\n    \n    # Return the decagonal number\n    return decagonal"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the list to find the index of the element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # return the boolean and index position of the element\n            return True, i\n    # if the element is not found, return False and -1\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    \n    # Check if the set is empty or not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list\n    for item in test_list:\n        # If the item is already in the set, it's not unique\n        if item in unique_set:\n            return False\n        # Otherwise, add the item to the set\n        else:\n            unique_set.add(item)\n    \n    # If we reach this point, all elements were unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    unique = True\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Subtract each element of the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the lists and subtract each element\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 - num2)\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the \n    difference between them element-wise.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n    # iterate through each element of the two lists\n    for i in range(len(nums1)):\n        diff_list.append(nums1[i] - nums2[i])\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    return [a-b for a,b in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit in the string\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in num_str:\n        # If the character is not already in the dictionary, add it with a value of 1\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        # If the character is already in the dictionary, increment its value by 1\n        else:\n            freq_dict[char] += 1\n\n    # Loop through each digit in the string and check if its frequency is less than or equal to the digit itself\n    for digit in range(10):\n        # If the digit is not in the dictionary, return False\n        if digit not in freq_dict:\n            return False\n        # If the digit is in the dictionary and its frequency is less than or equal to the digit itself, return True\n        elif freq_dict[str(digit)] <= digit:\n            return True\n\n    # If no digit passes the frequency check, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n\n    # iterate over the digits in the number\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # if it is, increment its frequency by 1\n            freq[digit] += 1\n        else:\n            # if not, add the digit and frequency of 1 to the dictionary\n            freq[digit] = 1\n\n    # iterate over the digits in the dictionary\n    for digit in freq:\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] >= int(digit):\n            # if it is, return True\n            return True\n        # if not, return False\n        else:\n            return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # count the frequency of each digit in the integer\n    digit_freq = [0] * 10\n    for digit in str(n):\n        digit_freq[int(digit)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit > digit:\n            return False\n\n    # if all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = [0] * 10\n\n    for i in str(n):\n        freq[int(i)] += 1\n\n    for i in freq:\n        if i > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10 # initialize a list of 10 zeros\n    for digit in str(n): # loop through each digit in the number\n        freq[int(digit)] += 1 # increment the corresponding frequency\n    for i in range(10): # loop through each digit\n        if freq[i] > 0 and freq[i] > i: # check if the frequency is greater than 0 and greater than the digit itself\n            return False # return False if any digit has a frequency greater than the digit itself\n    return True # return True if all digits have a frequency less than or equal to the digit itself"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    :param n: An integer value to be validated.\n    :return: True if the integer passes the validation, False otherwise.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for i in range(1, 10):\n        if freq[i] > freq[i-1]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for d in digits:\n        freq[d] += 1\n\n    for i in range(10):\n        if freq[i] > freq[n % i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    \n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Convert the integer to a string and iterate over each character\n    for digit in str(n): \n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq: \n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else: \n            freq[digit] = 1\n\n    # Iterate over the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq: \n        if freq[digit] > digit: \n            return False\n\n    # If all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n    else:\n        return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # loop through the list and check if each item is equal to the given element\n    for item in list:\n        if item!= element:\n            return False # if not, return False\n    return True # if all items are equal, return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # check if the list is empty\n    if not list:\n        return True\n    \n    # compare the first item of the list to the given element\n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    # if the first item is not equal to the given element, return False\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b(?=b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}a')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}a')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array to store the modified array\n    modified_array = [0] * n\n    \n    # Initialize the index of the modified array\n    i = 0\n    \n    # Iterate through the original array\n    while i < n:\n        # Check if the current element is the last element of the modified array\n        if i == n - k:\n            # Add the current element to the modified array\n            modified_array[i] = a[i]\n        else:\n            # Add the current element to the modified array\n            modified_array[i] = a[i] + modified_array[i + k - 1]\n        # Increment the index of the modified array\n        i += 1\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the modified array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += modified_array[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        repeated_sum += a[i] * k\n    max_sum = max(max_sum, current_sum)\n    return repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # create a modified array by repeating the given array k times\n    mod_arr = a * k\n\n    # initialize two variables to store the maximum sum of a contiguous subarray and the maximum sum of a contiguous subarray in the modified array\n    max_sum = float('-inf')\n    max_sum_mod = float('-inf')\n\n    # loop through the modified array and calculate the maximum sum of a contiguous subarray and the maximum sum of a contiguous subarray in the modified array\n    for i in range(n):\n        # calculate the maximum sum of a contiguous subarray\n        max_sum_i = max(a[i], mod_arr[i])\n\n        # calculate the maximum sum of a contiguous subarray in the modified array\n        max_sum_mod_i = max(max_sum_i, a[i] + mod_arr[i] - mod_arr[i+k])\n\n        # update the maximum sum of a contiguous subarray and the maximum sum of a contiguous subarray in the modified array if necessary\n        max_sum = max(max_sum, max_sum_i)\n        max_sum_mod = max(max_sum_mod, max_sum_mod_i)\n\n    # return the maximum sum of a contiguous subarray in the modified array\n    return max_sum_mod"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n    # initialize the sum to 0\n    current_sum = 0\n    # initialize the current index to the first element of the array\n    current_index = 0\n    # initialize the current repeat count to 1\n    current_repeat_count = 1\n    # loop through the array\n    for i in range(1, n):\n        # add the current element to the current sum\n        current_sum += a[i]\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # if the current sum is equal to the maximum sum, increment the repeat count\n        if current_sum == max_sum:\n            current_repeat_count += 1\n        # if the current element is equal to the previous element, decrement the repeat count\n        if a[i] == a[i-1] and current_repeat_count > 1:\n            current_repeat_count -= 1\n        # if the current repeat count is greater than k, reset the current sum and repeat count\n        if current_repeat_count > k:\n            current_sum -= a[current_index]\n            current_index += 1\n            current_repeat_count = 1\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 1:\n        return max(max(a), sum(a))\n\n    # Initialize the maximum sum seen so far and the current sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Iterate through the array and keep track of the current sum and the maximum sum\n    for i in range(n):\n        # Add the element to the current sum\n        cur_sum += a[i]\n\n        # If the current sum is greater than the maximum sum seen so far and the number of times it appears is less than k, update the maximum sum\n        if cur_sum > max_sum and a.count(a[i]) < k:\n            max_sum = cur_sum\n\n        # If the number of times the element appears is equal to k, add the element back to the current sum and update the maximum sum if necessary\n        if a.count(a[i]) == k:\n            cur_sum -= a[i]\n            cur_sum += a[i]\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the total sum of the array\n    total_sum = sum(a)\n    \n    # Initialize the sum of the first k elements in the modified array\n    modified_sum = sum(a[:k])\n    \n    # Initialize the maximum sum of the modified array\n    max_sum = modified_sum\n    \n    # Repeat the process for the remaining elements in the array\n    for i in range(n-k):\n        # Add the next element to the modified array\n        modified_sum += a[i+k]\n        \n        # Update the maximum sum if the new sum is greater\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    for _ in range(k):\n        a = a + a\n    max_sum = a[0]\n    for i in range(n):\n        max_sum = max(max_sum, sum(a[i:i+k]))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create the modified array by repeating the original array k times\n    modified_array = [num for num in a for _ in range(k)]\n\n    # Initialize the maximum sum and the current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the modified array\n    for num in modified_array:\n        current_sum += num\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Convert the array to a list\n    a = list(a)\n\n    # Initialize the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the array and keep track of the current sum\n    for i in range(n):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Iterate over the array k times and update the maximum sum\n    for _ in range(k - 1):\n        current_sum = 0\n        for i in range(n):\n            current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a variable to store the maximum sum \n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum \n    current_sum = 0\n\n    # Iterate over the array k times \n    for i in range(k): \n        # Repeat the array k times and add the repeated array to the current sum \n        current_sum += sum(a)\n\n        # Compare the current sum with the maximum sum \n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    \n    if n == 1:\n        return 0\n    \n    sum_of_squares = 0\n    count = 1\n    \n    while count <= n:\n        sum_of_squares += count ** 2\n        count += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    sum_squares = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:  # only consider even natural numbers\n            sum_squares += count ** 2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # Loop through even natural numbers from 1 to n\n    for i in range(2, n+1, 2):\n        # Add the square of i to sum and increment count\n        sum += i*i\n        count += 1\n    \n    # Return the sum of squares of the even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += (2 * count + 1)**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        sum_of_squares += (2*count**2)\n\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = [len(sublist) for sublist in list1]\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for subsublist in sublist:\n            lengths.append(len(subsublist))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list containing the maximum length of each list in the input list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the maximum length of any list in the input list.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list) or (len(list1[i]) == len(max_length_list) and list1[i] > max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # loop through each sub-list in the list\n    for sublist in list1:\n        # loop through each element in the sub-list\n        for element in sublist:\n            # check if the element is longer than the current maximum length\n            if len(element) > max(max_lengths):\n                # if it is, add it to the maximum lengths list\n                max_lengths.append(len(element))\n    \n    # return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Create a set to store the colors\n    colors = set()\n    # Initialize the count\n    count = 0\n    \n    # For each post, add its color to the set\n    for i in range(n):\n        colors.add(i+1)\n    \n    # For each possible color combination, check if all adjacent posts have the same color\n    for color1 in colors:\n        for color2 in colors:\n            if color1!= color2 and color1 < color2:\n                count += 1\n                \n    # Return the count of possible ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the count of ways\n    count_list = [0] * (n+1)\n\n    # Base case for 0 and 1 posts\n    count_list[0] = 1\n    count_list[1] = 1\n\n    # Counting number of ways with 2 posts\n    for i in range(2, n+1):\n        count_list[i] = 0\n        for j in range(2):\n            if i-j >= 0:\n                count_list[i] += count_list[i-j]\n        count_list[i] %= k**2  # To avoid overflow\n\n    return count_list[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a list of all possible colors\n    colors = list(range(k))\n\n    # create a list to store the number of ways of painting the fence\n    ways = [0] * (2 * n - 1)\n\n    # base cases\n    ways[0] = 1\n    ways[1] = 1\n\n    # fill the list of ways with the number of ways of painting the fence up to each adjacent pair of adjacent posts\n    for i in range(2, 2 * n - 1):\n        for j in range(1, i):\n            # find the common color among the first two adjacent posts\n            common_color = colors[j - 1]\n            # count the number of ways of painting the fence with the first i-2 posts and the remaining colors\n            ways[i] += ways[j] * ways[i - j - 2]\n\n    return ways[2 * n - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # if the number of colors is less than or equal to 2, there is only one way\n    if k <= 2:\n        return 1\n    \n    # initialize a 2D array to store the count of ways for each number of colors\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    \n    # for each number of colors from 3 to k, fill in the dp array\n    for i in range(3, k+1):\n        # for each possible number of colors for the first i-2 posts\n        for j in range(1, n+1):\n            # if the first i-2 posts have the same color, there are two choices for the last post\n            if j <= i-2:\n                dp[j][i] = 2*dp[j-1][i-1]\n            # if the first i-2 posts have different colors, there are i choices for the last post\n            else:\n                dp[j][i] = sum([dp[j-1][i-2-x] for x in range(i-j)])\n    \n    # return the final value in the dp array\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # initialize a dictionary to store the count of ways for each possible color combination\n    ways = {0: 1}\n    \n    # iterate over all possible colors for the fence\n    for color in range(1, k+1):\n        # for each color combination, iterate over all possible fence sizes\n        for size in range(n+1):\n            # for each fence size, check if the number of adjacent posts with the same color is less than or equal to the fence size\n            if ways.get((size, color), 0) <= size:\n                # if it is, add the count of ways for that fence size and color combination to the total count of ways\n                ways[(size, color)] = (ways.get((size, color), 0) + ways.get((size-1, color), 0)) % 1000000007\n    \n    # return the total count of ways for the given fence\n    return ways[(n, k)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if n is 1, then there is only one way to paint it with 2 adjacent colors\n    if n == 1:\n        return k\n\n    # Base case: if n is 2, then there are two ways to paint it with 1 adjacent color\n    if n == 2:\n        return 2\n\n    # Recursive case: count the number of ways to paint the fence with n-1 posts using k colors\n    ways_1 = count_no_of_ways(n-1, k)\n\n    # Recursive case: count the number of ways to paint the fence with n-2 posts using k colors\n    ways_2 = count_no_of_ways(n-2, k)\n\n    # Recursive case: count the number of ways to paint the fence with n-1 posts using k-1 colors\n    ways_3 = count_no_of_ways(n-1, k-1)\n\n    # Combine the three ways to paint the fence and return the total number of ways\n    return ways_1 + ways_2 + ways_3"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(1, k + 1):\n            if j > i - j:\n                count += dp[i - j]\n        dp[i] = count\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(left, right, prev_color, ways):\n        if left == 0:\n            return 1 if prev_color is None or len(set(prev_color)) == k else 0\n        if left == n:\n            return ways\n        ways = backtrack(left-1, right, prev_color, ways)\n        if right == 0:\n            return ways\n        if prev_color is None or len(set(prev_color)) == k:\n            ways += backtrack(left, right-1, None, ways)\n        else:\n            ways += backtrack(left, right-1, [color for color in prev_color if color!= prev_color[-1]], ways)\n        return ways\n    \n    return backtrack(n, n, None, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # initialize a 2D array to store the count of ways for each fence\n    fence_count = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # base cases\n    for i in range(1, n+1):\n        fence_count[i][0] = 1\n    for j in range(1, k+1):\n        fence_count[0][j] = 1\n\n    # calculate the count of ways for each fence\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if fence_count[i-1][j] > 0:\n                fence_count[i][j] += fence_count[i-1][j]\n            if fence_count[i][j-1] > 0:\n                fence_count[i][j] += fence_count[i][j-1]\n            if fence_count[i-1][j-1] > 0:\n                fence_count[i][j] += fence_count[i-1][j-1]\n\n    return fence_count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: If there are no colors or only one color, there is only one way to paint the fence\n    if k == 1 or n == 1:\n        return n\n\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n\n    # Iterate over the rest of the rows and columns\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            if i % 2 == 0:\n                # If the current post is even\n                dp[i][j] = dp[i // 2][j - 1] + dp[i - 1][j]\n            else:\n                # If the current post is odd\n                dp[i][j] = dp[i // 2][j] + dp[i - 1][j - 1]\n\n    # Return the value in the bottom-right corner of the 2D array\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero\"\n    else:\n        quotient = int(n/m)\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is zero\n    if m == 0:\n        print(\"Error: Division by zero is not allowed.\")\n        return 0\n    \n    # calculate the quotient of n/m using integer division\n    q = n // m\n    \n    # calculate the remainder using modulus\n    r = n % m\n    \n    # check if the remainder is zero\n    if r == 0:\n        return q\n    \n    # if the remainder is not zero, calculate the quotient again using the new quotient\n    q_new = q + 1\n    return find(q_new*m + r, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Find the quotient\n    quotient = n // m\n    # Round down the quotient if necessary\n    if quotient * m!= n:\n        quotient -= 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Check if the denominator is zero, in which case we can't divide\n    if m == 0:\n        raise ValueError('Denominator cannot be zero.')\n\n    # Calculate the quotient by dividing the numerator by the denominator and rounding down\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers\n    rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s*(w**2 - h**2))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the length of the third side of a right angled triangle\n    given the lengths of the other two sides.\n    '''\n    s = (w + h)**0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes two arguments: the length of the base and height of the triangle.\n    The function then calculates the third side of the triangle using the law of cosines and returns it.\n    \"\"\"\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the length of the third side using the law of cosines\n    cos_angle = (w ** 2 + h ** 2 - s ** 2) / (2 * w * h)\n    third_side = math.sqrt(w ** 2 * cos_angle ** 2 + h ** 2 * (1 - cos_angle) ** 2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = (w**2 + h**2)**0.5\n    if w > h:\n        area = w * h / 2\n    else:\n        area = h * w / 2\n    return math.sqrt(s**2 - area**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = w / 2\n    b = h / 2\n    c = math.sqrt(w**2 + h**2) - a - b\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the third side\n    side1 = w + h\n    side2 = w * h\n    side3 = math.sqrt(side1 ** 2 + side2 ** 2)\n    \n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter of the right triangle\n    s = (w + h) / 2\n    \n    # calculate the cotangent of the angle formed by the semi-perimeter and the length of one side of the right triangle\n    cot_angle = math.cos(math.degrees(math.acos(s / w)))\n    \n    # calculate the distance of the other side of the right triangle from the semi-perimeter using the formula for the cotangent\n    d = (w * h) / (2 * (1 + cot_angle ** 2))\n    \n    # return the third side of the right triangle\n    return d"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use Heron's formula to calculate the semi-perimeter\n    s = (w + h + math.sqrt(w**2 + h**2)) / 2\n    # Return the third side of the triangle\n    return math.sqrt(s*(s-w)*(s-h)*(s-w*h))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0] # assuming first value is the maximum\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize the maximum value\n    max_val = listval[0]\n\n    # Loop through the list and find the maximum value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to be the first value in the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list to find the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): A list of heterogeneous values.\n\n    Returns:\n        The maximum value in the list.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"The list is empty.\")\n\n    # Find the maximum value\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None:\n            max_value = item\n        else:\n            if item > max_value:\n                max_value = item\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisors = []\n\n    # Generating a list of all divisors of the number\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n\n    # Calculating the sum of all divisors\n    total_sum = sum(divisors)\n\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of divisors\n    total_div = 0\n    \n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n        \n        # check if the number is divisible by the current number\n        if number % i == 0:\n            \n            # add the current number to the total divisors\n            total_div += i\n            \n            # if the current number is also divisible by the next number, add it to the total divisors as well\n            if i == number // i:\n                total_div += number // i\n    \n    # return the total sum of divisors\n    return total_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0 \n    \n    # Sort the array \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += (j - i) \n            arr[i], arr[j] = arr[j], arr[i] \n            \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += n-j\n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n\n    # base case\n    if n <= 1:\n        return 0\n\n    # divide the array into two halves\n    mid = n // 2\n    left = get_Inv_Count(arr[:mid])\n    right = get_Inv_Count(arr[mid:])\n\n    # calculate the inversions in each half recursively\n    inv_left = 0\n    inv_right = 0\n    inv_total = 0\n\n    i = 0\n    j = mid\n    while i < mid and j < n:\n        if arr[i] < arr[j]:\n            inv_left += mid - i\n            inv_total += mid - i\n            i += 1\n        else:\n            inv_right += n - j\n            inv_total += n - j\n            j += 1\n\n    # combine the inversions from the two halves\n    inv_total += inv_left + inv_right\n\n    return inv_total"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Find the middle of the array\n    mid = n // 2\n    # Count inversions in the left half and right half of the array\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n    # Count inversions between the two halves of the array\n    left, right = mid, n - 1\n    inv_count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            left += 1\n        else:\n            left += 1\n    # Add the inversions from the left and right halves to the total count\n    return left_inv + right_inv + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                inv_count += n-j-1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n\n    # Partition the array\n    def partition(left, right):\n        pivot_index = (left + right) // 2\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n        store_index = left\n\n        for i in range(left, right):\n            if arr[i] <= pivot:\n                arr[store_index], arr[i] = arr[i], arr[store_index]\n                store_index += 1\n\n        arr[right], arr[store_index] = arr[store_index], arr[right]\n        return store_index\n\n    # Count inversions in the subarray\n    def count_inv(left, right):\n        if left < right:\n            # Find the partition index\n            pivot_index = partition(left, right)\n\n            # Count inversions in the left subarray\n            inv_count += pivot_index - left + 1\n\n            # Count inversions in the right subarray\n            inv_count += count_inv(pivot_index + 1, right)\n\n        return inv_count\n\n    count_inv(0, n - 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # initialize variables\n    inv_count = 0\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # loop through the array and count inversions\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # sort the array\n    arr.sort()\n\n    # check for inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list and flattens it into a single-dimensional list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single-dimensional list.\n\n    :param lst: A nested list to be flattened.\n    :return: A single-dimensional list representing the flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (key, value) as input and calculates the maximum aggregate value.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate_val = 0\n\n    for key, value in stdata:\n        aggregate_dict[key] += value\n        max_aggregate_val = max(max_aggregate_val, aggregate_dict[key])\n\n    return max_aggregate_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i, j in stdata:\n        max_dict[j] += i\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n    \n    # iterate through the list of tuples\n    for customer, amount in stdata:\n        # calculate the maximum aggregate for the current customer\n        max_aggs[customer] = max(max_aggs[customer], amount)\n        \n    # find the maximum aggregate for each customer\n    max_aggs_list = [max_aggs[customer] for customer in max_aggs]\n    \n    # find the maximum aggregate from the list of maximum aggregates\n    max_agg = max(max_aggs_list)\n    \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Loop through each transaction in the list\n    for trans in stdata:\n        # Calculate the maximum aggregate for the transaction\n        max_agg[trans[0]] = max(trans[1], max_agg[trans[0]])\n\n    # Find the maximum aggregate in the defaultdict\n    max_agg_value = max(max_agg.values())\n\n    # Create a new list to store the transaction data\n    stdata_new = []\n\n    # Loop through each transaction in the list\n    for trans in stdata:\n        # Calculate the aggregate for the transaction\n        agg = trans[1] + max_agg[trans[0]]\n\n        # Add the transaction data to the new list if the aggregate is greater than or equal to the maximum aggregate\n        if agg >= max_agg_value:\n            stdata_new.append(trans)\n\n    # Return the new list of transaction data\n    return stdata_new"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for item in stdata:\n        data[item[0]] += item[1]\n    return max(data.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = 0\n    aggr_dict = defaultdict(int)\n    for item in stdata:\n        aggr_dict[item] += 1\n        max_aggr = max(max_aggr, sum(aggr_dict.values()))\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for st, aggr in stdata:\n        max_aggr[st] = max(max_aggr[st], aggr)\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate and the frequency of each item\n    frequency = defaultdict(int)\n    # Iterate through the list of tuples and update the dictionary accordingly\n    for item, freq in stdata:\n        frequency[item] += freq\n    # Find the maximum frequency and its corresponding item in the dictionary\n    max_freq = max(frequency.values())\n    max_item = max(frequency, key=frequency.get)\n    # Calculate the maximum aggregate and return it\n    return max_freq * max_item"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate\n    max_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for st, amount in stdata:\n        # Update the maximum aggregate for each station\n        max_dict[st] += amount\n\n    # Calculate the maximum aggregate from the dictionary\n    max_agg = max(max_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate = 0\n    \n    for item in stdata:\n        aggregate_dict[item[1]] += item[2]\n    \n    for key, value in aggregate_dict.items():\n        if value > max_aggregate:\n            max_aggregate = value\n    \n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:]\n        if sum(int(bit) for bit in bin_str[:n]) == sum(int(bit) for bit in bin_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        if i == (2**n-1) - sum(i.bit_length() % 2 for i in range(n)):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of binary sequences of length 2n with sum of first n bits same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(2*n)):\n        x = i\n        y = (x >> n) & ((1 << n) - 1)\n        z = (x >> (2*n)) & ((1 << n) - 1)\n        if (x ^ y ^ z) == (x ^ y):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = 0\n        second_sum = 0\n        for j in range(2**n):\n            if j < i:\n                first_sum += (1 << j)\n                second_sum += (1 << n) - (1 << j)\n            elif j > i:\n                first_sum += (1 << n) - (1 << j)\n                second_sum += (1 << j)\n            if first_sum == second_sum:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initializing a dictionary to store the count of binary sequences\n    count = {}\n    \n    # using a loop to generate all binary sequences of length 2n\n    for i in range(2**n):\n        # generating a binary sequence of length 2n\n        seq = bin(i)[2:].zfill(2*n)\n        # getting the sum of the first n bits and the sum of the last n bits of the sequence\n        sum_first = int(seq[:n])\n        sum_last = int(seq[-n:])\n        \n        # checking if the sum of the first and last bits is same\n        if sum_first == sum_last:\n            # incrementing the count of binary sequences if the condition is satisfied\n            if seq not in count:\n                count[seq] = 1\n            else:\n                count[seq] += 1\n                \n    # returning the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i+2**n-1)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize a variable to store the count of binary sequences\n    count = 0\n\n    # Iterate over all possible binary strings of length 2n\n    for i in range(2**n): \n        # Convert the integer to binary string\n        binary_str = bin(i)[2:]\n\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if int(binary_str[:n]) == int(binary_str[-n:]): \n            # Increment the count if both conditions are satisfied\n            count += 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # Extract first n bits\n        first_n = bin(i)[2:2+n]\n        # Extract last n bits\n        last_n = bin(i)[2+n:2+2*n]\n        # Check if sum of first n bits and last n bits are same\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        first_n = int(binary_seq[:n])\n        last_n = int(binary_seq[n:])\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    This function takes a dictionary as an argument and returns its depth.\n    A dictionary is said to have a depth of 1 if it contains only simple types (strings, numbers, tuples, and lists).\n    Otherwise, a dictionary has a depth of the maximum depth of any of its sub-dictionaries plus 1.\n    '''\n\n    if isinstance(d, dict):\n        depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                depth = max(depth, dict_depth(value) + 1)\n        return depth\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(v, list):\n            depth = 1 + max(dict_depth(el) for el in v)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [(d, 0)]\n    while stack:\n        curr_dict, depth = stack.pop()\n        if isinstance(curr_dict, dict):\n            for key in curr_dict:\n                stack.append((curr_dict[key], depth+1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 0\n    depth = 0\n    # loop through the dictionary\n    for key, value in d.items():\n        # check if the value is a dictionary\n        if isinstance(value, dict):\n            # increment depth by 1\n            depth += 1\n        # check if the value is a list\n        elif isinstance(value, list):\n            # loop through the list to find any nested dictionaries\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n        # update depth if the value is not a dictionary or list\n        else:\n            # increment depth by 1\n            depth += 1\n    # return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    elif isinstance(d, list):\n        return max([dict_depth(v) for v in d])\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the value of the key is a dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        # If the value of the key is not a dictionary, increase the depth by 1\n        else:\n            depth += 1\n\n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a number of rotations and an index as input.\n    It returns the element at the given index after rotations.\n    \n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Calculate the sum of the current element and the sum of the previous rotations\n        sum = (sum + arr[i]) % 1000000007\n        \n        # If the sum of the previous rotations is greater than or equal to the target sum, return the current element\n        if sum >= ranges[index]:\n            return arr[i]\n        \n        # Add the current element to the sum of the previous rotations\n        sum = (sum + arr[i]) % 1000000007\n    \n    # If no element is found after the rotations, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the number of rotations required to reach the given index\n    rotations = 0\n    for i in range(len(arr)):\n        if i < index:\n            rotations += 1\n        elif i == index:\n            break\n\n    # Find the element at the final index\n    element = arr[index]\n    if rotations % 2 == 0:\n        if rotations > 0:\n            for i in range(rotations):\n                index = (index + 1) % len(arr)\n                element = arr[index]\n        else:\n            index = 0\n            element = arr[index]\n    else:\n        if rotations > 0:\n            for i in range(rotations):\n                index = (index - 1) % len(arr)\n                element = arr[index]\n        else:\n            index = len(arr) - 1\n            element = arr[index]\n\n    # Find the element at the final index after rotations\n    for i in range(index, len(arr)):\n        element += arr[i]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # find the element at given index\n    element = arr[index]\n\n    # iterate through rotations and update the element\n    for i in range(rotations):\n        arr[index] = element\n        # update the element for next iteration\n        element = arr[index + ranges[i]]\n        index = index + ranges[i]\n\n    # return the final element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, the number of rotations to perform, and the index\n    of the element to find. It returns the element at the given index after performing the specified\n    rotations.\n    \"\"\"\n    # Initialize variables to keep track of the current range and the index of the current element\n    current_range = 0\n    current_index = 0\n    \n    # Iterate over the rotations and perform them\n    for i in range(rotations):\n        # Find the end index of the current range\n        end_index = current_range + ranges[current_range][1]\n        # Check if the current index is in the current range\n        if current_index >= current_range and current_index < end_index:\n            # If it is, calculate the new index and break out of the loop\n            new_index = current_index - current_range + end_index\n            break\n        # Otherwise, move to the next range\n        current_range += 1\n    \n    # If the new index is still within the range of the current element, return the element\n    if new_index >= current_range and new_index < end_index:\n        return arr[new_index]\n    # Otherwise, raise an error\n    else:\n        raise ValueError(\"The given index is outside the range of the current element.\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, an array of rotations, and an index to search for.\n    It then finds the element at the given index after rotating the array by the given number of rotations.\n    '''\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Find the number of times the element appears in the array\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n\n    # Find the number of rotations required to find the element\n    rotation_count = 0\n    for i in range(len(ranges)):\n        if element >= ranges[i][0] and element <= ranges[i][1]:\n            rotation_count += rotations[i]\n\n    # Calculate the new index after the given number of rotations\n    new_index = (index + rotation_count + count) % len(arr)\n\n    return element, new_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of rotations and the index of the element you want to find. \n    It returns the element at the given index after number of rotations.\n    '''\n    \n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return 'Invalid index'\n    \n    # Find the element at the given index using binary search\n    element = binary_search(arr, ranges, index)\n    \n    # Rotate the element and find the element at the given index after number of rotations\n    for i in range(rotations):\n        element = rotate(element, ranges)\n    return element\n\n\ndef rotate(element, ranges):\n    '''\n    This function takes in an element and a list of ranges. \n    It rotates the element by a random number of rotations within the given ranges.\n    '''\n    \n    # Find the minimum and maximum values of the element\n    min_val = min(ranges)\n    max_val = max(ranges)\n    \n    # Generate a random number of rotations\n    rotations = random.randint(0, len(ranges))\n    \n    # Calculate the new ranges after rotating\n    new_ranges = [max_val + i - element for i in range(rotations) + [element]]\n    \n    # Check if the new element is outside the new ranges\n    if min(new_ranges) < min_val or max(new_ranges) > max_val:\n        return rotate(element, ranges)\n    else:\n        return new_ranges\n\n\ndef binary_search(arr, ranges, index):\n    '''\n    This function takes in an array, a list of ranges and the index of the element you want to find. \n    It returns the element at the given index using binary search.\n    '''\n    \n    # Check if the array is empty\n    if not arr:\n        return 'Array is empty'\n    \n    # Find the minimum and maximum values of the array\n    min_val = min(ranges)\n    max_val = max(ranges)\n    \n    # Calculate the mid-point of the array\n    mid_val = (min_val + max_val) // 2\n    \n    # Check if the mid-point matches the index\n    if mid_val == index:\n        return mid_val\n    \n    # Check if the mid-point is greater than the index\n    elif mid_val < index:\n        \n        # If the mid-point is greater than the index, search the left half of the array\n        left_half = [mid_val + i for i in range(1, len(ranges))]\n        return binary_search(arr, left_half, index)\n    \n    # If the mid-point is less than the index, search the right half of the array\n    else:\n        \n        # If the mid-point is less than the index, search the right half of the array\n        right_half = [mid_val - i for i in range(1, len(ranges))]\n        return binary_search(arr, right_half, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    arr_size = len(arr)\n    count = 0\n    start = 0\n    end = arr_size - 1\n\n    # Perform rotations\n    for _ in range(rotations):\n        start, end = end, start\n        count += 1\n\n    # Perform binary search on rotated array\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == index:\n            return arr[mid]\n        elif arr[mid] < index:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # Return None if element is not found\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # get the current element at the given index\n    current_element = arr[index]\n\n    # rotate the elements in the given range\n    for i in range(len(ranges)):\n        start = ranges[i][0]\n        end = ranges[i][1]\n        if start >= index >= end:\n            if rotations % 2 == 0:\n                arr[start], arr[end] = arr[end], arr[start]\n            else:\n                arr[start], arr[end] = arr[start], arr[end]\n            rotations //= 2\n\n    # find the element at the given index after rotations\n    for i in range(len(arr)):\n        if i == index:\n            continue\n        if arr[i] == current_element:\n            return i\n\n    # if element not found, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, ranges, rotations and index as arguments and returns the element at the specified index after rotating the array by rotations number of times.\n    \"\"\"\n    # Calculate the final index after rotations\n    final_index = (index - 1 + rotations) % len(arr) + 1\n\n    # Check if the final index is within the range of the array\n    if final_index < 1 or final_index > len(arr):\n        raise ValueError(\"The final index is out of range.\")\n\n    # Initialize variables to keep track of the current index and the element at that index\n    current_index = 1\n    current_element = arr[1]\n\n    # Iterate through the array and find the element at the specified index after rotations\n    for i in range(2, len(arr) + 1):\n        if i == final_index:\n            return current_element\n        current_index = (current_index - 1 + rotations) % len(arr) + 1\n        if current_index == 1:\n            current_element = arr[i]\n        else:\n            current_element = arr[current_index]\n\n    raise ValueError(\"The final index was not found in the array.\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_element(arr, ranges, index):\n        if index == 0:\n            return arr[0]\n        return arr[index]\n\n    def find_rotated_index(arr, ranges, index):\n        # find the number of rotations required to find the element at index\n        for i in range(1, len(arr)):\n            if index < i:\n                break\n        rotations = i - 1\n        return (index + rotations) % len(arr)\n\n    # find the rotated index and element at the rotated index\n    rotated_index = find_rotated_index(arr, ranges, index)\n    rotated_element = find_element(arr, ranges, rotated_index)\n\n    # find the actual index of the rotated element\n    actual_index = index - rotations\n    if actual_index < 0:\n        actual_index = len(arr) + actual_index\n    return rotated_element, actual_index\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p.*', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p\\w*$', word):\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    result = re.findall(pattern, words)\n    return result[0], result[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"No two words starting with 'p' were found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # create empty list to store matching words\n    matching_words = []\n\n    # iterate over the list of words and check if each word matches the pattern\n    for word in words:\n        if re.match(pattern, word):\n            matching_words.append(word)\n\n    # return two matching words from the list\n    return matching_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]+$'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    - a: List of integers representing the sequence.\n    - n: Length of the sequence.\n    - index: Index of the element for which we need to find the maximum sum.\n    - k: Index of the element which we need to include in the sum.\n\n    Returns:\n    - The maximum sum of increasing subsequence from prefix until ith index and including the kth element.\n\n    Time Complexity: O(n^2)\n    \"\"\"\n\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n\n    # Initialize an array to store the maximum sum of increasing subsequence for each index\n    sum_array = [0] * n\n\n    # Iterate over the sequence and for each index\n    for i in range(n):\n\n        # If the current index is not equal to the index of the element we need to include in the sum\n        if i!= index and i!= k:\n\n            # Initialize the sum to be zero\n            current_sum = 0\n\n            # Iterate over the previous indices and add the previous sum to the sum if the current element is smaller than the current index\n            for j in range(i):\n                if a[j] < a[i]:\n                    current_sum += sum_array[j]\n\n            # Update the maximum sum if the current sum is greater than the current maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n            # Store the maximum sum of increasing subsequence for this index\n            sum_array[i] = current_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and including the kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and current sum to 0\n    max_sum = 0\n    curr_sum = 0\n    \n    # Loop through all the elements of the array\n    for i in range(n):\n        # If the current element is greater than the kth element\n        if a[i] > a[k]:\n            # If the current sum is greater than the maximum sum so far\n            if curr_sum > max_sum:\n                # Update the maximum sum with the current sum\n                max_sum = curr_sum\n            # Reset the current sum to the current element and the next element\n            curr_sum = a[i] + a[i+1]\n        # If the current element is not greater than the kth element\n        else:\n            # If the current sum is greater than the maximum sum so far\n            if curr_sum > max_sum:\n                # Update the maximum sum with the current sum\n                max_sum = curr_sum\n            # Reset the current sum to the next element\n            curr_sum = a[i+1]\n    \n    # If the current sum is greater than the maximum sum so far\n    if curr_sum > max_sum:\n        # Update the maximum sum with the current sum\n        max_sum = curr_sum\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function calculates the maximum sum of increasing subsequence from prefix until index and including kth element.\n    \"\"\"\n    # Initialize variables to store maximum sum and last element of subsequence\n    max_sum = float('-inf')\n    max_elem = a[index]\n    # Initialize variables to store sum of current subsequence and maximum sum of subsequences till this point\n    sum_curr = a[index]\n    max_sum_curr = sum_curr\n\n    # Traverse through all elements of the array and calculate sum of subsequences till this point\n    for i in range(index + 1, n):\n        # If current element is greater than kth element, then add kth element to the subsequence and update sum\n        if a[i] > k:\n            sum_curr = a[i]\n            sum_curr += max_sum_curr\n        else:\n            # Otherwise, add current element to the subsequence and update sum\n            sum_curr += a[i]\n\n        # Update maximum sum of subsequences till this point\n        if sum_curr > max_sum_curr:\n            max_sum_curr = sum_curr\n\n        # Update maximum sum of increasing subsequence from prefix until index and including kth element\n        if sum_curr > max_sum:\n            max_sum = sum_curr\n            max_elem = a[i]\n\n    return max_sum, max_elem"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    prev_sum = 0\n    \n    # Iterate through the array\n    for i in range(index, n):\n        \n        # Add the current element to the sum\n        current_sum += a[i]\n        \n        # Check if the current sum is increasing\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n            # Also check if the current sum includes k\n            if current_sum > k:\n                prev_sum = max_sum\n                \n        # Check if the current sum is decreasing\n        elif current_sum < prev_sum:\n            prev_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return 0\n    elif index == n:\n        return 0\n    elif index > n:\n        return -1\n    \n    if index > k:\n        dp_prefix = max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        dp_prefix = 0\n    \n    dp_suffix = 0\n    for i in range(index, n):\n        if a[i] > a[index-1]:\n            dp_suffix += a[i]\n        else:\n            dp_suffix = 0\n        dp_prefix = max(dp_suffix+a[i], dp_prefix)\n        \n    return dp_prefix"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        if i < k:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[i - 1], dp[i - k]) + a[i]\n\n    max_sum = max(dp[i] for i in range(n))\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum of increasing subsequence to be zero\n    max_sum = 0\n    \n    # Initialize the prefix sum to zero\n    prefix_sum = 0\n    \n    # Initialize the list to store the indices of increasing subsequence\n    subseq_indices = []\n    \n    # Initialize the index of the kth element\n    kth_index = k\n    \n    # Traverse the array from 0 to i-1\n    for i in range(index):\n        # If the current element is less than the kth element, skip it\n        if a[i] < a[kth_index-1]:\n            continue\n        \n        # If the current element is greater than the kth element, update the prefix sum and reset the subseq_indices list\n        if a[i] > a[kth_index-1]:\n            prefix_sum += a[i]\n            subseq_indices = [i]\n        \n        # If the current element is equal to the kth element, update the prefix sum and append the index to the subseq_indices list\n        elif a[i] == a[kth_index-1]:\n            prefix_sum += a[i]\n            subseq_indices.append(i)\n        \n        # Update the maximum sum of increasing subsequence if the current prefix sum is greater than the maximum sum\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n    \n    # If the maximum sum of increasing subsequence is zero, update it with the prefix sum\n    if max_sum == 0:\n        max_sum = prefix_sum\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize the maximum sum as 0 and initialize the sum of increasing subsequence as 0\n    max_sum = 0\n    inc_subseq_sum = 0\n\n    # Initialize the maximum sum of increasing subsequence as 0 for each index from 0 to ith index\n    inc_subseq_max_sum = [0] * n\n\n    # Initialize the start index of increasing subsequence as the ith index\n    inc_subseq_start = [index] * n\n\n    # Initialize the end index of increasing subsequence as the ith index\n    inc_subseq_end = [index] * n\n\n    # Initialize the previous index of increasing subsequence as -1\n    inc_subseq_prev = [-1] * n\n\n    # Initialize the maximum sum of increasing subsequence ending at index ith index as 0\n    inc_subseq_max_sum[index] = 0\n\n    # Traverse through the array from 0 to n-1\n    for i in range(0, n):\n\n        # If the current element is greater than or equal to k and is greater than the current maximum sum of increasing subsequence ending at index i-1\n        if a[i] >= k and a[i] > inc_subseq_max_sum[i - 1]:\n\n            # Update the maximum sum of increasing subsequence ending at index i\n            inc_subseq_max_sum[i] = a[i]\n\n            # Update the start index of increasing subsequence and update the end index of increasing subsequence as i\n            inc_subseq_start[i] = i\n            inc_subseq_end[i] = i\n\n            # Update the previous index of increasing subsequence as i-1\n            inc_subseq_prev[i] = i - 1\n\n            # Traverse through the array from i-2 to 0 to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n            for j in range(i - 2, -1, -1):\n\n                # If the current element is greater than the current maximum sum of increasing subsequence ending at index j\n                if a[j] > inc_subseq_max_sum[j]:\n\n                    # Update the maximum sum of increasing subsequence ending at index i and update the start index and end index of increasing subsequence as j and i\n                    inc_subseq_max_sum[i] += a[j]\n                    inc_subseq_start[i] = j\n                    inc_subseq_end[i] = i\n\n                    # Update the previous index of increasing subsequence as j\n                    inc_subseq_prev[i] = j\n\n        # If the current element is less than k and is greater than the current maximum sum of increasing subsequence ending at index i-1\n        elif a[i] < k and a[i] > inc_subseq_max_sum[i - 1]:\n\n            # Update the maximum sum of increasing subsequence ending at index i\n            inc_subseq_max_sum[i] = a[i]\n\n            # Update the start index of increasing subsequence and update the end index of increasing subsequence as i\n            inc_subseq_start[i] = i\n            inc_subseq_end[i] = i\n\n            # Update the previous index of increasing subsequence as i-1\n            inc_subseq_prev[i] = i - 1\n\n            # Traverse through the array from i-2 to 0 to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n            for j in range(i - 2, -1, -1):\n\n                # If the current element is greater than the current maximum sum of increasing subsequence ending at index j\n                if a[j] > inc_subseq_max_sum[j]:\n\n                    # Update the maximum sum of increasing subsequence ending at index i and update the start index and end index of increasing subsequence as j and i\n                    inc_subseq_max_sum[i] += a[j]\n                    inc_subseq_start[i] = j\n                    inc_subseq_end[i] = i\n\n                    # Update the previous index of increasing subsequence as j\n                    inc_subseq_prev[i] = j\n\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if a[i] <= k:\n            if i >= index:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i])\n            else:\n                dp[i+1] = dp[i]+a[i]\n        else:\n            if i >= index:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i]-k)\n            else:\n                dp[i+1] = dp[i]+a[i]-k\n\n    for i in range(index, n):\n        if a[i] <= k:\n            if i == index:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i])\n            else:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i], dp[i-1])\n        else:\n            if i == index:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i]-k)\n            else:\n                dp[i+1] = max(dp[i+1], dp[i]+a[i]-k, dp[i-1])\n\n    for i in range(n):\n        if a[i] <= k:\n            if i == index:\n                max_sum = max(max_sum, dp[i+1])\n            else:\n                max_sum = max(max_sum, dp[i+1], dp[i-1])\n        else:\n            if i == index:\n                max_sum = max(max_sum, dp[i+1])\n            else:\n                max_sum = max(max_sum, dp[i+1], dp[i-1])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # initialize maximum sum to 0\n    max_sum = 0\n\n    # initialize an array to store the maximum sum for each subsequence ending at index i\n    dp = [0] * n\n\n    # initialize a variable to store the index of the last subsequence ending at index i\n    last_index = -1\n\n    # initialize a variable to store the maximum sum of any subsequence ending at index 0\n    max_sum_start = 0\n\n    # initialize a variable to store the maximum sum of any subsequence ending at index k\n    max_sum_end = 0\n\n    # loop through all indices from 0 to n-1\n    for i in range(n):\n\n        # check if i is equal to k\n        if i == k:\n\n            # if i is equal to k, update max_sum_end to the current element\n            max_sum_end = a[i]\n\n            # set the value of dp[i] to the current element\n            dp[i] = max_sum_end\n\n        else:\n\n            # if i is not equal to k, check if a[i] is greater than dp[i-1]\n            if a[i] > dp[i-1]:\n\n                # if a[i] is greater than dp[i-1], update max_sum_end to the sum of dp[i-1] and the current element\n                max_sum_end = dp[i-1] + a[i]\n\n                # set the value of dp[i] to the maximum of max_sum_end and the current element\n                dp[i] = max_sum_end\n\n            else:\n\n                # if a[i] is not greater than dp[i-1], update max_sum_end to the current element\n                max_sum_end = a[i]\n\n                # set the value of dp[i] to the current element\n                dp[i] = max_sum_end\n\n        # check if max_sum_end is greater than max_sum_start\n        if max_sum_end > max_sum_start:\n\n            # if max_sum_end is greater than max_sum_start, update max_sum_start to max_sum_end\n            max_sum_start = max_sum_end\n\n        # check if max_sum_start is greater than max_sum\n        if max_sum_start > max_sum:\n\n            # if max_sum_start is greater than max_sum, update max_sum to max_sum_start\n            max_sum = max_sum_start\n\n    # return max_sum\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(tuplex, tuple):\n        # Check if the tuple has at least two elements\n        if len(tuplex) >= 2:\n            # Check if the m and n are valid indices\n            if m < 0 or m >= len(tuplex) or n < 0 or n >= len(tuplex[m]):\n                return None\n            # Get the colon of the tuple\n            colon = deepcopy(tuplex[m][:n+1])\n            # Concatenate the first and last elements to make a tuple\n            colon = (tuplex[m][0],*colon,*tuplex[m][n+1:])\n            return colon\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: A tuple to get a colon from.\n    :type tuplex: tuple\n    :param m: The number of rows to generate.\n    :type m: int\n    :param n: The number of columns to generate.\n    :type n: int\n    :return: A tuple containing the m rows of the colon of the input tuple.\n    :rtype: tuple\n    \"\"\"\n\n    # Create a deep copy of the input tuple.\n    tuplex_copy = deepcopy(tuplex)\n\n    # Calculate the number of tuples to generate.\n    num_tuples = len(tuplex_copy) * m * n\n\n    # Generate the colon by slicing the tuples.\n    colon = tuple(tuplex_copy[i:i + n] for i in range(0, num_tuples, n))\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple of (x, y) coordinates,\n    and returns a colon of that tuple.\n    \n    It creates a new list of length m x n, and fills it with copies of the tuplex.\n    It then returns the new list.\n    '''\n    new_list = deepcopy(tuplex)\n    colons = []\n    for i in range(m):\n        colons.append(new_list[i::n])\n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 1:\n        return tuplex[0]\n    else:\n        new_tuplex = []\n        for i in range(m):\n            new_tuplex.append(tuplex[i])\n        new_tuplex.append(colon_tuplex(tuplex, m, n-1))\n        return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex: a tuple of tuples\n    m: integer, the number of elements in the colon\n    n: integer, the maximum number of elements in the tuple\n\n    Returns:\n    colon: a tuple of length m containing n elements of the colon of tuplex\n    '''\n    # Create a copy of the tuple\n    colontuple = deepcopy(tuplex)\n    # Reverse the colon\n    colontuple = colontuple[::-1]\n    # Get the last n elements of the colon\n    colon = colontuple[-m:]\n    # Remove the last n elements of the colon\n    colontuple = colontuple[:-m]\n    return colon, colontuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters\n    ----------\n    tuplex : tuple\n        The tuple whose colon is needed.\n    m : int\n        The number of rows in the original matrix.\n    n : int\n        The number of columns in the original matrix.\n\n    Returns\n    -------\n    colon : list\n        The colon of the tuple.\n    '''\n    row = []\n    for i in range(m):\n        if i < n:\n            row.append(tuplex[i][n-i-1])\n        else:\n            row.append(None)\n    colon = tuple(row)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    colon = ()\n    for i in range(m):\n        new_tuplex = new_tuplex[n:]\n        colon += (new_tuplex,)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex[0])\n    col = deepcopy(tuplex[1])\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            row[j] = col[i]\n            colon.append(tuple(row))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # creating a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # splitting the tuple into subtuples\n    subtuples = [tuplex_copy[i:i+m] for i in range(0, len(tuplex_copy), m)]\n    # creating a list to hold the colon\n    colon = []\n    # iterating through each subtuple\n    for i in range(0, len(subtuples), n):\n        # appending the subtuples to the colon\n        colon += subtuples[i:i+n]\n    # returning the colon\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and the number of rows and columns it should have.\n    It returns a copy of the tuple where each sublist has n elements, and each sublist is aligned with the corresponding element in the original tuple.\n    The alignment is done by copying the corresponding element in the original tuple to each sublist.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(len(colon)):\n        colon[i] = colon[i][:m] + [tuplex[i][j] for j in range(n)] + colon[i][m:]\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop through the first N elements of both lists\n    for i in range(N):\n        # Multiply the current elements from both lists\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the largest product found so far, add it to the list\n        if product > largest_products[-1] or not largest_products:\n            largest_products.append(product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product and its index\n    max_product = 0\n    max_index1 = 0\n    max_index2 = 0\n\n    # Loop through the two lists and find the largest N products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N - 1 - i]\n\n        if product1 > max_product:\n            max_product = product1\n            max_index1 = i\n        if product2 > max_product:\n            max_product = product2\n            max_index2 = N - 1 - i\n\n    # Return the indices of the two largest products\n    return (max_index1, max_index2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products as negative infinity\n    largest_product1 = -float('inf')\n    largest_product2 = -float('inf')\n\n    # Initialize the number of products as zero\n    num_products = 0\n\n    # Iterate over the indices from 0 to N-1\n    for i in range(N):\n        # Calculate the product of the two largest numbers in each list\n        product1 = nums1[i] * nums2[i]\n\n        # Calculate the product of the two largest numbers in the other list\n        product2 = nums1[i] * nums1[N-i-1]\n\n        # Compare the products and update the largest products and number of products accordingly\n        if product1 > largest_product1:\n            largest_product1 = product1\n            num_products = 1\n        elif product1 == largest_product1:\n            num_products += 1\n\n        if product2 > largest_product2:\n            largest_product2 = product2\n            num_products = 1\n        elif product2 == largest_product2:\n            num_products += 1\n\n    return num_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        products = []\n        for j in range(len(nums1)):\n            product = nums1[j] * nums2[i]\n            products.append(product)\n        max_products.append(max(products))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Initialize the output list with zeros\n    output = [0] * N\n\n    # Iterate over each index in the output list\n    for i in range(N):\n\n        # Calculate the product of the current indices in each list\n        factor1 = nums1[i] * max1\n        factor2 = nums2[i] * max2\n\n        # Find the index of the largest product among the two factors\n        index = nums1.index(factor1) if factor1 > factor2 else nums2.index(factor2)\n\n        # Add the product to the output list\n        output[i] = factor1 if index == 0 else factor2\n\n    # Return the output list\n    return output"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('The specified number of largest products must be less than or equal to the length of each list.')\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i] * nums2[i], nums1[i] * max(nums2[j] for j in range(i+1, N)) * max(nums2[j] for j in range(N-i-1, -1, -1)), nums2[i] * max(nums1[j] for j in range(i+1, N)) * max(nums1[j] for j in range(N-i-1, -1, -1)), nums1[i] * nums2[N-i-1] * max(nums2[j] for j in range(i+1, N))))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product from nums1 and nums2\n    max_product = max(nums1[0] * nums2[0], nums1[0] * nums2[-1], nums1[-1] * nums2[0], nums1[-1] * nums2[-1])\n\n    # Create an empty list to store the largest products\n    largest_products = []\n\n    # Loop through the two lists and add the products of the selected factor to the list of largest products\n    for i in range(len(nums1)):\n        largest_products.append(nums1[i] * nums2[i])\n        largest_products.append(nums1[i] * nums2[-1-i])\n        largest_products.append(nums1[-1-i] * nums2[i])\n        largest_products.append(nums1[-1-i] * nums2[-1-i])\n\n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n\n    # Return the largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for the largest product and the counter\n    largest_product = 0\n    count = 0\n\n    # Iterate through the two lists and calculate the largest product for each set of N elements\n    for i in range(len(nums1)-N+1):\n        current_product = 1\n        for j in range(N):\n            current_product *= max(nums1[i+j], nums2[i+j])\n        if current_product > largest_product:\n            largest_product = current_product\n            count = 1\n        elif current_product == largest_product:\n            count += 1\n\n    # Return the count and largest product\n    return count, largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Combine the two lists and sort them in descending order\n    combined = nums1 + nums2\n    combined.sort(reverse=True)\n    # Find the specified number of largest products\n    return combined[:N]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of those numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10\nprint(maximum(3, 7)) # Output: 7"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters as output.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # split the string into a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert binary representation of n to a list of digits\n    num_str = bin(n)[2:]\n    num_list = list(num_str)\n    # Iterate over the list in reverse order and set the leftmost unset bit to 1\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == '0':\n            num_list[i] = '1'\n            break\n    # Convert the list back to a binary string\n    left_most_unset_bit = int(''.join(num_list), 2)\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given integer n.\n    \"\"\"\n    # Initialize the mask variable\n    mask = 1 << 31  # initialize mask to 2^31-1\n    \n    # Iterate over the bits of the integer n from left to right\n    for i in range(31, -1, -1):\n        if (n & mask) == 0:  # check if the current bit is unset\n            n |= mask  # set the current bit to 1\n            break  # break the loop after setting the bit\n        else:\n            mask >>= 1  # shift the mask to the right\n    \n    return n  # return the updated integer n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # set all bits to 0\n    n = n & ~(0xFFFFFFFFFFFFFFFF)\n    # set the leftmost unset bit to 1\n    n = n | 1\n    # return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize count of set bits and unset bits\n    count = 0\n    unset = n\n    # Iterate over each bit in the binary representation of n\n    for i in range(32):\n        # If the bit is set, set count and unset\n        if n & (1 << i):\n            count += 1\n            unset &= ~(1 << i)\n    # Check if any unset bits remain after iteration\n    if unset > 0:\n        # If unset bits remain, set the left most unset bit to 1\n        return count + 1\n    else:\n        # If no unset bits remain, return count as it is\n        return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given number n.\n    \"\"\"\n    # Initialize the position of the leftmost unset bit\n    leftmost_unset_bit_position = -1\n    # Iterate through all the bits of n\n    for bit in bin(n)[2:]:\n        # If the bit is unset, update the position of the leftmost unset bit\n        if bit == '0':\n            leftmost_unset_bit_position += 1\n    # Set the leftmost unset bit to 1\n    return n | (1 << leftmost_unset_bit_position)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer n.\n\n    Args:\n    n (int): An integer number.\n\n    Returns:\n    int: The modified integer number with the left most unset bit set to 1.\n    '''\n\n    # Initialize the leftmost unset bit to 0\n    leftmost_unset_bit = 0\n\n    # Initialize a counter to keep track of the number of set bits to the left of the leftmost unset bit\n    count = 0\n\n    # Iterate over each bit of the integer\n    for i in range(32):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # If it is set, increment the counter\n            count += 1\n        # If the counter is equal to the number of bits to the left of the leftmost unset bit, set the leftmost unset bit to 1\n        if count == i:\n            leftmost_unset_bit = 1 << i\n            break\n\n    # Return the modified integer with the leftmost unset bit set to 1\n    return n | leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost set bit\n    rightmost_set_bit = n.bit_length() - 1\n\n    # Find the number of leading zeros in n\n    leading_zeros = 0\n    while n & 1 == 0:\n        n >>= 1\n        leading_zeros += 1\n\n    # Set the left most unset bit\n    left_most_unset_bit = rightmost_set_bit - leading_zeros\n\n    # Set the leftmost unset bit in n\n    n |= 1 << left_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given number.\n    \"\"\"\n    # check if the number is zero\n    if n == 0:\n        return n\n    \n    # find the leftmost unset bit\n    while n & 1 == 0:\n        n = n >> 1\n    \n    # set the leftmost unset bit\n    n |= 1\n    \n    # return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary number to a list of digits\n    digits = list(bin(n)[2:])\n    # Initialize a variable to store the index of the leftmost unset bit\n    leftmost_unset_bit_index = None\n    # Loop through the digits in reverse order\n    for i in range(len(digits)-1, -1, -1):\n        # If the current digit is set, move on to the next digit\n        if digits[i] == '1':\n            leftmost_unset_bit_index = i\n            break\n        # If the current digit is not set, check if it has any unset bits to the left\n        if leftmost_unset_bit_index is None:\n            leftmost_unset_bit_index = i\n            for j in range(leftmost_unset_bit_index):\n                if digits[j] == '0':\n                    leftmost_unset_bit_index = j\n                    break\n    # If no unset bits are found, the leftmost bit is the last bit in the binary number\n    if leftmost_unset_bit_index is None:\n        leftmost_unset_bit_index = len(digits)\n    # Set the leftmost unset bit to 1\n    digits[leftmost_unset_bit_index] = '1'\n    # Convert the list of digits back to a binary number\n    binary_number = int(''.join(digits), 2)\n    return binary_number"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the rightmost unset bit\n    while (n & 1) == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(r, h))"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    vol = (1/3) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula: V = \u03c0r\u00b2h.\n    '''\n    return math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a given radius and height.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: volume of the cone\n    \"\"\"\n\n    volume = math.pi * r ** 2 * h / 3  # formula for the volume of a cone\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize a variable to hold the highest power of 2\n    highest = 1\n    \n    # loop through each bit in the binary representation of n\n    for i in range(31):\n        # check if the ith bit is set\n        if n & (1 << i):\n            # if it is, set the highest power of 2\n            highest = 2**i\n            \n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return 1 << highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0:\n        n &= (n-1)\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    power = 0\n    current_num = n\n    \n    # Loop until the current number is less than or equal to 1\n    while current_num > 1: \n        # Increment the power if the current number is a power of 2\n        if current_num & (current_num - 1) == 0: \n            power += 1\n        \n        # Shift the current number one bit to the right\n        current_num >>= 1\n    \n    # Return the highest power of 2 less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest_power = 1\n    while highest_power < n:\n        highest_power <<= 1\n    return highest_power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize a variable to store the highest power of 2\n    highest = 0\n    \n    # loop through the numbers from 1 to n, starting from the lowest number\n    for i in range(1, n+1):\n        # if i is a power of 2, check if it's greater than highest\n        if i == 1 or i == 2 or i == 4 or i == 8 or i == 16 or i == 32 or i == 64 or i == 128:\n            if i > highest:\n                highest = i\n    \n    # return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the highest power of 2 that is less than or equal to the input number.\n    \"\"\"\n    # Initialize the start and end of the search range to 0 and 2^31-1 (the largest possible integer)\n    start, end = 0, 2**31-1\n\n    # Initialize the highest power of 2 found so far to 0\n    highest_power = 0\n\n    # Perform a binary search to find the highest power of 2 that is less than or equal to n\n    while start <= end:\n        mid = (start + end) // 2\n\n        # If mid is a power of 2, update highest_power and end to mid-1 and mid\n        if mid & (mid-1) == 0:\n            highest_power = mid\n            end = mid-1\n\n        # If mid is less than n, update the start to mid+1\n        elif mid < n:\n            start = mid+1\n\n        # If mid is greater than n, update the end to mid-1\n        else:\n            end = mid-1\n\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function calculates the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    This function finds then'th lucas number using the formula:\n    Lucas(n) = (1/2) * (Lucas(n-1) + Lucas(n-2))\n    \n    The initial values of Lucas(0) and Lucas(1) are 2 and 1, respectively.\n    '''\n    \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return (1/2) * (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # initialize the first two numbers as 2\n    a = 2\n    b = 1\n\n    # iterate n-1 times\n    for i in range(2, n): \n        # calculate the next number as the sum of previous two numbers\n        a, b = b, a + b\n\n    # return the last number as then'th lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n\n    Args:\n    n (int): the index of the lucas number to find.\n\n    Returns:\n    int: then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of strings to format.\n    string (str): A format string to apply to each element in list_.\n\n    Returns:\n    A new list with the format string applied to each element in list_.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = f\"{l1[i]}{l2[j]}{l3[k]}\"\n                value = [i, j, k]\n                result[key] = value\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # define the nested dictionary\n    my_dict = {}\n    # loop through the lists\n    for i in range(len(l1)):\n        # create a sub-dictionary for each list\n        sub_dict = {}\n        # loop through the elements in the list\n        for j in range(len(l1[i])):\n            # add the element to the sub-dictionary\n            sub_dict[l2[i][j]] = l3[i][j]\n        # add the sub-dictionary to the main dictionary\n        my_dict[l1[i]] = sub_dict\n    # return the final nested dictionary\n    return my_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Convert more than one list to a nested dictionary.\n\n    Parameters:\n    *lists: A variable number of lists to convert.\n\n    Returns:\n    A dictionary with keys as the elements from the input lists, and values as lists of lists.\n    '''\n    result = {}\n    for list_ in lists:\n        for i, item in enumerate(list_):\n            if item not in result:\n                result[item] = [[] for _ in range(len(lists) - 1)]\n            result[item][i].append(list_)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the result\n    result = {}\n    \n    # iterate over all the lists and add each element to the dictionary\n    for lst in [l1, l2, l3]:\n        for item in lst:\n            # check if the key already exists in the result dictionary\n            if item in result:\n                # if it does, append the value to the existing key's list\n                result[item].append(lst.index(item))\n            else:\n                # if it doesn't, add a new key with the value as a list containing the index of the current item\n                result[item] = [lst.index(item)]\n    \n    # return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            if isinstance(item, list):\n                for subitem in item:\n                    nested_dict.setdefault(i, {})[subitem] = None\n            else:\n                nested_dict.setdefault(i, {})[item] = None\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert lists to dictionaries\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n\n    # Combine dictionaries\n    result = {**d1, **d2}\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define a dictionary with keys as the first list and values as the second list\n    dict_list = dict(zip(l1, l2))\n\n    # Iterate over each element of the first list and create a dictionary with keys as the third list and values as the fourth list\n    for key, value in dict_list.items():\n        dict_list[key] = dict(zip(l3, value))\n\n    return dict_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes more than one list as arguments and converts them to a nested dictionary.\n    '''\n    result = {}\n    for i in args:\n        for item in i:\n            if isinstance(item, list):\n                result.update({item[0]: item[1]})\n            else:\n                result.update({item: None})\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a new dictionary\n    d = {}\n    # loop through the lists and add each item as a key and its corresponding list as a value to the new dictionary\n    for i in range(len(l1)):\n        d[str(l1[i])] = l2[i]\n    for i in range(len(l1)):\n        d[str(l1[i])][str(l3[i])] = l2[i]\n    # return the new dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize the nested dictionary\n    nested_dict = {}\n    # iterate through each list\n    for i in range(len(l1)):\n        # convert each list item to a key-value pair\n        for j in range(len(l2)):\n            nested_dict[l1[i][j]] = l2[i][j]\n        # convert each list item to a key-value pair\n        for k in range(len(l3)):\n            nested_dict[l1[i][k]] = l3[i][k]\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        sum1 = 1\n        sum2 = get_max_sum(n//2)\n        sum3 = get_max_sum(n//3)\n        sum4 = get_max_sum(n//4)\n        sum5 = get_max_sum(n//5)\n        max_sum = sum(sorted([sum1, sum2, sum3, sum4, sum5], reverse=True))\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    # function to find the maximum sum of 5 elements\n    def max_sum_5(n):\n        if n == 5:\n            return 100\n        else:\n            return max_sum_5(n-1) + n\n    \n    # function to find the maximum sum of 4 elements\n    def max_sum_4(n):\n        if n == 4:\n            return 80\n        else:\n            return max_sum_4(n-1) + n\n    \n    # function to find the maximum sum of 3 elements\n    def max_sum_3(n):\n        if n == 3:\n            return 60\n        else:\n            return max_sum_3(n-1) + n\n    \n    # function to find the maximum sum of 2 elements\n    def max_sum_2(n):\n        if n == 2:\n            return 40\n        else:\n            return max_sum_2(n-1) + n\n    \n    # function to find the maximum sum of 1 element\n    def max_sum_1(n):\n        if n == 1:\n            return 20\n        else:\n            return max_sum_1(n-1) + n\n    \n    # function to find the maximum sum\n    def max_sum(n):\n        if n == 5:\n            return max_sum_5(n)\n        elif n == 4:\n            return max_sum_4(n)\n        elif n == 3:\n            return max_sum_3(n)\n        elif n == 2:\n            return max_sum_2(n)\n        else:\n            return max_sum_1(n)\n    \n    return max_sum(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 7\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return get_max_sum(n/2) + n\n\n    if n % 3 == 0:\n        return get_max_sum(n/3) + n\n\n    if n % 4 == 0:\n        return get_max_sum(n/4) + n\n\n    if n % 5 == 0:\n        return get_max_sum(n/5) + n\n\n    return get_max_sum(n/2) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*4\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5),n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n\n    # Calculate the sum of the first n terms of the modified Fibonacci sequence\n    c, d = 1, 0\n    for i in range(n):\n        c, d = d, c + d\n\n    # Calculate the maximum sum\n    max_sum = max(c, n)\n    max_sum = max(max_sum, a + b - c - d + n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(set_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if a given tuple contains any duplicates.\n\n    Args:\n        test_tup: tuple\n\n    Returns:\n        bool: True if no duplicates are found, otherwise False.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if the length of the tuple is zero\n    if len(test_tup) == 0:\n        return True\n    # create a dictionary to store the elements of the tuple\n    element_dict = {}\n    # iterate over the elements of the tuple\n    for element in test_tup:\n        # if the element is already present in the dictionary, return False\n        if element in element_dict.values():\n            return False\n        # otherwise, add the element to the dictionary\n        else:\n            element_dict[element] = element\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Create a set from the given tuple\n    unique_set = set(test_tup)\n\n    # If the length of the set is equal to the length of the tuple, then there are no duplicates\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns True if it contains no duplicates, else False.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    for i in range(len(str1)):\n        if count_dict[str1[i]] == 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an input and returns the first non-repeated character in the string.\n    If all the characters in the string are repeated, it returns None.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the characters in the string and check if each character is non-repeated\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment its count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # loop through each character in the string again to find the first non-repeated character\n    for char in str1:\n        # if the count of the character is 1, return the character\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    first_non_repeating_char = None\n    for char in str1:\n        if char in char_count:\n            if char_count[char] == 1:\n                char_count[char] = 2\n            else:\n                char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if first_non_repeating_char is None or char_count[char] == 2:\n            first_non_repeating_char = char\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the count of each character\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # initialize an empty list to store the non-repeating characters\n    non_repeating_chars = []\n    for char in str1:\n        if count_dict[char] == 1:\n            non_repeating_chars.append(char)\n\n    # return the first non-repeating character\n    return non_repeating_chars[0] if non_repeating_chars else None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with frequency 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a variable to store the first non-repeating character\n    first_non_repeating = None\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the character is not the first non-repeating character, break out of the loop\n        if char!= freq.keys()[0]:\n            break\n        # If the character is the first non-repeating character, set it to the current character and break out of the loop\n        else:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    \n    char_list = list(string)\n    if char_list[0]!= char_list[-1]:\n        return False\n    \n    return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the middle numbers\n    middle_numbers = sorted_numbers[1:-1]\n\n    # calculate the median\n    if len(middle_numbers) % 2 == 0:\n        median = (middle_numbers[len(middle_numbers) // 2 - 1] + middle_numbers[len(middle_numbers) // 2]) / 2\n    else:\n        median = middle_numbers[len(middle_numbers) // 2]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the indices of the two middle numbers\n    mid1 = len(nums) // 2\n    mid2 = mid1 - 1\n\n    # Calculate the median as the average of the two middle numbers\n    median = (nums[mid1] + nums[mid2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sorting the list of numbers\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # finding the length of the list\n    length = len(numbers)\n\n    # calculating the middle index\n    middle = length // 2\n\n    # if the length of the list is odd, then the median is the middle element\n    if length % 2 == 1:\n        return numbers[middle]\n\n    # if the length of the list is even, then the median is the average of the two middle elements\n    else:\n        return (numbers[middle - 1] + numbers[middle]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Calculate the middle index of the sorted list\n    mid_index = len(sorted_nums) // 2\n    # Check if the length of the list is odd or even\n    if len(sorted_nums) % 2 == 0:\n        # If the length is even, return the average of the two middle numbers\n        return (sorted_nums[mid_index - 1] + sorted_nums[mid_index]) / 2\n    else:\n        # If the length is odd, return the middle number\n        return sorted_nums[mid_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle numbers\n    middle1 = middle2 = None\n\n    if len(sorted_numbers) % 2 == 0:\n        middle1 = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n        middle2 = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 + 1])/2\n    else:\n        middle1 = sorted_numbers[len(sorted_numbers)//2]\n        middle2 = None\n\n    # Find the median\n    if middle1 == middle2:\n        return middle1\n    elif middle1 > middle2:\n        return middle1\n    else:\n        return middle2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n\n    The function first sorts the three numbers in ascending order using the built-in `sorted()` function.\n    It then calculates the length of the sorted list using the `len()` function. If the length of the list is odd, \n    then the median is the middle number. If the length of the list is even, then the median is the average \n    of the two middle numbers.\n\n    Args:\n    - a: The first number\n    - b: The second number\n    - c: The third number\n\n    Returns:\n    - The median of the three numbers\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the length of the sorted list\n    length = len(sorted_list)\n\n    # Check if the length of the list is odd or even\n    if length % 2 == 0:\n        # The length is even, so the median is the average of the two middle numbers\n        median = (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        # The length is odd, so the median is the middle number\n        median = sorted_list[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the given numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculating the length of the array\n    length = len(numbers)\n\n    # If the length is odd, the median is the middle number\n    if length % 2!= 0:\n        median = numbers[length//2]\n        return median\n\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        mid1 = length//2\n        mid2 = mid1 - 1\n        median1 = numbers[mid1]\n        median2 = numbers[mid2]\n        median = (median1 + median2)/2\n        return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n\n    # find the length of the sorted list\n    length = len(sorted_list)\n\n    # if the length of the list is odd, then the median is the middle number\n    if length % 2 == 1:\n        median = sorted_list[length//2]\n    # if the length of the list is even, then the median is the average of the two middle numbers\n    else:\n        median = (sorted_list[length//2-1] + sorted_list[length//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        num_digits = 0\n        while num > 0:\n            num_digits += num % 10\n            num //= 10\n        digits_sum += num_digits\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and iterate through each character\n        for digit in str(num):\n            # convert the character to an integer and add it to the running sum\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digits = list(str(num))\n        sum += sum(int(d) for d in digits)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(d) for d in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Add up the digits in the list\n        total += sum(digits)\n    \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # convert the number to a string and then convert each character to an integer\n        digit_sum = sum(int(digit) for digit in str(num))\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        result += temp\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    # Iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Perform the mathematical bitwise xor operation\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # initialize the variables to hold the result and carry\n    result = 0\n    carry = 0\n\n    # loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        # get the two bits of the two tuples at the current index\n        bit1 = test_tup1[i] & 1\n        bit2 = test_tup2[i] & 1\n\n        # perform the bitwise xor operation\n        xor_bit = bit1 ^ bit2\n\n        # if there is a carry, add it to the result\n        if carry:\n            xor_bit ^= 1\n            carry = 0\n\n        # add the current xor_bit to the result\n        result |= xor_bit\n\n    # if there is a carry, add it to the result\n    if carry:\n        result ^= 1\n\n    # return the final result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the current element and the result variable\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result as a tuple\n    return (result,)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a tuple to store the result of the bitwise xor operation\n    result_tup = ()\n    \n    # Iterate through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        # Get the two elements from the tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Perform the bitwise xor operation\n        xor_result = elem1 ^ elem2\n        \n        # Append the result to the result tuple\n        result_tup += (xor_result,)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result of the bitwise xor operation\n    result = 0\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements of the tuples\n        result |= test_tup1[i] ^ test_tup2[i]\n    # Return the result of the bitwise xor operation\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum = xor_sum ^ test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list and returns the number of unique tuples in the list.\n\n    Args:\n        test_list (list): A list of tuples.\n\n    Returns:\n        int: The number of unique tuples in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Return the length of the unique set\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    unique_tuples = set()\n\n    for item in test_list:\n        if tuple(sorted(item)) not in unique_tuples:\n            unique_tuples.add(tuple(sorted(item)))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if isinstance(item, tuple):\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of two input tuples should be same.\")\n        return\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each index of the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples at this index\n        result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the final result tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize a nested list to store the result\n    result_list = []\n\n    # loop through the first tuple and perform index wise addition of each element with its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # return the nested list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_list = []\n        for j in range(len(test_tup1[i])):\n            temp_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_list))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new list to hold the result\n    result = []\n    \n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the elements of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the elements of the two tuples at the current index\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup_result = []\n        for j in range(len(test_tup1[i])):\n            tup_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tup_result)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of the same length.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments, a and b, and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function finds the minimum of two numbers\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input and checks whether the first tuple contains the second tuple.\n    If it does, it prints True, else it prints False.\n    \"\"\"\n    if tuplex in tuple1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    # iterate through the first tuple\n    for element in tuple1:\n        # if the element exists in the first tuple, iterate through the second tuple\n        if element in tuplex:\n            for sub_element in tuplex[tuplex.index(element):]:\n                # if the element exists in the second tuple, return True\n                if sub_element in tuple1:\n                    return True\n            # if the element exists in the second tuple, return False\n            return False\n    # if the element does not exist in the first tuple, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    # loop through each element of the tuple1 and check if it exists in the tuple\n    for element in tuple1:\n        # if the element exists in the tuple, return True\n        if element in tuplex:\n            return True\n    # if no element exists in the tuple, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i in tuplex: \n            print(i, \"is present in tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # check whether tuple1 is a tuple\n    if type(tuple1)!= tuple:\n        print(\"The second argument must be a tuple.\")\n        return\n    \n    # check whether tuplex exists in tuple1\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters, tuplex and tuple1, both are tuples.\n    It checks whether an element exists within the tuple1. If an element exists, it returns True.\n    If an element does not exist, it returns False.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1:\n        if i in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize parity variable as 0\n    parity = 0\n    \n    # Loop through each bit of the binary representation of x\n    for bit in bin(x)[2:]:\n        # If the bit is 1, set parity to 1\n        if bit == '1':\n            parity = 1\n    \n    # If parity is still 0 at the end, x is even\n    if parity == 0:\n        return \"The parity of\", x, \"is even.\"\n    else:\n        return \"The parity of\", x, \"is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns whether the parity of the number is odd or even.\n    '''\n\n    # determine the parity of the number\n    if x % 2 == 0:\n        parity = 'even'\n    else:\n        parity = 'odd'\n\n    # return the parity of the number\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Count the number of 1's in the binary representation of x\n    count = 0\n    while x > 0:\n        if x % 2 == 1:\n            count += 1\n        x //= 2\n\n    # Check if count is odd or even\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: # Check if the number is even\n        print(f\"{x} is even and has an odd parity.\")\n    else:\n        print(f\"{x} is odd and has an even parity.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Determine whether the parity of a given number is odd or even.\n    \n    Parameters:\n    x (int): A positive integer\n    \n    Returns:\n    str: \"odd\" or \"even\"\n    \"\"\"\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2 # remainder when x is divided by 2\n    if parity == 0:\n        return False # even number\n    else:\n        return True # odd number"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits from n\n    digits = [int(d) for d in str(n)]\n    # sort the list of digits in ascending order\n    digits.sort()\n    # convert the list of digits back to a string and append a zero to the end\n    rearranged = ''.join(str(d)) + '0'\n    # convert the string of digits back to an integer and return it\n    return int(rearranged)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    max_digit_index = digits.index(max_digit)\n    \n    for i in range(max_digit_index, len(digits)):\n        digits[max_digit_index], digits[i] = digits[i], digits[max_digit_index]\n        if int(''.join(str(d) for d in digits)) > n:\n            return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    while True:\n        new_n = ''\n        while n > 0:\n            new_n += str(n % 10)\n            n //= 10\n        if new_n == sorted(new_n, reverse=True):\n            return int(''.join(new_n))\n        n += 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    num_str = str(n)\n    num_list = list(num_str)\n    # Sort the list in reverse order\n    num_list.sort(reverse=True)\n    # Convert the sorted list back to a string and add a leading zero to make it a two-digit number\n    next_bigger_str = ''.join(num_list)\n    next_bigger = int('0' + next_bigger_str)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    n_str = str(n)\n    \n    # Reverse the string\n    n_str_rev = n_str[::-1]\n    \n    # Initialize a variable to keep track of the current position of the largest digit\n    max_pos = 0\n    \n    # Iterate through the digits of the reversed string\n    for i in range(len(n_str_rev)):\n        # Check if the current digit is greater than the largest digit seen so far\n        if int(n_str_rev[i]) > int(n_str_rev[max_pos]):\n            # If it is, update max_pos to the current position\n            max_pos = i\n    \n    # Convert max_pos to a string and reverse it\n    max_str = str(max_pos)[::-1]\n    \n    # Join the reversed digits of the input number with the digits of max_pos and return the result\n    return int(''.join(n_str_rev[:max_pos] + max_str + n_str_rev[max_pos+1:]))\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the number into a string\n    num_str = str(n)\n    \n    # Initialize a list of the digits of the number\n    digits = []\n    for digit in num_str:\n        digits.append(int(digit))\n    \n    # Initialize the index of the largest digit\n    max_index = 0\n    \n    # Iterate through the digits\n    for i in range(len(digits)):\n        if digits[i] > digits[max_index]:\n            max_index = i\n            \n    # Swap the largest digit with the first digit\n    digits[max_index], digits[0] = digits[0], digits[max_index]\n    \n    # Convert the digits back into a string\n    result_str = ''.join(map(str, digits))\n    \n    # Convert the string back into an integer\n    result = int(result_str)\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # convert the integer to a string and sort it\n    s = sorted(str(n))\n    # count the number of occurrences of each digit\n    counts = [0] * 10\n    for c in s:\n        counts[int(c)] += 1\n    # determine the smallest digit that occurs more than once\n    digit = min(i for i in range(10) if counts[i] > 1)\n    # count the number of digits after the digit with the highest count\n    count = len(s) - counts[digit]\n    # convert the digit and count back to integers and return the result\n    return int(''.join(str(digit) for i in range(count) + [digit]))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    max_digit = max(digits)\n    min_digit = min(digits)\n    for i in range(max_digit, min_digit-1, -1):\n        if digits.count(i) > 0:\n            digits.remove(i)\n            digits.insert(0, i)\n            break\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Check if the number has only one digit\n    if len(num_str) == 1:\n        return int(num_str)\n    \n    # Initialize variables for the new number\n    new_num = \"\"\n    new_num_list = []\n    \n    # Loop through each digit in the number\n    for digit in num_str:\n        # Check if the digit is greater than 1\n        if int(digit) > 1:\n            # If it is, append it to a new list\n            new_num_list.append(digit)\n    \n    # Reverse the order of the digits in the new list\n    new_num_list.reverse()\n    \n    # Join the digits back into a string\n    new_num = \"\".join(new_num_list)\n    \n    # Convert the new number back to an integer\n    new_num = int(new_num)\n    \n    # Check if the new number is greater than the original number\n    if new_num > n:\n        return new_num\n    else:\n        return -1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the maximum number to be returned as 0\n    max_num = 0\n    \n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Convert the current digit to an integer\n        digit_int = int(digit)\n        # Calculate the new digit by rearranging the previous digit by one digit\n        new_digit = digit_int - 1\n        # Convert the new digit to a string and append it to the end of the number string\n        new_num_str = str(new_digit) + num_str[1:]\n        # Convert the new number string to an integer and compare it with the current maximum number\n        new_num = int(new_num_str)\n        if new_num > max_num:\n            max_num = new_num\n    \n    return max_num"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n    # loop through the first array\n    for num1 in nums1:\n        # find the k elements that are smaller than num1 in the second array\n        k_smallest_nums = [num2 for num2 in nums2 if num2 < num1][:k]\n        # add the k smallest elements to the min heap\n        heapq.heapify(k_smallest_nums)\n        # update the min heap if the size of the min heap is less than k\n        while len(min_heap) < k:\n            # add the smallest element from the k smallest elements to the min heap\n            min_heap.append(heapq.heappop(k_smallest_nums))\n        # print the smallest k elements\n        print(min_heap)\n    # return the smallest k elements\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Helper function to find the minimum element in the given array\n    def find_min(arr):\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            return min(arr[0], arr[1])\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Initialize two variables to keep track of the minimum element in the first array\n    min1 = float('inf')\n    min2 = float('inf')\n\n    # Iterate through the second array and add each element to the min heap\n    for num2 in nums2:\n        if num2 < min_heap[0][0]:\n            min_heap = [(num2, nums1.index(num2))]\n        elif num2 < min_heap[0][1]:\n            heapq.heappush(min_heap, (num2, nums1.index(num2)))\n        elif num2 == min_heap[0][0]:\n            heapq.heappush(min_heap, (num2, nums1.index(num2)))\n        elif num2 == min_heap[0][1]:\n            heapq.heappush(min_heap, (min_heap[0][0], nums1.index(num2)))\n\n    # Iterate through the first array and find the k smallest pairs\n    pairs = []\n    for num1 in nums1:\n        if len(min_heap) == k:\n            # If the size of the min heap is equal to k, the first element of the heap is the minimum element in the second array\n            if min_heap[0][0] == num1:\n                min1 = min(min1, num1)\n                min2 = min(min2, min_heap[0][1])\n                pairs.append((min_heap[0][0], num1, min_heap[0][1]))\n                min_heap = min_heap[1:]\n            # If the size of the min heap is less than k, the minimum element in the first array is the first element of the heap\n            else:\n                min1 = min(min1, num1)\n                min2 = min(min2, min_heap[0][1])\n                pairs.append((min_heap[0][0], num1, min_heap[0][1]))\n                heapq.heappop(min_heap)\n        # If the size of the min heap is greater than k, the minimum element in the first array is the minimum element in the second array\n        else:\n            min1 = min(min1, num1)\n            min2 = min(min2, find_min(min_heap))\n            pairs.append((min_heap[0][0], num1, min_heap[0][1]))\n            min_heap = []\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the list of lists to a list of tuples\n    nums1_tuples = [(num, i) for i, num in enumerate(nums1)]\n    nums2_tuples = [(num, i) for i, num in enumerate(nums2)]\n\n    # Sort the tuples by the first element of each tuple\n    nums1_tuples.sort(key=lambda x: x[0])\n    nums2_tuples.sort(key=lambda x: x[0])\n\n    # Initialize the result list and the heap with the first k elements from each list\n    result = []\n    heapq.heapify(nums1_tuples[:k])\n    heapq.heapify(nums2_tuples[:k])\n\n    # Iterate over the remaining elements of the lists and add the smallest elements to the result list and update the heap\n    for i in range(k, len(nums1)):\n        heap1 = nums1_tuples[:k]\n        heap2 = nums2_tuples[:k]\n\n        # Get the smallest elements from each heap and add them to the result list\n        pair1, i1 = heapq.heappop(heap1)\n        pair2, i2 = heapq.heappop(heap2)\n        result.append((pair1[0], pair2[0]))\n\n        # Add the smaller element to the heap that contains the larger element\n        if pair1[0] > pair2[0]:\n            heapq.heappush(heap1, pair1)\n        else:\n            heapq.heappush(heap2, pair2)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    for num in nums1 + nums2:\n        if len(heap1) < k and not heap1 or heap1[0] > num:\n            heapq.heappush(heap1, -num)\n        elif len(heap2) < k and not heap2 or heap2[0] > num:\n            heapq.heappush(heap2, -num)\n        elif not heap1 or not heap2:\n            continue\n        else:\n            if -heap1[0] + num > -heap2[0]:\n                heapq.heappush(heap1, -heap1[0] + num)\n            else:\n                heapq.heappush(heap2, -heap2[0] + num)\n                \n    return [(-heap1[0] - heap2[0], nums1[i]), (-heap1[0] - heap2[1], nums1[i+1]), (-heap1[1] - heap2[0], nums2[j]), (-heap1[1] - heap2[1], nums2[j+1])]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest k elements\n    min_heap = []\n    # create a dictionary to store the count of pairs with each element of nums1 and nums2\n    pairs_count = {}\n\n    # loop through nums1 and nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            # check if the current pair exists in the dictionary and increment its count if it does\n            if (num1, num2) in pairs_count:\n                pairs_count[(num1, num2)] += 1\n            else:\n                pairs_count[(num1, num2)] = 1\n            # check if the current pair is smaller than the smallest element in the heap and update it if it is\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (-num1*num2, (num1, num2)))\n            elif (-num1*num2, (num1, num2)) < heapq.heappop(min_heap)[1]:\n                heapq.heappush(min_heap, (-num1*num2, (num1, num2)))\n            # check if the current pair is the smallest element in the heap and remove it if it is\n            if len(min_heap) == k and (-num1*num2, (num1, num2)) == heapq.heappop(min_heap)[1]:\n                pairs_count.pop((-heapq.heappop(min_heap)[0], heapq.heappop(min_heap)[1]))\n\n    # create a list to store the pairs and their counts\n    pairs = []\n    # loop through the pairs in the min heap and add them to the list if their count is still valid\n    for i in range(len(min_heap)):\n        pair = heapq.heappop(min_heap)[1]\n        if pair in pairs_count and pairs_count[pair] > 0:\n            pairs.append(pair)\n            pairs_count[pair] -= 1\n    # return the list of pairs and their counts\n    return pairs, pairs_count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) * len(nums2) < k:\n        return []\n    \n    # Use a min heap to store the minimum value and index of the second array for each element in the first array\n    min_heap = [(nums1[0], 0)]\n    for i in range(1, len(nums1)):\n        # Keep the smallest value and its index for the previous element in the first array\n        prev_min = min_heap[0]\n        \n        # Add the next element in the first array and its index to the heap\n        heapq.heappush(min_heap, (nums1[i], i))\n        \n        # Remove the smallest value and its index from the heap if the total number of pairs is greater than k\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n            \n        # If the total number of pairs is less than or equal to k, add the next pair to the result list\n        if len(min_heap) > 0:\n            result.append((prev_min[0], nums2[prev_min[1]]))\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Initialize a counter to keep track of the number of pairs found\n    count = 0\n    \n    # Loop through the first array\n    for num1 in nums1:\n        # Loop through the second array\n        for num2 in nums2:\n            # If the sum of the current pair is smaller than the current smallest value, add the current pair to the min heap\n            if num1 + num2 < min_heap[0][0]:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            \n            # If the min heap has more than k pairs, remove the last pair\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n            \n            # If the min heap has less than or equal to k pairs, increment the count\n            count += 1\n    \n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize an empty list to store the k smallest pairs\n    heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Find the smallest elements from the second array and insert them into the heap\n        heapq.heappush(heap, (nums2[0], (num1, nums2[0])))\n        # Remove the smallest element from the second array and insert it into the heap\n        nums2.pop(0)\n\n    # Iterate through the heap and find the k smallest pairs\n    for i in range(k):\n        # Remove the smallest elements from the heap and insert them into the list of k smallest pairs\n        pair = heapq.heappop(heap)\n        heapq.heappush(heap, pair)\n        k_smallest_pairs.append(pair)\n\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a heap to store the smallest elements from both arrays\n    min_heap1 = []\n    min_heap2 = []\n    for num in nums1:\n        heapq.heappush(min_heap1, num)\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n\n    # Create a min heap to store the k smallest pairs\n    result = []\n    heapq.heapify(result)\n\n    # Iterate over both heaps to find the k smallest pairs\n    while len(result) < k and min_heap1 and min_heap2:\n        # Get the minimum element from both heaps\n        curr_min1 = heapq.heappop(min_heap1)\n        curr_min2 = heapq.heappop(min_heap2)\n\n        # Add the pair to the result heap\n        heapq.heappush(result, (curr_min1, curr_min2))\n\n    # Return the k smallest pairs\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function finds k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Initialize the result list\n    result = []\n\n    # Heapify the lists and the result list\n    heap1 = []\n    heapq.heapify(heap1)\n    heap2 = []\n    heapq.heapify(heap2)\n\n    # Iterate through the lists\n    for num1 in nums1:\n        # Add the first element to the heap1\n        heapq.heappush(heap1, num1)\n\n        # Check if the heap2 is not empty and has at least k elements\n        while len(heap2) < k:\n            # If heap1 is empty, break the loop\n            if len(heap1) == 0:\n                break\n\n            # Pop the largest element from heap1 and add it to heap2\n            num2 = heapq.heappop(heap1)\n            heapq.heappush(heap2, num2)\n\n    # Iterate through the remaining elements in heap2\n    while len(heap2) > 0:\n        # Pop the largest element from heap2 and add it to the result list\n        num2 = heapq.heappop(heap2)\n        result.append((num2, num2))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize a variable to store the minimum product found so far\n    min_product = float('inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the list of tuples again, skipping the current tuple\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current and next tuple\n            current_product = list1[i] * list1[j]\n            # Update the minimum product if the current product is smaller\n            if current_product < min_product:\n                min_product = current_product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a list to store the minimum products\n    min_list = []\n\n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        # Iterate over the remaining tuples in the list\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the two tuples and check if it's smaller than the current minimum\n            product = tuple_product(list1[i], list1[j])\n            if product < min_list or len(min_list) == 0:\n                min_list = [product]\n            elif product < min_list[0]:\n                min_list[0] = product\n\n    # Return the minimum product from the list\n    return min_list[0]\n\ndef tuple_product(t1, t2):\n    '''\n    Calculate the product of two tuples.\n    '''\n    # Convert the tuples to lists and calculate the product\n    product = 1\n    for i in range(len(t1)):\n        product *= t1[i] * t2[i]\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product as infinity\n    min_product = float('infinity')\n\n    # Iterate through all tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair of tuples\n            product = list1[i] * list1[j]\n\n            # If the current product is less than the minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    n = len(list1)\n    result = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][0]*list1[j][1]\n            if product < result:\n                result = product\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables for the minimum product and the list of tuples\n    min_product = float('inf')\n    min_tuples = []\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # Calculate the product of the two elements in the tuple\n        product = tup[0] * tup[1]\n\n        # If the product is less than the minimum product, update the minimum product and the list of tuples\n        if product < min_product:\n            min_product = product\n            min_tuples = [tup]\n        elif product == min_product:\n            min_tuples.append(tup)\n\n    # Return the minimum product and the list of tuples\n    return min_product, min_tuples"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element in the list\n    min_val = listval[0]\n    # Iterate over the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value\n    min_val = listval[0]\n\n    # iterate through the list and compare each value to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value as the first value in the list\n    min_val = listval[0]\n    # loop through the list and compare each value with the current minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return \"The input must be a list\"\n    \n    for i in listval:\n        if isinstance(i, int):\n            if i < min_val:\n                min_val = i\n        elif isinstance(i, str):\n            if len(i) < len(min_val):\n                min_val = i\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element in the list\n    min_val = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]  # initialize the minimum value as the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    if not listval:\n        return None\n\n    # Find the minimum value in the list\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # check if list is empty\n    if len(listval) == 0:\n        return None\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the remaining values in the list\n    for val in listval[1:]:\n        # compare current value to minimum value\n        if val < min_val:\n            # update minimum value\n            min_val = val\n    # return minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Join the words together with the first letter capitalized\n    camel_case_word = words[0].capitalize()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert snake_case to CamelCase\n    word = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Convert CamelCase to camelCase\n    word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # Convert uppercase letters to lowercase\n    word = word.lower()\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert all letters in the word to lowercase\n    word = word.lower()\n\n    # Split the word into words using underscores as delimiters\n    words = re.findall(r'[a-z][a-z0-9]*', word)\n\n    # Convert the first letter of each word to uppercase and join them back together\n    camel_case = ''.join([word[0].upper() + word[1:] for word in words])\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into individual words\n    words = word.split('_')\n    # Converting each word to camel case\n    camel_words = [word.capitalize() for word in words]\n    # Joining the camel words into a camel case string\n    camel_case_string = ''.join(camel_words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for char in word:\n        if char.isupper():\n            camel_word += char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_([a-z])')\n    result = pattern.sub(lambda x: x.group(1).upper(), word)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert each word to camel case\n    camel_case = ''.join([word.capitalize() for word in words])\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to camel case\n    camel_case_word = re.sub(r'_(.)', lambda match: match.group(1).upper(), word)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'(\\w+)', word)\n    camel_words = [words[0].capitalize()]\n    for i in range(1, len(words)):\n        camel_words.append(words[i].capitalize())\n    return ''.join(camel_words)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store even numbers\n    even_nums = []\n    # iterate through the given list\n    for num in l:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if the number is odd, add it to the even_nums list\n            even_nums.append(num)\n    # return the even_nums list\n    return even_nums"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the even numbers from the input list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        print(\"List is empty!\")\n        return None\n    elif n < 1 or n > len(list1):\n        print(\"Invalid index!\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        if n < 1 or n > len(list1):\n            return None\n        else:\n            return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input is valid\n    if not isinstance(list1, list) or not isinstance(n, int):\n        return \"Invalid input.\"\n    \n    # check if the list is empty\n    if len(list1) == 0:\n        return \"List is empty.\"\n    \n    # check if the nth element exists\n    if n > len(list1):\n        return \"Nth element does not exist.\"\n    \n    # extract the nth element\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Check if the lists are of equal length\n    if len(list1)!= len(list2):\n        return False\n\n    # Iterate through the lists\n    for i in range(len(list1)):\n        # Check if the elements of both lists are equal\n        if list1[i] == list2[i]:\n            # If an element is found, return True\n            return True\n\n    # If no element is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Initialize a boolean variable to keep track of whether any value in list1 exists in list2\n    overlap = False\n    # Loop through each value in list1 and check if it exists in list2\n    for val in list1:\n        if val in list2:\n            # If the value exists, set the overlap flag to True and exit the loop\n            overlap = True\n            break\n    # Return the overlap flag\n    return overlap"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Check if the input sequences are of equal length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Input sequences must have the same length\")\n\n    # Loop through the lists and check if any value exists in both lists\n    for val1 in list1:\n        if val1 in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether there is any element that exists in both the lists.\n    If there is any overlapping element, then the function returns True, otherwise it returns False.\n    \"\"\"\n    # create an empty set to store unique elements of list1\n    unique_list1 = set()\n\n    # iterate through list1 and add each element to the set\n    for element in list1:\n        unique_list1.add(element)\n\n    # create an empty set to store unique elements of list2\n    unique_list2 = set()\n\n    # iterate through list2 and add each element to the set\n    for element in list2:\n        unique_list2.add(element)\n\n    # check if there is any overlapping element between the two sets\n    if len(unique_list1.intersection(unique_list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize a set to store unique values in list1\n    unique_values = set(list1)\n    # Loop through list2 and check if any of its values are in unique_values\n    for value in list2:\n        if value in unique_values:\n            # If a value is found, return True immediately\n            return True\n    # If no values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in both the lists.\")\n        else:\n            print(i, \"does not exist in both the lists.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of values in list1\n    set1 = set(list1)\n    # iterate over list2 and check if any value is in set1\n    for val in list2:\n        if val in set1:\n            return True\n    # if no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Convert both list to sets to remove duplicates and then compare\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n\n    # Initialize two variables to keep track of the maximum product and its corresponding pair\n    max1 = max2 = float('-inf')\n    max_product = float('-inf')\n\n    # Traverse through the array and find the maximum product and its corresponding pair\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Compute the product of the current pair and the remaining elements in the array\n            current_product = arr[i] * arr[j]\n            # Update the maximum product if the current product is greater than the previous maximum product\n            if current_product > max_product:\n                max_product = current_product\n                max1 = arr[i]\n                max2 = arr[j]\n\n    # Return the pair of elements with the maximum product\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and finds a pair with the highest product.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize the maximum product to the first element of the array\n    max_product = arr[0]\n    # Initialize the minimum product to be the second element of the array\n    min_product = arr[1]\n    # Loop through the array and find the maximum and minimum products\n    for i in range(2, len(arr)):\n        # Update the maximum product if the current element is larger\n        if max_product < arr[i] * min_product:\n            max_product = arr[i] * min_product\n        # Update the minimum product if the current element is smaller\n        elif min_product > arr[i] * max_product:\n            min_product = arr[i] * max_product\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_pair = [arr[0], arr[0]]\n    min_pair = [arr[0], arr[0]]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_pair[0] * max_pair[1]:\n            max_pair[0], max_pair[1] = max_pair[1], max_pair[0]\n            max_pair[0], max_pair[1] = arr[i], max_pair[0]\n        \n        elif arr[i] > max_pair[0] * min_pair[1]:\n            max_pair[0], max_pair[1] = arr[i], max_pair[0]\n        \n        elif arr[i] > min_pair[0] * min_pair[1]:\n            min_pair[0], min_pair[1] = arr[i], min_pair[0]\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        elif num < min_product:\n            min_product = num\n\n    return max(max_product * min_product, min_product * max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_product = float('inf')\n    min_pair = (float('inf'), float('inf'))\n\n    for num in arr:\n        if num > max_pair[0]:\n            max_pair = (num, max_pair[1])\n        elif num > max_pair[1]:\n            max_pair = (max_pair[0], num)\n        \n        if num < min_pair[0]:\n            min_pair = (num, min_pair[1])\n        elif num < min_pair[1]:\n            min_pair = (min_pair[0], num)\n        \n        if max_pair[0] * max_pair[1] > max_product:\n            max_product = max_pair[0] * max_pair[1]\n        \n        if min_pair[0] * min_pair[1] < min_product:\n            min_product = min_pair[0] * min_pair[1]\n    \n    return (max_pair[0], max_pair[1])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing two integers - the first one being the maximum product found and the second one being the index of the pair that has the highest product.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    Example:\n    arr = [2, 3, 4, 1]\n    max_product, index = max_Product(arr)\n    print(\"Max Product:\", max_product)\n    print(\"Index:\", index)\n    '''\n\n    # Find the maximum product in the array\n    max_product = float('-inf')\n    max_product_index = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        product = 1\n\n        # Iterate through the remaining elements in the array and calculate the product\n        for j in range(i, len(arr)):\n            product *= arr[j]\n\n        # Compare the product with the current maximum product found so far\n        if product > max_product:\n            max_product = product\n            max_product_index = i\n\n    return max_product, max_product_index\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_pair:\n                max_pair = current_product\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if len(set(tup)) == 1:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        else:\n            if i[0] == common_element:\n                print(\"Common element found:\", common_element)\n                return\n    \n    print(\"No common element found.\")\n    return"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for item in Input:\n        if common_first is None:\n            common_first = item[0]\n        elif common_first == item[0]:\n            common_first = None\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing only the tuples which have the same common first element.\n    '''\n    common_elements = []\n    for i in Input: \n        if len(common_elements) == 0: \n            common_elements.append(i) \n        elif i[0] in common_elements[-1]: \n            common_elements[-1].append(i) \n        else: \n            common_elements.append([i]) \n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Using set to find unique elements in the list of tuples\n    unique_elements = set(Input)\n    # Find the common first element in the unique elements\n    common_element = unique_elements.pop()\n    # Filter the list of tuples based on common element\n    filtered_list = [element for element in Input if element[0] == common_element]\n    # Return the filtered list\n    return filtered_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Loop through the input list of tuples\n    for i in Input:\n        # Extract the first element from the tuple\n        first_element = i[0]\n\n        # Check if the first element is already in the common_elements list\n        if first_element not in common_elements:\n            # Add the first element to the common_elements list\n            common_elements.append(first_element)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element in that list.\n    '''\n    # initialize an empty dictionary to store common elements\n    common_elements = {}\n    # iterate over the given list of tuples\n    for item in Input:\n        # extract the first element from the tuple\n        element = item[0]\n        # check if the element is already present in the dictionary\n        if element in common_elements:\n            # if it is, increment the count of that element in the dictionary\n            common_elements[element] += 1\n        else:\n            # if it's not, add the element to the dictionary with count of 1\n            common_elements[element] = 1\n    # iterate over the dictionary to find the common element(s)\n    for key, value in common_elements.items():\n        # if the count of the element is greater than 1, return it as the common first element\n        if value > 1:\n            return key\n    # if no common elements are found, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    containing only the tuples with common first element.\n    '''\n    # Create a dictionary to store the count of elements in each tuple\n    count_dict = {}\n    for tup in Input:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # Create a new list to store tuples with common first element\n    common_tuples = []\n    for tup in Input:\n        if count_dict[tup[0]] == 1:\n            common_tuples.append(tup)\n    \n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples, where each tuple contains only the first element of the original tuples.\n    '''\n    result = []\n    for tup in Input:\n        result.append((tup[0],))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for i in range(len(Input)):\n        common_first.append(Input[i][0])\n    return list(set(common_first))"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function takes a list as input and returns the element with maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    \n    # loop through the list and check if the length of the current element is greater than the current max length\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    # Find the length of the longest element in the list\n    max_length = max(len(i) for i in lst)\n    # Find the element(s) of the list having the maximum length\n    max_elements = [i for i in lst if len(i) == max_length]\n    # Return the element(s) of the list having the maximum length\n    return max_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # iterate through the list and find the maximum element and its length\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_element = i\n            max_length = len(str(i))\n    \n    # return the maximum element and its length\n    return max_element, max_length"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list with the maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for i in lst: \n        if len(i) > max_length: \n            max_length = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_str = \"\"\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_str = i\n\n    return max_str\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_rounded_numbers = 0\n    for i in list1:\n        rounded_number = round(i)\n        sum_of_rounded_numbers += rounded_number\n    total_sum = sum_of_rounded_numbers * len(list1)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total = 0\n    for num in list1:\n        total += round(num)\n\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # iterate through the list\n    total_sum = 0\n    for num in list1:\n        # round the number to the nearest integer\n        rounded_num = round(num)\n        # add the rounded number to the total sum\n        total_sum += rounded_num\n    # print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2,n+1,2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the even number and add it to the cube sum\n        cube_sum += i**3\n        \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0 \n    for i in range(1, n+1, 2): \n        total += i*i*i \n    return total "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize variables\n    sum = 0 \n    cube = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i\n        cube += i**3\n\n    return cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_cube_sum = 0\n    for i in range(1, n+1, 2):\n        even_cube_sum += i**3\n    return even_cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Loop through first n even natural numbers\n    for i in range(n):\n        num = i*2\n        sum += num*num*num\n        count += 1\n\n    # Return the cube sum\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = delimiter.join(str(x) for x in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return \", \".join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(str(i) for i in test_tup)\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    avg_of_cubes = sum_of_cubes / count\n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_of_cubes = sum_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize variables for sum and count\n    sum_of_cubes = 0\n    count = 0\n\n    # Calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_cube += i**3  \n        count += 1  \n    average_cube = sum_cube/count  \n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i*i\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    for i in range(n):\n        sum += i**3\n\n    average = sum / (n*n)\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        rear_index.append(item[::-1][1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(test_tuple)[i] for i in range(-len(str(test_tuple)), 0))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for element in test_tuple:\n        rear_index.append(element[-1])\n    return rear_index"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    counter = 0\n    for sublist in list1:\n        if x in sublist:\n            counter += 1\n    return counter"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes in a list and an element x as input and returns the count of sublists\n    that contain x as an element.\n    '''\n\n    count = 0\n    for i in range(len(lst)):\n        if x in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for lst in lst:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a given list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the input date format with the regular expression pattern\n    match = re.match(pattern, dt)\n\n    # Check if the match is successful\n    if match:\n        # Extract the matched groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Format the date in the desired output format\n        new_dt = f'{day}-{month}-{year}'\n\n        # Return the formatted date string\n        return new_dt\n\n    else:\n        # If the input date format does not match the regular expression pattern, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters\n    ----------\n    dt : str\n        A date string in the yyyy-mm-dd format.\n\n    Returns\n    -------\n    str\n        The date string converted to dd-mm-yyyy format.\n\n    \"\"\"\n\n    # Convert the date string to a datetime object\n    dt = datetime.datetime.strptime(dt, '%Y-%m-%d')\n\n    # Format the datetime object as dd-mm-yyyy\n    return dt.strftime('%d-%m-%Y')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # create a regular expression object\n    regex = re.compile(pattern)\n    # match the date pattern in the input string\n    match = regex.match(dt)\n    # extract the values of the matched groups\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    # convert the date to dd-mm-yyyy format\n    new_date = f'{day}-{month}-{year}'\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace '-' with '-' and convert to uppercase\n    dt = dt.replace('-', '-')\n    dt = dt.upper()\n    # Split the date into year, month, and day components\n    year, month, day = dt.split('-')\n    # Reverse the order of the components\n    day, month, year = year, month, day\n    # Combine the components with '-' and return\n    return '-'.join([day, month, year])"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub() function to replace the matched pattern with new format\n    new_dt = re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_format = re.compile(r'\\d{4}')\n    mm_format = re.compile(r'\\d{2}')\n    dd_format = re.compile(r'\\d{2}')\n    yyyy_match = yyyy_format.search(dt)\n    mm_match = mm_format.search(dt)\n    dd_match = dd_format.search(dt)\n\n    if yyyy_match:\n        yyyy = yyyy_match.group()\n    else:\n        return None\n\n    if mm_match:\n        mm = mm_match.group()\n    else:\n        return None\n\n    if dd_match:\n        dd = dd_match.group()\n    else:\n        return None\n\n    return dd+'-'+mm+'-'+yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format from yyyy-mm-dd to dd-mm-yyyy\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_date = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Use regular expression to split the date into year, month, and day components\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    year, month, day = re.match(pattern, dt).groups()\n\n    # Construct the new date in dd-mm-yyyy format\n    new_date = f'{day}-{month}-{year}'\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub() function to replace the '-' with a '.' in the input string\n    return re.sub(r'[-]', '.', dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1\n    gap = n//2\n\n    # Step 2\n    while gap > 0:\n        # Step 3\n        for i in range(gap, n):\n            # Step 4\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                # Step 5\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Step 6\n            my_list[j] = key\n\n        # Step 7\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Step 1: Find a suitable gap size\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Insertion sort on the gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Step 3: Reduce the gap size\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # calculate the increment sequence\n    gap = n // 2\n    while gap > 0:\n        # Perform insertion sort for this gap size.\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Step 1: Calculate the increment sequence\n    increment_seq = [n // 2] * (n // 9 + 1)\n    increment_seq = [2**i for i in range(9)]\n\n    # Step 2: Sort the array using the increment sequence\n    for i in range(len(increment_seq)):\n        for j in range(increment_seq[i]):\n            for k in range(n):\n                if my_list[k] > my_list[k + increment_seq[i]]:\n                    my_list[k], my_list[k + increment_seq[i]] = my_list[k + increment_seq[i]], my_list[k]\n\n    # Step 3: Return the sorted array\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Perform insertion sort on this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Reduce the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    result_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of any length.\n        test_tup2 (tuple): A tuple of any length.\n\n    Returns:\n        tuple: A tuple of the same length as `test_tup1`, containing the elementwise\n        and tuples of the corresponding elements of `test_tup1` and `test_tup2`.\n    \"\"\"\n    result_tup = ()\n    for i, (a, b) in enumerate(zip(test_tup1, test_tup2)):\n        result_tup += (a and b,)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    else:\n        return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    # extract the elementwise and tuples\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple of their elementwise AND.\n    \"\"\"\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup.append(True)\n        else:\n            and_tup.append(False)\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the element-wise and of the two input tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Initialize a new tuple with the same length as the input tuples\n    and_tup = [0] * len(test_tup1)\n    # Iterate through the tuples and perform the element-wise and operation\n    for i in range(len(test_tup1)):\n        and_tup[i] = test_tup1[i] & test_tup2[i]\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"There are no real roots.\")\n    elif disc == 0:\n        x1 = -b / (2*a)\n        print(\"There is one real root:\", x1)\n    else:\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n        print(\"The two real roots are:\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the determinant of the matrix A = [[a, b], [c, a]]\n    determinant = a*b - c*c\n\n    # Find the value of the discriminant (b^2 - 4ac)\n    discriminant = b*b - 4*a*c\n\n    # Calculate the directrix by dividing the determinant by 2 and taking the negative square root\n    directrix = (-discriminant + determinant**0.5) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If discriminant is negative, there is no real root.\n    if discriminant < 0:\n        print(\"There is no real root.\")\n    # If discriminant is zero, there is a real root.\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix is:\", root)\n    # If discriminant is positive, there are two real roots.\n    else:\n        # Calculate the two roots and sort them in descending order.\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        root1, root2 = sorted([root1, root2], reverse=True)\n        print(\"The directrix is between\", root1, \"and\", root2, \"in descending order.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n\n    :param a: the first coefficient of the quadratic equation\n    :param b: the second coefficient of the quadratic equation\n    :param c: the third coefficient of the quadratic equation\n    :return: the directrix of the parabola\n    '''\n    delta = b ** 2 - 4 * a * c\n    return (-b + delta ** 0.5) / (2 * a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        return (-b + (discriminant**(1/2))) / (2*a)\n\n    # Check if the discriminant is negative\n    elif discriminant < 0:\n        return (-b - (discriminant**(1/2))) / (2*a)\n\n    # Check if the discriminant is zero\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b ** 2 - 4 * a * c\n    if determinant == 0:\n        return None\n    else:\n        x1 = (-b + determinant ** 0.5) / (2 * a)\n        x2 = (-b - determinant ** 0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n\n        # Calculate the directrix\n        directrix = (root1 - root2) / (root2 - root1)\n\n        # Return the directrix\n        return directrix\n    else:\n        # The discriminant is zero or negative, so there is no directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b)/(2*a)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return (x1 + x2)/2\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Find the two solutions of the quadratic equation\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n        # Sort the solutions in ascending order\n        x1 = min(x1, x2)\n        x2 = max(x1, x2)\n\n        # Find the middle point of the two solutions\n        mid_point = (x1 + x2) / 2\n\n        # Find the slope of the parabola at the middle point\n        slope = (a*(mid_point**2) - b*mid_point) / (2*mid_point**2)\n\n        # Return the directrix\n        return mid_point\n\n    # If the discriminant is negative, the directrix does not exist\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a!= 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        directrix = (x1 + x2)/2\n        print(\"The directrix of the parabola is:\", directrix)\n    else:\n        print(\"The parabola has no distinct directrix.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common_elements = set(list1) & set(list2)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # find the intersection of the two sets\n    common = set1.intersection(set2)\n    # check if the intersection is empty (no common elements)\n    if len(common) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to find the intersection of the two lists\n    common_elements = set(list1) & set(list2)\n\n    # Check if the set is empty, which means there are no common elements\n    if len(common_elements) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Create a set to store unique elements of list1\n    set1 = set(list1)\n\n    # Iterate through list2 to check if any common element is found\n    for elem in list2:\n        if elem in set1:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n\n    # Create a set of the first list\n    set1 = set(list1)\n\n    # Loop through the second list and check if each element is in the set of the first list\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If we get here, there was no common element in the second list\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the length of the longest side of the trapezium\n    longest_side = (base1**2 + base2**2) ** 0.5\n\n    # find the hypotenuse of the right triangle with the longest side as the base and height as the hypotenuse\n    hypotenuse = longest_side * (3 ** 0.5 - 1)\n\n    # calculate the area of the right triangle with the longest side as the base and height as the hypotenuse\n    area_right_triangle = (longest_side ** 2) / 4\n\n    # calculate the difference between the area of the trapezium and the area of the right triangle\n    difference = area - area_right_triangle\n\n    # calculate the value of the hypotenuse that corresponds to the median length of the trapezium\n    hypotenuse_median = longest_side * 0.5 * (1 + (difference / area))\n\n    # return the median length of the trapezium\n    return hypotenuse_median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Calculate the base of the trapezium using the formula for the base of a triangle\n    base = (base1 + base2) / 2\n    # Calculate the height of the trapezium using the formula for the height of a triangle\n    height = 0.5 * (base1 + base2) * area / base1\n    # Calculate the length of the trapezium using the formula for the length of a trapezium\n    length = (base1 + base2 + height) / 2\n    # Calculate the median of the trapezium using the formula for the median of a trapezium\n    median = length * (area / 4)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    area_2 = 0.5 * height * height\n    median_length = 2 * area / area_2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the parallelogram\n    parallelogram_area = 0.5 * (base1 * height + base2 * height)\n\n    # Calculate the area of the trapezium\n    trapezium_area = trapezium_length * height\n\n    # Calculate the median area of the trapezium\n    median_area = 0.5 * (trapezium_area + parallelogram_area)\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * trapezium_length\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the height of the trapezium\n    trapezium_height = (area - base1 + base2) ** 0.5\n    \n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * trapezium_height * (base1 + base2)\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * trapezium_area / area\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezoids\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the lengths of the trapezoids\n    length1 = 0.5 * (base1 + base2)\n    length2 = 0.5 * (base1 + base2)\n\n    # Calculate the lengths of the bases\n    length_base = max(length1, length2)\n\n    # Calculate the area of the base\n    area_base = 0.5 * length_base * height\n\n    # Calculate the height of the trapezoid\n    height_trapezoid = 0.5 * (area1 + area2 - area_base)\n\n    # Calculate the length of the trapezoid\n    length_trapezoid = 0.5 * (length1 + length2)\n\n    # Calculate the area of the trapezoid\n    area_trapezoid = 0.5 * length_trapezoid * height_trapezoid\n\n    # Calculate the area of the median\n    area_median = 0.5 * (area1 + area2)\n\n    # Calculate the median length\n    median_length = 0.5 * (length_trapezoid - length_base)\n\n    # Calculate the median area\n    median_area = area_trapezoid - area_median\n\n    # Calculate the median height\n    median_height = 0.5 * (height_trapezoid + height)\n\n    # Calculate the difference between the areas of the two trapezoids\n    area_diff = area1 - area2\n\n    # Calculate the ratio of the areas of the two trapezoids to the area of the median\n    area_ratio = area_diff / area_median\n\n    # Calculate the difference between the lengths of the two trapezoids\n    length_diff = length1 - length2\n\n    # Calculate the ratio of the lengths of the two trapezoids to the length of the base\n    length_ratio = length_diff / length_base\n\n    # Calculate the median ratio\n    median_ratio = 0.5 * (area_ratio + length_ratio)\n\n    # Find the sign of the median ratio\n    sign_median_ratio = 1 if median_ratio > 0 else -1 if median_ratio < 0 else 0\n\n    # Calculate the sign of the area ratio\n    sign_area_ratio = 1 if area_ratio > 0 else -1 if area_ratio < 0 else 0\n\n    # Calculate the sign of the length ratio\n    sign_length_ratio = 1 if length_ratio > 0 else -1 if length_ratio < 0 else 0\n\n    # Calculate the sign of the median area\n    sign_median_area = 1 if median_area > 0 else -1 if median_area < 0 else 0\n\n    # Calculate the sign of the median height\n    sign_median_height = 1 if median_height > 0 else -1 if median_height < 0 else 0\n\n    # Calculate the sign of the area diff\n    sign_area_diff = 1 if area_diff > 0 else -1 if area_diff < 0 else 0\n\n    # Calculate the sign of the length diff\n    sign_length_diff = 1 if length_diff > 0 else -1 if length_diff < 0 else 0\n\n    # Calculate the sign of the area ratio and the area diff\n    sign_area_ratio_diff = 1 if sign_area_ratio * sign_area_diff > 0 else -1 if sign_area_ratio * sign_area_diff < 0 else 0\n\n    # Calculate the sign of the length ratio and the length diff\n    sign_length_ratio_diff = 1 if sign_length_ratio * sign_length_diff > 0 else -1 if sign_length_ratio * sign_length_diff < 0 else 0\n\n    # Calculate the sign of the area ratio and the length ratio and the area diff\n    sign_area_ratio_length_diff = 1 if sign_area_ratio_diff * sign_length_ratio_diff > 0 else -1 if sign_area_ratio_diff * sign_length_ratio_diff < 0 else 0\n\n    # Determine the position of the median\n    if sign_median_ratio == 0 and sign_area_ratio == 0 and sign"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n    median = 0.5 * (base1 + base2) * height\n    \n    # Check if the area is greater than the median\n    if area > median:\n        return base1 + base2\n    else:\n        return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * height\n    length1 = 0.5 * base1 * (area - height)\n    length2 = 0.5 * base2 * (area - height)\n\n    median_length = max(length1, length2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # Calculate the length of the trapezium\n    total_length = height * 2\n\n    # Calculate the area of each half\n    half_area1 = half_base1 * height\n    half_area2 = half_base2 * height\n\n    # Calculate the area of the trapezium\n    total_area = half_area1 + half_area2\n\n    # Calculate the length of each side of the trapezium\n    left_side = (height / 2) * (base1 + base2)\n    right_side = (height / 2) * (base1 + base2)\n\n    # Find the length of the middle of the trapezium\n    middle_length = (left_side + right_side) / 2\n\n    # Calculate the area of the trapezium excluding the middle section\n    middle_area = (base1 ** 2 + base2 ** 2) / 2\n\n    # Calculate the median length of the trapezium\n    median_length = total_length / 2\n\n    # Check which half of the trapezium the middle section is located in\n    if middle_length <= total_length / 2:\n        median_length = middle_length\n    else:\n        median_length = total_length - middle_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the lengths of the trapezium\n    length1 = 0.5 * base1 * height\n    length2 = 0.5 * base2 * height\n    \n    # Calculate the midpoints of the trapezium\n    midpoint1 = 0.5 * (length1 + length2)\n    midpoint2 = 0.5 * (length1 + 2 * length2)\n    \n    # Calculate the distances between the midpoints of the trapezium\n    distance1 = abs(midpoint1 - base1)\n    distance2 = abs(midpoint2 - base2)\n    \n    # Sort the distances and find the median\n    distances = [distance1, distance2]\n    distances.sort()\n    median = 0.5 * (distances[0] + distances[1])\n    \n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    if number > arr[0]:\n        return True\n    else:\n        for i in range(len(arr)):\n            if number > arr[i]:\n                return True\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", arr.index(i))\n            return True\n    print(\"The number is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # check if the number is greater than the first element of the array\n    if number > arr[0]:\n        print(f\"{number} is greater than the first element of the array.\")\n    # check if the number is greater than the second element of the array\n    elif number > arr[1]:\n        print(f\"{number} is greater than the second element of the array.\")\n    # check if the number is greater than the third element of the array\n    elif number > arr[2]:\n        print(f\"{number} is greater than the third element of the array.\")\n    # check if the number is greater than the fourth element of the array\n    elif number > arr[3]:\n        print(f\"{number} is greater than the fourth element of the array.\")\n    # check if the number is greater than the fifth element of the array\n    elif number > arr[4]:\n        print(f\"{number} is greater than the fifth element of the array.\")\n    # if the number is not greater than any element of the array\n    else:\n        print(f\"{number} is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(\"The entered number is greater than the element in the array.\")\n            break\n    else:\n        print(\"The entered number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\b[a][b]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n\n    if result:\n        print(result.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(matches[0][0])\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\sb+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1}b+'\n    return re.search(pattern, text)\n\ntext = \"This is a sentence with abbabbabbaabbabbbabababababbbababa\"\nresult = text_match_one(text)\nprint(result.group())"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of that number.\n    '''\n    last_num = n % 10\n    return last_num"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for i in lst:\n        if i < 0:\n            neg_lst.append(i)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list containing all the negative numbers in the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with all negative numbers in the input list.\n    \"\"\"\n    # create an empty list to store negative numbers\n    neg_list = []\n    # loop through each element in the input list\n    for num in lst:\n        # check if the element is negative\n        if num < 0:\n            # add the negative number to the neg_list\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the even_str\n        if char % 2!= 0:\n            even_str += char\n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty list to store the odd characters\n    odd_list = []\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is odd, append it to the odd_list\n        if char % 2 == 1:\n            odd_list.append(char)\n    # Convert the odd_list to a string and return it\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x.isalnum() or x =='', str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isalnum() or char =='':\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():  # check if character is an alphabet\n            if char.islower():  # check if character is lowercase\n                if ord(char) % 2 == 1:  # check if character is odd\n                    new_string += char  # append to new string\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # iterate over each character in the original string\n    for char in str1:\n        # if the character is odd, add it to the new string\n        if int(char) % 2!= 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    '''\n    This function takes a string as input and returns a new string with all odd characters removed.\n    '''\n    new_string = ''\n    for char in string:\n        if char % 2!= 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Use a dictionary to store the count of each unique tuple\n    bidirectional_count = {}\n\n    # Iterate over the input list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            key = (test_list[i], test_list[j])\n            if key in bidirectional_count:\n                bidirectional_count[key] += 1\n            else:\n                bidirectional_count[key] = 1\n\n    # Return the count of bidirectional tuple pairs\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j]) or (test_list[j] == test_list[i]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuple pairs in a list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty integer variable to store the result\n    result = 0\n    \n    # Iterate over each element in the input list\n    for num in L:\n        # If the element is a multiple of 3, add it to the result\n        if num % 3 == 0:\n            result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_nums = set(L)\n    # convert the set to a list and sort it in ascending order\n    sorted_nums = sorted(list(unique_nums))\n    # join the sorted list into a single integer\n    single_num = sum(sorted_nums)\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the given sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    \n    # Sort the adverbs by position in the sentence\n    adverbs = sorted(adverbs, key=lambda x: text.index(x))\n    \n    # Print the adverbs and their positions\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Splitting the text into words\n    words = text.split()\n    \n    # Creating a pattern to match adverbs\n    pattern = r'\\b(?:adv|adv\\.|adv\\.\\.|adv\\.?|adv)\\b'\n    \n    # Matching all the adverbs in the sentence\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Initializing a list to store the adverbs and their positions\n    adverbs = []\n    \n    # Looping through all the matches and finding their positions in the sentence\n    for match in matches:\n        # Finding the position of the adverb in the sentence\n        position = words.index(match)\n        \n        # Adding the adverb to the list with its position\n        adverbs.append((match, position))\n    \n    # Returning the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(of|in|to|on|with|against|with|at|by|for|during|to|by|as|at|again|during|for|with)\\b', re.IGNORECASE)\n    adverbs = []\n    for match in adverb_pattern.finditer(text):\n        adverbs.append(match.group(0))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for an adverb\n    pattern = r'\\b[a-zA-Z]+\\b\\s*(?:[a-zA-Z]+\\b)*\\s*(?:[a-zA-Z]+\\b)*\\b[a-zA-Z]+\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-Z]*\\b\\s*[a-zA-"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r\"(?:\\band\\b|\\band\\s+|and\\s+)\"\n    # Find all the matches of the pattern in the text\n    matches = re.findall(adverb_pattern, text)\n    # Check if there are any adverbs in the text\n    if not matches:\n        return \"No adverbs found\"\n    # Extract the first adverb and its position from the matches\n    adverb, position = matches[0].split()\n    return f\"{adverb} is at position {position} in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\b(am|is|are|was|were|be|being|been|among|amongst|between|during|before|after|since|until|about|with|as|by|to|on|of|in|out|over|under|against|with|for|by|to|on|of|in|out|over|under|through|among|by|to|on|of|in|out|over|under|through|throughout|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|with|for|by|to|on|of|in|out|over|under|through|throughout|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|about|with|as|by|to|on|of|in|out|over|under|through|throughout|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|through|throughout|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by|to|on|of|in|out|over|under|against|againstst|except|if|since|before|after|through|during|before|after|about|with|as|by"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # split the text into words\n    words = text.split()\n    \n    # iterate over each word\n    for i, word in enumerate(words):\n        # check if the word is an adverb\n        match = re.search(r'(\\w+)est$', word, re.IGNORECASE)\n        \n        # if the word is an adverb, print its position and return\n        if match:\n            print(f\"Adverb: {match.group(1)} at position {i+1}\")\n            return\n    \n    # if no adverb was found, print a message\n    print(\"No adverbs were found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern for finding adverbs\n    adverb_pattern = r'\\b(\\w+)(\\w*)\\b'\n\n    # Search for adverbs in the text\n    matches = re.finditer(adverb_pattern, text, re.IGNORECASE)\n\n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop over the matches and add them to the list\n    for match in matches:\n        adverb = match.group(1)\n        positions = match.span()\n        adverbs.append((adverb, positions[0]))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for adverbs\n    pattern = r'\\b\\w+(?:ing|ed|s|ly)\\b'\n    # Use re.findall() to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n    # Use list comprehension to get a list of tuples containing the adverb and its position in the sentence\n    adverb_positions = [(word, text.index(word)) for word in adverbs]\n    # Sort the list of tuples by their position in the sentence\n    adverb_positions.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Splitting the text into words\n    words = text.split()\n\n    # Looping through each word in the list\n    for i in range(len(words)):\n\n        # Checking if the current word is an adverb\n        if re.search('^.*(ing|ed|ing|ion)$', words[i], re.IGNORECASE):\n\n            # Checking if the previous word is a preposition\n            if re.search('^.*(to|from)$', words[i-1], re.IGNORECASE):\n\n                # Printing the adverb and its position in the sentence\n                print(f\"Adverb: {words[i]}\")\n                print(f\"Position: {i}\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l**2\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l  # surface area of a cube with side length l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l * l\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the list of integers to a numpy array\n    arr = array('i', nums)\n    # Use numpy to find the sum of positive numbers\n    pos_sum = arr[arr > 0].sum()\n    # Use numpy to find the count of positive numbers\n    pos_count = len(arr[arr > 0])\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n    # Return the ration as a float\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i')\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    pos_count = len(pos_arr)\n    total_count = len(nums)\n    pos_ratio = pos_count / total_count\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0] * 101)\n    for num in nums:\n        if num > 0:\n            count[num] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    for num in nums:\n        if num > 0:\n            print(f'{num}: {count[num] / len(nums):.2f}')"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n\n    # Calculate the ration of positive numbers in the array\n    ratio = positive_count / (positive_count + negative_count)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store the absolute values of the input array\n    abs_array = array('i', [abs(num) for num in nums])\n\n    # Count the number of positive numbers in the absolute values array\n    pos_count = sum(1 for num in abs_array if num > 0)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(abs_array)\n\n    # Return the ration of positive numbers as a float\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize the array to store the positive numbers\n    pos_array = array('i')\n\n    # Loop through each number in the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # If the number is positive, add it to the array\n            pos_array.append(num)\n\n    # Calculate the ration of positive numbers in the array\n    pos_count = len(pos_array)\n    neg_count = len(nums) - pos_count\n    if pos_count == 0:\n        return 0.0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the positive numbers in the input array\n    pos_nums = array('i')\n\n    # Iterate over each element in the input array\n    for num in nums:\n        # If the element is positive, add it to the pos_nums array\n        if num > 0:\n            pos_nums.append(num)\n\n    # Calculate the total number of positive numbers\n    total_pos = len(pos_nums)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = total_pos / len(nums)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to a list of integers\n    nums = list(nums)\n\n    # Initialize two counters for positive and negative numbers\n    pos = 0\n    neg = 0\n\n    # Iterate through the array and count the number of positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n\n    # Calculate the ration of positive numbers\n    if pos == 0:\n        ration = 0\n    else:\n        ration = pos / len(nums)\n\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n\n    ratio = positive/(positive + negative + zero)\n    print(\"The ration of positive numbers is:\", ratio)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an argument and returns the largest negative number present in the list.\n    '''\n    max_neg = float('-inf') # initial value of largest negative number\n    for num in list1: # iterate through each number in the list\n        if num < 0: # if the number is negative\n            if num > max_neg: # if the current number is larger than the current largest negative number\n                max_neg = num # update the largest negative number to the current number\n    return max_neg # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number in a list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K] + tup[K+1:])\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the given tuple list\n    for i in range(len(test_list)):\n        # Initialize variables to keep track of the number of elements in the tuple after trimming\n        count = 0\n        trimmed_list = []\n        \n        # Iterate through each element in the tuple\n        for j in range(len(test_list[i])):\n            # If the count is greater than or equal to k, break out of the inner loop\n            if count >= K:\n                break\n            \n            # If the element is not None, append it to the trimmed list\n            if test_list[i][j] is not None:\n                trimmed_list.append(test_list[i][j])\n            \n            # Increment the count\n            count += 1\n        \n        # Set the trimmed tuple in the given tuple list to the new list\n        test_list[i] = tuple(trimmed_list)\n        \n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    test_list: list of tuples\n    K: int\n\n    Returns:\n    list of trimmed tuples\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Remove the first K elements of the tuple\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0], i[1][:K]) for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    :param test_list: A list of tuples to be trimmed.\n    :param K: An integer representing the number of elements to be trimmed from each tuple.\n    :return: A new list of trimmed tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of both tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Create a new tuple of the same length as the original tuples\n        result_tup = ()\n        # Iterate over each element of the first tuple and perform index wise multiplication\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        # Return the result tuple\n        return result_tup\n    else:\n        # If the length of the tuples is not equal, return an error message\n        return 'Error: Tuple lengths do not match'"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(f\"Index {i+1}: {test_tup1[i] * test_tup2[i]}\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()  # creating an empty dictionary to store the count of each element in lst\n    for i in tup: \n        if i in lst: \n            count[i] += 1  # if the element is present in lst, incrementing its count in the dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    count_tup = tuple(count_dict.values()) \n    count_tup_lst = list(zip(tup, count_tup)) \n    result_tup = [] \n    \n    for tup_lst in count_tup_lst: \n        if tup_lst[0] not in result_tup: \n            result_tup.append(tup_lst[0]) \n            result_tup.append(tup_lst[1]) \n    \n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple into a dictionary\n    dct = dict(tup)\n\n    # Iterate over the list and count the occurence of each element in the dictionary\n    for elem in lst: \n        if elem in dct: \n            dct[elem] += 1\n\n    # Convert the dictionary into a tuple and return the result\n    return tuple(dct.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = Counter(tup)\n    count = 0\n    for i in lst:\n        if i in freq:\n            count += freq[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and counts the occurrence of all the elements of the list in the tuple.\n    The function returns a dictionary where the keys are the elements of the list and the values are the count of occurrences.\n    '''\n    count_dict = {}\n    for elem in lst: \n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(tup)\n\n    for key, value in count.items():\n        if key in lst:\n            count[key] += 1\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict = {k: v for k, v in count_dict.items() if k in lst} # filter out non-matching elements\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict_tup = Counter(tup)\n    count_dict_tup = {k:v for k,v in count_dict_tup.items() if k in count_dict}\n    count_dict_tup = Counter(count_dict_tup)\n    return count_dict_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert the tuple to a set to remove duplicate elements\n    tup_set = set(tup)\n    \n    # Convert the list to a set to remove duplicate elements\n    lst_set = set(lst)\n    \n    # Use the intersection method of sets to find the common elements\n    common_elements = tup_set.intersection(lst_set)\n    \n    # Use the Counter method from the collections module to count the occurence of common elements\n    count_dict = Counter(common_elements)\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n\n    Args:\n        tup: tuple containing elements of list to be counted.\n        lst: list of elements to count in tuple.\n\n    Returns:\n        A dictionary containing the count of each element in the list in the tuple.\n    '''\n\n    # Count the occurrence of each element in the list in the tuple using Counter class from collections module\n    count = Counter(tup)\n\n    # Create an empty dictionary to store the count of each element in the list in the tuple\n    dict_count = {}\n\n    # Iterate through the dictionary returned by the Counter class\n    for key, value in count.items(): \n        # If the element is already present in the dictionary, increment its value by 1\n        if key in dict_count: \n            dict_count[key] += 1\n        # If the element is not present in the dictionary, add it with a count of 1\n        else: \n            dict_count[key] = 1\n\n    # Return the dictionary containing the count of each element in the list in the tuple\n    return dict_count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Iterate through the list of numbers and calculate the cube of each number\n    result = [num ** 3 for num in nums]\n    # Return the resulting list of cubes\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [4, 16, 8, 256]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if i is a perrin number\n        if is_perrin(i):\n            # add i to the sum\n            sum += i\n    # return the sum\n    return sum\n\ndef is_perrin(n):\n    '''\n    Check if a number is a perrin number or not.\n    '''\n    # check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    # check if n is divisible by 13\n    elif n % 13 == 0:\n        return True\n    # check if n is divisible by 17\n    elif n % 17 == 0:\n        return True\n    # check if n is divisible by 19\n    elif n % 19 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i**2\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n\n    Args:\n    n (int): the upper limit of the Perrin sequence to calculate the sum for.\n\n    Returns:\n    int: the sum of the Perrin numbers.\n    \"\"\"\n    sum_p = 0  # Initialize the sum to 0\n    \n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum_p += i\n            \n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = 2\n    total = 0\n    while p <= n:\n        total += p\n        p += 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [0, 1] # the first two perrin numbers\n    for i in range(2, n):\n        perrin.append(sum([p**2 + q**2 for p in perrin[:i]])) # add the next perrin number to the list\n    return sum(perrin)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/i) * (1/i - 1/i**2)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049]\n    sum = 0\n    for i in range(n):\n        sum += perrin_numbers[i]\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3 + 2*i**2 + i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a size as inputs and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function takes a list of strings and a specified size and returns a list of \n    strings of the specified size from the given list.\n    \"\"\"\n    result = []\n    count = 0\n    for i in range(len(l)):\n        if count < len(l):\n            result.append(l[i])\n            count += 1\n        else:\n            break\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a specified size as input and returns a new list of strings, where each string has a length equal to the specified size.\n    \"\"\"\n    extracted_list = []\n    for string in str_list:\n        extracted_list.append(string[:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    return [str[i:i+l] for i in range(0, len(str), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s for s in l if len(s) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(str) == l[i]:\n            extracted_strings.append(str)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a target size of each string in the list.\n    It returns a new list of strings of the specified size from the given list.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string[:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts the specified size of strings from the given list of string values.\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if i % size == 0:\n            extracted_str_list.append(''.join(str_list[i:i+size]))\n    return extracted_str_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # return the result\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Removing whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define the regular expression pattern to match white spaces\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to remove all white spaces from the text\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespace from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount / actual_cost\n    if loss_percentage > 0.1:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_amount = sale_amount - actual_cost\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount) / actual_cost\n    if loss_percentage >= 0.1:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount/actual_cost\n    if loss_percentage >= 0.05:\n        loss = sale_amount * (0.05/100)\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return (sale_amount - actual_cost)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as an argument and returns the sum of even factors of the number.\n    '''\n    # initialize a variable to store the sum of even factors\n    evenSum = 0\n    \n    # loop through all the factors of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            # check if the factor is even\n            if i % 2 == 0:\n                # add the even factor to the sum\n                evenSum += i\n    \n    # return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    # Loop through all odd numbers between 1 and n-1\n    for i in range(1, n):\n        if i % 2 == 1:\n            # Check if i is a factor of n\n            if n % i == 0:\n                # If i is a factor, add it to the sum\n                sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n/i!= i:\n                sum += n/i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # if it's even, sum the even factors\n        factors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0]\n        even_sum = sum(factors)\n        return even_sum\n    else:\n        # if it's odd, no even factors\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Find all the words that contain 'z'\n    words_with_z = re.findall(r'\\b\\w*[zZ]\\w*\\b', text)\n\n    # Print all the words that contain 'z'\n    print(\"Words containing 'z':\")\n    for word in words_with_z:\n        print(word)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n\n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return the word itself\n    if match:\n        return match.group()\n\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n\n    # Use regular expression to find all words that contain 'z'\n    matches = re.findall(r'\\b\\w+z\\b', text)\n\n    # Print the matches\n    print('Matches:', matches)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n\n    # Convert the month number to an integer\n    monthnum = int(monthnum)\n\n    # Check if the month number is between 1 and 12\n    if monthnum < 1 or monthnum > 12:\n        return False\n\n    # Check if the month number is divisible by 3\n    if monthnum % 3!= 0:\n        return False\n\n    # Check if the month number is divisible by 100\n    if monthnum % 100!= 0:\n        return True\n\n    # Check if the month number is divisible by 400\n    if monthnum % 400!= 0:\n        return True\n\n    # If none of the above conditions are met, the month number contains 31 days\n    return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Check if the month number is between 1 and 12\n    if 1 <= monthnum2 <= 12:\n        # Check if the month number has 31 days\n        if monthnum2 == 2:\n            # Check if the year is a leap year\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                # If it is a leap year, 29 days otherwise 28 days\n                return (monthnum2 % 2 == 0 and year % 4 == 0 and year % 100!= 0 and year % 400 == 0)\n            else:\n                return (monthnum2 % 2 == 0)\n        else:\n            return (monthnum2 % 2 == 0)\n    else:\n        print(\"Invalid Month Number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number. Please enter a month number between 1 and 12.\"\n\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return \"29 days\"\n        else:\n            return \"28 days\"\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return \"30 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum2 in days:\n        if days[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    if monthnum2 == 2:\n        return \"31 days in February\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days in April, June, September, November\"\n    else:\n        return \"31 days in March, May, July, August, October, November, December\"\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and store it back in the list\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    This function finds the sublist with the minimum length in a given list of lists.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    min_sublist = [] # initialize the minimum sublist to an empty list\n\n    # iterate over the list of sublists\n    for sublist in lst:\n        length = len(sublist) # get the length of the sublist\n\n        # check if the length of the sublist is less than the minimum length\n        if length < min_length:\n            min_length = length # update the minimum length\n            min_sublist = sublist # update the minimum sublist\n\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    min_length = n \n    min_sublist = []\n\n    for i in range(n): \n        for j in range(i+1, n): \n            if j-i+1 < min_length: \n                min_length = j-i+1 \n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Find the length of the longest sublist\n    max_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    \n    # Initialize a list to store the sublists\n    min_sublist = []\n    \n    # Iterate over the sublists\n    for i in range(len(lst)):\n        # Check if the length of the sublist is equal to the maximum length\n        if len(lst[i]) == max_length:\n            # Check if the sublist is shorter than the current minimum sublist\n            if len(lst[i]) < len(min_sublist) or (len(lst[i]) == len(min_sublist) and lst[i] < min_sublist):\n                min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_sublist = sublist\n            min_length = len(sublist)\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    # initialize a variable to store the minimum sublist length\n    min_length = float('inf')\n    # initialize an empty list to store the minimum sublist\n    min_sublist = []\n    # loop through the list and check if the current sublist has a smaller length\n    for i in range(len(lst)):\n        # initialize an empty list to store the current sublist\n        current_sublist = []\n        # add the i-th element to the current sublist\n        current_sublist.append(lst[i])\n        # check if the current sublist is smaller than the minimum sublist\n        if len(current_sublist) < min_length:\n            min_length = len(current_sublist)\n            min_sublist = current_sublist\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Sort the list in ascending order\n    lst = sorted(lst)\n\n    # Initialize variables for min_length and min_sublist\n    min_length = len(lst)\n    min_sublist = lst\n\n    # Iterate over the list\n    for i in range(len(lst)-1):\n        # If the current length of the sublist is smaller than the minimum length, update the minimum length and sublist\n        if len(lst[i:]) < min_length:\n            min_length = len(lst[i:])\n            min_sublist = lst[i:]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z][a-z]*\\b', '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_regex = re.compile(r'[A-Z]+')\n    result = uppercase_regex.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # Use the `re.sub()` method to replace uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regex to find uppercase substrings\n    pattern = r'[A-Z]+'\n    matches = re.findall(pattern, str1)\n    \n    # loop through each match and replace with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(string)\n\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define the pattern for uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # find all uppercase substrings in the string and replace them with empty string\n    str2 = pattern.sub('', str1)\n\n    # return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expressions to remove uppercase substrings from the string\n    str1 = re.sub(r'([a-z])[A-Z]', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Remove all uppercase substrings from the string\n    str1 = re.sub(r'[A-Z]+', '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list where each sublist is replaced with its first element.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combination = []\n            for k in range(j, j+i):\n                combination.append(list1[k])\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(list1[j])\n        result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through the original list\n    for i in range(len(list1)):\n\n        # Initialize an empty list to store the current combination\n        current_combination = []\n\n        # Loop through the remaining elements of the list\n        for j in range(len(list1) - i):\n\n            # Append the current element to the current combination\n            current_combination.append(list1[j])\n\n            # Check if the current combination is a permutation of the remaining elements\n            if is_permutation(current_combination, list1[j+1:j+i+1]):\n\n                # If it is, append it to the list of combinations\n                combinations.append(current_combination)\n\n    # Return the list of combinations\n    return combinations\n\ndef is_permutation(list1, list2):\n    '''\n    Check if a list is a permutation of another list.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Use a dictionary to store the frequency of each element in the first list\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Loop through the second list and subtract the frequency of each element from the frequency of the first element\n    for elem in list2:\n        if elem not in freq or freq[elem] == 0:\n            return False\n        else:\n            freq[elem] -= 1\n\n    # If we make it through the loop without returning False, then the two lists are permutations of each other\n    return True"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            print(\" \".join(str(list1[k]) for k in range(j, j + i)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            result.append(list1[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = list1[i:j]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list and returns a list of all possible combinations of its elements.\n    '''\n    res = []\n    for i in range(1, len(lst)+1):\n        for subset in combinations(lst, i):\n            res.append(subset)\n    return res"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            start = i - max_product + 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array, find the maximum product of any subarray.\n\n    Parameters:\n        arr: list\n            A list of integers.\n\n    Returns:\n        int: The maximum product of any subarray in the array.\n    \"\"\"\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        for i in range(len(values)):\n            if values[i]!= values[0]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if len(set(value)) > 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary has at least n keys\n    if len(dict) < n:\n        return False\n    \n    # Get the first key\n    first_key = next(iter(dict))\n    \n    # Iterate over the dictionary and check if all values are the same\n    for value in dict.values():\n        if value!= dict[first_key]:\n            return False\n    \n    # If all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key not in dict.values():\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return \"Invalid input: Dictionary should have n number of elements\"\n    else:\n        for value in dict.values():\n            if value!= dict[next(iter(dict))]:\n                return \"Not all values are same in the dictionary\"\n        return \"All values are same in the dictionary\""
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif len(values)!= n:\n        return False\n    else:\n        return values[0] == values[1] and values[1] == values[2] and values[2] == values[3]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0 or n > len(dict):\n        return False\n    for i in range(1, n):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for value in dict.values():\n        all_values.append(value)\n    return all_values == all_values[:n]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create a list of keys to be checked\n    keys = list(dict1.keys())\n    # Iterate over the keys\n    for key in keys:\n        # Check if the value of the key is an empty string\n        if not dict1[key]:\n            # If it is, remove the key from the dictionary\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    \n    for i in range(n):\n        # If current element is greater than or equal to previous, then we can extend the subsequence\n        if i == 0 or arr[i] >= arr[i-1]:\n            # Initialize the product of the subsequence to be 1\n            product = 1\n            \n            # Traverse the subsequence from current element to the end of the array\n            for j in range(i, n):\n                product *= arr[j]\n                # Update the maximum product\n                max_product = max(max_product, product)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    dp = [1]*n\n    \n    for i in range(1,n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], arr[i]*dp[j])\n    \n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = min(max_ending_here, min_ending_here)\n            min_ending_here = max(max_ending_here, min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array as input and finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    dp = [0] * n\n\n    # Base cases:\n    # If arr[i] is the smallest element, then the maximum product is arr[i].\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # If arr[i] is the second smallest element, then the maximum product is arr[0] * arr[1].\n    dp[2] = arr[0] * arr[1]\n\n    # Now fill in the rest of the array using dynamic programming.\n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2], dp[i-3]) * arr[i]\n\n    # Return the maximum value in the dp array.\n    return dp[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables\n    max_product_ending_here = 0\n    max_product_so_far = float('-inf')\n    max_product_subarray = []\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product of the current element and the maximum product ending here\n        current_product = arr[i] * max_product_ending_here\n\n        # Update the maximum product ending here\n        max_product_ending_here = max(0, current_product)\n\n        # Update the maximum product subarray\n        if current_product > max_product_so_far:\n            max_product_so_far = current_product\n            max_product_subarray = [arr[i]]\n        elif current_product == max_product_so_far:\n            max_product_subarray.append(arr[i])\n\n    # Return the maximum product subarray\n    return max_product_subarray"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return max(arr[0], arr[1])\n    # Initialize max_subsequence and max_product\n    max_subsequence = arr[0]\n    max_product = max_subsequence\n    # Iterate through the array from the second element to the last\n    for i in range(1, n-1):\n        # If the current element is greater than the current maximum subsequence, update the maximum subsequence\n        if arr[i] > max_subsequence:\n            max_subsequence = arr[i]\n        # If the maximum subsequence multiplied by the current element is greater than the maximum product, update the maximum product\n        if max_subsequence * arr[i] > max_product:\n            max_product = max_subsequence * arr[i]\n    # If the maximum subsequence is negative, multiply it with -1 to get the maximum product\n    if max_subsequence < 0:\n        max_product = max_subsequence * -1\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[i]\n        elif i == 1:\n            dp[i] = max(arr[i], arr[i-1])\n        elif i == n-1:\n            dp[i] = max(arr[i], arr[i-1])\n        else:\n            dp[i] = max(arr[i], arr[i-1], arr[i-2])\n\n    max_product = dp[0]\n    for i in range(1, n):\n        max_product = max(max_product, dp[i], dp[i] * arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = arr[0]\n    min_val = arr[0]\n    max_product_sub = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_product_sub = max(max_product_sub, max_val)\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            max_product_sub = min(max_product_sub, min_val)\n        else:\n            max_product_sub = max(max_product_sub, min_val)\n    return max_product_sub"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = 1\n        elif i == 1:\n            current_product = arr[0]\n        else:\n            current_product = arr[i] * current_product\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) < 2:\n        return 'Tuple should contain at least two elements'\n\n    for i in range(len(test_tup)-1):\n        test_tup[i] += test_tup[i+1]\n        del test_tup[i+1]\n\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The given tuple must have at least two elements.\"\n    else:\n        total = 0\n        for i in range(1, len(test_tup)):\n            total += test_tup[i]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the sum of the current element and the next element\n        total += test_tup[i] + test_tup[i+1]\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    length = len(test_tup)\n    \n    # initialize a variable to store the sum of the elements\n    pairwise_sum = 0\n    \n    # loop through each pair of neighboring elements\n    for i in range(length-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    # return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 2:\n        return None\n\n    sum_pairwise = 0\n\n    for i in range(len(test_tup) - 1):\n        sum_pairwise += test_tup[i] + test_tup[i + 1]\n\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # initialize sum to zero\n    sum_pairwise = 0\n    \n    # loop through the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i+1]\n    \n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables\n    sum_pairwise = 0\n    # loop through the tuple and add the pairwise elements\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    return sum_pairwise"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters: the array and the modulo value n.\n    The function returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Initialize the product as 1\n    product = 1\n    \n    # Loop through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n        \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod * arr[i]) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize the result to 1\n    result = 1\n\n    # loop through the array and multiply each element with the result\n    for num in arr:\n        result = (result * num) % n\n\n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments, an array and an integer n. \n    It returns the remainder when multiplying all elements of the array modulo n.\n    '''\n    product = 1\n    \n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Multiply each element in the array by the product modulo n\n    for num in arr:\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    \"\"\"\n    # Initialize a variable to store the current number\n    current_num = None\n\n    # Iterate over the list and compare each number with the current number\n    for num in l:\n        if current_num is None:\n            # If the first number in the list is encountered, set the current number to the first number\n            current_num = num\n        elif num!= current_num + 1:\n            # If the current number is not consecutive to the previous number, return False\n            return False\n        # If the current number is consecutive to the previous number, set the current number to the current number\n        else:\n            current_num = num\n    # If the loop completes without finding any consecutive numbers, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(\"True\")\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 3:\n        return False\n\n    for i in range(n-2):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    # Loop through the list\n    for i in range(len(l)-1): \n        # Check if the current element and the next element are consecutive \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize a variable to store the previous number\n    prev_num = None\n    # Iterate through the list\n    for num in l:\n        # If the current number is not the previous number + 1\n        if num!= prev_num + 1:\n            # Return False because the list contains consecutive numbers\n            return False\n        # Update the previous number\n        prev_num = num\n    # Return True because the list does not contain consecutive numbers\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Use set() to remove duplicates and convert to a set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list and return\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                result.append(item1)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Sorting both the lists\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initializing the result list\n    result_list = []\n\n    # Looping through both the lists simultaneously and checking if they have any common elements\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            result_list.append(test_list1[i])\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set()\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.add(tup1)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two tuple lists and returns a new tuple list that contains the common elements of the two lists,\n    irrespective of their order.\n    \"\"\"\n    # create a dictionary to store the counts of elements in each list\n    count_dict = {}\n    for elem in test_list1:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    for elem in test_list2:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # create a new list to store the common elements\n    common_list = []\n\n    # loop through the dictionary to find the common elements\n    for elem, count in count_dict.items():\n        if count > 0:\n            common_list.append(elem)\n\n    # return the new list of common elements\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize an empty set to store the common elements\n    common_set = set()\n    \n    # loop through each tuple in test_list1 and test_list2\n    for i in range(len(test_list1)):\n        # check if the current element is in both test_list1 and test_list2\n        if test_list1[i] in test_list2 and test_list2[i] in test_list1:\n            # if both elements are in both lists, add it to the common_set\n            common_set.add(test_list1[i])\n            \n    # return the common_set as a tuple\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for item in test_list1:\n        if item in test_list2 and item not in result:\n            result.append(item)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_tuples = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                common_tuples.append((item1, item2))\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    return test_list1.intersection(test_list2)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace ch.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): input string\n    ch (str): character to be replaced\n    newch (str): replacement character\n\n    Returns:\n    str: modified string with all occurrences of ch replaced by newch\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to hold the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is the character to be replaced, replace it with the new character\n        if char == ch:\n            result += newch\n        # otherwise, add the character to the result string as is\n        else:\n            result += char\n    # return the final result string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    This function takes in three parameters: a string str1, a character ch to be replaced, and a character newch to replace ch with.\n    The function then replaces all occurrences of ch in str1 with newch and returns the modified string.\n    '''\n    modified_str = str1.replace(ch,newch)\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the replaced characters\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object in descending order\n    sorted_counter = counter.most_common()\n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function takes a dictionary as input and sorts it based on the values in descending order.\n    \"\"\"\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"The input array must have at least 2 elements.\")\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n\n    # sort the array in ascending order\n    nums.sort()\n\n    # get the largest and smallest values from the sorted array\n    smallest = nums[0]\n    largest = nums[-1]\n\n    # calculate the sum of the largest and smallest values\n    result = largest + smallest\n\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to hold the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n\n    # Iterate over the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether a given string is lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return all(char.islower() for char in string)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case.\n    '''\n    lower_case_string = string.lower()\n    if lower_case_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expressions to find all lowercase substrings in the string\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'\\b[a-z]+\\b', '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to remove lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use the re module to find all lowercase substrings in the string\n    matches = re.findall(r'([a-z]+)', str1)\n    \n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns a string with all lowercase substrings removed.\n    '''\n    # Compile regex pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Find all lowercase substrings in the string using the regular expression pattern\n    lowercase_substrings = pattern.findall(str1)\n    # Loop through each substring and remove it from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Find all the lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through each match and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Create a list to store the lowercase substrings\n    lowercase_substrings = []\n    \n    # Loop through each word in the string\n    for word in words:\n        # Find all lowercase substrings in the word\n        matches = re.findall(r'[a-z]+', word)\n        \n        # Loop through each match and add it to the list if it's not already there\n        for match in matches:\n            if match not in lowercase_substrings:\n                lowercase_substrings.append(match)\n    \n    # Join the list of lowercase substrings into a single string and return it\n    return''.join(lowercase_substrings)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'\\b[a-z][a-z]+\\b')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    # Loop through the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function finds the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    s = str(n)\n    # Find the first character of the string\n    digit = s[0]\n    # Convert the character to an integer and return it\n    return int(digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Extract the first digit from the number\n    first_digit = str(n)[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = 0\n    while n >= 10:\n        n = n // 10\n        first_digit += 1\n    first_digit += n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if type(n)!= int:\n        return \"Error: Input must be an integer.\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # return the first digit of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string and get its first digit\n    first_digit = str(n)[0]\n    # Return the first digit of the given number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Find the first digit of the string\n    first_digit = n_str[0]\n    \n    # Convert the first digit to an integer\n    first_digit_int = int(first_digit)\n    \n    # Return the first digit of the number\n    return first_digit_int"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns only the odd numbers from the list.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0] "
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = 0\n    sum_nums = 0\n    for i in range(n):\n        cubes += i**3\n        sum_nums += i\n    \n    difference = cubes - sum_nums\n    print(\"Difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    diff = sum_cubes - sum_nums\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is:\", diff)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n\n    for i in range(n):\n        sum_cubes += i**3\n        sum_numbers += i\n\n    difference = sum_cubes - sum_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of the first n natural numbers\n    sum_first_n = sum(range(1, n+1))\n    \n    # Compute the sum of the cubes of the first n natural numbers\n    sum_cubes_first_n = sum(x**3 for x in range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_first_n - sum_cubes_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * (n + 1) * (2 * n + 1) / 6\n\n    # Function to find the sum of the first n natural numbers\n    def sum_natural(n):\n        return n * (n + 1) / 2\n\n    # Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    diff = abs(sum_cubes(n) - sum_natural(n))\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # Calculate difference\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    # Return difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    # Find the difference between the two sums\n    difference_between_sums = sum_of_cubes - sum_of_natural_numbers\n    # Return the difference\n    return difference_between_sums"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to 0\n    count = 0\n    # Initialize xor value to 0\n    xor_val = 0\n    # Loop through all possible pairs of indices i and j\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate xor value of A[i] and A[j]\n            xor_val = A[i] ^ A[j]\n            # If xor value is odd, increment count\n            if xor_val % 2 == 1:\n                count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N+1):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Count the number of pairs whose xor value is odd.\n\n    Args:\n        A: A list of integers, where 0 <= A[i] <= N.\n        N: An integer, where 0 <= N <= 10^6.\n\n    Returns:\n        An integer, representing the number of pairs whose xor value is odd.\n\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N as input and returns the count of odd xor values in the list A.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count\n\nA = [int(x) for x in input(\"Enter the elements of the array separated by space: \").split()]\nN = len(A)\nresult = find_Odd_Pair(A, N)\nprint(\"Number of pairs whose xor value is odd: \", result)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n\n    Args:\n    - n1: an integer\n    - n2: an integer\n\n    Returns:\n    - the sum of the per-digit difference between n1 and n2\n    \"\"\"\n    # Convert both numbers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Compute the per-digit difference and sum it up\n    return sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to a list of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Initialize a variable to store the sum of the per-digit difference\n    total_sum = 0\n\n    # Loop through the digits of the integers and find the difference between each pair\n    for i in range(len(digits1)):\n        diff = abs(digits1[i] - digits2[i])\n        total_sum += diff\n\n    # Return the sum of the per-digit difference\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the two numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Loop through each digit of each number\n    for i in range(len(s1)):\n        # Calculate the per-digit difference between the two numbers\n        diff = abs(int(s1[i]) - int(s2[i]))\n\n        # Add the per-digit difference to the sum variable\n        sum_diff += diff\n\n    # Return the sum of the per-digit difference between the two numbers\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(10):\n        diff_sum += abs(n1 // 10**i - n2 // 10**i)\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    # Convert both numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    # Loop through both lists of digits and calculate the per-digit difference\n    for i in range(len(num1_digits)):\n        digit_diff += abs(num1_digits[i] - num2_digits[i])\n    # Return the sum of the per-digit differences\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    # calculate the sum of the per-digit differences\n    distance = 0\n    for i in range(len(n1_list)):\n        distance += abs(n1_list[i] - n2_list[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # create a list of lists to store the per-digit differences\n    diff_list = []\n\n    # loop through each digit of the first number\n    for i in range(len(num1)):\n        # loop through each digit of the second number\n        for j in range(len(num2)):\n            # find the per-digit difference\n            diff = abs(int(num1[i]) - int(num2[j]))\n            # append the difference to the list of per-digit differences\n            diff_list.append(diff)\n\n    # sum the differences and return the result\n    return sum(diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through each digit in both strings\n    for i in range(len(str1)):\n        # Convert the current digit in both strings to integers\n        num1 = int(str1[i])\n        num2 = int(str2[i])\n\n        # Calculate the absolute difference between the current digits\n        diff = abs(num1 - num2)\n\n        # Add the absolute difference to the sum variable\n        sum += diff\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and calculates the sum of the per-digit difference between them.\n    \"\"\"\n    difference = n1 - n2\n    sum_of_digit_diff = 0\n    \n    while difference!= 0:\n        digit_diff = difference % 10\n        sum_of_digit_diff += digit_diff\n        difference //= 10\n        \n    return sum_of_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    difference = 0\n    for i in range(len(str(n1))):\n        difference += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return difference"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(arr):\n        size = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n\n    :param arr: A list of integers.\n    :param size: An integer representing the size of the sublist.\n    :return: The sum of the largest contiguous sublist of size `size`.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n\n    for i in range(len(arr)):\n        if i + size <= len(arr):\n            current_sum += arr[i + size - 1]\n        else:\n            current_sum += arr[i]\n\n        max_ending_here = max(max_ending_here, current_sum)\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list a and an integer size as input and returns the sum of the maximum subarray in the list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            if i + 1 == size:\n                max_sum += a[i]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list and calculate the sum of the largest contiguous sublist\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n        elif current_sum < 0:\n            current_sum = 0\n            start += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist of the given array.\n    \"\"\"\n    if size == 1:\n        return max(arr)\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, len(arr)):\n            curr_sum = arr[i] + max_ending_here\n            max_ending_here = max(curr_sum, max_ending_here)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to store unique elements of both input tuples\n    unique_elements = test_tup1.union(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    unique_elements = sorted(list(unique_elements))\n    # Return the sorted list of unique elements\n    return unique_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Define the set of unique elements of the two tuples\n    unique_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it\n    union_list = sorted(list(unique_set))\n    \n    # Output the sorted list of unique elements\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # first, merge the two tuples into one using the + operator\n    merged_tuple = test_tup1 + test_tup2\n    \n    # then, sort the elements of the merged tuple\n    sorted_tuple = sorted(merged_tuple)\n    \n    # finally, output the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # convert the set back to a list and sort it\n    union_list = sorted(list(unique_set))\n    # output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Sort the union tuple\n    union_tup.sort()\n    \n    # Print the union tuple\n    print(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # First, we concatenate the two tuples using the + operator\n    combined_tup = test_tup1 + test_tup2\n\n    # Next, we sort the concatenated tuple in ascending order using the sorted() function\n    sorted_tup = sorted(combined_tup)\n\n    # Finally, we return the sorted tuple as the result\n    return sorted_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # find the union of the two lists\n    union = list(set(list1) | set(list2))\n\n    # sort the union in ascending order\n    union.sort()\n\n    # convert the union back to a tuple and return it\n    return tuple(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1 + test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n\n    # Sort the elements in the union and output them\n    sorted_union = sorted(union)\n    for element in sorted_union:\n        print(element)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        if current_length < 0:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    maxLength = 1\n    maxLengthIndex = 0\n\n    for i in range(1, n):\n        count = 1\n        j = i\n        while j < n and lst[j] == lst[i]:\n            count += 1\n            j += 1\n        if count > maxLength:\n            maxLength = count\n            maxLengthIndex = i\n\n    return maxLength, maxLengthIndex"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        if i+1 < len(lst) and lst[i+1]!= lst[i]:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list of integers as input and returns the length of the longest sublist.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 1\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the current element is less than the next element, add one to the current length\n        if lst[i] < lst[i-1]:\n            current_length += 1\n        else:\n            # If the current element is greater than or equal to the next element, reset the current length to 1\n            current_length = 1\n            \n        # Update the maximum length if the current length is greater\n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):  \n        current_length += 1\n        if current_length > max_length:  \n            max_length = current_length  \n        elif current_length < max_length and lst[i] not in lst[i-max_length:i]:  \n            max_length = max(max_length, current_length)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables to keep track of the current longest sublist and the maximum length seen so far\n    longest = []\n    longest_length = 0\n\n    # Loop through the input list\n    for i in range(len(lst)):\n        # Initialize variables to keep track of the current sublist and the current length of the sublist\n        sublist = [lst[i]]\n        sublist_length = 1\n\n        # Loop through the rest of the list\n        for j in range(i+1, len(lst)):\n            # If we find a new element in the list, add it to the current sublist and update its length\n            if lst[j]!= lst[i]:\n                sublist.append(lst[j])\n                sublist_length += 1\n\n            # If the length of the current sublist is longer than the longest seen so far, update the longest sublist and its length\n            if sublist_length > longest_length:\n                longest = sublist\n                longest_length = sublist_length\n\n    # Return the maximum length of the longest sublist\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return 1\n    else:\n        max_length = 0\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                sublist = lst[i:j]\n                sublist_length = len(sublist)\n                if sublist_length > max_length:\n                    max_length = sublist_length\n        return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize variables to store length of longest sublist and current sublist length\n    longest_sublist = 1\n    current_sublist_length = 1\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the current element is the same as the previous element, increment the length of the current sublist\n        if lst[i] == lst[i-1]:\n            current_sublist_length += 1\n        # If the current element is different from the previous element, reset the current sublist length to 1\n        else:\n            longest_sublist = max(longest_sublist, current_sublist_length)\n            current_sublist_length = 1\n    \n    # Return the maximum length of the longest sublist\n    return longest_sublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if i == 0:\n            current_length += 1\n            max_length = current_length\n        else:\n            if lst[i] == lst[i-1]:\n                current_length += 1\n            else:\n                current_length = 1\n                \n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<open>[\\'\"])(?P<value>.*)(?P=open)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('value')\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        text (str): String from which values should be extracted.\n\n    Returns:\n        List of extracted values.\n\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'  # match quotation marks and capture the value inside them\n    matches = re.findall(pattern, text)  # find all matches using the regular expression pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # Define a regular expression pattern to match any number of non-space characters after a quotation mark.\n    pattern = r'(?<=\\b)(?<!\\d)[^\\s]*(?=\\b)'\n\n    # Use the re.findall() function to extract all non-space characters that match the pattern from the text.\n    values = re.findall(pattern, text)\n\n    # Convert the list of extracted values to a string and return it.\n    return ''.join(values)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]+\"|\\d+(\\.\\d+)?'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr: A list of integers\n    n: The size of the list\n\n    Returns:\n    An integer representing the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # Iterate through the list of integers\n    for i in range(n):\n        # Iterate through the list of integers starting from the next index\n        for j in range(i+1, n):\n            # Check if the current element is not equal to the next element\n            if arr[i]!= arr[j]:\n                # Increment the counter variable if both elements are unequal\n                count += 1\n\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] == arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    count = 0\n    # Loop through all pairs of elements in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # If both elements are in the set and not equal, increment the count\n            if arr[i] in unique_set and arr[j] in unique_set and arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        total += int(digit)\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of the number\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 10\n        # add the digit to the sum\n        sum += digit\n        # remove the last digit from the number\n        n = n // 10\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add the digit to the sum\n        total += digit\n        # remove the last digit of the number\n        n = n // 10\n    # return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of n and store them in a list\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum to 0\n    total = 0\n    # Loop through the digits and add them to the total\n    for digit in digits:\n        total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns True if the list is sorted in ascending order and False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return True\n\n    # Check if all elements in the list are same\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # If all elements are same, then the list is sorted in ascending order\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    '''\n    This function checks whether a list is sorted or not.\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        sorted_sublist = sorted(sublist)\n        list1[i] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist into a set to remove duplicates\n        sublist = set(sublist)\n        # Sort the set\n        sublist = sorted(list(sublist))\n        # Convert the sorted set back into a list\n        sublist = list(sublist)\n        # Assign the sorted list back to the sublist\n        list1[list1.index(sublist)] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist in the given list of lists\n    for sublist in list1:\n        # sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in sorted function\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty list to store the unique numbers\n    unique_nums = []\n    \n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # If the number is not already in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n    \n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize an empty set to store unique numbers\n    unique_nums = set()\n    \n    # iterate over each list in the input list of lists\n    for lst in nums:\n        # iterate over each number in the current list\n        for num in lst:\n            # add the number to the set of unique numbers if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # convert the set of unique numbers back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Convert all lists to sets to remove duplicates\n    unique_nums = set(set(nums[i]) for i in range(len(nums)))\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    # Create an empty list to store the unique numbers\n    unique_nums = []\n\n    # Iterate through each list in the original list\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # Check if the number is not in the unique_nums list\n            if num not in unique_nums:\n                # Add the number to the unique_nums list\n                unique_nums.append(num)\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a list.\n\n    Parameters:\n    list_data (list): A list of numbers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers in the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    return 1 if len(unique_list) == 1 else unique_list[0] * unique_product(unique_list[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data)) #remove duplicates from list and convert to set\n    product = 1 #initialize product to 1\n    for num in unique_list: #iterate through unique numbers in set\n        product *= num #multiply product by each unique number\n    return product #return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # convert the list to a set and get only the unique numbers\n    unique_product = 1  # initialize the product to 1\n    \n    # calculate the product of the unique numbers\n    for num in unique_nums:\n        unique_product *= num\n        \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the half of the height\n    half_h = h / 2\n    \n    # Calculate the surface area of a sphere\n    surface_area_sphere = 4 * math.pi * r ** 2\n    \n    # Calculate the surface area of the cylinder\n    surface_area_cylinder = 2 * math.pi * r * half_h\n    \n    # Return the sum of the two surface areas\n    return surface_area_sphere + surface_area_cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculate the surface area of the cylinder using the formula for a cylinder\n    area = 2*3.14159*(r**2 + h**2)\n    #return the surface area\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2 * r * h + 2 * r * h + 2 * h * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 * h + 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi*(r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (r * h) + 2 * 3.14159 * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 # Formula to find the surface area of a cylinder\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if B is a sublist of A or not\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    A.sort()\n    B.sort()\n    i = 0\n    j = 0\n    for num in B:\n        while j < len(A) and A[j] < num:\n            j += 1\n        if j == len(A) or A[j] == num:\n            i += 1\n            j += 1\n    return i == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function takes in two lists A and B and returns a boolean value indicating whether B is a sublist of A or not.\n    \"\"\"\n    # Check if B is sublist of A\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)):\n        if A.count(B[i]) < B.count(B[i]):\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer as input and returns the last digit of its factorial.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    # Initialize a variable to store the factorial\n    fact = 1\n    \n    # Calculate the factorial recursively\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Get the last digit of the factorial\n    last_digit = str(fact)[-1]\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Converting the number into a string \n    n = str(n) \n\n    # Converting the string into a list \n    num_list = list(n) \n\n    # Extracting the last digit from the list \n    last_digit = int(num_list[-1]) \n\n    # Calculating the factorial of the number \n    factorial = 1 \n    for i in range(1, last_digit+1): \n        factorial *= i \n\n    # Returning the last digit in the factorial \n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    factorial = 1\n    while n>0: \n        factorial *= n \n        n //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the last digit and the factorial\n    last_digit = 0\n    factorial = 1\n    \n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the factorial of i\n        factorial *= i\n        \n        # Calculate the last digit of the factorial\n        last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    '''\n    # Finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extracting the last digit of the factorial\n    last_digit = int(factorial % 10)\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of its factorial.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Loop through each digit in the number\n    while n > 0:\n        # Extract the last digit of the number\n        last_digit = n % 10\n        # Calculate the factorial of the number without the last digit\n        factorial = 1\n        for i in range(1, last_digit + 1):\n            factorial *= i\n        # Add the last digit of the factorial to the result\n        n = (n - last_digit) // 10 + factorial\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = str(factorial)[-1]\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # find the last digit of the factorial\n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    for i in range(max(len(list1), len(list2), len(list3))):\n        result.append(list1[len(list1)-1])\n        result.append(list2[len(list2)-1])\n        result.append(list3[len(list3)-1])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved lists\n    interleaved_list = []\n    \n    # iterate through each of the lists and add their elements to the interleaved_list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index = 0\n    for item in list1:\n        result.append(item)\n        index += 1\n    for item in list2:\n        result.append(item)\n        index += 1\n    for item in list3:\n        result.append(item)\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved lists\n    interleaved_list = []\n\n    # loop through the lists and append their elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the lists into a single list\n    combined_list = list1 + list2 + list3\n    # Split the combined list into chunks of 3\n    chunk_list = [combined_list[i:i+3] for i in range(0, len(combined_list), 3)]\n    # Flatten the list of chunks into a single list\n    interleaved_list = [item for sublist in chunk_list for item in sublist]\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    result += list1[i:]\n    result += list2[j:]\n    result += list3[k:]\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the interleaved items\n    interleaved_list = []\n\n    # Loop through each list and append the items to the interleaved list in the correct order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup1)\n    # Initialize a list to store the dissimilar elements\n    dissimilar_elements = []\n    # Loop through the tuple elements\n    for i in range(length):\n        # Check if the current element in test_tup1 is different from the current element in test_tup2\n        if test_tup1[i]!= test_tup2[i]:\n            # If it's different, add it to the dissimilar_elements list\n            dissimilar_elements.append(test_tup1[i])\n    # Return the dissimilar_elements list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the common elements in the two tuples\n    common_elements = list(set(test_tup1) & set(test_tup2))\n    # Sort the common elements in ascending order\n    common_elements.sort()\n    # Find the dissimilar elements by subtracting the common elements from the original tuples\n    dissimilar_elements = list(set(test_tup1) - set(test_tup2) - set(common_elements))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_set.add(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_set.add(element)\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if isinstance(x, tuple) and even_ele(x, even_fnc)]\n\ndef remove_even_strings(x):\n    return x if not isinstance(x, str) else None"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_tuple.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Filter out even elements in the tuple\n    odd_elements = [elem for elem in test_tuple if not even_fnc(elem)]\n\n    # Return the filtered even elements\n    return odd_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Convert the tuple to a list to make it easier to work with\n    test_list = list(test_tuple)\n    \n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        \n        # Check if the element is even by calling the even_fnc function\n        if even_fnc(test_list[i]):\n            \n            # If the element is even, remove it from the list\n            del test_list[i]\n    \n    # Convert the list back to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        for elem in sub_tuple:\n            if even_fnc(elem):\n                result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_elements = []\n    for element in test_tuple:\n        if not even_fnc(element):\n            uneven_elements.append(element)\n    return uneven_elements\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Loop through each element in the mixed tuple\n    for item in test_tuple:\n        # Check if the element is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the function on the tuple\n            even_ele(item, even_fnc)\n        else:\n            # Call the provided even_fnc on the element\n            even_fnc(item)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    def remove_uneven_elements(elem):\n        \"\"\"\n        Recursive function to remove uneven elements from a nested mixed tuple.\n        \"\"\"\n        if isinstance(elem, tuple):\n            return tuple(remove_uneven_elements(x) for x in elem)\n        else:\n            return even_fnc(elem)\n\n    return remove_uneven_elements(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store even elements\n    even_list = []\n\n    # Loop through each element in the nested tuple\n    for i in test_tuple:\n        # If the element is even, append it to the even_list\n        if even_fnc(i):\n            even_list.append(i)\n        # If the element is odd, skip it and continue to the next element\n        else:\n            continue\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s) + (b*s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the height of the pyramid\n    h = s/b\n\n    # calculate the side of the pyramid\n    s = b*h\n\n    # calculate the surface area of the pyramid\n    A = 2*(b**2 + s**2 + h**2)\n\n    return A"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s): \n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the side of the pyramid\n    h = s / 2\n    # Calculate the area of each half of the pyramid\n    a1 = b * h\n    a2 = b * b\n    # Add up the areas to get the total surface area\n    surface_area = a1 + a2 + 2 * b * h\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2*b*s) + (s*s) + (b*b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the base of the pyramid\n    area = (b**2)\n    \n    # Calculate the area of the sides of the pyramid\n    side_area = (b**2)*s\n    \n    # Calculate the total area of the pyramid\n    total_area = area + side_area\n    \n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # surface area of a square pyramid = 2 * b * s + 2 * b * b + 2 * s * s + 6 * b * s + 2 * b \n    area = 2 * b * s + 2 * b * b + 2 * s * s + 6 * b * s + 2 * b \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*s*s + 6*b*b"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using dynamic programming.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - j - 1]\n        return dp[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 0\n    for i in range(1, num+1):\n        catalan += (factorial(2*i-1) * factorial(i) // factorial(2*i))\n    return catalan\n\ndef factorial(n):\n    '''\n    Write a function which returns the factorial of a number n.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    # initialize the first two rows of the catalan number matrix\n    catalan = [[1], [1, 1]]\n\n    # loop over the remaining rows of the matrix\n    for i in range(2, n + 1):\n        # loop over the previous rows of the matrix to compute the next row\n        next_row = []\n        for j in range(i):\n            # compute the value of the jth element in the next row\n            next_row.append(catalan[j][i-1] + catalan[j][i-2])\n        # add the new row to the matrix\n        catalan.append(next_row)\n\n    # return the nth row of the matrix as the catalan number\n    return catalan[n-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (4 * catalan_number(num-1)) / (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula given in Wikipedia.\n\n    Args:\n    n (int): The position of the Catalan number.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n\n    def binomial(n, k):\n        \"\"\"\n        This function calculates the binomial coefficient.\n\n        Args:\n        n (int): The number of items.\n        k (int): The number of items chosen.\n\n        Returns:\n        int: The binomial coefficient.\n        \"\"\"\n\n        if k > n:\n            k = n\n\n        f = 1\n        for i in range(1, k + 1):\n            f *= n - i + 1\n            f //= i\n        for i in range(k + 1, n + 1):\n            f *= i\n\n        return f\n\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return binomial(2*n, n) // (2 * binomial(n, 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the n-th Catalan number using recursion.\n\n    Parameters:\n    n (int): The index of the Catalan number to calculate.\n\n    Returns:\n    int: The value of the nth Catalan number.\n    \"\"\"\n\n    # Base case:\n    if n == 0:\n        return 1\n\n    # Calculate the previous two Catalan numbers\n    catalan_2 = catalan_number(n-1)\n    catalan_1 = catalan_number(n-2)\n\n    # Return the sum of the two Catalan numbers\n    return catalan_1 + catalan_2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    n = num\n    catalan_num = 1\n    for i in range(1, n+1):\n        catalan_num = catalan_num * (2*i - 1) // i\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    # Initialize the first two Catalan numbers\n    catalan_0 = 1\n    catalan_1 = 1\n\n    # Calculate the next Catalan numbers using the formula:\n    # C(n, k) = (2k+1) C(n, k-1) - C(n, k-2)\n    for i in range(2, n+1):\n        catalan_i = (2*i+1) * catalan_i - catalan_i-1\n\n    return catalan_i"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern to match adverb ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Use regex search method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a dictionary to store adverb and positions\n    adverbs = {}\n    \n    # Iterate through matches and store adverb and position in dictionary\n    for i, match in enumerate(matches):\n        adverbs[match] = i\n    \n    # Return dictionary of adverbs and positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for finding the adverb ending with ly\n    pattern = r'\\b(ly)$'\n\n    # Use the re.findall() function to find all matches in the text for the pattern\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverb and its position in the text\n    for match in matches:\n        print(f'Adverb found at position: {text.index(match)}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If the matches are not empty, return a list of their positions\n    if matches:\n        return [match.start() for match in matches]\n    # If the matches are empty, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb\n    ending with ly and its starting and ending positions in the string.\n    '''\n\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b\\w+(ly)\\b'\n\n    # Find all the matches for the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Convert the matches into a list of tuples containing the adverb and its positions\n    result = [(match[0], match.start(), match.end()) for match in matches]\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions in the string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all the occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Return a list of tuples containing the first adverb ending with \"ly\" and its positions in the string\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    # Use the re.finditer() function to search for all occurrences of the pattern in the input text\n    matches = re.finditer(pattern, text)\n    # Create a list to store the positions of all adverbs ending with 'ly'\n    positions = []\n    # Iterate over all matches found by the re.finditer() function\n    for match in matches:\n        # Get the start and end positions of the adverb in the input text\n        start = match.start()\n        end = match.end()\n        # Add the start and end positions to the positions list\n        positions.append((start, end))\n    # Return the positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[lL]y\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        print(\"Adverb found:\", match, \"at positions:\", start_pos, end_pos)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly)\\w*\\b'\n    \n    # Use the re.findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through all matches of the pattern and append them to the adverbs list\n    for match in matches:\n        # Extract the adverb and its position from the match\n        adverb = match[0]\n        position = text.index(match.group())\n        \n        # Add the adverb and its position to the adverbs list\n        adverbs.append((adverb, position))\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:ly|ning|ing|ingly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and print the adverb and its position in the text\n    for i, match in enumerate(matches):\n        print(match)\n        print(text[match.start():match.end()])"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    heap = []\n    for i in range(n):\n        # Heapify the items to find the n most expensive items\n        heapq.heappush(heap, items[i])\n    \n    # Pop the items from the heap and append them to a list to find the n most expensive items\n    result = []\n    for i in range(n):\n        # If heap is not empty, pop the minimum item from the heap and append it to the result list\n        if heap:\n            result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the number of items to retrieve.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n\n    # Use a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap is larger than n, remove the least expensive item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    min_heap = []\n\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        elif item > max_heap[0]:\n            heapq.heappushpop(max_heap, item)\n        else:\n            heapq.heappush(min_heap, -item)\n\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        else:\n            heapq.heappushpop(min_heap, -heapq.heappop(max_heap))\n\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a min heap of size n\n    min_heap = []\n    for item, price in items:\n        heapq.heappush(min_heap, (-price, item))\n        # If the size of the heap exceeds n, remove the smallest item\n        while len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap and return them\n    return [item for price, item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, item)\n        \n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap to store the n most expensive items\n    heap = []\n    for i in items:\n        heapq.heappush(heap, i)\n        # if the heap size becomes greater than n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items, where each item is a tuple of the form (price, item).\n        n (int): The number of items to find.\n\n    Returns:\n        A list of tuples, where each tuple contains the price and item of the nth most expensive item in the dataset.\n    '''\n\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop(0))\n\n    # Iterate through the rest of the dataset and update the heap accordingly\n    for price, item in items:\n        if price < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n            heapq.heappush(min_heap, price)\n\n    # Return the nth most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: List is too short.\")\n        return\n    \n    mid = len(l) // 2\n    new_list = l[:mid]\n    for i in range(n, len(l)):\n        new_list.append(l[i])\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    \n    return l[:n] + [l[n]] + split_Arr(l[n+1:], n+1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # add the first part to the end of part2\n    l = part2 + part1\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Split the list at the nth element\n    lst1, lst2 = l[:n], l[n:]\n\n    # Add the first part to the end of the second list\n    l.extend(lst1)\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # check if the list is empty\n    if not l:\n        return []\n    \n    # check if the list contains only one element\n    elif len(l) == 1:\n        return [l[0]]\n    \n    # check if the list contains two or more elements\n    else:\n        \n        # split the list at the nth element\n        mid = n//2\n        left = l[:mid]\n        right = l[mid:]\n        \n        # add the first part to the end of the right side\n        right.append(left.pop(0))\n        \n        # combine the two halves and return it\n        return right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return 'Error: List length less than nth element.'\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return l\n    elif n >= len(l):\n        return [l[0]]\n    else:\n        mid = len(l) // 2\n        return split_Arr(l[:mid], n) + [l[mid]] + split_Arr(l[mid:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Split the list into two parts at the nth element\n    first_part = l[:n]\n    last_part = l[n:]\n\n    # Combine the two parts and add the first part to the end\n    combined_list = first_part + [last_part]\n\n    return combined_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #splitting the list at nth element\n    l1 = l[:n]\n    l2 = l[n:]\n    #adding first part to the end of the list\n    l2.insert(0,l1)\n    return l2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[n:], l[:n]]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Convert list to tuple\n    tupx = tuple(listx)\n    # Print the result\n    print(\"The converted tuple is:\", tupx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 0:\n        return \"Empty list!\"\n    \n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Find the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    if not nums:\n        return None\n    if len(nums) == 1:\n        return None\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    squares = []\n    for i in range(a, b+1):\n        j = i*i\n        if j == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i**2)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers, a and b, and returns a list of all perfect squares between a and b.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        for j in range(i, 0, -1):\n            if j*j == i:\n                perfect_squares_list.append(j*j)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Define a function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return (num**0.5 - int(num**0.5))**2 == num\n\n    # Check if the first number is a perfect square\n    if is_perfect_square(a):\n        # Check if the second number is a perfect square\n        if is_perfect_square(b):\n            # Calculate the number of perfect squares between the two numbers\n            num_perfect_squares = 0\n            for i in range(int(a**0.5) + 1):\n                for j in range(int(b**0.5) + 1):\n                    if i**2 + j**2 == a and i**2 + j**2 == b:\n                        num_perfect_squares += 1\n\n            # Return the number of perfect squares between the two numbers\n            return num_perfect_squares\n\n        # If the second number is not a perfect square, return 0\n        else:\n            return 0\n\n    # If the first number is not a perfect square, return 0\n    else:\n        return 0"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        \n        # Check if the square of the number is equal to i\n        if i == int(i**0.5)**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # create a list to store the perfect squares between a and b\n    squares = []\n\n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # if the square of i is equal to i, add it to the list of perfect squares\n        if i**2 == i:\n            squares.append(i)\n\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize a list to store perfect squares\n    perfect_squares = []\n    # loop through numbers a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            perfect_squares.append(num)\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert radians to degrees\n    theta = cmath.phase(theta) * 180 / cmath.pi\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    \n    Parameters:\n    r (float): The length of the radius vector.\n    theta (float): The angle (in radians) between the x-axis and the radius vector.\n    \n    Returns:\n    x (float): The length of the rectangular coordinate vector.\n    y (float): The angle (in radians) between the x-axis and the rectangular coordinate vector.\n    '''\n    \n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    \n    rect_x = r*cmath.cos(phi)\n    rect_y = r*cmath.sin(phi)\n    \n    return (rect_x.real, rect_y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two parameters: r and theta, which represent the\n    magnitude and angle of a complex number.\n    \n    The function uses the cmath module to perform the conversion.\n    \n    The function returns a tuple containing the rectangular coordinates (x,y).\n    \"\"\"\n    \n    # Convert angle to radians\n    theta = cmath.radians(theta)\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Return the rectangular coordinates\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # convert to complex number\n    z = complex(x,y)\n\n    # calculate rectangular coordinates\n    rect_x = z.real\n    rect_y = z.imag\n\n    # return results as a tuple\n    return (rect_x, rect_y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(phi)\n    y_rect = r*cmath.sin(phi)\n    return x_rect, y_rect"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    for i in range(length//2):\n        newList[i], newList[length-i-1] = newList[length-i-1], newList[i]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking if the length of the list is less than or equal to 2\n    if len(newList) <= 2: \n        return \"List must have at least 3 elements.\"\n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [newList[0], newList[0]]\n    else:\n        return [newList[-1], newList[0]] + swap_List(newList[1:-1]) + [newList[0]]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length > 1:\n        first = newList[0]\n        last = newList[length-1]\n        newList[0] = last\n        newList[length-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initialize variables\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and interchanges the first and last elements in the list.\n    '''\n    # Check if the list is not empty\n    if len(newList) > 0:\n        # Get the last element of the list\n        last_element = newList[-1]\n        # Remove the last element from the list\n        newList.remove(last_element)\n        # Add the last element as the first element of the list\n        newList.insert(0, last_element)\n        # Return the modified list\n        return newList\n    else:\n        # If the list is empty, return an empty list\n        return []"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list should have at least two elements.\")"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    if k == 1 or k == n-1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Loop through all possible values of k\n    for i in range(1,k+1):\n        # Find the product of the current value of k and n-k+i\n        prod = n*n-k*k+n*k-i*i\n        # Add the product to the sum variable\n        sum += prod\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum to 0\n    result = 0\n    \n    # initialize the product of the first k terms to 1\n    p = 1\n    # initialize the product of the last n-k terms to 1\n    q = 1\n    \n    # loop through all the terms\n    for i in range(1,n-k+1):\n        # calculate the product of the i-th term and the current product\n        p *= i\n        # calculate the product of the i+k-th term and the current product\n        q *= n-i-k\n        # add the two products and update the result\n        result += p * q\n    \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to 0\n    sum_prod = 0\n\n    # Loop through each combination of k consecutive integers from 0 to n-k+1\n    for i in range(n-k+1):\n        # Calculate the binomial coefficient of n-k+i and k\n        bin_coeff = (n-k+i) // k\n        # Multiply it by the product of the consecutive integers from i to i+k-1\n        prod = 1\n        for j in range(i,i+k):\n            prod *= j+1\n        # Add the result to the sum\n        sum_prod += bin_coeff * prod\n\n    # Return the final sum\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 and k == 0:\n        return 1\n    elif k == 0 or k == n:\n        return 0\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n\n    elif k == 0 or k == n: \n        return 1\n\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return None\n    \n    # Initialize variables\n    s = 0\n    for i in range(1, k+1):\n        c = 1\n        for j in range(1, i+1):\n            c *= n - j + 1\n            c //= j\n        s += c\n    \n    return s"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return None\n    else:\n        return binomial_Coeff(n-1,k-1) + n*binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Compute the sum of the product of consecutive binomial co-efficients.\n\n    :param n: integer, the number of terms in the binomial sum.\n    :param k: integer, the number of terms to use in the sum.\n    :return: float, the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1.0\n    for i in range(1, k+1):\n        coeff *= n - i + 1\n        coeff //= i\n    return coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # create a regular expression pattern to match ip address\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    # check if the input string matches the pattern\n    if pattern.match(ip):\n        # split the ip address into four parts\n        parts = ip.split('.')\n        # loop through each part and remove leading zeroes\n        for i in range(len(parts)):\n            if parts[i] == '0':\n                del parts[i]\n                # break out of the loop if a non-zero part is found\n                if i < len(parts):\n                    break\n        # join the parts back into an ip address string\n        result = '.'.join(parts)\n        return result\n    else:\n        # if the input string does not match the pattern, return the input string\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(?<![\\d.])', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n    ip = re.sub(pattern, '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # define regular expression pattern to match leading zeros\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    # use re.search() to search for matches in the input ip address\n    match = re.search(pattern, ip)\n    # if a match is found, return the ip with leading zeros removed\n    if match:\n        return ip.replace(match.group(0), match.group(0)[1:])\n    # if no match is found, return the input ip address unchanged\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(?!\\.)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip = re.sub(r'^0+', '', ip)\n    # split the ip address into octets\n    octets = ip.split('.')\n    # convert each octet to an integer and remove leading zeroes\n    octets = [int(re.sub(r'^0+', '', octet)) for octet in octets]\n    # join the octets back together into an ip address\n    ip = '.'.join([str(octet) for octet in octets])\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\0+','',ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0][0]\n    odd = [num for num in list1 if num % 2!= 0][0]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num += num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num += num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd numbers in a list.\n    \"\"\"\n    evens = [num for num in lst if num % 2 == 0][:1]  # find the first even number in the list\n    odds = [num for num in lst if num % 2!= 0][:1]  # find the first odd number in the list\n    return evens[0] - odds[0]  # return the difference between the first even and first odd numbers"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n\n    diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if i == 0:\n                return list1[1] - list1[0]\n            elif i == 1:\n                return list1[0] - list1[1]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = None\n    odd_first = None\n    for num in list1:\n        if num % 2 == 0:\n            even_first = num\n        else:\n            odd_first = num\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is empty\n    if not list1:\n        return \"List is empty\"\n    \n    # check if the list contains only one element\n    elif len(list1) == 1:\n        return \"List has only one element\"\n    \n    # initialize variables for even and odd\n    even_num = None\n    odd_num = None\n    \n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # check if the even number has not been found yet\n            if even_num is None:\n                even_num = num\n            # if the even number has been found, update the value of even_num with the smaller number\n            else:\n                if num < even_num:\n                    even_num = num\n        \n        # check if the number is odd\n        elif num % 2!= 0:\n            # check if the odd number has not been found yet\n            if odd_num is None:\n                odd_num = num\n            # if the odd number has been found, update the value of odd_num with the larger number\n            else:\n                if num > odd_num:\n                    odd_num = num\n    \n    # check if even_num and odd_num have been found\n    if even_num is None or odd_num is None:\n        return \"List does not contain even or odd numbers\"\n    \n    # calculate the difference between even_num and odd_num\n    diff = even_num - odd_num\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return \"The list is empty!\"\n\n    # Find the first even and odd number in the list\n    even_first = -1\n    odd_first = -1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_first == -1:\n                even_first = i\n            else:\n                return \"There are duplicate even numbers in the list!\"\n        else:\n            if odd_first == -1:\n                odd_first = i\n            else:\n                return \"There are duplicate odd numbers in the list!\"\n\n    # Check if the even number is present and the odd number is present in the list\n    if even_first == -1 or odd_first == -1:\n        return \"The list does not have both even and odd numbers!\"\n\n    # Calculate the difference of even and odd numbers\n    diff = list1[even_first] - list1[odd_first]\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_num = 0\n    odd_num = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_num = i\n        else:\n            odd_count += 1\n            odd_num = i\n    \n    if even_count == 0:\n        return odd_num - 1\n    elif odd_count == 0:\n        return even_num - 1\n    else:\n        return max(even_num - 1, odd_num - 1)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Find the first even number in the list\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    # Find the first odd number in the list\n    odd_num = next((num for num in lst if num % 2!= 0), None)\n    # If there are no even or odd numbers, return None\n    if even_num is None or odd_num is None:\n        return None\n    # Calculate the difference of the even and odd numbers\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    swap_count = 0\n    n = len(str1)\n\n    # Convert the input strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Compare the binary strings\n    for i in range(n):\n        if bin1[i]!= bin2[i]:\n            swap_count += 1\n\n    # Return the minimum number of swaps required\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # remove leading zeros from both strings\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n    # count the number of bits in both strings\n    n1 = len(str1)\n    n2 = len(str2)\n    # if the numbers of bits are not equal, return -1\n    if n1!= n2:\n        return -1\n    # create a dictionary to store the difference between bits of str1 and str2\n    diff_dict = {}\n    # loop through each bit of str1 and str2\n    for i in range(n1):\n        # if the bit is different, store the difference in the dictionary\n        if str1[i]!= str2[i]:\n            diff_dict[str1[i]] = str1[i] - str2[i]\n    # calculate the minimum number of swaps required to convert the binary strings\n    min_swaps = 0\n    for i in range(2, n1+1):\n        min_swaps += diff_dict.get(i, 0)\n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Find the length of the strings\n    n = len(str1)\n\n    # Initialize the two arrays for storing the binary representation of the strings\n    arr1 = []\n    arr2 = []\n\n    # Convert the strings to binary and store it in the arrays\n    for i in range(n):\n        arr1.append(bin(ord(str1[i]))[2:])\n        arr2.append(bin(ord(str2[i]))[2:])\n\n    # Initialize the count of swaps\n    swaps = 0\n\n    # Compare the two binary strings and swap the characters if they are different\n    for i in range(n):\n        if arr1[i]!= arr2[i]:\n            swaps += 1\n            # Swap the characters\n            temp = arr1[i][0]\n            arr1[i] = arr1[i][1:] + temp\n            arr2[i] = arr2[i][1:] + temp\n\n    # Return the count of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    swap_count = 0\n    swap_index = 0\n    \n    # Check if both strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Strings are not of equal length\"\n    \n    # Compare the two strings\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Found a mismatch at index i. Try to swap the characters\n            if swap_index < i:\n                # Swap the characters in the string at swap_index with the characters at i\n                str1[i], str1[swap_index] = str1[swap_index], str1[i]\n                str2[i], str2[swap_index] = str2[swap_index], str2[i]\n                swap_count += 1\n                swap_index = i\n    \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize counters for each digit in the binary representation of str1 and str2\n    count1 = [0]*8\n    count2 = [0]*8\n    \n    # Count the number of digits in each binary string\n    for digit in str1:\n        count1[int(digit)] += 1\n    for digit in str2:\n        count2[int(digit)] += 1\n    \n    # Find the minimum number of swaps required to convert the binary strings\n    min_swaps = 0\n    for i in range(8):\n        if count1[i] > 0 and count2[i] > 0:\n            min_swaps += abs(count1[i]-count2[i])\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize two variables to keep track of the number of swaps required for each binary number\n    swaps1 = 0\n    swaps2 = 0\n\n    # Iterate through the bits of the binary numbers from right to left\n    for i in range(31, -1, -1):\n        # If the bits in the current binary number differ, swap the bits in the two strings\n        if ((num1 >> i) & 1)!= ((num2 >> i) & 1):\n            # Increment the swap count for the first string\n            swaps1 += 1\n            # Swap the corresponding bits in the two strings\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n\n    # Compare the two binary numbers and calculate the minimum number of swaps required\n    if num1 < num2:\n        # If num1 is less than num2, the minimum number of swaps required is the sum of the swaps required for num2\n        swaps2 = swaps1\n    elif num1 > num2:\n        # If num1 is greater than num2, the minimum number of swaps required is the sum of the swaps required for num1\n        swaps1 = swaps2\n    else:\n        # If num1 is equal to num2, the minimum number of swaps required is 0\n        swaps1 = 0\n        swaps2 = 0\n\n    # Return the minimum number of swaps required\n    return min(swaps1, swaps2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert strings to binary\n    binary_str1 = bin(int(str1, 2))[2:]\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # Compare the two binary strings\n    diff_count = 0\n    for i in range(len(binary_str1)):\n        if binary_str1[i]!= binary_str2[i]:\n            diff_count += 1\n\n    return diff_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings to their decimal values\n    dec1 = int(str1, 2)\n    dec2 = int(str2, 2)\n\n    # Find the number of bits in the binary strings\n    num_bits = max(len(str1), len(str2))\n\n    # Initialize two arrays to store the minimum number of swaps required to convert each decimal value to its binary representation\n    min_swaps_1 = [float('inf')] * 2\n    min_swaps_2 = [float('inf')] * 2\n\n    # Initialize a counter to keep track of the number of swaps required for each decimal value\n    num_swaps = [0] * 2\n\n    # Iterate through all possible decimal values and check if the binary representation of each decimal value is the same as its original value\n    for i in range(2**num_bits):\n        # Convert the decimal value to its binary representation\n        dec = i\n\n        # Convert the decimal value to its binary string\n        binary = bin(dec)[2:].zfill(num_bits)\n\n        # Check if the binary string is equal to the original string\n        if binary == str1 or binary == str2:\n            # Calculate the minimum number of swaps required to convert the binary string to the original string\n            for j in range(num_bits):\n                # Check if the jth bit of the original string is the same as the jth bit of the binary string\n                if str1[j]!= str2[j]:\n                    # If not, increment the number of swaps required to convert the binary string to the original string\n                    num_swaps[j] += 1\n\n                    # Check if the new minimum number of swaps required for the original string is smaller than the current minimum number of swaps required for the original string\n                    if min_swaps_1[j] > num_swaps[j]:\n                        min_swaps_1[j] = num_swaps[j]\n\n                    # Check if the new minimum number of swaps required for the binary string is smaller than the current minimum number of swaps required for the binary string\n                    if min_swaps_2[j] > num_swaps[j]:\n                        min_swaps_2[j] = num_swaps[j]\n\n            # Reset the counter for the next iteration\n            num_swaps = [0] * 2\n\n    # Find the minimum number of swaps required to convert one binary string to another\n    min_swaps = min(min_swaps_1[0], min_swaps_1[1], min_swaps_2[0], min_swaps_2[1])\n\n    # Return the minimum number of swaps required to convert one binary string to another\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Count the number of bits in each number\n    n1 = len(bin(num1)[2:])\n    n2 = len(bin(num2)[2:])\n\n    # Initialize the minimum swaps required\n    min_swaps = abs(n1 - n2)\n\n    # Find the minimum number of swaps required for each bit position\n    for i in range(min(n1, n2)):\n        # If the first binary number has a higher bit, swap the bits\n        if num1 >> i & 1 > num2 >> i & 1:\n            min_swaps += 1\n\n    # Return the minimum swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Convert integers to binary strings and compare\n    str1_binary = bin(num1)[2:]  # remove \"0b\" prefix and convert to binary string\n    str2_binary = bin(num2)[2:]\n    if str1_binary!= str2_binary:\n        # if binary strings are not equal, count swaps needed to convert one to the other\n        str1_list = [int(x) for x in str1_binary]\n        str2_list = [int(x) for x in str2_binary]\n        diff_list = [x for x in str1_list if x!= str2_list.pop(0)]\n        swaps_needed = len(diff_list) // 2\n        return swaps_needed\n    else:\n        # if binary strings are equal, return 0 as no swaps needed\n        return 0"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert tuple to bytes using sys.getsizeof()\n    size = sys.getsizeof(tuple_list)\n\n    # convert bytes to MB\n    size = size/1024/1024\n\n    # print the result\n    print(\"The size in bytes of the given tuple is\", size, \"MB\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Function to calculate the size in bytes of a tuple\n    def get_size(item):\n        if isinstance(item, (int, float)):\n            return sys.getsizeof(item)\n        elif isinstance(item, str):\n            return len(item) * sys.getsizeof('a')\n        elif isinstance(item, (tuple, list)):\n            return sum(get_size(sub_item) for sub_item in item)\n        else:\n            raise TypeError('Invalid item type')\n\n    # Calculate the size in bytes of each tuple in the list\n    sizes = [get_size(t) for t in tuple_list]\n\n    # Calculate the sum of all sizes\n    total_size = sum(sizes)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # create a bytearray from the given tuple\n    byte_array = bytearray(tuple_list)\n\n    # calculate the size of the bytearray in bytes\n    size = sys.getsizeof(byte_array)\n\n    # return the size of the bytearray in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of the tuples.\n    '''\n    # initialize the size of the tuple to zero\n    size = 0\n\n    # loop through the tuple list and add the size of each tuple to the size variable\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n\n    # return the total size of all tuples in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters, arr1, arr2, and k, where arr1 and arr2 are sorted arrays and k is the position of the kth element in the array.\n    It uses a two-pointer technique to find the kth element of the two arrays. The function returns the kth element of the two arrays.\n\n    \"\"\"\n\n    # initialize two pointers, one starting from the beginning of arr1 and the other starting from the end of arr1\n    i = 0\n    j = len(arr1) - 1\n\n    # loop until the pointers meet or k is reached\n    while i <= j and k > 0:\n\n        # if the value at the i pointer is greater than the value at the j pointer,\n        # then decrement the i pointer and move the j pointer to the right\n        if arr1[i] > arr1[j]:\n            i += 1\n        else:\n            # if the value at the i pointer is less than or equal to the value at the j pointer,\n            # then decrement the j pointer and move the i pointer to the left\n            j -= 1\n\n        # if k is equal to zero, then we have found the kth element\n        if k == 0:\n            return arr1[i]\n\n        # decrement k by 1 to move the pointers to the next positions in the arrays\n        k -= 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n\n    Args:\n    arr1 (list): List of integers.\n    arr2 (list): List of integers.\n    k (int): Integer.\n\n    Returns:\n    int: The kth smallest element in the two arrays.\n\n    \"\"\"\n    # Initialize pointers for each array\n    i, j = 0, 0\n\n    # Iterate until k elements have been found\n    while i < len(arr1) and j < len(arr2):\n        # If the first element of the first array is smaller than the first element of the second array,\n        # increment the pointer for the first array\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the first element of the second array is smaller than the first element of the first array,\n        # increment the pointer for the second array\n        elif arr1[i] > arr2[j]:\n            j += 1\n        # If the first elements of both arrays are equal, compare the remaining elements\n        else:\n            # If there are more elements in arr1 than in arr2, increment the pointer for arr1\n            if i == len(arr1) - 1:\n                j += 1\n            # If there are more elements in arr2 than in arr1, increment the pointer for arr2\n            elif j == len(arr2) - 1:\n                i += 1\n            # If there are equal elements in both arrays, compare the remaining elements\n            else:\n                if arr1[i+1] < arr2[j+1]:\n                    i += 1\n                else:\n                    j += 1\n\n    # If there are not enough elements in the smallest array, return the element at the pointer for that array\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1, n2 = len(arr1), len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n    \n    # Initialize a counter to keep track of the number of elements we've visited\n    count = 0\n    \n    # Loop through both arrays until we've found k elements\n    while count < k:\n        # If the left array element is less than or equal to the right array element, move to the left array\n        if arr1[i] <= arr2[j]:\n            i += 1\n        # If the left array element is greater than the right array element, move to the right array\n        else:\n            j += 1\n        \n        # Increment the counter\n        count += 1\n    \n    # Return the kth element from the last visited position in both arrays\n    return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    min_arr = []\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            min_arr.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            min_arr.append(arr2[j])\n            j += 1\n        else:\n            min_arr.append(arr1[i])\n            i += 1\n            j += 1\n\n    while i < len(arr1):\n        min_arr.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        min_arr.append(arr2[j])\n        j += 1\n\n    if k > len(min_arr):\n        return None\n    else:\n        return min_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    low = 0\n    high = len(arr1) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr1[mid] < arr2[mid]:\n            low = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            high = mid - 1\n        else:\n            return arr1[mid]\n\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a number is an Armstrong number or not.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n    # Calculate the sum of the power of each digit of the number\n    sum_of_powers = sum([int(digit) ** len(num_str) for digit in num_str])\n    # Return True if the sum of the power of each digit is equal to the original number, else False\n    return sum_of_powers == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    num_sum = 0\n    \n    for digit in num_str:\n        digit = int(digit)\n        num_sum += digit ** num_len\n    \n    if num_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    total = 0\n    power = 1\n    \n    # Calculate the sum of the power of each digit of the number\n    for i in range(num_len):\n        digit = int(num_str[i])\n        total += digit ** power\n        power += 1\n    \n    # Check if the total is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to string\n    number = str(number)\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of number and add it to sum\n    for digit in number:\n        digit = int(digit)\n        sum += digit ** len(number)\n    # return True if sum is equal to number, else return False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Initialize a variable to hold the sum of the powers of the digits\n    sum_of_powers = 0\n\n    # Loop through the digits of the number\n    for digit in num_str:\n        # Convert each digit to an integer and raise it to the power of the number of digits\n        power = int(digit)**len(num_str)\n\n        # Add the power of each digit to the sum of powers\n        sum_of_powers += power\n\n    # Check if the sum of powers equals the original number\n    if num == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # convert number to integer and check if it's negative\n    if number < 0:\n        return False\n\n    # convert number to integer and calculate sum of its digits\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number //= 10\n\n    # check if the sum of digits of the number is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Initialize a variable to store the sum of cubes of each digit\n    digit_sum = 0\n    # Initialize a variable to store the sum of the cubes of the digits\n    sum_of_cubes = 0\n    # Loop through each digit of the number\n    for digit in number:\n        # Calculate the cube of the digit and add it to the sum of cubes\n        digit_sum += int(digit)**3\n    # Calculate the sum of cubes of the digits and add it to the sum of cubes\n    sum_of_cubes = digit_sum**3\n    # Compare the sum of cubes to the number itself\n    if sum_of_cubes == int(number)**3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        temp_sum = 0\n        num = number\n        while num > 0:\n            digit = num % 10\n            temp_sum += digit ** 3\n            num //= 10\n        return temp_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit_int = int(digit)\n        sum_of_cubes += digit_int ** 3\n\n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        num = int(input(f\"Enter the {i+1}th natural number: \"))\n        sum += num\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_ / count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and average variables\n    sum = 0\n    average = 0\n\n    # loop through the first n natural numbers and calculate sum and average\n    for i in range(1, number+1):\n        sum += i\n\n    # calculate average by dividing sum by number of natural numbers\n    average = sum/number\n\n    # return the sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(n):\n        num = int(input(f\"Enter the {i+1}th number: \"))\n        sum += num\n        count += 1\n    \n    average = sum/count\n    print(f\"The sum of the first {n} natural numbers is {sum}.\")\n    print(f\"The average of the first {n} natural numbers is {average}.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function finds the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum_num += i\n        count += 1\n        \n    average = sum_num/count\n    \n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n    average = sum/n\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if it's even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(n, \"is even\")\n    else : \n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize variables to store count of each character and first occurrence of character\n    char_count = {}\n    first_occurrence = None\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, check if it has been seen before\n        if char in char_count:\n            # If it has been seen before, check if it is the first occurrence\n            if char_count[char] == 1:\n                # If it is the first occurrence, return it\n                return char\n            # If it is not the first occurrence, update the count and continue\n            else:\n                char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1 and set the first occurrence to it\n        else:\n            char_count[char] = 1\n            first_occurrence = char\n\n    # If the function has reached this point, it means no repeated character was found\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character, or an empty string if there is no repeated character.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string. If no character is repeated, it returns None.\n    \"\"\"\n    # Initialize a dictionary to store the character frequency\n    freq = {}\n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the frequency dictionary to find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary to find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character and its frequency\n    for char, freq_char in freq.items():\n        if freq_char > 1:\n            return char, freq_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(int(j**0.5) + int(i**0.5) <= i for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    def is_lucid(num):\n        \"\"\"\n        Check if a number is a lucid number or not.\n        \"\"\"\n        lucid_count = 0\n        for i in range(2, num):\n            if num % i == 0:\n                lucid_count += 1\n                if lucid_count > 1:\n                    return False\n        return True\n\n    lucid_numbers = []\n    for i in range(2, n):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n):\n        if i % sum(map(int, str(i))) == 0:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if (i % 2 == 0 and i % 5!= 0) or (i % 2!= 0 and i % 3!= 0):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1]\n    for i in range(2, n+1):\n        ludic_numbers.append(ludic_numbers[-1] + ludic_numbers[-2])\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i%2 == 1:\n            if i%3 == 0:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 0\n    while i <= n:\n        if i % 3 == 0 or i % 5 == 0:\n            lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    # Iterate through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the number is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            # If the number is divisible by any number between 2 and the square root of the number, then it's not a lucid number\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, add it to the list of lucid numbers\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    while True:\n        if lucid > n:\n            break\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list\n    words = words[::-1]\n    # join the list into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [word[::-1] for word in words] # reverse each word\n    reversed_s =''.join(reversed_words) # join the reversed words back into a string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using space as delimiter\n    words = s.split()\n    # reverse each word in the list using slicing\n    reversed_words = [word[::-1] for word in words]\n    # join the words back into a string with space as delimiter\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse the words\n    reversed_words = words[::-1]\n    # join the words back into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        print(f'{num} is a prime number')\n    else:\n        print(f'{num} is not a prime number')"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function returns True if the input number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number using the above function.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    return prime_num(num + 1)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern. It returns the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern_obj = re.compile(pattern)\n    \n    # Find all matches\n    matches = pattern_obj.findall(text)\n    \n    # Iterate through matches and return a list of tuples containing the matching substring, start index and end index\n    literals = []\n    for match in matches:\n        literals.append((match[0], match.start(), match.end()))\n    \n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes two arguments: text and pattern. Text is the string to search and pattern is the regular expression pattern to search for. The function returns a list of tuples containing the literal found, its start index and end index.\n    '''\n    # Compile the pattern\n    pattern = re.compile(pattern)\n    \n    # Find all matches using the pattern\n    matches = pattern.findall(text)\n    \n    # Return a list of tuples containing the literal found, its start index and end index\n    return [(match, text.find(match), text.find(match) + len(match)) for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        start_index = text.find(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        match = next(matches)\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the bell number as 1\n    bell_num = 1\n    # Iterate till n\n    for i in range(1, n+1):\n        # Calculate the next bell number\n        bell_num = (bell_num*(2*n-i))//(i+1)\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError('The value of n cannot be negative.')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) + (bell_Number(n-1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 2\n    for i in range(n-1):\n        b = c\n        c = a + b\n        a = b\n    return c"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize a list to store the bell numbers\n    bell_list = []\n\n    # Initialize the first bell number\n    bell_list.append(1)\n\n    # Iterate through the rest of the bell numbers\n    for i in range(2, n+1):\n        # Calculate the next bell number\n        next_bell = (bell_list[i-1] * (i-1)) // i\n\n        # Append the next bell number to the list\n        bell_list.append(next_bell)\n\n    # Return the nth bell number from the list\n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(n): \n        bell = bell + (2*i+1)**i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    bell_list = [0, 1]  # first two bell numbers\n    for i in range(2, n):\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number using a recursive approach.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    else:\n        return list1[:-1] + [list1[-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return list1\n    else:\n        k = len(list1) - L\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a number k and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    n = len(list1)\n    for i in range(n):\n        if i!= k-1:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    temp = []\n    for i in range(len(list1)):\n        if i!= k:\n            temp.append(list1[i])\n    return temp"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # k is the index of the kth element to be removed\n    \n    # Remove the kth element from the list\n    list1.pop(k)\n    \n    # Return the updated list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L == 1:\n        return list1[1:]\n    elif L > 1:\n        return list1[:L-1] + list1[L:]\n    else:\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    \n    for row in test_list:\n        if N < len(row):\n            max_value = max(max_value, row[N-1])\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize the maximum value to be negative infinity\n    max_val = float('-inf')\n\n    # Iterate over each row in the matrix\n    for row in test_list:\n        # If the row length is less than n, break out of the loop\n        if len(row) < N:\n            break\n\n        # Otherwise, find then'th column and compare it to the current maximum value\n        nth_col = row[N-1]\n        if nth_col > max_val:\n            max_val = nth_col\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for row in test_list:\n        col_max.append(max(row[i] for i in range(len(row))))\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if N > len(row):\n            return None\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    max_row_length = max(len(row) for row in test_list)\n    \n    # Initialize the max value as negative infinity\n    max_val = float('-inf')\n    \n    # Loop through the rows of the matrix and find the max value of then'th column\n    for row in test_list:\n        if len(row) > N-1:\n            max_val = max(max_val, row[N-1])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_value to 0\n    max_value = 0\n    \n    # loop through each row in the matrix\n    for row in test_list:\n        # check if the current row has N columns\n        if len(row) == N:\n            # check if the nth column is greater than max_value\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n    \n    # return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row of the matrix\n    row_length = len(test_list[0])\n\n    # Create a new list of the same length as the matrix but with all values set to zero\n    max_values = [0] * row_length\n\n    # Iterate over the rows of the matrix\n    for row in test_list:\n        # Find the index of then'th column in the row\n        nth_col_index = N - 1 if N <= row_length else row_length - 1\n        # Find the max value in the nth column\n        max_value = max(row[nth_col_index])\n        # Set the max value in the corresponding index in the max_values list\n        max_values[nth_col_index] = max_value\n\n    # Return the list of max values\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(matrix)):\n        if matrix[i][N-1] > max_val:\n            max_val = matrix[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        merged_lst.append([lst[i][0], lst[i+1][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []  \n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])  \n    return merged_lst  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum with the first value in the list\n    cum_sum = test_list[0]\n\n    # iterate through the list and add each value to the cumulative sum\n    for i in range(1, len(test_list)):\n        cum_sum += test_list[i]\n\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to zero\n    cumulative_sum = 0\n    \n    # loop through the tuple list\n    for i in test_list:\n        # add the value to the cumulative sum\n        cumulative_sum += i\n        \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Iterate through the tuple list and add each value to the cumulative sum\n    for value in test_list:\n        cumulative_sum += value\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise ValueError('Input must be a list.')\n    total_sum = 0\n    for i, val in enumerate(test_list):\n        if isinstance(val, tuple):\n            total_sum += sum(val)\n        else:\n            total_sum += val\n        if i < len(test_list) - 1:\n            total_sum += sum(test_list[i+1:])\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum list\n    cumulative_sum = []\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Initialize a variable to keep track of the sum\n        current_sum = 0\n        \n        # Loop through each value in the tuple\n        for value in tup:\n            # Add the value to the current sum\n            current_sum += value\n            \n            # Add the current sum to the cumulative sum list\n            cumulative_sum.append(current_sum)\n    \n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        count = len(num_tuple)\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = sum(i)\n        average = total / len(i)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        temp = [num for sublist in nums[i] for num in sublist]\n        result.append(sum(temp) / len(temp))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup/len(tup)\n        avg_list.append(avg_tup)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        num_list = []\n        for num in num_tuple:\n            num_list.append(num)\n        result.append(sum(num_list) / len(num_list))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Perform element wise modulo operation and store in a new tuple\n    modulo_tup = [x % y for x, y in zip(test_tup1, test_tup2)]\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match\")\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], int) or not isinstance(test_tup2[i], int):\n            raise TypeError(\"Both tuples must be of integer type\")\n    return tuple((test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples should be same.\")\n\n    # Perform element-wise modulo\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_x = 0\n    curr_y = 0\n    curr_pos = (curr_x, curr_y)\n\n    while curr_y < steps:\n        # move in the x direction\n        if curr_x == d:\n            # reach a point of form (d, 0) from origin\n            jumps += 1\n            curr_x = 0\n            curr_pos = (curr_x, curr_y)\n        else:\n            # move one step to the right\n            curr_x += 1\n            curr_pos = (curr_x, curr_y)\n\n        # move in the y direction\n        if curr_y == steps - 1:\n            # reach the final point of the path\n            break\n        else:\n            # move one step down\n            curr_y += 1\n            curr_pos = (curr_x, curr_y)\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments - steps and d. \n    Steps is the number of steps to reach the destination and d is the maximum distance we can jump in one step.\n    \n    It returns the minimum number of jumps required to reach the destination in a 2d plane.\n    \n    '''\n    jumps = 0\n    i = 1\n    \n    while i <= steps:\n        # Check if we can reach the destination point with at most d jumps\n        if i >= d:\n            jumps += 1\n            i += d\n        else:\n            i += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Function to calculate the minimum number of jumps required\n    def min_jumps(n, d):\n        jumps = 0\n        for i in range(n):\n            if i % d == 0:\n                jumps += 1\n            else:\n                jumps += (i + 1) // d\n        return jumps\n\n    # Check for the number of jumps required for each case\n    if d == 0:\n        return steps\n    elif d == 1:\n        return steps // 2\n    else:\n        return min_jumps(steps, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a list of tuples representing the points on the plane\n    points = [(x, 0) for x in range(-steps//2, steps//2+1)]\n    # initialize a set to store visited points\n    visited = set()\n    # initialize a variable to store the minimum number of jumps required\n    min_jumps = float('inf')\n    # initialize a variable to store the current position\n    position = (0, 0)\n    # loop through all the points on the plane\n    for p in points:\n        # check if the current position is the required point\n        if p == (d, 0):\n            # if it is, update the minimum jumps required and break out of the loop\n            min_jumps = 0\n            break\n        # check if the current position is already visited\n        if p in visited:\n            # if it is, skip it and continue to the next point\n            continue\n        # add the current position to the visited set\n        visited.add(p)\n        # calculate the next position based on the current position\n        next_p = (position[0] + p[0], position[1] + p[1])\n        # check if the next position is valid\n        if 0 <= next_p[0] <= steps and 0 <= next_p[1] <= steps:\n            # if it is, update the position and check if the next position is the required point again\n            position = next_p\n            if p == (d, 0):\n                # if it is, update the minimum jumps required and break out of the loop\n                min_jumps = 0\n                break\n        # if the next position is not valid, check if the next position is the required point\n        if p == (d, 0):\n            # if it is, update the minimum jumps required\n            min_jumps += 1\n    # return the minimum jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    def helper(x, y, steps):\n        if x == d and y == 0:\n            return steps\n        if x < 0 or y < 0:\n            return None\n        if x == d and y!= 0:\n            return None\n\n        if (x + y) % 2 == 0:\n            if x + y <= steps:\n                return helper(x - 1, y, steps)\n            else:\n                return None\n        else:\n            if x + y <= steps:\n                return helper(x, y + 1, steps)\n            else:\n                return None\n\n    return helper(0, 0, steps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i == 0:\n            jumps += 1\n        i += steps - i + d\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate the minimum number of jumps to reach (d, 0)\n    min_jumps = int(steps / d)\n    # Add the extra jump for reaching (0, 0)\n    min_jumps += 1\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    - steps (int): Number of steps required to reach the point (d, 0).\n    - d (int): Distance to reach the point (d, 0).\n\n    Returns:\n    - int: Number of jumps required to reach the point.\n    \"\"\"\n\n    # Initialize variables\n    steps_left = steps\n    jumps = 0\n\n    # Loop until steps_left becomes zero\n    while steps_left > 0:\n        # Calculate the remaining distance to reach the point\n        remaining_distance = abs(d - steps_left)\n\n        # If remaining distance is greater than 1, perform a single jump\n        if remaining_distance > 1:\n            steps_left -= 1\n            jumps += 1\n        # Otherwise, perform two jumps\n        else:\n            steps_left -= 2\n            jumps += 2\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0] * (steps + 1) for _ in range(steps + 1)]\n\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            dp[i][j] = dp[i - 1][j] + 1\n            if j == d:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1)\n\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = 1000  # Taking an arbitrary value of 1000 as the limit\n    \n    # Creating a 2d list of 1000x1000 to store the distances\n    dist = [[float('inf')] * n for i in range(n)]\n    \n    # Setting the first element of the first row as 0\n    dist[0][0] = 0\n    \n    # Looping through the list of distances from the origin\n    for i in range(steps):\n        # Looping through the list of rows\n        for j in range(n):\n            # Checking if the current row is already processed\n            if j == n - 1:\n                # If the current row is the last row, then the minimum jumps required to reach the point (d, 0)\n                if dist[j][j] == d:\n                    return i\n                else:\n                    return -1\n            \n            # Looping through the list of columns from the current row\n            for k in range(j+1, n):\n                # Updating the distance of the point (i+k, 0) in the next row\n                dist[i+k][j] = min(dist[i+k][j], dist[i][j] + abs(i+k-j))\n                \n                # If the updated distance is less than the current minimum distance, then updating the minimum jumps required to reach the point (d, 0)\n                if dist[i+k][j] == min(dist[i][j] + abs(i+k-j), dist[i+k-1][j]) and dist[i+k][j] < dist[i][j]:\n                    return i + k - j\n    \n    # If the function reaches here, then no valid number of jumps is possible\n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have equal lengths.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n    else:\n        print(\"Lists are not of equal length\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return None\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists have different lengths.\"\n\n    # divide each element of the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    # split the string into a list of characters\n    chars = list(test_str)\n    # initialize a list to hold the numbers\n    nums = []\n    # loop through the characters in the string\n    for char in chars:\n        # check if the character is a number\n        if char.isdigit():\n            # append the number to the nums list\n            nums.append(char)\n        # if the character is not a number, append it to the end of the list\n        else:\n            chars.append(char)\n    # join the list of numbers back into a string\n    result = ''.join(nums) + ''.join(chars)\n    # return the final result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into list of words\n    words = test_str.split()\n\n    # initialize a variable to keep track of the index of the last word that is a number\n    last_num_index = -1\n\n    # loop through the list of words\n    for i in range(len(words)):\n        # check if the current word is a number\n        if words[i].isdigit():\n            # if it is, update the last_num_index variable\n            last_num_index = i\n\n    # if there were no numbers in the string, return the string as is\n    if last_num_index == -1:\n        return test_str\n\n    # create a new list of words with all the numbers moved to the end of the list\n    new_words = words[:last_num_index] + words[last_num_index+1:]\n\n    # join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    nums_str = ''.join(nums)\n    return test_str[:-len(nums_str)] + nums_str + test_str[-len(nums_str):]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_count = 0\n    result = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_count += 1\n            result += test_str[i]\n        else:\n            if num_count > 0:\n                result += str(num_count) + test_str[i]\n                num_count = 0\n            else:\n                result += test_str[i]\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define an empty string to store the numbers\n    nums_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the nums_str string\n            nums_str += char\n    \n    # Concatenate the nums_str string with the rest of the input string\n    result = nums_str + test_str\n    \n    # Return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize variables to store the index of the last non-number character\n    last_non_num_index = 0\n    last_num_index = 0\n    num_found = False\n\n    # Iterate through the string and move the numbers to the end of the string\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            # If a number is found, update the index of the last non-number character\n            if not num_found:\n                last_non_num_index = i\n                num_found = True\n            # Update the index of the last number character\n            last_num_index = i\n\n    # Return the modified string\n    return test_str[:last_non_num_index] + test_str[last_num_index:][::-1] + test_str[last_non_num_index:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store numbers\n    num_str = ''\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the num_str\n            num_str += char\n        else:\n            # if the character is not a number, add it to the end of the string\n            test_str += char\n    # return the final string with numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the non-number characters\n    non_num_str = ''\n    # Iterate through the characters in the input string\n    for char in test_str:\n        # If the character is a number, add it to the non-number string\n        if char.isdigit():\n            non_num_str += char\n        # If the character is not a number, add it to the beginning of the string\n        else:\n            test_str = char + test_str\n    # Return the concatenated non-number string and the number string\n    return non_num_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Create a new string to store the numbers and convert the input to a list\n    num_list = list(filter(str.isdigit, test_str))\n\n    # Convert the number list to a string and join them with an empty string\n    num_str = ''.join(num_list)\n\n    # Reverse the string and convert it back to a list\n    num_list_reversed = list(num_str[::-1])\n\n    # Join the reversed list back into a string\n    reversed_num_str = ''.join(num_list_reversed)\n\n    # Return the reversed string with all the numbers moved to the end\n    return reversed_num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize variables to store the start and end indices of numbers\n    start_num = 0\n    end_num = 0\n\n    # Loop through the list of characters\n    for i in range(len(char_list)):\n        # Check if the character is a number\n        if char_list[i].isdigit():\n            # If it is a number, update the start and end indices\n            start_num = i\n            end_num = i\n            # Check for the next number\n            while i < len(char_list) and char_list[i].isdigit():\n                i += 1\n                end_num = i\n\n    # If there were no numbers in the string, return the original string\n    if start_num == 0:\n        return test_str\n\n    # Create a new string without the numbers and the rest of the string\n    new_str = \"\".join([char for i, char in enumerate(char_list) if i < start_num])\n\n    # Add the numbers to the end of the new string\n    new_str += \"\".join([char for i, char in enumerate(char_list) if i == end_num])\n\n    # Add the rest of the string to the new string\n    new_str += \"\".join([char for i, char in enumerate(char_list) if i > end_num])\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n        max_size = max(max_size, dp[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # Sort the list of numbers\n    a.sort()\n\n    # Initialize variables to keep track of the maximum subset size and the indices of the numbers in the subset\n    max_size = 1\n    max_start = [0]\n\n    # Iterate through the list of numbers\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the number at the previous index\n        if a[i] % a[max_start[max_size-1]] == 0:\n            # If it is, increment the subset size and update the indices of the numbers in the subset\n            max_size += 1\n            max_start.append(i)\n        # If the current number is not divisible by the number at the previous index, reset the subset size and start a new subset\n        else:\n            max_size = 1\n            max_start = [i]\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                result = max(result, j-i+1)\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    a.sort()\n    n = len(a)\n\n    max_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            max_size += 1\n        else:\n            max_size = 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    for i in range(n):\n        if a[i] % n!= 0:\n            for j in range(i+1, n):\n                if a[j] % n == 0:\n                    return j - i + 1\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_sum = 0\n    max_size = 0\n    current_sum = 0\n    current_size = 0\n\n    for num in a:\n        current_sum += num\n        current_size += 1\n\n        if current_sum % 2 == 0:\n            max_sum = max(max_sum, current_sum)\n            max_size = max(max_size, current_size)\n\n        if current_sum < 0:\n            current_sum = 0\n            current_size = 0\n\n    return max(max_size, max_sum)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    :param a: List of numbers\n    :type a: list\n    :return: The size of the largest subset of a list of numbers so that every pair is divisible.\n    :rtype: int\n    \"\"\"\n    a.sort()\n    n = len(a)\n\n    # Initialize variables\n    count = 0\n    subset_size = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Check if the current number is divisible by i\n        if a[i] % i == 0:\n            # Increment the count and subset size\n            count += 1\n            subset_size = max(subset_size, count)\n            # Reset the count\n            count = 1\n\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in non-descending order\n    a = sorted(a)\n    # Initialize variables to keep track of the largest subset size and the current subset size\n    max_size = 0\n    current_size = 1\n    # Iterate through the list and find the largest subset that is divisible by every other number\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            current_size += 1\n        else:\n            if current_size > max_size:\n                max_size = current_size\n            current_size = 1\n    # Add the last subset to the maximum size if it is larger\n    if current_size > max_size:\n        max_size = current_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Find the largest possible sum that can be obtained by selecting one element from each set\n    max_sum = max(sum(a[:i]) for i in range(1, len(a)+1))\n    # Find the largest subset that satisfies this condition\n    max_subset = [a[i] for i in range(len(a)) if max_sum == sum(a[:i])]\n    # Return the size of the largest subset\n    return len(max_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    result = 1\n    for i in range(len(a)-1):\n        if a[i]%a[i+1] == 0:\n            result += 1\n        else:\n            break\n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (min(arr1[n//2-1], arr2[n//2-1]) + max(arr1[n//2], arr2[n//2])) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n\n    if len(arr1) > len(arr2):\n        # Swap the two arrays if they are in reverse order\n        arr1, arr2 = arr2, arr1\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if (len(arr1) + len(arr2)) % 2 == 0:\n        # If both lists have an even number of elements\n        median = (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # If only one list has an odd number of elements\n        median = arr1[mid1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters:\n    arr1: a list of integers\n    arr2: a list of integers\n    n: an integer, the size of both arrays\n\n    This function finds the median of two sorted lists of same size.\n\n    If the size of both arrays is odd, then the median is the middle element of both arrays.\n    If the size of both arrays is even, then the median is the average of the middle two elements of both arrays.\n\n    The time complexity of this function is O(n) since we are iterating through both arrays once.\n    '''\n\n    # Concatenate the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Find the length of the array\n    length = len(sorted_arr)\n\n    # Check if the length of the array is odd or even\n    if length % 2 == 0:\n        # The length is even, so the median is the average of the middle two elements\n        median = (sorted_arr[length//2 - 1] + sorted_arr[length//2]) / 2\n    else:\n        # The length is odd, so the median is the middle element\n        median = sorted_arr[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2!= 0:\n        median = merged_list[mid]\n    # If the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Determine the median index\n    mid = n // 2\n    if n % 2 == 0:\n        # If the list has an even number of elements, take the average of the two middle elements\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2.0\n    else:\n        # If the list has an odd number of elements, take the middle element\n        median = merged_list[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median index based on the size of the list\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = (n - 1) // 2\n    \n    # Return the median value\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = merge_sort(arr1 + arr2)\n\n    # Find the middle index of the merged array\n    middle_index = n // 2\n\n    # If the length of the merged array is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_arr[middle_index]\n\n    # If the length of the merged array is even, the median is the average of the two middle elements\n    else:\n        return (merged_arr[middle_index - 1] + merged_arr[middle_index]) / 2\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm for sorting an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    \"\"\"\n    Merge two sorted arrays.\n    \"\"\"\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 3, 5, 7]\n    arr2 = [2, 4, 6, 8]\n    n = len(arr1)\n    print(get_median(arr1, arr2, n))"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the middle index of the merged list\n    mid_index = n // 2\n    \n    # If the length of the merged list is odd, return the middle element\n    if n % 2 == 1:\n        return merged_list[mid_index]\n    \n    # If the length of the merged list is even, return the average of the middle two elements\n    else:\n        return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the length of the list\n    length = len(merged_list)\n    \n    # Find the median\n    if length % 2 == 0:\n        median = (merged_list[length//2-1] + merged_list[length//2])/2\n    else:\n        median = merged_list[length//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Splitting the string into individual words\n    words = string.split()\n\n    # Looping through each word and converting it to uppercase\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n\n    # Joining the words back into a string\n    result = \" \".join(words)\n\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    \"\"\"\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        return newList\n    else:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if the length of the list is less than 2, there is nothing to swap\n    if len(newList) < 2:\n        return newList\n\n    # otherwise, swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # initialize variables\n    first = newList[0]\n    last = newList[-1]\n\n    # interchange the first and last elements\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the input list is empty\n    if not newList:\n        return newList\n\n    # Swap the first and last elements\n    first, last = newList[0], newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List must have at least two elements.\")"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "Using the law of cosines, we can calculate the cosine"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-circle's area using Heron's formula\n    s = (math.pi ** 2) / 2\n    area = (s * r ** 2) / 2\n\n    # Calculate the perimeter of the largest triangle that can be inscribed in the semi-circle\n    perimeter = s - area\n\n    # Calculate the area of the largest triangle that can be inscribed in the semi-circle\n    s = math.sqrt(perimeter ** 2 - r ** 2)\n    area_triangle = math.sqrt(s ** 2 - r ** 2) ** 2\n\n    # Return the area of the largest triangle that can be inscribed in the semi-circle\n    return area_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = (pi * r ** 2) / 3  # Formula for area of a triangle with vertices on a semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula for area of a right triangle with semi-circle inscribed shape\n    # A = (\u03c0r^2)/(4)\n\n    # Radius of the semi-circle\n    \u03c1 = 2 * r\n\n    # Calculating the semi-circle radius\n    \u03b8 = 180 * \u03c1 / (2 * \u03c0)\n\n    # Calculating the side length of the triangle\n    s = tan(radians(\u03b8)) * 2 * r\n\n    # Calculating the area of the triangle\n    A = (\u03c0 * r ** 2) / 4\n\n    # Finding the length of the largest semi-circle that can be inscribed in the triangle\n    L = (2 * s) ** 2 / \u03c0\n\n    # Calculating the area of the largest triangle that can be inscribed in the semi-circle\n    C = (\u03c0 * L ** 2) / 4\n\n    # Returning the area of the largest triangle that can be inscribed in the semi-circle\n    return C"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Semi-circle radius\n    s = math.sqrt(r**2 + 1)\n\n    # Area of the smallest triangle that can be inscribed in the semicircle\n    a = 0.5 * s\n\n    # Area of the largest triangle that can be inscribed in the semicircle\n    b = math.sqrt(3) / 6 * r**2\n\n    # Maximum area of the smallest and largest triangles\n    A = max(a, b)\n\n    # Area of the largest triangle that can be inscribed in a circle with radius r\n    area_of_circle = math.pi * r**2\n\n    # Area of the smallest triangle that can be inscribed in a circle with radius s\n    area_of_semi_circle = math.pi * s**2\n\n    # Maximum area of the smallest and largest triangles that can be inscribed in a circle with radius r\n    A_circle = max(area_of_circle, area_of_semi_circle)\n\n    # Return the maximum area of the smallest and largest triangles\n    return A, A_circle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sin(math.pi/3) * r\n    area = (3/4) * math.pi * r**2\n    return area, h\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846  # pi is the mathematical constant\n    \n    # find the length of the longest semi-circle that can be inscribed in the given radius\n    length = 2 * r * pi\n    \n    # find the area of the largest triangle that can be inscribed in the given semi-circle\n    area = length * length / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius r as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    pi = math.pi\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * pi * r\n    # Calculate the semi-area of the triangle with base r and height sqrt(3)/2 * r\n    semi_area = (3 * r * r) / (4 * pi)\n    # Calculate the area of the triangle with base 2r and height sqrt(3)/2 * r\n    area = (2 * r * r * math.sqrt(3) / 4) * math.sqrt(semi_perimeter)\n    # Return the maximum of the two areas\n    return max(semi_area, area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the maximum length of the side of the triangle\n    max_side = r/2\n    # calculate the area of a triangle with sides of 1 and max_side\n    area1 = 1\n    area2 = max_side * max_side / 2\n    # calculate the area of the largest triangle that can be inscribed in a semicircle\n    area3 = (r*r - r/2)**2 / (r*r)\n    # return the maximum area\n    return max(area1, area2, area3)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = 2 * r\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - r) * (s - 2*r))\n\n    # Calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = math.pi * r**2\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area if area <= max_area else max_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        \n        if array[mid] == mid:\n            if mid == end:\n                return mid\n            else:\n                start = mid + 1\n        elif array[mid] < mid:\n            if mid == end:\n                return mid + 1\n            else:\n                end = mid - 1\n        else:\n            start = mid + 1\n    \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n\n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the list is empty, return None\n    if not array:\n        return None\n    \n    # If the list has only one element, return 1\n    if len(array) == 1:\n        return 1\n    \n    # Sort the list\n    array.sort()\n    \n    # If the first element is 1, return 2\n    if array[0] == 1:\n        return 2\n    \n    # If the last element is n, return n+1\n    if array[-1] == len(array):\n        return len(array) + 1\n    \n    # Loop through the list and find the first missing number\n    for i in range(start, end):\n        if i!= array[i-1]:\n            return i + 1\n    \n    # If the loop completes without finding the missing number, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end):\n        if array[i]!= i + start:\n            return i + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] - start!= i - start:\n            return start + i - start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number.\n    \"\"\"\n    # If the array is empty or contains only one element, return None\n    if len(array) <= 1:\n        return None\n\n    # Check if the array is sorted\n    if start <= end:\n        for i in range(start, end + 1):\n            # If a number is missing, return its index\n            if array[i]!= i + start:\n                return i + start\n    else:\n        for i in range(end, start - 1, -1):\n            # If a number is missing, return its index\n            if array[i]!= i + start:\n                return i + start\n\n    # If no number is missing, return the length of the array plus 1\n    return len(array) + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of even numbers in the same order.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows = len(sub)\n    cols = len(sub[0])\n    res = []\n    \n    for i in range(rows):\n        for j in range(cols):\n            if (i-1 >= 0 and sub[i-1][j][0] == ele[0]) or (i+1 < rows and sub[i+1][j][0] == ele[0]) or \\\n               (j-1 >= 0 and sub[i][j-1][1] == ele[1]) or (j+1 < cols and sub[i][j+1][1] == ele[1]):\n                res.append((i,j))\n    \n    return res"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+i, y+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if (i+j)!= 0]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if (i!= j) and (ele[i][0] - ele[j][0] == ele[i][1] - ele[j][1]):\n                adj.append((ele[i][0] + ele[j][0], ele[i][1] + ele[j][1]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x < len(board)-1 and y > 0:\n        adj.append((x+1, y-1))\n    if x > 0 and y < len(board[0])-1:\n        adj.append((x-1, y+1))\n    if x < len(board)-1 and y < len(board[0])-1:\n        adj.append((x+1, y+1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(board)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(board[0])-1:\n        adj.append((x, y+1))\n    for tup in adj:\n        if tup not in sub:\n            sub.append(tup)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_list = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if ele[i]!= j and i!= j:\n                if abs(ele[i] - j) == 1:\n                    if sub:\n                        if (i,j) not in sub:\n                            adj_list.append((i,j))\n                    else:\n                        adj_list.append((i,j))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple and returns a list of adjacent coordinate tuples.\n    The adjacent coordinates are those that are adjacent in the x and y directions. \n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        adj = [ele for ele in adj if ele not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+dx, y+dy) for dx, dy in sub]\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele \n    adj_coords = []\n    \n    # Adjacent row coordinates\n    if row > 0:\n        adj_coords.append((row - 1, col))\n    if row < n - 1:\n        adj_coords.append((row + 1, col))\n    \n    # Adjacent column coordinates\n    if col > 0:\n        adj_coords.append((row, col - 1))\n    if col < m - 1:\n        adj_coords.append((row, col + 1))\n    \n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if dx!= 0 or dy!= 0]\n    adj.remove(ele)\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    x, y = ele\n    \n    # list to store adjacent coordinates\n    adj = []\n    \n    # check top and left neighbors\n    if x > 0:\n        adj.append((x-1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    \n    # check top-left and top neighbors\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    \n    # check top-right and top neighbors\n    if x < len(sub) - 1 and y > 0:\n        adj.append((x+1, y-1))\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    \n    # check right and top-right neighbors\n    if y < len(sub[x]) - 1:\n        adj.append((x, y+1))\n    if x < len(sub) - 1 and y < len(sub[x]) - 1:\n        adj.append((x+1, y+1))\n    \n    # check right and bottom-right neighbors\n    if y < len(sub[x]) - 1 and x < len(sub) - 1:\n        adj.append((x+1, y))\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    \n    # check bottom-right and bottom neighbors\n    if x < len(sub) - 1 and y < len(sub[x]) - 1:\n        adj.append((x+1, y+1))\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    \n    # check bottom and left neighbors\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    if y < len(sub[x]) - 1:\n        adj.append((x, y+1))\n    \n    # check bottom-left and bottom neighbors\n    if x > 0 and y < len(sub[x]) - 1:\n        adj.append((x-1, y+1))\n    if y < len(sub[x]) - 1:\n        adj.append((x, y+1))\n    \n    # check top-left and bottom neighbors\n    if x > 0 and y < len(sub[x]) - 1:\n        adj.append((x-1, y+1))\n    if x > 0:\n        adj.append((x-1, y))\n    \n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the input string to lowercase\n    text = text.lower()\n    # Initialize a new string to store the output\n    output = ''\n    # Loop through each character in the input string\n    for char in text:\n        # If the character is whitespace, replace it with an underscore\n        if char.isspace():\n            output += '_'\n        # Otherwise, append the character to the output\n        else:\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # remove all the whitespace characters from the string\n    text = text.replace(\" \", \"\")\n    # replace all the underscore characters with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_text = ''\n    # Loop through each character in the input string\n    for char in text:\n        # If the character is a whitespace character, replace it with an underscore\n        if char.isspace():\n            modified_text += '_'\n        # Otherwise, append the character to the modified string\n        else:\n            modified_text += char\n    # Return the modified string\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    # replace spaces with underscores\n    modified_text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    modified_text = modified_text.replace(\"_\", \" \")\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # function to replace spaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(' ', '_')\n    \n    # function to replace underscores with spaces\n    def replace_underscore_spaces(text):\n        return text.replace('_','')\n    \n    # replace spaces with underscores\n    replaced_spaces = replace_spaces_underscore(text)\n    # replace underscores with spaces\n    replaced_underscore = replace_underscore_spaces(text)\n    \n    # return the replaced string\n    return replaced_spaces if replaced_spaces!= replaced_underscore else replaced_underscore"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            if i!= count:\n                num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            if count!= i:\n                num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list_copy = num_list[:]  # make a copy of the input list to avoid modifying it\n\n    # iterate through the input list from the end to the first non-zero element\n    for i in range(len(num_list_copy)-1, -1, -1):\n        if num_list_copy[i]!= 0:\n            # move the non-zero element to its final position\n            num_list_copy[i], num_list_copy[-1] = num_list_copy[-1], num_list_copy[i]\n            break\n\n    return num_list_copy"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Find the first non-zero index\n    non_zero_index = -1\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_index = i\n            break\n\n    # If no non-zero elements were found, return the original list\n    if non_zero_index == -1:\n        return num_list\n\n    # Move the non-zero elements to the end of the list\n    num_list = num_list[:non_zero_index] + num_list[non_zero_index:]\n\n    # Remove all zeroes from the list\n    while 0 in num_list:\n        num_list.remove(0)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize an empty list to store non-zero values\n    non_zero_list = []\n    # loop through the list and append non-zero values to the non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # insert all zeroes at the end of the non_zero_list\n    num_list.extend(non_zero_list)\n    # remove the non_zero_list and return the modified num_list\n    del non_zero_list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one for the first non-zero value and one for the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # Iterate over the list while there are non-zero values left\n    while i < j:\n        # If the current element is zero, swap it with the last non-zero element\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1 # Move to the next non-zero value\n            j -= 1 # Move back to the previous non-zero value\n        else:\n            i += 1 # Move to the next non-zero value\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for j in range(len(num_list)-1, -1, -1):\n        if num_list[j] == 0:\n            num_list.pop(j)\n            num_list.append(0)\n            zero_count -= 1\n        if zero_count == 0:\n            break"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize a variable to store the sum of xor of all pairs of numbers\n    xor_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the rest of the array (excluding the current number)\n        for j in range(i+1, n):\n            # XOR the current number and the numbers in between\n            xor_sum += arr[i] ^ arr[j]\n\n    # Return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_val = arr[i] ^ arr[j]\n            sum += xor_val\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input, and returns the sum of the XOR of all pairs of elements in the list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    n = 3\n    output: 10\n    '''\n\n    # initialize a variable to store the XOR of all pairs of elements\n    xor_sum = 0\n\n    # loop over all pairs of elements in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # compute the XOR of the two elements and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n\n    # return the XOR sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a heap\n    hq.heapify(iterable)\n    \n    # Extract the elements from the heap and return them as a list\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n        \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    heap = iterable\n    hq.heapify(heap)\n\n    # create a new list and add the max elements to it\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable) - 1, 0, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a list of tuples, where each tuple contains a value and its index\n    sorted_list = list(enumerate(iterable))\n    # Build a max heap from the list of tuples\n    hq.heapify(sorted_list)\n    # Pop the maximum element from the heap, and append it to the result list\n    result = []\n    while sorted_list:\n        result.append(sorted_list[0][0])\n        sorted_list.pop(0)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a max heap.\n    '''\n    # Convert the iterable to a list so that we can modify it\n    lst = list(iterable)\n    # Build a max heap from the list\n    hq.heapify(lst)\n    # Use heapq.nlargest() to sort the list in descending order\n    sorted_lst = hq.nlargest(len(lst), lst)\n    # Return the sorted list\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    n = len(heap)\n    while n > 1:\n        hq.heapify(heap, n)\n        heap.pop()\n        n -= 1\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max-heap from the list\n    hq.heapify(iterable)\n\n    # extract the maximum element from the heap\n    result = []\n    while hq.heappop(iterable):\n        result.append(iterable[0])\n\n    # return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max-heap from the input list\n    heap = [hq.heappop(iterable) for _ in range(len(iterable))]\n\n    # Build the output list by popping elements from the max-heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    # Create a min heap from the list\n    heap = hq.heapify(iterable)\n    # Sort the heap in ascending order\n    while heap:\n        heapq.heappop(heap)\n    # Extract the sorted list from the heap\n    return heapq.nsmallest(len(iterable), iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount: \n        print(\"There is no profit and no loss in the sale\") \n        return False \n    else: \n        print(\"There is a profit in the sale\") \n        return True "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if sale amount is less than or equal to actual cost\n    if sale_amount <= actual_cost:\n        return True\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is negative or loss is positive\n    if profit < 0 or loss > 0:\n        return True\n\n    # If both conditions are not met, return False\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return \"No Profit and No Loss\"\n    else:\n        return \"Profitable or Lossy\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    profit_loss = actual_cost - sale_amount\n    if profit_loss < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n    if sale_amount == actual_cost:\n        print(\"The given amount has no profit and no loss.\")\n    elif actual_cost - sale_amount <= 0:\n        print(\"The given amount has no profit.\")\n    else:\n        print(\"The given amount has no loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost > sale_amount:\n        return False\n    elif sale_amount > actual_cost:\n        return True\n    else:\n        return \"No profit or loss possible\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss. \n    If profit is greater than or equal to loss, it returns False, else True.\n    '''\n    if actual_cost - sale_amount >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost == sale_amount:\n        return \"Both profit and loss are zero!\"\n\n    if actual_cost > sale_amount:\n        return \"The sale amount is greater than the actual cost!\"\n\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    if profit == 0 and loss == 0:\n        return \"Both profit and loss are zero!\"\n\n    if profit == loss == 0:\n        return \"There is no profit or loss!\"\n\n    if profit > 0 and loss > 0:\n        return \"The sale amount has no profit and no loss!\"\n\n    if profit > 0 and loss < 0:\n        return \"The sale amount has a positive profit but no loss!\"\n\n    if profit < 0 and loss < 0:\n        return \"The sale amount has a negative profit but no loss!\"\n\n    if profit < 0 and loss > 0:\n        return \"The sale amount has a negative profit and loss!\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer.\n    \"\"\"\n    if v == 0:\n        return \"Cannot calculate wind chill index for zero wind velocity.\"\n    elif t == 0:\n        return \"Cannot calculate wind chill index for zero temperature.\"\n    elif t < 0:\n        return \"Temperature cannot be negative.\"\n    elif t > 30:\n        return \"Temperature cannot be above 30 degrees Celsius.\"\n    elif math.isnan(v) or math.isnan(t):\n        return \"Cannot calculate wind chill index for non-numeric values.\"\n    else:\n        fc = 1.8 * (t + 273.15)\n        f = v * (fc) / 1.602\n        return int(round(f))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = math.ceil(35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -273.15: # check for invalid temperatures\n        return \"Invalid temperature\"\n    elif v <= 0: # check for invalid wind velocities\n        return \"Invalid wind velocity\"\n    else:\n        # calculate the wind chill index\n        wci = math.floor((v * 1.15) / (t + 273.15))\n        \n        # check for wind chill index out of range\n        if wci < -1 or wci > 30:\n            return \"Wind chill index out of range\"\n        else:\n            # round wind chill index to the nearest integer\n            wci = math.ceil(wci)\n            \n            return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index using formula: W = 13.12 + 0.6215T - 11.37*v^0.16 + 0.3965*v^0.16^2\n    W = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*v**0.16**2\n    # Calculate the wind chill index rounded to the next integer using the round function\n    W = round(W)\n    return W"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -5 or t > 50:\n        return \"Invalid temperature input.\"\n    \n    wind_speed = v * 3.6\n    if wind_speed < 5:\n        wind_speed = 5\n    \n    wind_chill_value = 25.67 * (t + 273.15) / (wind_speed + 459.67)\n    \n    wind_chill_index = int(math.ceil(wind_chill_value))\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n    \n    # Calculate the heat index using the formula:\n    #   CH = 0.5 * (1.7 * T + 37.7 * ln(V) - 0.621 * T)\n    CH = (0.5 * (1.7 * k + 37.7 * math.log(v) - 0.621 * k))\n    \n    # Calculate the wind chill index using the formula:\n    #   WCI = 13.12 + 0.621 * T - 11.37 * ln(V) + 0.396 * T * ln(V)\n    WCI = 13.12 + 0.621 * k - 11.37 * math.log(v) + 0.396 * k * math.log(v)\n    \n    # Round the result to the nearest integer\n    result = round(WCI)\n    \n    return result"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in the wind velocity and temperature in celsius, and returns the wind chill index rounded to the nearest integer.\n    '''\n    # convert celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    # calculate wind chill\n    chill = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t_f) / (t_f + 243.12))\n    # round wind chill to nearest integer\n    wci = round(chill)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n\n    # Calculate wind chill index\n    wc = 13.12 + (0.6215 * v) - (11.37 * math.exp((17.625 * t) / (t + 243.5)))\n\n    # Round the wind chill index to the nearest integer\n    wc_rounded = round(wc)\n\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the nearest integer.\n\n    \"\"\"\n    if t <= 0 or v <= 0:\n        return None\n    else:\n        a = 17.27\n        b = 237.7\n        c = 17.62\n        e = 6.112\n        f = 35.75\n        g = 0.6215\n        h = 13.12\n        i = 0.0065\n        j = 5.67E-08\n        k = 237.7\n        l = 4096\n        m = 100\n        n = 2.5\n        o = 7.5\n        p = 0.0003\n        q = 0.0015\n        r = 0.16\n        s = 1.51\n        t = t - 273.15\n\n        # calculate the formula using the given values\n        wc = round(a + b * math.log(t/273.15 + 1) + c * v**0.16 + e * math.log(v) + f * (v - g) + h * math.log(v) + i * v - j * (v - g) + k * math.log(v - g) - l * (v - g)**2 + m * v**0.16 + n * math.log(v - g) + o * (v - g)**0.16 + p * v + q * (v - g) + r * (v - g)**0.16 + s * (v - g)**2 + 0.5 * (a + b * math.log(t/273.15 + 1) + c * v**0.16 + e * math.log(v) + f * (v - g) + h * math.log(v) + i * v - j * (v - g) + k * math.log(v - g) - l * (v - g)**2 + m * v**0.16 + n * math.log(v - g) + o * (v - g)**0.16 + p * v + q * (v - g) + r * (v - g)**0.16 + s * (v - g)**2) + j * (v - g)**2)\n\n        if wc < 15:\n            return wc\n        else:\n            return 0"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer\n    based on the given wind velocity in km/h and temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.005857 * t**2 + 0.00000128 * v**2\n    # Round the wind chill index to the nearest integer\n    wc_int = round(wc)\n    return wc_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    # Loop through each name in the list of names\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it and move on to the next name\n            continue\n        # Add the length of the name to the total length\n        total_length += len(name)\n    # Return the total length of the names after removing the lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Create a set of lowercase names\n    lower_names = {name.lower() for name in sample_names}\n    # Create an empty set to store the names that start with a lowercase letter\n    start_with_lower = set()\n    # Loop through the lowercase names and check if the first character is a lowercase letter\n    for name in lower_names:\n        if name[0].islower():\n            start_with_lower.add(name)\n    # Create a new list with the names that start with a lowercase letter removed\n    filtered_names = [name for name in sample_names if name not in start_with_lower]\n    # Sum the lengths of the names in the new list\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize sum to zero\n    sum_len = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Remove lowercase letters from the name\n        name = ''.join([char for char in name if char.isalpha()])\n        # Add the length of the name to the sum\n        sum_len += len(name)\n        \n    # Return the sum of the lengths of the names that start with a lowercase letter\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Define a list to store the names after removing the lowercase names\n    non_lowercase_names = []\n\n    # Loop through each name in the given list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, append it to the non_lowercase_names list\n            non_lowercase_names.append(name)\n\n    # Return the sum of the lengths of the names in non_lowercase_names\n    return sum([len(name) for name in non_lowercase_names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis using regex\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]+\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Return the items without the parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Use the pattern to find all parenthesis and replace them with an empty string\n    items = pattern.sub('', items)\n    \n    # Return the modified string with parenthesis removed\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    nonagonal = 1\n    nonagonal_next = 2\n    \n    # Check if the nth nonagonal number is less than 1\n    if n < 1:\n        return\n    \n    # Calculate the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        nonagonal_next = nonagonal * (i + 1)\n        # Add the next nonagonal number to the list\n        nonagonal += nonagonal_next\n    \n    return nonagonal_next"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First, we need to find the value of n\n    if n % 2 == 0:\n        n = (n // 2) * 2 + 1\n    else:\n        n = (n // 2) * 2\n    \n    # Now, we need to calculate the nth nonagonal number\n    nonagonal_number = n * (n + 1)\n    \n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initializing the first nonagonal number\n    nonagonal_num = 1\n    \n    # Looping from 1 to n-1\n    for i in range(1, n):\n        # Adding the previous two nonagonal numbers to get the current nonagonal number\n        nonagonal_num = (2*i - 1)**2 + nonagonal_num\n    \n    # Returning the nth nonagonal number\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes a positive integer n as input and returns True if the nth nonagonal number is possible to be formed using the given integers.\n    '''\n    # Initialize a list of integers to represent the nonagonal sequence\n    nonagonal_sequence = []\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current integer can be formed as the sum of two neighboring integers in the sequence\n        if i+1 in nonagonal_sequence:\n            return False\n        # Add the current integer to the nonagonal sequence\n        nonagonal_sequence.append(i)\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes a positive integer n and returns the nth nonagonal number.\n    A nonagonal number is a positive integer that is not a multiple of 15.\n    '''\n    return n * (n - 1) // 2\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The {n}th nonagonal number is: {is_nonagonal(n)}\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nth_nonagonal(start, end):\n        return start + (end - start) * n\n\n    for i in range(2, n+1):\n        print(nth_nonagonal(1, i))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*(n+1)) // 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize a counter variable\n    counter = 0\n    \n    # Initialize a variable to store the sum of nonagonal numbers\n    nonagonal_sum = 0\n    \n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Add the current row to the nonagonal sum\n        nonagonal_sum += i\n        \n        # Check if the sum is greater than the sum of squares of nonagonal numbers\n        if i == 1 or nonagonal_sum >= i*i:\n            # Increment the counter if the sum is greater than the sum of squares of nonagonal numbers\n            counter += 1\n        \n        # Reset the nonagonal sum to 0 after each iteration\n        nonagonal_sum = 0\n    \n    # Return the counter value\n    return counter"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regex pattern for matching wordz except at the start and end of the word\n    pattern = r'\\b[A-Za-z]+z[A-Za-z]+\\b'\n\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)[^a-zA-Z]*(?=[a-zA-Z])\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the text\n    wordz_middle = False\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z': # check if the word starts and ends with 'z'\n            wordz_middle = True\n        if wordz_middle:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphabetic characters and split into words\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n\n    # Iterate through each word and check if it contains a 'z' at the middle\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n\n    # If no 'z' was found, return False\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define a regular expression pattern to match 'z' at the start or end of a word\n    pattern = r'([^\\s]*[zZ])(\\s|$)'\n    # use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n    # if the match is found, return True, else return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z' except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-z])(z)[a-z]+(?![a-z])'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to find all words in the text\n    word_pattern = r'\\b\\w+\\b'\n    words = re.findall(word_pattern, text)\n    \n    # Check each word for 'z' except at the start and end of the word\n    for word in words:\n        if 'z' not in word and word.startswith('z') and word.endswith('z'):\n            return True\n    \n    # If no 'z' were found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, 0, -1):\n        input[i], input[n-i] = input[n-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    reverse_array = []\n    # reverse the array upto the kth element\n    for i in range(0, k):\n        reverse_array.append(input[i])\n    # reverse the rest of the array\n    for i in range(k, n):\n        reverse_array.append(input[i])\n    # reverse the reverse_array\n    reverse_array = reverse_array[::-1]\n    # return the reversed array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[len(input)-1-i]\n        input[len(input)-1-i] = temp\n\n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Base case: if k is equal to the length of the input array\n    if k == len(input):\n        return input\n    else:\n        # Swap the first and kth elements of the array\n        input[0], input[k] = input[k], input[0]\n        # Recursively reverse the array upto position k+1\n        return reverse_Array_Upto_K(input, k+1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the first element to the k-th element\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the input array\n    input = input[::-1][:k] \n    # Reverse the remaining elements of the array\n    input = input[::-1] \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses the array from index 0 to a given index k\n    \"\"\"\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Finding the length of the array\n    n = len(input)\n    # Initializing the pointer variables\n    i = 0\n    j = k-1\n    # Looping through the array till k is reached\n    while j < n:\n        # Swapping the elements at the pointers\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n        # Incrementing the pointers\n        i += 1\n        j -= 1\n    # Returning the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array 'input' and a position 'k' as input and returns the reversed array up to that position.\n    '''\n    \n    # Create a copy of the input array to avoid modifying the original\n    output = input.copy()\n    \n    # Use the reverse() method to reverse the array up to the given position\n    output[:k] = output[:k][::-1]\n    \n    # Return the reversed array up to the given position\n    return output"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict = dict(test_dict)\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary to store the updated values\n    update_dict = {}\n    # Loop through the keys in the test dictionary\n    for key in test_dict:\n        # Check if the key already exists in the update dictionary\n        if key in update_dict:\n            # If it does, concatenate the new value to the existing value\n            update_dict[key] = str(test_dict[key]) + ','+ str(update_dict[key])\n        else:\n            # If it doesn't, set the value to a string representation of the new value\n            update_dict[key] = str(test_dict[key])\n    # Loop through the values in the tuple\n    for value in test_tup:\n        # Check if the value is a dictionary\n        if isinstance(value, dict):\n            # If it is, loop through the keys in the dictionary\n            for key in value:\n                # Check if the key already exists in the update dictionary\n                if key in update_dict:\n                    # If it does, concatenate the new value to the existing value\n                    update_dict[key] = str(value[key]) + ','+ str(update_dict[key])\n                else:\n                    # If it doesn't, set the value to a string representation of the new value\n                    update_dict[key] = str(value[key])\n        # Check if the value is a tuple\n        elif isinstance(value, tuple):\n            # If it is, loop through the values in the tuple recursively\n            for item in value:\n                # Check if the item is a dictionary\n                if isinstance(item, dict):\n                    # If it is, loop through the keys in the dictionary\n                    for sub_key in item:\n                        # Check if the key already exists in the update dictionary\n                        if sub_key in update_dict:\n                            # If it does, concatenate the new value to the existing value\n                            update_dict[sub_key] = str(item[sub_key]) + ','+ str(update_dict[sub_key])\n                        else:\n                            # If it doesn't, set the value to a string representation of the new value\n                            update_dict[sub_key] = str(item[sub_key])\n                # Check if the item is a tuple\n                elif isinstance(item, tuple):\n                    # If it is, loop through the values in the tuple recursively\n                    for sub_item in item:\n                        # Check if the sub_item is a dictionary\n                        if isinstance(sub_item, dict):\n                            # If it is, loop through the keys in the dictionary\n                            for sub_sub_key in sub_item:\n                                # Check if the key already exists in the update dictionary\n                                if sub_sub_key in update_dict:\n                                    # If it does, concatenate the new value to the existing value\n                                    update_dict[sub_sub_key] = str(sub_item[sub_sub_key]) + ','+ str(update_dict[sub_sub_key])\n                                else:\n                                    # If it doesn't, set the value to a string representation of the new value\n                                    update_dict[sub_sub_key] = str(sub_item[sub_sub_key])\n                else:\n                    # If it's not a dictionary or a tuple, just add it to the update dictionary\n                    update_dict[value] = value\n    # Create a new tuple with the updated values\n    new_tup = ()\n    # Loop through the keys in the update dictionary and add each value to the new tuple\n    for key in update_dict:\n        new_tup += (update_dict[key],)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with keys and values from the original dictionary\n    new_dict = dict(test_dict)\n    # add the new dictionary to the tuple\n    new_tup = test_tup + (new_dict,)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_tup[1], test_tup[2], test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict\n    new_tup = test_tup\n    new_tup = new_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Copy the tuple to avoid modifying it\n    new_tuple = tuple(test_tup)\n    # Add the dictionary to the new tuple\n    new_tuple += (test_dict,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Create a copy of the cost matrix to perform operations on\n    cost = [[cost[i][j] for i in range(N)] for j in range(N)]\n\n    # Calculate the total cost of each path\n    for i in range(N):\n        cost[0][i] += i\n        cost[i][N-1] += i\n        for j in range(1, N-1):\n            cost[j][N-1] += i\n            cost[j][i] += j\n\n    # Initialize the maximum path sum and the corresponding index\n    max_sum = float('-inf')\n    path_index = (0, 0)\n\n    # Calculate the maximum average over all paths\n    for i in range(N):\n        for j in range(N):\n            # Skip the path with the top-left cell\n            if i == 0 and j == 0:\n                continue\n\n            # Calculate the cost of the path\n            path_cost = cost[i][j] + min(i, j)\n\n            # Update the maximum path sum and the corresponding index\n            if path_cost > max_sum:\n                max_sum = path_cost\n                path_index = (i, j)\n\n    # Calculate the average of the maximum path sum\n    if max_sum!= float('-inf'):\n        return (max_sum + sum(cost[i][j] for i in range(N) for j in range(N)) - 2 * cost[path_index[0]][path_index[1]]) / (N * N - 1)\n    else:\n        return 0"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    A = [[0] * N for _ in range(N)]\n    \n    # Base case: no adjacent cells -> cost as path with only one cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                A[i][j] = cost[i][j]\n            elif i == 0:\n                A[i][j] = max(A[i][j], cost[i][j] + A[i][j-1])\n            elif j == 0:\n                A[i][j] = max(A[i][j], cost[i][j] + A[i-1][j])\n            else:\n                A[i][j] = max(A[i][j], cost[i][j] + max(A[i-1][j], A[i][j-1]))\n    \n    return A[N-1][N-1] / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dp(i, j):\n        if i >= len(cost) or j >= len(cost[0]) or i < 0 or j < 0:\n            return 0\n        \n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            return cost[i][j]\n        \n        return max(dp(i+1, j), dp(i, j+1)) + cost[i][j]\n        \n    n = len(cost)\n    m = len(cost[0])\n    max_avg = 0\n    \n    for i in range(n):\n        for j in range(m):\n            max_avg = max(max_avg, dp(i, j))\n            \n    return max_avg / (n * m)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    \n    max_sum = float('-inf')\n    dp = [[0]*N for _ in range(N)]\n    \n    # Calculate the total sum and the number of cells visited for each cell\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        max_sum = max(max_sum, dp[0][i])\n    \n    for i in range(1, N):\n        dp[i][0] = cost[i][0]\n        max_sum = max(max_sum, dp[i][0])\n        \n    # Calculate the maximum average for each cell\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            max_sum = max(max_sum, dp[i][j])\n    \n    return max_sum/(N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Get dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables\n    max_avg = float('-inf')\n    current_avg = 0\n    current_path = []\n\n    # Iterate through the matrix\n    for i in range(N):\n        for j in range(N):\n\n            # Check if the cell is visited\n            if (i, j) in current_path:\n                continue\n\n            # Compute the cost of the current cell\n            current_cost = cost[i][j]\n\n            # Compute the total cost and number of cells visited\n            total_cost = sum(current_path) + current_cost\n            num_cells = len(current_path) + 1\n\n            # Update the maximum average and the current path\n            if num_cells == 1:\n                max_avg = max(max_avg, current_cost)\n                current_path = [(i, j)]\n            else:\n                current_avg = total_cost / num_cells\n                max_avg = max(max_avg, current_avg)\n\n            # Add the current cell to the current path\n            current_path.append((i, j))\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    def calculate_path_average(path):\n        total_cost = 0\n        visited_cells = set()\n        for cell in path:\n            total_cost += cost[cell[0]][cell[1]]\n            visited_cells.add(cell)\n        return total_cost / len(visited_cells)\n\n    max_average = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N - 1 and j == N - 1:\n                # The bottom right cell is always part of a path with the maximum average.\n                continue\n            path = [(i, j)]\n            while True:\n                # Move right or down\n                if i + 1 < N and (i + 1, j) not in visited_cells:\n                    path.append((i + 1, j))\n                    i += 1\n                elif j + 1 < N and (i, j + 1) not in visited_cells:\n                    path.append((i, j + 1))\n                    j += 1\n                else:\n                    # Reach the bottom right cell or out of bounds.\n                    break\n            average = calculate_path_average(path)\n            if average > max_average:\n                max_average = average\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_path_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_path_avg = cost[i][j]\n            else:\n                max_path_avg = max(max_path_avg, cost[i][j] + min(cost[i-1][j], cost[i][j-1]))\n    return max_path_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    \n    # Initialize variables to keep track of maximum average and current average\n    max_avg = 0\n    current_avg = 0\n    \n    # Initialize variables to keep track of total cost and number of cells visited\n    total_cost = 0\n    num_cells = 0\n    \n    # Initialize variables to keep track of current row and column indices\n    row = 0\n    col = 0\n    \n    # Define helper functions to move right or down in the matrix\n    def move_right(cost, row, col):\n        return (col+1) % N if col < N-1 else None\n    \n    def move_down(cost, row, col):\n        return (row+1) % N if row < N-1 else None\n    \n    # Define helper function to check if a given cell is valid and if it's part of the current path\n    def is_valid_cell(cost, row, col):\n        return (0 <= row < N and 0 <= col < N and cost[row][col]!= float('inf') and (row == N-1 or col == N-1))\n    \n    # Define recursive function to find maximum average of path in the given matrix\n    def find_max_avg(cost, row, col, current_avg):\n        # Check if current cell is valid and part of the current path\n        if not is_valid_cell(cost, row, col):\n            return current_avg\n        \n        # Get cost of the cell\n        current_cost = cost[row][col]\n        \n        # Move to right or down\n        if cost[row][col] == cost[row][col+1]:\n            # Move right\n            new_col = move_right(cost, row, col)\n            new_avg = find_max_avg(cost, row, new_col, current_avg)\n        else:\n            # Move down\n            new_row = move_down(cost, row, col)\n            new_avg = find_max_avg(cost, new_row, col, current_avg)\n        \n        # Update total cost and number of cells visited\n        total_cost += current_cost\n        num_cells += 1\n        \n        # Update maximum average if necessary\n        if new_avg > max_avg:\n            max_avg = new_avg\n        \n        return max_avg\n    \n    # Call the helper function to find maximum average of path in the given matrix\n    max_avg = find_max_avg(cost, row, col, current_avg)\n    \n    # Calculate and return the maximum average\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = 0\n    \n    for i in range(N):\n        row_sum = 0\n        for j in range(N):\n            if j == N-1: # Last column\n                if i == N-1: # Last row\n                    row_sum += cost[i][j]\n                    max_avg = max(max_avg, row_sum/4) # To include the last row and last column\n                    continue\n                else: # Not last row\n                    row_sum += cost[i][j]\n                    max_avg = max(max_avg, row_sum/3) # To exclude the last row\n                    continue\n            if i == N-1: # Last row\n                row_sum += cost[i][j]\n                max_avg = max(max_avg, row_sum/2) # To exclude the last column\n                continue\n            \n            row_sum += cost[i][j]\n            max_avg = max(max_avg, row_sum/2) # To exclude the last cell\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    max_path = []\n    \n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, dp[0][i])\n        max_path = [0]\n        \n    for i in range(1, N):\n        dp[i][0] = dp[0][0]\n        max_avg = max(max_avg, dp[i][0])\n        max_path = [0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n            if dp[i][j] == dp[i-1][j]:\n                max_path.append(0)\n            elif dp[i][j] == dp[i][j-1]:\n                max_path.append(1)\n    \n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    \n    # iterate through the dictionary\n    for name, (height, weight) in students.items():\n        # check if the height and weight are greater than or equal to the minimum height and weight\n        if height >= h and weight >= w:\n            # add the student to the filtered_students list\n            filtered_students.append((name, height, weight))\n    \n    # return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: value for name, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Using the \"zip\" function to iterate over the lists and compare each element\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]), nums2[i:]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(str(base)[i])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize an empty string to store the sum\n    sum_str = ''\n    # Iterate through the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the power\n        power_sum = digit_int ** power\n        # Convert the integer to a string\n        power_sum_str = str(power_sum)\n        # Add the power_sum_str to the sum_str\n        sum_str += power_sum_str\n    # Convert the sum_str to an integer and return the result\n    return int(sum_str)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate through each digit of the base and add the corresponding power to the total_sum\n    while base > 0:\n        digit = base % 10  # Get the last digit of the base\n        total_sum += digit ** power  # Add the power to the total_sum for this digit\n        base //= 10  # Remove the last digit of the base\n    \n    # Return the total_sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes two arguments: base and power. \n    It calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        base //= 10\n        power //= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Convert the base to a string and loop through each digit\n    for digit in str(base):\n        # Calculate the sum of the digit to the power of the specified power\n        digit_sum = sum(int(digit) ** power)\n        # Add the sum to the total sum\n        total_sum += digit_sum\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to 0\n    sum_digits = 0\n    \n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit) ** power\n    \n    # Return the sum\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize variables\n    sum = 0\n\n    # Iterate through each digit of the base and multiply it by the power to the power of the current index\n    for digit in str(base):\n        sum += int(digit) ** power\n\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    \n    # initialize a variable to store the sum\n    sum = 0\n    \n    # loop through the string and calculate the sum of digits raised to the power\n    for digit in base_str:\n        sum += int(digit) ** power\n        \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to hold the sum\n    sum_digits = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Calculate the sum to the specified power\n    sum_to_power = sum_digits ** power\n    # Return the sum\n    return sum_to_power"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    # remove any non-word characters\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    # split the string into words\n    words = text.split()\n    # initialize the output list\n    output = []\n    # loop over each word\n    for word in words:\n        # check if the word starts with a quotation mark\n        if word[0] in ['\"', \"'\"]:\n            # extract the word inside the quotation marks\n            inside_quotation = word[1:-1]\n            # if there are multiple words inside the quotation marks, join them\n            while inside_quotation.count(' '):\n                inside_quotation = inside_quotation.replace('  ','')\n            # append the extracted word to the output list\n            output.append(inside_quotation)\n    return output"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    match = pattern.search(text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"No quotations found\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_quotation(text):\n    pattern = r'\".*?\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to match the quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Using the re.findall() method to extract all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Using a loop to extract the values between the quotation marks\n    result = []\n    for match in matches:\n        # Using the re.sub() method to remove any leading or trailing white spaces\n        value = re.sub(r'\\s+', '', match).strip('\"')\n        result.append(value)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use re.findall() to find all occurrences of quotation marks \" \" in the string\n    matches = re.findall('\"([^\"]*)\"', text1)\n    # create a list to store the extracted values\n    values = []\n    # iterate over all matches and extract the values between quotation marks \" \"\n    for match in matches:\n        # remove any leading or trailing whitespace from the extracted value\n        value = match.strip()\n        # add the extracted value to the list\n        values.append(value)\n    # return the list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4], test_tup[4] * test_tup[5], test_tup[5] * test_tup[6], test_tup[6] * test_tup[7], test_tup[7] * test_tup[8], test_tup[8] * test_tup[9])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1],) * (N - 2) + (test_tup[N-1] * test_tup[N],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i == N-1:\n            result_tup = (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) // 2  # calculate length of result tuple\n    result_tup = ()  # initialize empty result tuple\n    for i in range(N):  # iterate over elements of input tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)  # add result to tuple\n    return result_tup  # return the result tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [None] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0], test_tup[1])\n    for i in range(2, N+1):\n        result_tup = (result_tup[1], result_tup[0] * result_tup[1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the output tuple\n    N = len(test_tup) - 1\n    \n    # Create an empty output tuple\n    output_tup = ()\n    \n    # Loop through the input tuple\n    for i in range(N):\n        # Calculate the product of the current element and the next element\n        product = test_tup[i] * test_tup[i+1]\n        # Add the product to the output tuple\n        output_tup += (product,)\n    \n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(t_1 * t_2)\n        t_1 = t_2\n        t_2 = test_tup[i+2]\n    result.append(t_1 * t_2)\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if the lists are of the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists are not of the same length\")\n\n    # iterate through the lists and add the elements\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the result\n    result = []\n    # iterate through each element in the first list\n    for i in range(len(lst1)):\n        # add the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def remove_consecutive_duplicates(nums):\n        return list(map(list, groupby(sorted(nums))))\n\n    return remove_consecutive_duplicates(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    num_groups = groupby(nums)\n    filtered_groups = (g for g in num_groups if len(list(g)) > 1)\n    return list(filtered_groups)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list into lists of consecutive duplicates\n    grouped = [list(g) for k, g in groupby(nums)]\n    # remove empty groups and merge consecutive duplicates into a single list\n    return [a for b in grouped for a in b]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates using itertools\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(nums):\n        if len(list(group)) == 1:\n            result.extend(group)\n        else:\n            result.append(next(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by the next item in the list\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1])\n    \n    # iterate over the grouped list and check if the next item is equal to the current item\n    new_nums = []\n    for group in grouped_nums:\n        if group[0] + 1 == group[1][0] or group[0] + 2 == group[1][0]:\n            # if the next item is equal to the current item or the next two items, skip it\n            continue\n        new_nums.append(group[1][0])\n    \n    return new_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    The formula for the lateral surface area of a cone is:\n    lateral surface area = pi * r^2 * h\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S_l = 0.5*r*h\n    return S_l"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h/3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * (r**2 + h**2)\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lsa = 2*math.pi*r**2*h\n    return lsa"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (2*r*h) + (2*r*r)\n    return math.pi*s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r**2 + h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the lateral surface area using the formula:\n    #s = (1/2) * pi * r^2\n    lateral_surface_area = 0.5 * math.pi * r**2\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[^\\w\\s]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match any special character\n    pattern = r'[\\s,\\.]+'\n    \n    # Replace all occurrences of special characters with a colon\n    text = re.sub(pattern, ':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[. ]+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char_pattern = r'[,.]'\n    return re.sub(special_char_pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match the special characters\n    pattern = r'[.,!?;:]'\n    \n    # Use the pattern to find all occurrences of the special characters\n    matches = re.findall(pattern, text)\n    \n    # Replace all occurrences of the special characters with a colon\n    for match in matches:\n        text = text.replace(match, ':')\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # Remove special characters\n    text = re.sub(r'\\s+', ':', text) # Replace multiple spaces with a single colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expressions to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|[,.]\\s+','',text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # while left pointer is less than or equal to right pointer\n    while left <= right:\n        # find the middle index\n        mid = (left + right) // 2\n\n        # if middle element is equal to x\n        if A[mid] == x:\n            # check if the next element is also x\n            if mid < right and A[mid+1] == x:\n                # return the index of the first occurrence of x\n                return mid\n            else:\n                # if next element is not x, return the index of the middle element\n                return mid\n        # if middle element is less than x\n        elif A[mid] < x:\n            # update left pointer to mid + 1\n            left = mid + 1\n        # if middle element is greater than x\n        else:\n            # update right pointer to mid - 1\n            right = mid - 1\n\n    # if no occurrence of x is found\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            \n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the first occurrence of x in A using binary search\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Check if x is the first occurrence of A\n    if right >= 0 and A[right] == x:\n        return right\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the first index where the element x appears\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # If x is not found, return -1\n    if i == len(A) or A[i]!= x:\n        return -1\n    # Find the first index where x is greater than or equal to the first occurrence of x\n    j = i + 1\n    while j < len(A) and A[j] == x:\n        j += 1\n    return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1 # x not found in array\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to -1\n    first_occurrence = -1\n    # Loop through the array and check if the current element is equal to the target number\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the current element is equal to the target number, update the first occurrence index\n            first_occurrence = i\n            # Break out of the loop once we find the first occurrence\n            break\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Find the first index i such that A[i] > x\n    i = 0\n    while i < len(A) and A[i] <= x:\n        i += 1\n    \n    # If x is not found, return -1\n    if i == len(A) or A[i]!= x:\n        return -1\n    \n    # Find the first index j such that A[j] == x\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    \n    return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the left and right pointers\n    left, right = 0, len(A) - 1\n    \n    # initialize the first occurrence index as -1\n    first_occurrence_index = -1\n    \n    # loop while left pointer is less than right pointer\n    while left <= right:\n        # find the middle index\n        mid = left + (right - left) // 2\n        \n        # if the middle element is equal to x, then update the first occurrence index and move the right pointer to find the next occurrence\n        if A[mid] == x:\n            first_occurrence_index = mid\n            right = mid - 1\n        # if the middle element is greater than x, then search the left half of the array\n        elif A[mid] < x:\n            left = mid + 1\n        # if the middle element is less than x, then search the right half of the array\n        else:\n            right = mid - 1\n    \n    # return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate the product of the first element and the subarray with length 1\n    prod_1 = arr[0] * arr[1]\n    # Initialize the sum of products of subarrays to 0\n    subarray_prod_sum = 0\n    # Initialize a list to store the products of subarrays with length i\n    subarray_prod = [0] * (n + 1)\n    # Calculate the product of the first i elements and the subarray with length i\n    for i in range(1, n + 1):\n        subarray_prod[i] = arr[i] * subarray_prod[i - 1]\n    # Calculate the sum of products of subarrays with length i\n    for i in range(n, 0, -1):\n        subarray_prod_sum += subarray_prod[i] * arr[i - 1]\n    # Return the sum of products of subarrays\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[j] += dp[i] * arr[j - 1]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (2 * n + 1)\n    \n    for i in range(n):\n        dp[i+n] = arr[i]\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            dp[j] = dp[j] + dp[j-i-1] * arr[i]\n    \n    return sum(dp[n:])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # calculate cumulative sum of array\n    csum = [0] * (n + 1)\n    csum[0] = 0\n    for i in range(1, n + 1):\n        csum[i] = csum[i - 1] + arr[i - 1]\n    \n    # initialize sum of products and variables\n    psum = 0\n    p1 = 1\n    p2 = 1\n    \n    # loop through all sublists\n    for i in range(1, n):\n        # update p1 and p2\n        p1 *= arr[i]\n        p2 *= csum[n] - arr[i]\n        # update psum\n        psum += p1 / p2\n        \n    return psum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_products = 0\n    for i in range(1, n):\n        for j in range(i):\n            sum_products += arr[i] * arr[j]\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Find the length of the array\n    n = len(arr)\n    \n    # Create a 2D array to store the sublist products\n    sublist_prod = [[0]*(n+1) for _ in range(n+1)]\n    \n    # Initialize the first row and column\n    for i in range(n+1):\n        sublist_prod[0][i] = arr[0]*i\n    \n    # Initialize the first row and column\n    for i in range(n):\n        for j in range(n-i):\n            sublist_prod[j+1][j+i+1] = arr[j]*arr[j+1]*sublist_prod[j][i]\n    \n    # Calculate the sum of products of all possible sublists\n    sublist_sum = 0\n    for i in range(n+1):\n        sublist_sum += sublist_prod[0][i]\n    \n    return sublist_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    \n    # find the length of the input array\n    n = len(arr)\n    \n    # create an empty dictionary to store the products of subarrays\n    subarray_products = {}\n    \n    # loop through all possible sublists of the input array\n    for i in range(n):\n        for j in range(i, n):\n            # calculate the product of the subarray\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            \n            # add the product of the subarray to the dictionary\n            if (i, j) not in subarray_products:\n                subarray_products[(i, j)] = product\n            else:\n                subarray_products[(i, j)] += product\n    \n    # find the sum of products of all subarrays\n    subarray_sum = sum(subarray_products.values())\n    \n    return subarray_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    MOD = 1000000007  # To handle large numbers\n\n    # Create a matrix with all possible sublists\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = arr[i] * arr[j]\n\n    # Initialize variables for prefix sums\n    prefix_sum = [0 for i in range(n)]\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    # Calculate the sum of products of all possible sublists\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if k - j == i - i:\n                    total_sum += dp[i][j] * dp[j][k] * dp[k][n-1]\n\n    # Return the sum of products\n    return total_sum % MOD"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_sum = [0] * n\n    for i in range(n):\n        sub_sum[i] = sum(arr[:i+1])\n    max_sum = float('-inf')\n    for k in range(1, n):\n        for i in range(n-k):\n            j = i + k\n            temp = sub_sum[i] * sub_sum[j]\n            max_sum = max(max_sum, temp)\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize sum of products and prefix sum array\n    prefix_sum = [0] * len(arr)\n    prefix_sum[0] = arr[0]\n    sum_of_products = 0\n\n    # Calculate prefix sum array\n    for i in range(1, len(arr)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    # Calculate sum of products of all possible sublists\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 > 1:\n                sum_of_products += prefix_sum[j] - 2*prefix_sum[i]\n            else:\n                sum_of_products += 0\n\n    return sum_of_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the bit positions of the first and last bits\n    first_bit_pos = bin(n).rfind('1') + 1\n    last_bit_pos = bin(n).find('1')\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (1 << (first_bit_pos - 1)) ^ (1 << (last_bit_pos + 1))\n    \n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the first and last bit positions in the binary representation of n\n    first_bit_position = bin(n).find('1')\n    last_bit_position = bin(n).rfind('1')\n\n    # Toggle the first and last bits only\n    first_bit = bin(n ^ (1 << first_bit_position))[2:]\n    last_bit = bin(n ^ (1 << last_bit_position))[2:]\n\n    # Concatenate the first and last bits to form the final number\n    final_number = first_bit + last_bit\n\n    # Convert the binary representation of the final number to integer\n    final_number = int(final_number, 2)\n\n    return final_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle the middle two bits of a number while leaving the first and last bits unchanged.\n\n    :param n: The number to toggle the middle bits of.\n    :type n: int\n    :return: The new number with the middle bits toggled.\n    :rtype: int\n    \"\"\"\n    first_bit_mask = 1 << (n.bit_length() - 2)\n    last_bit_mask = 1 << (n.bit_length() - 1)\n    middle_bits_mask = ~(first_bit_mask | last_bit_mask)\n    new_middle_bits = middle_bits_mask ^ n\n    return n ^ new_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # initialize the first and last bit of the number\n    first_bit = n & 1  \n    last_bit = n >> 15  \n    \n    # toggle all the bits except the first and last bits\n    for i in range(15):  \n        if i == 0 or i == 14:  \n            continue  \n        n = n ^ (1 << i)  \n    \n    # combine the first and last bits of the number\n    n = n | (first_bit << 15) | (last_bit << 14)  \n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n    # Get the length of the binary string\n    n_len = len(bin_str)\n    # Calculate the indices of the middle bits\n    mid_bit_idx = n_len // 2\n    # Calculate the mask to toggle the middle bits\n    mask = (1 << n_len) - 1\n    # Toggle the middle bits\n    bin_str = bin_str[:mid_bit_idx] + ((bin_str[mid_bit_idx] ^ 1) << mid_bit_idx) + bin_str[mid_bit_idx+1:]\n    # Convert the binary string back to integer\n    n = int(bin_str, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits of the number\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Toggle the middle bits of the number\n    middle_bits = (n ^ (first_bit | last_bit)) & 1\n\n    # Combine the first and last bits and the middle bits to get the final result\n    return (n & ~(first_bit | last_bit)) | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    first_bit = n & 1   # get the first bit (0 or 1)\n    last_bit = n >> 31   # get the last bit (0 or 1)\n    # toggle the middle bits using XOR operator\n    middle_bits = ~(first_bit | last_bit)\n    # combine the first and middle bits\n    n = n ^ middle_bits\n    # combine the middle and last bits\n    n = n ^ last_bit\n    # combine the first and last bits\n    n = n ^ first_bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # find the first and last bit positions\n    first_bit = 0\n    while n & 1 == 0:\n        first_bit += 1\n        n >>= 1\n    last_bit = 0\n    while n:\n        last_bit += 1\n        n >>= 1\n    # toggle the middle bits\n    middle_bits = 0\n    for i in range(first_bit + 1, last_bit - 1):\n        middle_bits |= (n >> i) & 1\n    # set the first and last bits to 1\n    n |= (1 << first_bit) | (1 << last_bit)\n    # set the middle bits to the toggled value\n    n &= ~(middle_bits)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the number to binary\n    binary = bin(n)[2:]\n    # split the binary string into two parts\n    first_part = binary[:binary.index('1')-1]\n    second_part = binary[binary.index('1')+1:]\n    # toggle all the bits except the first and the last bit\n    toggled_second_part = [int(bit) ^ 1 for bit in second_part]\n    # join the two parts together and convert back to decimal\n    result = int(first_part + ''.join(str(bit) for bit in toggled_second_part), 2)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the number of bits in the input number\n    num_bits = len(bin(n)[2:])\n\n    # Calculate the number of bits to toggle\n    num_to_toggle = num_bits - 2\n\n    # Initialize the toggled number with the first two bits\n    toggled_num = n & ((1 << 2) - 1)\n\n    # Toggle the middle bits of the number\n    for i in range(num_to_toggle):\n        toggled_num ^= (1 << i)\n\n    # Return the toggled number\n    return toggled_num"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = len(a)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i!= 0 and a[i-1] == x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the index of the first element greater than or equal to x.\n    index = bisect.bisect_left(a, x)\n\n    # If the value is not in the list, return the insertion index.\n    if index == len(a) or a[index]!= x:\n        return index\n\n    # If the value is equal to the element at index, return the index.\n    if index > 0 and a[index - 1] == x:\n        return index - 1\n\n    # Otherwise, search for the left element with value greater than x.\n    i = index - 1\n    while i >= 0 and a[i] == x:\n        i -= 1\n    return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i-1] > x:\n        return i - 1\n    else:\n        return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    This function checks whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.search(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 0\n\n    # Recursive case\n    else:\n        return n * (1/2) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * (1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return None\n    \n    # Find the maximum value of n digits\n    max_value = 10 ** n\n    \n    # Initialize the index variable to 0\n    index = 0\n    \n    # Loop through each digit and find the index of the smallest triangular number with that digit\n    for i in range(1, max_value+1):\n        if i <= n:\n            triangular_num = i * (i+1) / 2\n            if triangular_num < max_value:\n                index = i\n                break\n                \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "This solution uses the math library to calculate the square root of the triangular number t_n. It then iterates through the list of integers from 1 to the square root of t_n, checking if each integer is a valid triangular number with n digits. If it is, the function returns the index i of the smallest triangular number with n digits. Otherwise, it continues to the next integer in the list."
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Initialize variables\n    i = 1\n    triangular_num = 1\n    \n    # Calculate the index of smallest triangular number with n digits\n    while math.ceil(math.log10(triangular_num)) < n:\n        i += 1\n        triangular_num = i * (i+1) // 2\n        \n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    def triangular_number(n):\n        return int(''.join(str(i) for i in range(1, n + 1)))\n\n    def smallest_triangular(n):\n        def helper(start, end):\n            if start >= end:\n                return start\n            else:\n                mid = (start + end) // 2\n                if triangular_number(mid) < triangular_number(n):\n                    return helper(start, mid - 1)\n                else:\n                    return helper(mid + 1, end)\n\n        return helper(1, n)\n\n    return smallest_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits.\n    '''\n    # Initialize the smallest triangular number to the least possible value\n    smallest_num = 1\n    # Initialize the index of the smallest triangular number to 0\n    smallest_index = 0\n\n    # Iterate through all possible triangular numbers with n digits\n    for i in range(1, int(math.pow(10, n)) + 1):\n        # Check if the triangular number is greater than the current smallest number\n        if i > smallest_num:\n            # If it is, update the smallest number and its index\n            smallest_num = i\n            smallest_index = i - smallest_num + 1\n\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n):\n    # Initialize an empty list to store the triangular numbers\n    triangular_numbers = []\n\n    # Initialize the current index of smallest triangular number to 0\n    current_index = 0\n\n    # Calculate the first n triangular numbers\n    for i in range(1, n + 1):\n        triangular_numbers.append(math.factorial(i) / (math.factorial(i - 1) * math.factorial(n - i + 1)))\n\n    # Find the index of the smallest triangular number\n    for i in range(n - 1, -1, -1):\n        if triangular_numbers[i] < triangular_numbers[current_index]:\n            current_index = i\n\n    # Return the index of the smallest triangular number\n    return current_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    triangular_num = 1\n    \n    while len(str(triangular_num)) < n:\n        triangular_num += 1\n        index += 1\n        \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Find the sum of the first n natural numbers\n    sum_of_natural = (n*(n+1))/2\n    # Find the square root of the sum of natural numbers\n    square_root_sum_of_natural = int(math.sqrt(sum_of_natural))\n    # Check if the square root of the sum of natural numbers is an integer\n    while square_root_sum_of_natural**2 < sum_of_natural:\n        square_root_sum_of_natural += 1\n    # Find the index of the first triangular number with n digits\n    for i in range(square_root_sum_of_natural + 1):\n        triangular_number = i*(i+1)/2\n        if len(str(triangular_number)) == n:\n            return i\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    min_triangular = math.factorial(n)\n    min_triangular = min_triangular // math.factorial(n - 1)\n    min_triangular = math.ceil(math.log10(min_triangular) + 1)\n    \n    return min_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        triangular_num = int(math.pow(10, n-1)) * 2\n        for i in range(n-1):\n            triangular_num += math.pow(10, i)\n        return int(math.log10(triangular_num) + 1)\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    dictionary = {}\n\n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_data = {}\n\n    # iterate over the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        dict_data[test_tup[i]] = test_tup[i+1]\n\n    # return the dictionary\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    key = 0\n    value = None\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n        else:\n            if value is not None:\n                result_dict[key] = value\n            value = test_tup[i]\n    if value is not None:\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    new_dict = {}\n\n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # check if the index is odd or even\n        if i % 2 == 0:\n            # if it's even, add the current element as a key and the next element as a value\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            # if it's odd, add the current element as a value and the next element as a key\n            new_dict[test_tup[i+1]] = test_tup[i]\n\n    # return the new dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict[key] = value\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # convert the string to lowercase\n    s = s.lower()\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through the string and check if all the characters are the same\n    for i in range(len(s)):\n        if s[i]!= first_char:\n            return False\n\n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # take the first character of the string\n    first_char = s[0]\n    # iterate through the string\n    for char in s:\n        # if any two characters are not same, return False\n        if char!= first_char:\n            return False\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string into a list of characters\n    lst = list(s)\n    # Check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    # Check if all the characters are equal\n    elif lst[0] == lst[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) if s[0] == s[-1] else False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one side of a tetrahedron as input and returns its area.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # use the formula for the area of a tetrahedron\n    area = 0.5 * side**2 * math.sin(math.pi/3)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2*math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Use Heron's formula to calculate the area of a right triangle.\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = 0.5 * s * (s - side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(s * (s - 1) * (s - 2) * (s - 3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side*side*side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side**2\n    area = math.sqrt(s * (s - side) * (s - 2*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n    # Check if m is greater than n or not\n    if m > n:\n        # If m is greater than n, then rotate by m % n items\n        m = m % n\n    # Reverse the first m items of the list\n    for i in range(m):\n        temp = list[i]\n        list[i] = list[n-1-i]\n        list[n-1-i] = temp\n    # Reverse the remaining items of the list\n    for i in range(m, n):\n        temp = list[i]\n        list[i] = list[m-1-i]\n        list[m-1-i] = temp\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes in a list and a number n and rotates the list to the right by n items in the right direction.\n    \"\"\"\n    # check if the list is empty\n    if not lst:\n        return lst\n\n    # calculate the length of the list\n    length = len(lst)\n\n    # check if n is greater than the length of the list\n    if n > length:\n        return lst\n\n    # initialize the new list with the first n items of the original list\n    new_list = lst[:n]\n\n    # initialize the index for the original list\n    index = n\n\n    # loop through the list\n    while index < length:\n        # append the item at the current index to the new list\n        new_list.append(lst[index])\n        # move to the next index\n        index += 1\n\n    # append the remaining items of the original list to the new list\n    new_list.extend(lst[index:])\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list by n elements to the right direction.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m and rotates it m items to the right direction.\n    \"\"\"\n    n = len(list)\n    # if m is greater than n, return the original list\n    if m > n:\n        return list\n    # create a new empty list\n    new_list = []\n    # iterate through the original list from index 0 to m-1\n    for i in range(m):\n        # add the first element to the new list\n        new_list.append(list[0])\n        # shift the elements from index 0 to m-1 to the right by 1 index\n        for j in range(m-1):\n            list[j] = list[j+1]\n    # add the remaining elements to the new list\n    for i in range(n-m):\n        new_list.append(list[i+m])\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    A function to rotate a list by m items to the right direction.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return lst\n    \n    # Check if the length of the list is less than 2\n    if len(lst) < 2:\n        return lst\n    \n    # Calculate the length of the rotated list\n    rotated_len = len(lst) - m\n    \n    # Create a new empty list to store the rotated elements\n    rotated_lst = []\n    \n    # Loop through the original list from the end to the first element\n    for i in range(rotated_len, len(lst)):\n        # Append the element to the new list\n        rotated_lst.append(lst[i])\n    \n    # Append the first m elements of the original list to the new list\n    for i in range(m-1, -1, -1):\n        rotated_lst.append(lst[i])\n    \n    # Return the rotated list\n    return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Given a list and an integer n, rotate the list to the right by n items.\n    \"\"\"\n    if n == 0:\n        return lst\n    elif n % len(lst) == 0:\n        return lst[-n:] + lst[:-n]\n    else:\n        return lst[-n:] + lst[:-n] + lst[-n-1::-1]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    none_count = 0\n    for element in test_tup:\n        if element is None:\n            none_count += 1\n    if none_count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_count = 0\n    for val in test_tup:\n        if val is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digits = lambda n: all(int(d) in str(n) for d in str(n))\n    # Loop through all numbers in the given range\n    for num in range(startnum, endnum+1):\n        # If the number is divisible by every digit it contains, print it\n        if is_divisible_by_digits(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters startnum and endnum and returns a list containing all the numbers from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(1, 10)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digit_set = set(map(int, str(num)))\n        return all(num % digit in digit_set for digit in range(10))\n\n    return filter(is_divisible_by_digit, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    for i in range(startnum, endnum + 1):\n        if all(digit == 0 or (i % digit == 0) for digit in digits):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Check if the given number is divisible by every digit it contains.\n        \"\"\"\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit ** 2\n            num //= 10\n        return digit_sum == 0\n\n    divisible_numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        return digits_sum % len(str(num)) == 0\n\n    return list(filter(lambda num: startnum <= num <= endnum, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: all(int(d) in str(x) for d in str(x)) and x % 10 == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return all(digit in digits for digit in range(1, 10))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # define a lambda function to check if a number is divisible by a digit\n    is_divisible = lambda x, y: x % y == 0\n    \n    # loop through all numbers within the given range\n    for num in range(startnum, endnum + 1):\n        # split the number into a list of digits\n        digits = [int(d) for d in str(num)]\n        # check if all digits are divisible by each other\n        if all(is_divisible(d, digits[i]) for i, d in enumerate(digits)):\n            print(num)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check if angle is valid\n    if a>360:\n        return None\n    else:\n        #convert angle to radians\n        angle = math.radians(a)\n        #calculate area using formula\n        area = r*r*angle\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    else:\n        # calculate the area of the sector\n        area = math.pi*r**2\n        # calculate the area of the arc\n        arc_area = math.pi*r**2*a/360\n        # add the area of the arc to the area of the sector\n        area += arc_area\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r * r * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * math.sin(math.radians(a/2))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/180\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = (r*r)*math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    area = math.pi * r ** 2\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # Reconstruct the LCS\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    m, n = len(X), len(Y)\n    t = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                t[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                t[i][j] = t[i - 1][j - 1] + 1 \n            else: \n                t[i][j] = max(t[i - 1][j], t[i][j - 1]) \n                \n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif t[i - 1][j] > t[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n                \n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n = len(X), len(Y)\n    l = [[0] * (n+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1])\n\n    return X[m-l[m][n]:m], Y[n-l[m][n]:n], Z[l[m][n]-1:]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0]*(p+1) for i in range(m+1)]\n    max_len = 0\n\n    # fill dp table\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # reconstruct the lcs\n    i, j = m, p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the lcs\n    lcs = lcs[::-1]\n\n    return lcs, max_len"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # convert all strings to lists of characters\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n    # define a function to find the longest common suffix\n    def longest_common_suffix(s1, s2): \n        i = 0\n        while i < len(s1) and i < len(s2): \n            if s1[i] == s2[i]: \n                i += 1 \n            else: \n                i = max(0, i-1)\n        return i\n    # find the length of the longest common prefix of all strings\n    lcp = max(longest_common_suffix(X, Y), longest_common_suffix(X, Z), longest_common_suffix(Y, Z))\n    # initialize the 3D table\n    table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n    # fill the 3D table\n    for i in range(len(X)+1): \n        for j in range(len(Y)+1): \n            for k in range(len(Z)+1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                else: \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    # find the length of the longest common suffix of all strings\n    lcs = table[len(X)][len(Y)][len(Z)]\n    # print the result\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp\n\n    def backtrack(X, Y, Z, dp, m, n, lcs_seq):\n        if m == 0 or n == 0:\n            lcs_seq.append(X[m])\n        else:\n            if X[m - 1] == Y[n - 1] and X[m - 1] == Z[m - 1]:\n                backtrack(X, Y, Z, dp, m - 1, n - 1, lcs_seq)\n            elif dp[m - 1][n] >= dp[m][n - 1]:\n                backtrack(X, Y, Z, dp, m - 1, n, lcs_seq)\n            else:\n                backtrack(X, Y, Z, dp, m, n - 1, lcs_seq)\n\n    m, n = len(X), len(Y)\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n    dp = lcs(X, Y)\n    lcs_seq = []\n    backtrack(X, Y, Z, dp, m, n, lcs_seq)\n    return \"\".join(lcs_seq)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    result = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            result.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    result.reverse()\n    return ''.join(result)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # reconstruct the LCS using dynamic programming\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                elif L[i - 1][j] > L[i][j - 1]:\n                    L[i][j] = L[i - 1][j]\n                else:\n                    L[i][j] = L[i][j - 1]\n\n    # L[m][n] is the length of the longest common subsequence\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(reversed(lcs))\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for finding capitalized words\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the regular expression search method to find all matches in the input string\n    matches = re.findall(pattern, str1)\n\n    # Loop through the matches and add spaces before each capitalized word\n    for match in matches:\n        str1 = str1.replace(match,'' + match)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match capital words\n    pattern = r'(?<=[a-z])([A-Z])(?=[a-z])'\n    # Use the re.sub() function to replace the matched pattern with a space\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Add spaces between words starting with capital letters\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        index = str1.index(match)\n        str1 = str1[:index] +'' + str1[index+len(match):]\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w+\\b', str1)\n    words = [word.capitalize() for word in words]\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Split the input string into words using regular expressions\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Combine the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    string = re.sub('[^a-zA-Z0-9\\s]', '', string)\n    # Split the string into words\n    words = string.split()\n    # Iterate over the words and replace capital letters with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string.lower())\n    \n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regular expression to find all capital words starting with a space\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Join all capital words with spaces\n    capitalized_words =''.join(words)\n\n    # Capitalize the first word in each sentence\n    sentences = capitalized_words.split('.')\n    capitalized_sentences = []\n    for sentence in sentences:\n        capitalized_sentence = sentence.capitalize()\n        capitalized_sentences.append(capitalized_sentence)\n\n    # Join all capitalized sentences with dots\n    final_sentence = '. '.join(capitalized_sentences)\n\n    return final_sentence"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to numbers\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the numbers in ascending order\n    nums.sort()\n    # Convert the sorted numbers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers\n    nums_int = [int(x) for x in nums_str]\n    # Sort the integers in ascending order\n    nums_int.sort()\n    # Convert the sorted integers back to strings\n    nums_str = [str(x) for x in nums_int]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings of numbers to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers in ascending order\n    nums.sort()\n    \n    # Convert the sorted integers back to strings\n    result = [str(num) for num in nums]\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Split the list into a list of numeric strings and a list of non-numeric strings\n    nums = [s for s in nums_str if s.isdigit()]\n    non_nums = [s for s in nums_str if not s.isdigit()]\n    \n    # Sort the numeric strings in ascending order and concatenate them with non-numeric strings\n    sorted_nums = sorted(nums)\n    sorted_nums_str = ''.join(sorted_nums)\n    sorted_nums_str += ''.join(non_nums)\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list to a list of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the list using the built-in sorted() function\n    sorted_nums = sorted(nums_int)\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all numeric strings to floats\n    nums_float = [float(num) for num in nums_str if num.isdigit()]\n\n    # Sort the list in ascending order\n    nums_float.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums_float]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to integers\n    nums = [int(num_str) for num_str in nums_str]\n    # Sort the integers numerically\n    nums.sort()\n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Split the strings into lists of numbers and strings\n    nums = []\n    strings = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n        else:\n            strings.append(num_str)\n    \n    # Convert lists to tuples\n    nums_tup = tuple(nums)\n    strings_tup = tuple(strings)\n    \n    # Sort the tuples\n    sorted_tup = sorted(nums_tup + strings_tup)\n    \n    # Convert the sorted tuples back to lists\n    sorted_nums = list(sorted_tup[:len(nums)])\n    sorted_strings = list(sorted_tup[len(nums):])\n    \n    # Combine the lists of numbers and strings\n    sorted_nums_str = nums + sorted_nums + sorted_strings\n    \n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: (int(x), x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The updated list is:\", test_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    # Convert the tuple to a set to remove duplicates\n    test_tup_set = set(test_tup)\n    # Convert the set back to a list\n    final_list = list(test_set)\n    # Add the tuple to the list\n    final_list.extend(list(test_tup_set))\n    # Return the modified list\n    return final_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i > 0 and arr[i] <= arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root node is greater than its children nodes\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    # Recursively check for the left and right child nodes\n    left = 2*i\n    right = 2*i + 1\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) / 2:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the root of the heap is the leftmost node, it means the array is min heap\n    if i == 0:\n        return True\n\n    # If the parent node is greater than the root, it means the array is not min heap\n    parent_index = (i - 1) // 2\n    if arr[parent_index] > arr[i]:\n        return False\n\n    # Recursively call the helper function on the left and right sub-arrays\n    left_min_heap = check_min_heap_helper(arr, parent_index * 2 + 1)\n    right_min_heap = check_min_heap_helper(arr, parent_index * 2 + 2)\n\n    # If either of the sub-arrays is not a min heap, the parent node is also not a min heap\n    return left_min_heap and right_min_heap\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case: If the current index is greater than or equal to the length of the array, then the array is not a min heap.\n    if i >= len(arr):\n        return False\n\n    # Base case: If the current index is equal to 0, then the array is not a min heap.\n    if i == 0:\n        return False\n\n    # Recursive case: Check if the current element is greater than or equal to the parent element. If it is not a min heap, return False.\n    if arr[i] >= arr[int((i - 1) / 2)]:\n        return False\n\n    # Check if the left child exists and if it is less than the current element. If it is not a min heap, return False.\n    if i * 2 + 1 < len(arr) and arr[i * 2 + 1] >= arr[i]:\n        return False\n\n    # Check if the right child exists and if it is less than the current element. If it is not a min heap, return False.\n    if i * 2 + 2 < len(arr) and arr[i * 2 + 2] >= arr[i]:\n        return False\n\n    # If the current element is greater than or equal to all its children, then the array is a min heap.\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i >= len(arr) // 2:\n        return check_min_heap_helper(arr[:i], i // 2)\n    else:\n        return check_min_heap_helper(arr[i:], i * 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the current index is greater than the last index or if the current index is equal to the last index, it means the array is not a valid binary heap\n    if i > len(arr) - 1 or i == len(arr) - 1:\n        return False\n\n    # If the current index is less than the last index, we need to check if the left and right children of the current index are greater than the current index\n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n\n    # If the current index is less than or equal to the last index, it means the array is a valid binary heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[2*i] or arr[i] < arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth Jacobsthal number.\n    \n    Args:\n        n (int): The nth Jacobsthal number to find.\n    \n    Returns:\n        int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        for i in range(1, n+1):\n            j = (3*j + 1) % 21\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth Jacobsthal number.\n    \"\"\"\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # initialize variables\n    a = 0\n    b = 1\n    c = 1\n    d = 0\n\n    # loop through the sequence\n    for i in range(2, n+1):\n        # update values\n        a, b, c, d = b, c, a+c, b+d\n\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two elements of the series\n    a = 0\n    b = 1\n\n    # Iterate through the series up to n\n    for i in range(2, n+1):\n        # Calculate the next element of the series using the formula a(i) = a(i-1) + b(i-1)\n        c = a + b\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth element of the series\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n < 0:\n        raise ValueError(\"Jacobsthal numbers do not exist for negative values of n.\")\n\n    jacobsthal_num = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num = 1\n        for i in range(2, n+1):\n            jacobsthal_num = (jacobsthal_num**2) + 1\n        return jacobsthal_num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list based on the second element of each tuple (last element is sorted in ascending order)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Find the minimum k records\n    min_records = []\n    for i in range(len(test_list) - K + 1):\n        min_records.append(test_list[i])\n    \n    # Return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize minimum value of k to infinity\n    min_k_val = float('inf')\n\n    # Initialize minimum value of k to infinity\n    min_k_index = None\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # Check if the current index is k\n        if i == K - 1:\n            # If it is, update the minimum value and index\n            min_k_val = sorted_list[i][1]\n            min_k_index = i\n            break\n        # If it is not, check if the value of the current element is less than the minimum value of k\n        elif sorted_list[i][1] < min_k_val:\n            # If it is, update the minimum value and index\n            min_k_val = sorted_list[i][1]\n            min_k_index = i\n\n    # Return the minimum value of k and its index\n    return min_k_val, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Initialize variables\n    min_num = float('inf')\n    min_records = []\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Check if the current tuple has a smaller number\n        if len(test_list[i]) < K:\n            # If the number of elements is less than K, check if it is the smallest so far\n            if len(min_records) == 0:\n                min_records.append(test_list[i])\n            else:\n                # Check if the current tuple is smaller than the smallest so far\n                if len(test_list[i]) < len(min_records[0]):\n                    min_records = [test_list[i]]\n                elif len(test_list[i]) == len(min_records[0]):\n                    # If the current tuple has the same length as the smallest so far, check if it is smaller than the smallest so far\n                    if test_list[i] < min_records[0]:\n                        min_records = [test_list[i]]\n        else:\n            # If the number of elements is greater than or equal to K, check if it is the smallest so far\n            if len(min_records) == 0:\n                min_records.append(test_list[i])\n            else:\n                # Check if the current tuple is smaller than the smallest so far\n                if len(test_list[i]) < len(min_records[0]):\n                    min_records = [test_list[i]]\n                elif len(test_list[i]) == len(min_records[0]):\n                    # If the current tuple has the same length as the smallest so far, check if it is smaller than the smallest so far\n                    if test_list[i] < min_records[0]:\n                        min_records = [test_list[i]]\n    \n    # Return the list of minimum K records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each key in the list\n    freq = {}\n    for key, value in test_list:\n        if key in freq:\n            freq[key] += 1\n        else:\n            freq[key] = 1\n    \n    # sort the dictionary based on the values\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n    \n    # initialize the minimum count and minimum key variables\n    min_count = float('inf')\n    min_key = None\n    \n    # loop through the sorted dictionary and check if the count of the current key is less than K\n    for key, value in sorted_freq:\n        if value < K:\n            return (min_key, min_count)\n        elif value == K:\n            min_count = value\n            min_key = key\n    \n    # if all keys have a count of K or less, return the last key with count greater than K\n    for key, value in sorted_freq:\n        if value > K:\n            return (key, value)\n    \n    # if all keys have a count of K or less, return the last key with count equal to K\n    return (sorted_freq[-1][0], sorted_freq[-1][1])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    test_list.sort()  # sort the list in ascending order\n    count = 0\n    min_sum = float('inf')\n    min_value = None\n    for i in range(len(test_list)):\n        if count < K:\n            count += 1\n        else:\n            break\n        if i < K:\n            continue\n        sum_val = sum(test_list[i-K:i+1])\n        if sum_val < min_sum:\n            min_sum = sum_val\n            min_value = test_list[i]\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum k records\n    min_k_list = []\n\n    # Iterate over the list of tuples from least to greatest element\n    for i in range(len(test_list)):\n        # If the current element is not already in the minimum k list and the length of the minimum k list is less than K, add the current element to the minimum k list\n        if i not in min_k_list and len(min_k_list) < K:\n            min_k_list.append(i)\n\n        # If the length of the minimum k list is equal to K, add the current element to the minimum k list\n        elif len(min_k_list) == K:\n            min_k_list.append(i)\n\n        # If the length of the minimum k list is greater than K, remove the first element of the minimum k list and add the current element to it\n        else:\n            min_k_list.pop(0)\n            min_k_list.append(i)\n\n    # Return the minimum k records as a list\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # sort the test_list based on the length of the tuple\n    test_list.sort(key=lambda x: len(x))\n    # create an empty list to store the minimum k records\n    min_k_list = []\n    # loop through the test_list\n    for i in range(len(test_list)-K+1):\n        # append the current tuple to the min_k_list\n        min_k_list.append(test_list[i])\n    # return the min_k_list\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # sort the list in descending order\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # initialize min_list with first k records\n    min_list = test_list[:K]\n\n    # initialize count with 0\n    count = 0\n\n    # loop through the remaining records\n    for i in range(K, len(test_list)):\n        # if the current record's score is greater than or equal to the minimum score in min_list, increment count\n        if test_list[i][1] >= min_list[count][1]:\n            count += 1\n\n        # if count is equal to K, add the current record to min_list\n        if count == K:\n            min_list.append(test_list[i])\n\n        # if count is greater than K, remove the first record from min_list and decrement count\n        elif count > K:\n            min_list.pop(0)\n            count -= 1\n\n    # return the minimum K records in min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum k as infinity\n    min_k_value = float('inf')\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If the minimum k value is updated, update the minimum k value\n        if test_list[sorted_list[i][0]][1] < min_k_value:\n            min_k_value = test_list[sorted_list[i][0]][1]\n\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Input:\n    test_list: list of tuples\n    K: int\n    Output:\n    A tuple containing the minimum k records from test_list.\n    \n    Explanation:\n    For example, if test_list = [(1,2),(3,4),(5,6),(7,8)], K = 2, then the output should be (3,4) since the minimum two records from test_list are (3,4) and (5,6).\n    '''\n\n    # Initialize minimum value and index of minimum value to None\n    min_value = None\n    min_index = None\n\n    # Iterate over the list of tuples\n    for index, record in enumerate(test_list):\n        # If the current record is less than the minimum value or if the current record is equal to the minimum value and its index is less than the minimum index, update the minimum value and index\n        if min_value is None or record[0] < min_value or (record[0] == min_value and index < min_index):\n            min_value = record[0]\n            min_index = index\n            if min_index >= K:\n                break\n\n    # Return the minimum k records\n    return test_list[min_index:min_index+K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common_elements:\n                common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            if l2[i] not in common_elements:\n                common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            if l3[i] not in common_elements:\n                common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each element in list l1\n    for elem in l1:\n        # Check if the element is in list l2 and l3\n        if elem in l2 and elem in l3:\n            # If the element is common, add it to the dictionary\n            common_dict[elem] = True\n\n    # Convert the dictionary to a list and return it\n    return list(common_dict.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Loop over the indices of l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at this index is present in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            # If it is, add it to the common list\n            common.append(l1[i])\n\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common_elements:\n                common_elements.append(l1[i])\n\n    return common_elements\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the numbers in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list (index 1)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers and returns the second smallest number.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second element (index 1) of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    \n    # Find the second smallest number\n    second_smallest_number = sorted_list[1]\n    \n    return second_smallest_number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    result = re.search(pattern, text)\n    if result:\n        return \"Found a+b*: \" + result.group()\n    else:\n        return \"Did not find a+b* in the given text\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a+b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?:b*){1}')\n    result = pattern.search(text)\n\n    if result:\n        return result.group()\n    else:\n        return None\n\ntext = \"abcabaaabcabaaabcabaaabcabaaabcabaa\"\nprint(text_match_zero_one(text))"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the string at index i is a reverse of string at index j\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it already exists in the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            # Increment the count for the tuple if it exists\n            sublist_count[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary and set its count to 1\n            sublist_count[sublist_tuple] = 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    \n    for sublist in list1:\n        sublist_counts[tuple(sublist)] = sublist_counts.get(tuple(sublist), 0) + 1\n    \n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    sublist_count = {}\n    \n    # Iterate over each element of the list\n    for i in range(len(list1)):\n        # Convert the current element to a tuple\n        tuple_element = tuple(list1[i])\n        \n        # Check if the tuple is already in the dictionary\n        if tuple_element in sublist_count:\n            # Increment the count of the tuple\n            sublist_count[tuple_element] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[tuple_element] = 1\n            \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each tuple of the form (list1[i], list1[i+1],..., list1[j])\n    count_dict = {}\n    # Loop through the list1\n    for i in range(len(list1)):\n        # Loop through the remaining elements of the list1 after the current element\n        for j in range(i+1, len(list1)):\n            # Convert the current element and the remaining elements to a tuple and add it to the dictionary if it doesn't exist already\n            tuple_key = tuple(sorted(list1[i:j+1]))\n            if tuple_key not in count_dict:\n                count_dict[tuple_key] = 1\n            else:\n                count_dict[tuple_key] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist not in count_dict:\n                count_dict[tuple_sublist] = 1\n            else:\n                count_dict[tuple_sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the unique sublists\n    unique_sublists_dict = {}\n    \n    # Loop through each element in the original list\n    for item in list1:\n        # Convert the item to a tuple and check if it's already in the dictionary\n        if tuple(item) in unique_sublists_dict:\n            # If it's already in the dictionary, increment its value by 1\n            unique_sublists_dict[tuple(item)] += 1\n        else:\n            # If it's not in the dictionary, add it with a value of 1\n            unique_sublists_dict[tuple(item)] = 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts of sublists\n    sublist_counts = {}\n    # loop through the original list\n    for sublist in list1:\n        # convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sorted(sublist)) in sublist_counts:\n            # if it is, increment the count by 1\n            sublist_counts[tuple(sorted(sublist))]+=1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            sublist_counts[tuple(sorted(sublist))] = 1\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        # convert sublist to tuple\n        sublist_tuple = tuple(sublist)\n        # check if tuple already exists in count_dict\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the input string is only digits\n    if not num.isdigit():\n        return False\n\n    # Check if the input string contains a decimal point\n    if '.' in num:\n        # Split the string into integer and fractional parts\n        integer, fractional = num.split('.')\n\n        # Check if the integer part is not longer than 9 digits or the fractional part is not longer than 2 digits\n        if len(integer) > 9 or len(fractional) > 2:\n            return False\n\n        # Check if the integer part has leading zeros\n        if integer.startswith('0'):\n            return False\n\n        # Check if the integer part is non-zero and contains a non-zero digit\n        if integer and not all(c == '0' for c in integer):\n            return False\n\n        # Check if the fractional part contains a non-zero digit\n        if '.' not in fractional and not all(c == '0' for c in fractional):\n            return False\n\n    else:\n        # Check if the input string is non-empty and only contains digits\n        if len(num) > 1 and not all(c.isdigit() for c in num):\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if num.count('.') == 1 and '.' in num and num.count('.') < num.count(',') and num.count('.') < num.count('e') and num.count('.') < num.count('-') and num.count('.') < num.count('+'):\n        for char in num:\n            if not char.isdigit() and char!= '.' and char!= ',' and char!= 'e' and char!= '-' and char!= '+':\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Remove non-numeric characters from the input string\n    num = ''.join(c for c in num if c.isdigit())\n\n    # Check if the input string contains more than 2 digits\n    if len(num) > 2:\n        return False\n\n    # Convert the input string to a float with a precision of 2\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n\n    # Check if the input string is a valid decimal number with a precision of 2\n    if 0.0 <= float_num < 1.0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Removing the non-numeric characters from the string\n    num = ''.join(e for e in num if e.isdigit())\n    # Splitting the string into integer and fraction parts\n    int_part, frac_part = num.split('.')\n    # Checking if the integer part contains more than 2 digits\n    if len(int_part) > 2:\n        return False\n    # Checking if the fraction part contains more than 2 digits\n    if len(frac_part) > 2:\n        return False\n    # Checking if the integer part contains non-numeric characters\n    if any(char not in '0123456789' for char in int_part):\n        return False\n    # Checking if the fraction part contains non-numeric characters\n    if any(char not in '0123456789' for char in frac_part):\n        return False\n    # Checking if the integer part is greater than the maximum possible value for an integer (2^31 - 1)\n    if int(int_part) > (2**31) - 1:\n        return False\n    # Checking if the fraction part is greater than the maximum possible value for a float (2^32)\n    if float('.'.join((int_part, frac_part))) > (2**32):\n        return False\n    # Checking if the integer part is less than 0 or greater than 2^31 - 1\n    if int(int_part) < 0 or int(int_part) > (2**31) - 1:\n        return False\n    # Checking if the fraction part is less than 0 or greater than 2^32\n    if float('.'.join((int_part, frac_part))) < 0 or float('.'.join((int_part, frac_part))) > (2**32):\n        return False\n    # All the checks have passed\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        if '.' in num and num.count('.') < 2:\n            num = num.replace('.', '')\n            float(num)\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num_str = str(num)\n    if '.' in num_str:\n        if len(num_str.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        num = float(num)\n        if str(num).split('.')[1] is not None and len(str(num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        # check if the string is a decimal number with a precision of 2\n        float(num)\n        if len(str(num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string is not a decimal number with a precision of 2, raise an error\n        raise ValueError(\"The given string is not a decimal number with a precision of 2.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return False\n        seen[num] = True\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    elif len(arr) > 1:\n        seen = set()\n        for num in arr:\n            if num in seen:\n                return False\n            seen.add(num)\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, False otherwise.\n    '''\n\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # creating a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # checking whether the dictionary contains only one key-value pair or not\n    if len(count_dict) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    seen = set()\n    for num in arr:\n        if num in seen:\n            unique = False\n            break\n        else:\n            seen.add(num)\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"30 days in this month\"\n    else:\n        return \"Not a leap year\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Mapping between month numbers and the number of days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number is valid\n    if monthnum3 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0:\n        return \"The month number is divisible by 3, so it has 30 days.\"\n    else:\n        return \"The month number is not divisible by 3, so it does not have 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the month number is valid or not\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # Check if the month number has 30 days or not\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4!= 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the given array\n    arr.sort()\n\n    # Initialize two variables to store minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n-1] - arr[n-2]\n\n    # Iterate through the sorted array from the second element to the nth-1 element\n    for i in range(1,n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Check if the difference is less than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # Check if the difference is greater than the maximum difference\n        elif diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')\n    diff = 0\n\n    # Traverse through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0])  # Calculate the minimum difference between the first two elements in the array\n    for i in range(2, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]  # Update the minimum difference if a smaller difference is found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array \n    arr.sort() \n    # Initialize variables \n    min_diff = arr[n-1]-arr[0] \n    for i in range(n-1): \n        diff = arr[i+1]-arr[i] \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables min_diff and diff\n    min_diff = arr[1] - arr[0]\n    diff = arr[1] - arr[0]\n\n    # Traverse through the array starting from index 2\n    for i in range(2, n):\n        # Calculate the difference between the current element and the previous element\n        curr_diff = arr[i] - arr[i - 1]\n\n        # If the current difference is smaller than the minimum difference found so far, update the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n        # If the current difference is the same as the minimum difference found so far, update the difference\n        elif curr_diff == min_diff:\n            diff = curr_diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It does this by sorting the array and then finding the minimum absolute difference between adjacent elements.\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')  # Initialize minimum difference as infinity\n    prev_element = arr[0]  # Initialize previous element as the first element of the array\n    for i in range(1, n):\n        # Calculate absolute difference between current and previous elements\n        curr_diff = abs(arr[i] - prev_element)\n\n        # Update minimum difference if current difference is less than minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n        # Update previous element\n        prev_element = arr[i]\n\n    # Return minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Initialize a variable to store the minimum difference\n    min_diff = diff\n\n    # Loop through the array again and calculate the difference between adjacent elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # find the minimum difference between any two elements in the array\n    min_diff = abs(arr[n-1]-arr[0])\n    # loop through the array from 1 to n-1\n    for i in range(1, n-1):\n        # find the difference between the current element and the next element and update the minimum difference if it is smaller\n        diff = abs(arr[i]-arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')\n    diff = 0\n\n    # Loop through the sorted array\n    for i in range(1, n):\n        # Calculate the difference\n        diff = abs(arr[i] - arr[i - 1])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and counts the number of digits in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_of_digits += 1\n    return num_of_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n\n    if len(primes) < n:\n        return \"Invalid input\"\n\n    polite_num = primes[n - 1]\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n\n    The nth polite number is the smallest number which is greater than the nth prime.\n    The definition of politeness is that it is a positive number that\n    conveys a sense of fairness and kindness towards other people.\n\n    The nth polite number is calculated using the following formula:\n\n    1. If n is not a positive integer, return None.\n    2. Initialize a counter i to 0.\n    3. Initialize a variable count to 0.\n    4. Initialize a variable prime to 2.\n    5. While count is less than n:\n        a. Initialize a variable is_prime to True.\n        b. Check if prime is less than the square root of n.\n           If prime is less than the square root of n, return None.\n        c. If is_prime is True, increment the count by 1.\n        d. If prime is greater than the square root of n, return None.\n        e. Increment prime by 1.\n\n    6. Return the nth prime.\n\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    # Initialize the counter i to 0\n    i = 0\n\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the prime to 2\n    prime = 2\n\n    while count < n:\n        # Initialize the variable is_prime to True\n        is_prime = True\n\n        # Check if prime is less than the square root of n\n        if prime < math.sqrt(n):\n            return None\n\n        # If prime is greater than the square root of n, return None\n        if prime > math.sqrt(n):\n            return None\n\n        # Check if prime is prime or not\n        for j in range(2, int(math.sqrt(prime)) + 1):\n            if prime % j == 0:\n                is_prime = False\n                break\n\n        # If prime is prime, increment the count by 1\n        if is_prime:\n            count += 1\n\n        # Increment the prime by 1\n        prime += 1\n\n    # Return the nth prime\n    return prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def nth_polite_number(n):\n        polite_number = 1\n        count = 1\n        while count < n:\n            polite_number += 1\n            if is_prime(polite_number):\n                count += 1\n        return polite_number\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite_number = nth_polite_number(n)\n    print(\"The {}th polite number is {}\".format(n, polite_number))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    a = 1\n    b = 1\n    while count < n:\n        a += 1\n        b += 1\n        count += math.gcd(a, b)\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Get the first polite number\n    polite_number = 3\n\n    # Check for the nth polite number\n    for i in range(1, n+1):\n        polite_number += 2 * i + 1\n        if i % 2 == 0:\n            polite_number += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Find the nth prime number\n    prime_count = 0\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            prime_count += 1\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n    # Find the nth polite number\n    nth_prime = prime_count\n    polite_count = 0\n    for i in range(n, 0, -1):\n        if nth_prime == 0:\n            break\n        if is_prime[i]:\n            polite_count += 1\n            nth_prime -= 1\n\n    return polite_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "The problem statement is not clear enough to understand the task. Can you please provide more details?"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 3 # Initial value for the polite number\n    b = 1 # Initial value for the sum of squares of digits of the polite number\n    count = 0\n    \n    # Loop until the nth polite number is found\n    while count < n:\n        a += 1 # Increase the polite number by 1\n        b += sum([int(digit)**2 for digit in str(a)]) # Increase the sum of squares of digits of the polite number by the square of the next digit\n        count += 1 # Increment the count of polite numbers found\n        \n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 2\n    count = 0\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    num = 1\n\n    while count < n:\n        if num % 2 == 0:\n            count += 1\n\n        if count == n:\n            return num\n\n        num += 1\n\n    return None"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pair_list = []\n    for i in range(n-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pair_list = []\n        for i in range(len(l1)-1):\n            pair_list.append((l1[i], l1[i+1]))\n        return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum' in the given array 'arr'.\n    The function returns the number of pairs found.\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n\n    Args:\n        li1: A list.\n        li2: A list.\n\n    Returns:\n        A list containing the elements of `li1` that are not in `li2`.\n\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of i\n        fourth_pow = i ** 4\n\n        # Add fourth power to sum\n        sum += fourth_pow\n\n    # Return sum of fourth powers of odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_num = 1\n    sum_fourth_power = 0\n    for i in range(1, n+1):\n        odd_num += i\n        sum_fourth_power += odd_num ** 4\n    return sum_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    num = 1\n    while num <= n:\n        fourth_power = num ** 4\n        sum_of_fourth_powers += fourth_power\n        num += 2\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1 # initialize the first odd number to 1\n    power = 4 # initialize the fourth power to 4\n\n    # calculate the sum of the fourth power of odd numbers\n    sum_of_powers = 0\n    while num <= n:\n        sum_of_powers += power ** num\n        num += 2 # increment the next odd number by 2\n\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 3\n    sum = 0\n    for i in range(1, n+1):\n        sum += num ** 4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {'}', ']', '}'}\n    for c in exp:\n        if c in opening_brackets:\n            stack.append(c)\n        elif c in closing_brackets:\n            if len(stack) == 0 or closing_brackets[c]!= stack.pop():\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n\n    for token in exp:\n        if token == '(':\n            stack.append(token)\n        elif token == ')':\n            if not stack:\n                balance += 1\n            else:\n                stack.pop()\n\n    return balance == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    if len(stack) > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    balanced = True\n    for i in exp:\n        if i in ['(', ')']:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if not stack:\n                    balanced = False\n                    break\n                else:\n                    stack.pop()\n    if balanced and not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{']:\n                if last_char in ['(', '{']:\n                    continue\n                else:\n                    return False\n            else:\n                if last_char in [')', '}']:\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function removes all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through the words and remove any with length K or more\n    for i in range(len(words)):\n        if len(words[i]) > K:\n            del words[i]\n    \n    # Join the remaining words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Convert the input string to lower case\n    test_str = test_str.lower()\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a list to store the indices of the words to be removed\n    indices = []\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the length of the current word is equal to K, add its index to the list\n        if len(words[i]) == K:\n            indices.append(i)\n\n    # Remove the words from the list using the indices list\n    for i in sorted(indices, reverse=True):\n        del words[i]\n\n    # Join the remaining words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize a list to store the new words\n    new_words = []\n    \n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the new_words list\n            new_words.append(word)\n            \n    # Join the new_words list into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string. It returns None if there is no match.\n    \"\"\"\n    # use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # if there is a match, return a tuple with the match object and the position of the substring within the text\n    if match:\n        return (match, match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.finditer() to find all matches of pattern in text\n    matches = re.finditer(pattern, text)\n\n    # if there are no matches, return None\n    if not matches:\n        return None\n\n    # loop through matches and store their occurrence and position in a list\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end(), match.group()))\n\n    # sort the result list by occurrence\n    result.sort(key=lambda x: x[0])\n\n    # return the first occurrence and position of the pattern\n    return result[0][1], result[0][2]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Match found at index {text.index(match)} with value: {match}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Substring found: {match} at position {text.find(match)}\")\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found at position\", match.start(), \"and length\", len(match.group()))\n        return match.start(), len(match.group())\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            position = text.find(match)\n            return (match, position)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            print(\"The odd index at position\", i, \"does not contain odd numbers.\")\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            count += 1\n    return count == len(nums)//2"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([True if (nums[i] % 2 == 1) else False for i in range(len(nums)) if i % 2!= 0])"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count > 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and i - 1 >= 0:\n            if nums[i] % 2!= nums[i-1] % 2:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n        if odd_count == 0:\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # checks if the index is even\n            continue # skips the rest of the code if the index is even\n        if len([num for num in nums[i:] if num % 2 == 1]) % 2 == 1: # checks if there are odd numbers in the odd positions of the list\n            return False # if there are odd numbers in odd positions, the function returns False\n    return True # if the function has gone through all the elements and hasn't found any odd numbers, it returns True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    for num in nums:\n        if num % 2!= 0:\n            odd_count += 1\n        if odd_count > 0 and odd_count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1 and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            j = i + 1\n            while j < len(test_str) and test_str[j] in vowels:\n                j += 1\n            if j == i + 1:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1 and (test_str[i] in vowels) and (test_str[i-1] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize the sum variable\n    sum = 0\n    # Iterate through the unique elements\n    for element in unique_set:\n        # Add the element to the sum\n        sum += element\n    # Return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = []  # to store unique elements of the original list\n    \n    # loop through the original list and add unique elements to the unique_arr list\n    for num in arr:\n        if num not in unique_arr:\n            unique_arr.append(num)\n            \n    # return the sum of unique elements\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store unique elements and their frequency\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Iterate through the dictionary and add non-repeated elements to the sum\n    for num, freq in freq.items():\n        if freq == 1:\n            sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    unique_sum = 0\n    \n    for element in unique_elements:\n        unique_sum += element\n    \n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    sum_ = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            sum_ += num\n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    sum_value = 0\n    # Iterate over the unique set and add its values to the sum\n    for value in unique_set:\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the array\n    freq_dict = {}\n    # initialize the sum to zero\n    total_sum = 0\n    \n    for num in arr:\n        # if the element is not already in the dictionary, add it and set its count to 1\n        if num not in freq_dict:\n            freq_dict[num] = 1\n            total_sum += num\n        # if the element is already in the dictionary, increment its count\n        else:\n            freq_dict[num] += 1\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements and their count\n    count = {}\n    # Iterate through the list and add each element to the dictionary with a count of 1\n    for i in arr:\n        count[i] = 1\n    \n    # Iterate through the list again and add each element to the dictionary with a count of 2\n    for i in arr:\n        if i in count:\n            count[i] += 1\n    \n    # Sum up the values in the dictionary\n    sum_ = sum(count.values())\n    \n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of unique elements in the array\n    unique_elements = set(arr)\n    # Initialize the sum variable to 0\n    sum_of_elements = 0\n    # Iterate over the unique elements and add their values to the sum variable\n    for element in unique_elements:\n        sum_of_elements += element\n    return sum_of_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, list(g)) for k, g in groupby(enumerate(list1), lambda x: x[1] == x[0])]\n    return [list(g) for k, g in sorted(groups, key=lambda x: x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() function to group the list elements based on their value\n    grouped_list = groupby(enumerate(lst), lambda x: x[0] == x[1])\n    # Use list comprehension to create a sublist for each consecutive duplicate group\n    sublists = [list(group) for group in grouped_list if not group[1]]\n    # Return the sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [''.join(list(group)) for key, group in groupby(lst) if key == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use the groupby() function from itertools to group the list elements\n    grouped_list = groupby(enumerate(list1))\n    # iterate over each group of consecutive duplicates\n    packed_list = []\n    for key, group in grouped_list:\n        # check if the group contains only one element\n        if len(list(group)) == 1:\n            # if it does, add it to the packed list\n            packed_list.append(list(group)[0])\n        else:\n            # if it doesn't, create a new sublist for each group and append it to the packed list\n            sublist = [list(group)[0]]\n            for item in group:\n                sublist.append(item)\n            packed_list.append(sublist)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # Get the groups of consecutive duplicates\n    groups = groupby(list1)\n    \n    # Filter out the duplicates and pack the remaining elements into sublists\n    packed_list = []\n    for item, group in groups:\n        if len(list(group)) > 1:\n            packed_list.append(list(group))\n        else:\n            packed_list.append(item)\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_pack = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            list_pack.append(list(group))\n        else:\n            list_pack.append([list(group)])\n    return list_pack"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group_list = []\n    prev_item = None\n    for item in list1:\n        if item == prev_item:\n            group_list.append(item)\n        else:\n            if len(group_list) > 1:\n                yield group_list\n            group_list = [item]\n        prev_item = item\n    if len(group_list) > 1:\n        yield group_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    # Convert the input list to a set of tuples to remove duplicates\n    sublists = set(tuple(sublist) for sublist in list1)\n    \n    # Count the number of occurrences of each sublist\n    counts = {}\n    for sublist in sublists:\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    \n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for item in list1:\n        sublists.add(tuple(item))\n    count = {}\n    for item in sublists:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublist_dict = {}\n    \n    # Iterate through the input list\n    for i in range(len(list1)):\n        # Get the current sublist\n        sublist = list1[i]\n        \n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_dict:\n            # Increment the count for that tuple\n            sublist_dict[sublist_tuple] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a count of 1\n            sublist_dict[sublist_tuple] = 1\n            \n    # Return the dictionary of unique sublists\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            item_tuple = tuple(item)\n            if item_tuple in count:\n                count[item_tuple] += 1\n            else:\n                count[item_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    sublists = {}\n    for item in lst:\n        if isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, list):\n                    sublists[tuple(subitem)] = sublists.get(tuple(subitem), 0) + 1\n                elif subitem not in sublists:\n                    sublists[subitem] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the number of occurrences of each list\n    count_dict = {}\n    \n    # Loop through each element in the list\n    for i in list1:\n        \n        # If the element is a list, convert it to a tuple and count its occurrences in the dictionary\n        if isinstance(i, list):\n            count = count_dict.get(tuple(i), 0) + 1\n            count_dict[tuple(i)] = count\n    \n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find all possible combinations of sums\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sums.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    # Find all possible combinations of tuples\n    tuples = []\n    for i in range(len(sums)):\n        for j in range(i+1, len(sums)):\n            tuples.append((sums[i][0], sums[j][0], sums[i][1], sums[j][1]))\n    # Find all possible combinations of tuples with given sum\n    combinations = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if sum(tuples[i]) == target:\n                combinations.append(tuples[i])\n    # Return the combinations of tuples with given sum\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        if test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0] + test_list[m][0] == test_list[i][1]:\n                            combinations.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    arr = sorted(list(set(test_list)))\n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(arr[i:j+1]) == 0:\n                res.append((arr[i], arr[j]))\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            yield tuple(sorted(test_list[i][:j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Combine the tuples\n    combined_list = [tuple(combination) for combination in combinations(test_list, len(test_list))]\n    \n    # Find the combinations of sums\n    combinations_sum = [sum(comb) for comb in combined_list]\n    \n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def helper(combination, target_sum, remaining_sum, current_index, test_list):\n        if remaining_sum == 0:\n            print(\" \".join([str(x) for x in combination]))\n            return\n        if remaining_sum < 0:\n            return\n        if current_index == len(test_list):\n            return\n        helper(combination, target_sum, remaining_sum - test_list[current_index], current_index + 1, test_list)\n        helper(combination, target_sum, remaining_sum, current_index + 1, test_list)\n\n    helper([], 0, sum(test_list), 0, test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find combinations of sums with tuples in the given list\n    def find_combinations_helper(lst, target, current_sum, temp_lst, comb_list):\n        if current_sum == target:\n            comb_list.append(temp_lst)\n            return\n        for i in range(len(lst)):\n            if i > 0 and lst[i] == lst[i-1]:\n                continue\n            current_sum += lst[i]\n            temp_lst.append(lst[i])\n            find_combinations_helper(lst[:i] + lst[i+1:], target, current_sum, temp_lst, comb_list)\n            temp_lst.pop()\n            current_sum -= lst[i]\n            \n    # Main function to find the combinations of sums with tuples in the given list\n    def find_combinations_with_tuples(lst, target):\n        comb_list = []\n        find_combinations_helper(lst, target, 0, [], comb_list)\n        return comb_list\n    \n    # Test the function with a sample input\n    test_list = [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3)]\n    target = 6\n    print(\"Combinations of sums with tuples in the given list:\", find_combinations_with_tuples(test_list, target))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def sum_tuples(lst):\n        return sum(x[0] for x in lst)\n    \n    def tuple_combinations(lst):\n        return combinations(lst, len(lst))\n    \n    def find_combinations_helper(lst, target_sum):\n        combinations_lst = []\n        for tup in tuple_combinations(lst):\n            curr_sum = sum_tuples(tup)\n            if curr_sum == target_sum:\n                combinations_lst.append(tup)\n        return combinations_lst\n    \n    result = find_combinations_helper(test_list, sum_tuples(test_list))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns a list of all combinations of sums with tuples in the given tuple list.\n    The function uses the itertools library to generate all possible combinations of sums.\n    \"\"\"\n    combined_list = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        for n in range(m+1, len(test_list)):\n                            combined_list.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m], test_list[n]))\n\n    return combined_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    return len(divisors) % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    # Initialize count of divisors to 0\n    count = 0\n    # Initialize divisor to 1\n    divisor = 1\n    \n    # Loop through numbers from 1 to n-1\n    while divisor <= n:\n        # If n is divisible by divisor, increment count and divide n by divisor\n        while n % divisor == 0:\n            count += 1\n            n /= divisor\n        # Increment divisor by 1\n        divisor += 1\n    \n    # Check if count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even, else False.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        divisors = []\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n // i:\n                    divisors.append(n // i)\n        return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the sum of the integers from 1 to n\n    total = sum(range(1, n+1))\n\n    # Calculate the sum of the divisors of n\n    divisors_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n%i == 0)\n\n    # Check if the count of divisors is even\n    if divisors_sum == total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # function to count divisors of a given number\n    def count_of_divisors(num):\n        div_count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                div_count += 1\n        return div_count\n\n    # check if the count of divisors is even or odd\n    even_or_odd = count_of_divisors(n) % 2\n    if even_or_odd == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the count of divisors is even.\n    \"\"\"\n    \n    def count_prime_factors(num): \n        \"\"\"\n        This function takes an integer 'num' as input and returns a list of prime factors of 'num'.\n        \"\"\"\n        \n        prime_factors = []\n        i = 2\n        \n        while num > 1: \n            while num % i == 0: \n                prime_factors.append(i) \n                num //= i \n            i += 1\n        \n        return prime_factors\n    \n    def count_divisors_helper(num): \n        \"\"\"\n        This function takes an integer 'num' as input and returns the count of divisors of 'num'.\n        \"\"\"\n        \n        prime_factors = count_prime_factors(num) \n        count = 1\n        for prime_factor in prime_factors: \n            count *= (prime_factor + 1)\n        \n        return count\n    \n    def is_even(count): \n        \"\"\"\n        This function takes an integer 'count' as input and returns True if the count is even, otherwise False.\n        \"\"\"\n        \n        return count % 2 == 0\n    \n    count = count_divisors_helper(n)\n    divisor_count = count_divisors_helper(math.sqrt(n))\n    \n    if is_even(divisor_count): \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even or odd.\n    '''\n    D = (n-1) / 2\n    if D % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function checks whether the count of divisors is even or odd. \n    '''\n    \n    # calculate the number of divisors\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            i += 1\n    if n > 1:\n        divisors.append(n)\n    \n    # check if the count of divisors is even or odd\n    count = len(divisors)\n    if count % 2 == 0:\n        print(f\"The count of divisors is even, {count} divisors.\")\n    else:\n        print(f\"The count of divisors is odd, {count} divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        div_list = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_list.append(i)\n        if len(div_list) > 2:\n            return 0\n        else:\n            for i in range(int(math.sqrt(n))+1, n+1):\n                if n % i == 0:\n                    div_list.append(i)\n        return len(div_list)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    \n    for i in range(len(arr)-1):\n        for j in range(i+2, len(arr)+1, 2):\n            sum_of_subarrays += arr[i:j]\n    \n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0] * n\n    count = 0\n    \n    for i in range(n):\n        sum_arr[i] = arr[i]\n        \n        if count % 2 == 0:\n            count -= 1\n        else:\n            count += 1\n    \n    sum_odd = sum_arr[0]\n    for i in range(1, n, 2):\n        sum_odd += sum_arr[i]\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Iterate through all subarrays of length 3 to n\n    for i in range(n-2):\n        j = i + 2\n        # Check if the subarray is odd length\n        if j < n:\n            # Calculate the sum of the odd length subarray\n            subarray = arr[i:j]\n            temp_sum = sum_odd_length_subarray(subarray)\n            # Update the sum with the current subarray sum\n            sum = sum + temp_sum\n    \n    return sum\n\ndef sum_odd_length_subarray(subarray):\n    '''\n    Helper function to calculate the sum of all odd length subarrays.\n    '''\n    n = len(subarray)\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum = sum + subarray[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            sub_arr = arr[i-1:i+1]\n            sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sub_sum = 0\n    for i in range(len(arr)):\n        sub_sum += arr[i]\n        if i > 0 and i % 2!= 0:\n            sub_sum -= arr[i - 1]\n    return sub_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd_length = 0\n    n = len(arr)\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum_odd_length += arr[i]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Args:\n    arr (list): List of integers.\n\n    Returns:\n    int: Sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and j % 2 == 1:\n            sum_odd_length_subarrays += arr[j]\n            j += 1\n        i += 1\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        # Check if the length of the current subarray is odd\n        if i == 0 or arr[i] % 2!= 0:\n            # Initialize a variable to store the sum of the current subarray\n            current_sum = 0\n            # Initialize the left pointer\n            left = i\n            # Initialize the right pointer\n            right = i\n            \n            # Iterate over the current subarray and add the odd numbers\n            while left < n and right < n:\n                if arr[right] % 2!= 0:\n                    current_sum += arr[right]\n                right += 1\n            \n            # Add the current sum to the result\n            result += current_sum\n            \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    # Iterate through all possible subarrays of odd length\n    for i in range(1, n, 2):\n        # Initialize the sum of the current subarray\n        subarray_sum = 0\n        # Iterate through the current subarray\n        for j in range(i, n):\n            subarray_sum += arr[j]\n        # Add the sum of the current subarray to the total result\n        result += subarray_sum\n    \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = None\n    s = None\n    v = None\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n        if delta == r:\n            h = (g - b) / delta + (g < b and 6 or 0)\n        elif delta == g:\n            h = (b - r) / delta + 2\n        elif delta == b:\n            h = (r - g) / delta + 4\n        h /= 6\n    if cmax == r:\n        v = (g - b) / delta\n    elif cmax == g:\n        v = (b - r) / delta + (g < b and 6 or 0)\n    elif cmax == b:\n        v = (r - g) / delta + 2\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    if s == 0:\n        h = 0\n\n    # Convert HSV to HSL\n    h = h / 360\n    if h < 0:\n        h = h + 1\n    s = s * 100\n    v = v * 100\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate value of h\n    if max_val == min_val:\n        h = 0\n    else:\n        if max_val == r:\n            h = 60.0 * ((g - b) / diff)\n        elif max_val == g:\n            h = 60.0 * ((b - r) / diff + 2.0)\n        else:\n            h = 60.0 * ((r - g) / diff + 4.0)\n\n    # Calculate value of s\n    if diff == 0:\n        s = 0\n    else:\n        if max_val == r:\n            s = diff / (max_val + min_val)\n        elif max_val == g:\n            s = diff / (max_val + min_val)\n        else:\n            s = diff / (max_val + min_val)\n\n    # Calculate value of v\n    v = max_val\n\n    # Convert to integers\n    h = int(h)\n    s = int(s * 255)\n    v = int(v * 255)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert rgb values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Calculate min, max, and delta\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n\n    # Calculate h, s, and v\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            h = 0\n        elif max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        s = delta / max_val\n\n    # Convert h, s, and v to integers and return as tuple\n    hsv_color = (int(h * 255), int(s * 255), int(v * 255))\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert R, G, and B values to float values\n    r, g, b = float(r), float(g), float(b)\n\n    # Find the maximum and minimum values among R, G, and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the value of V\n    if max_val == min_val:\n        V = max_val\n    else:\n        V = max_val\n\n    # Calculate the saturation\n    if max_val == 0:\n        H = 0\n    else:\n        delta = max_val - min_val\n        S = delta / max_val\n\n    # Calculate the hue\n    if max_val == r:\n        H = (g - b) / delta\n    elif max_val == g:\n        H = 2 + (b - r) / delta\n    else:\n        H = 4 + (r - g) / delta\n\n    # Convert the Hue value to an angle in degrees\n    if H < 0:\n        H += 6\n\n    # Calculate the value of S and V\n    H *= 60\n    S *= 100\n    V *= 100\n\n    return (H, S, V)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to floats\n    r, g, b = float(r), float(g), float(b)\n    \n    # Find the maximum value\n    max_val = max(r, g, b)\n    \n    # Find the minimum value\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # If the maximum value is 0, it's a grayscale image, so hue and saturation are 0\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the hue\n        if r == max_val:\n            h = (g - b) / diff\n        elif g == max_val:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n        \n        # Convert the hue to degrees\n        h = h * 60 if h < 0 else h * 60\n        \n        # If the hue is greater than 360, make it between 0 and 360\n        h = h % 360\n        \n        # Calculate the saturation\n        if diff == 0:\n            s = 0\n        else:\n            s = diff / max_val\n        \n        # If the saturation is negative, make it positive\n        if s < 0:\n            s = s + 1\n    \n    # Calculate the value\n    v = max_val\n    \n    # Return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to R,G,B components\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n\n    # Get maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate value\n    value = max_val\n\n    # Calculate saturation\n    if max_val == 0.0:\n        saturation = 0.0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Calculate hue\n    if max_val == r:\n        hue = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        hue = 2 + (b - r) / (max_val - min_val)\n    else:\n        hue = 4 + (r - g) / (max_val - min_val)\n\n    # If hue is negative, add 6 to it\n    if hue < 0:\n        hue += 6\n\n    # Return HSV values\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red channel value (0-255)\n    :param g: Green channel value (0-255)\n    :param b: Blue channel value (0-255)\n    :return: Hue, Saturation, Value (HSV) color tuple\n    \"\"\"\n\n    # Convert r, g, and b to float between 0 and 1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Get maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Set saturation to 0 if difference is 0\n    if diff == 0:\n        saturation = 0\n    else:\n        # Calculate saturation\n        saturation = diff / max_val\n\n    # Calculate hue\n    if max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Normalize hue to range of 0 to 1\n    if hue < 0:\n        hue += 6\n    elif hue >= 6:\n        hue -= 6\n\n    # Convert hue, saturation, and value to float\n    hue = hue / 6.0\n    saturation = saturation\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n    return (int(h*255), int(s*255), int(v*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    h = 0\n    if r == b:\n        h = 60.0 * (g / float(r))\n    elif g == b:\n        h = 60.0 * (b / float(g)) + 120.0\n    else:\n        h = 60.0 * (r / float(g)) + 240.0\n    \n    if h < 0:\n        h += 360.0\n    \n    s = 0\n    v = 0\n    if r == v:\n        s = 0.0\n    elif g == v:\n        s = (b - r) / float(max(r, g))\n    else:\n        s = (b - r) / float(max(r, b))\n    \n    h = int(h)\n    s = int(s * 100)\n    v = int(v * 100)\n    \n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    for num in lst:\n        if num % 2 == 0:\n            even_product = even_product * num\n        else:\n            odd_product = odd_product * num\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    # Initialize the product variable to zero\n    product = 0\n\n    # Iterate through the list\n    for num in list1:\n\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            # If even, add to the product\n            product += num\n\n        else:\n            # If odd, subtract from the product\n            product -= num\n\n    # Return the product of even and odd numbers\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n    even_num = 1\n    odd_num = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n        result *= even_num * odd_num\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return 0\n\n    if odd_count == 0:\n        return 0\n\n    return (even_count * odd_count)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        result = list1[0] * list1[1]\n    elif even_count > 0 and odd_count == 0:\n        result = list1[0] * list1[0]\n    else:\n        result = list1[1] * list1[1]\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Check if there are any even and odd numbers in the list\n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    # Calculate the product of even and odd numbers\n    product = even_count * odd_count\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').replace(' ', '').split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into tuples\n    tuples_str = tuple(test_str.split(','))\n    # Convert each tuple string to an integer\n    int_tuples = tuple(map(int, tuples_str))\n    # Return the converted integer tuple\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to a list of characters\n    test_list = list(test_str)\n    # initialize the tuple to store the converted integers\n    converted_tuple = ()\n    # loop through each character in the list\n    for char in test_list:\n        # check if the character is an integer\n        if char.isdigit():\n            # convert the character to an integer and append it to the tuple\n            converted_tuple += (int(char),)\n    # return the converted tuple\n    return converted_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns an integer tuple.\n    '''\n    int_tuple = ()\n    for item in test_str:\n        if item.isdigit():\n            int_tuple += (int(item),)\n        else:\n            continue\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    test_list = test_str.split(', ')\n    # Convert the list of tuples into a list of integers\n    test_int_list = [int(x.strip()) for x in test_list]\n    # Convert the list of integers into a tuple\n    test_tuple = tuple(test_int_list)\n    # Return the tuple\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert string to integer tuple\n        int_tuple = tuple(int(i) for i in test_str.split(','))\n        return int_tuple\n    except ValueError:\n        # if conversion is not successful, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        if char.isdigit():\n            result.append(int(char))\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings and integers\n    str_list = [int(i) for i in test_str.split()]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of integers\n    integer_list = [int(i) for i in test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")]\n\n    # convert list to tuple\n    integer_tuple = tuple(integer_list)\n\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    if isinstance(test_str, tuple):\n        int_tuple = ()\n        for item in test_str:\n            try:\n                int_tuple += (int(item),)\n            except ValueError:\n                pass\n        return int_tuple\n    else:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect function from the bisect module to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # bisect_right function from the bisect module returns the index where the element should be inserted in the list.\n    # Here, we use the bisect_left function to find the closest element to x in the list.\n    index = bisect.bisect_left(a, x)\n\n    # If the element is present at the last index, return the last index + 1, as it needs to be inserted after the last element in the list.\n    if index == len(a):\n        return index + 1\n\n    # If the element is not present in the list, return the index where it should be inserted.\n    if a[index]!= x:\n        return index\n\n    # If the element is already present at the index, return the index + 1, as it needs to be inserted after the current element.\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index where the value should be inserted\n    i = bisect.bisect_right(a, x)\n    # check if the value should be inserted in the left or right half of the sorted array\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    # if the value should be inserted in the left half, increment the index\n    if x < a[i]:\n        i += 1\n    # return the index\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order using binary search.\n\n    Parameters:\n    a (list): sorted list of values\n    x (int): value to be inserted\n\n    Returns:\n    int: right insertion point for x in a\n\n    \"\"\"\n    # Use bisect to find the right insertion point\n    i = bisect.bisect_right(a, x)\n\n    # If the value x is already in the list, return i\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If the value x is greater than the last element of the list, return i\n    if i == len(a):\n        return i\n\n    # If the value x is smaller than the last element of the list, return i-1\n    if a[i-1] > x:\n        return i-1\n\n    # If x is greater than all elements to the left of i, return i\n    if x > a[i-1]:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"a1b2c3d4e5f6g\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba{3}\\bb{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b{3}\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b){3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*?b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]{2}b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists and strings into a new tuple\n    combined_tuple = (test_list, test_str)\n    return combined_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string and convert it to a list\n    combined_list = test_list + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for element in test_list:\n        new_tuple_list.append(str(element))\n    new_tuple_list.append(test_str)\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and then concatenate it with the string\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    # Join the list of characters into a single string\n    new_str = ''.join(char_list)\n    # Convert the string to a tuple\n    new_tuple = tuple(new_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the two input lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple and return it\n    return tuple(combined_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_found = True\n            break\n    else:\n        even_found = False\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n    - nums (list): A list of integers.\n\n    Returns:\n    - bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums), 2):\n                count += 1\n                if nums[j] % 2!= 0:\n                    break\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n\n    Args:\n    nums (list): The list of integers to check.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums if num % 2 == 0 and i in range(len(nums))]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if all even numbers of the list \n    are present at even indices and False otherwise.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2)])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 0:\n                return True\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Parameters:\n    test_tup (tuple): Tuple of any type.\n\n    Returns:\n    tuple: A new tuple with all the elements of the original tuple except those tuples.\n    \"\"\"\n\n    new_tup = []\n\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup.append(elem)\n\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                result_tup.append(sub_item)\n        else:\n            result_tup.append(item)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the new tuple\n    new_tup = []\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Check if the element is not a tuple\n        if type(element)!= tuple:\n            # Append the element to the new list\n            new_tup.append(element)\n        # If the element is a tuple, recursively call the function and append the result to the new list\n        else:\n            # Append the result of calling the function to the new list\n            new_tup.append(remove_nested(element))\n    \n    # Return the new tuple\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            result.append(i)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for x in test_tup if isinstance(x, (int, str, float)) or isinstance(x, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(elem for tup in test_tup for elem in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for element in test_tup:\n        if isinstance(element, tuple):\n            result_tup += remove_nested(element)\n        else:\n            result_tup += (element,)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_tup += remove_nested(item)\n        else:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i >= 0:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif arr[len(arr)-1] == x:\n        return len(arr)-1\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] < x:\n                return i\n        return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    If x is not in the array, the function returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] == x:\n            i = j\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize the first and last index of the array\n    first = 0\n    last = len(arr) - 1\n\n    # Initialize the result to -1\n    result = -1\n\n    # Initialize the left and right pointers\n    left = first\n    right = last\n\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n\n        # Calculate the middle index of the array\n        middle = (left + right) // 2\n\n        # If the element is equal to the target, return the middle index\n        if arr[middle] == x:\n            result = middle\n            right = middle - 1  # Move the right pointer to the left of the middle index\n        elif arr[middle] < x:\n            left = middle + 1  # Move the left pointer to the right of the middle index\n        else:\n            right = middle - 1  # Move the right pointer to the left of the middle index\n\n    # Return the result\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x as inputs. It then returns the last position of the element in the array.\n\n    Parameters:\n        arr: a sorted array\n        x: an element in the array\n\n    Returns:\n        The last position of the element x in the array.\n    \"\"\"\n\n    # Initialize the last position as -1\n    last_pos = -1\n\n    # Initialize the left pointer to the first element of the array\n    left = 0\n\n    # Initialize the right pointer to the last element of the array\n    right = len(arr) - 1\n\n    # While the left pointer is less than the right pointer\n    while left < right:\n\n        # Calculate the middle position of the array\n        mid = (left + right) // 2\n\n        # If the middle element is greater than x, then update the right pointer\n        if arr[mid] > x:\n            right = mid\n\n        # If the middle element is less than or equal to x, then update the last position and update the left pointer\n        else:\n            last_pos = mid\n            left = mid + 1\n\n    # If the last position is still -1, then the element x was not found in the array\n    if last_pos == -1:\n        return -1\n\n    # Return the last position of the element x\n    else:\n        return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    This function takes two arguments:\n    arr: the sorted array\n    x: the element whose position you want to find\n    \n    This function returns the last position of the element x in the array arr.\n    If the element x is not found in the array, the function returns -1.\n    '''\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform a binary search to find the last occurrence of x in arr\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            # If x is found, find the leftmost occurrence of x\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"(?<=a)[^ab]*(?=b)\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n\n    matches = re.findall(pattern, text)\n\n    if len(matches) == 0:\n        return False\n    else:\n        return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]+b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[a-zA-Z]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b$'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    print(\"Sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum_of_odds)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # taking input from the user for the range\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n\n    # initializing sum variable to 0\n    sum_odd = 0\n\n    # looping through the range of natural numbers\n    for i in range(l, r+1):\n        # checking if the number is odd\n        if i % 2!= 0:\n            # adding the odd number to the sum\n            sum_odd += i\n\n    # printing the sum of all odd natural numbers in the range\n    print(\"Sum of all odd natural numbers in the range\", l, \"to\", r, \"is\", sum_odd)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers between l and r (inclusive).\n    \"\"\"\n    return sum(num for num in range(l, r+1) if num % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n\n    s = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            s += l\n        l += 1\n\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n  # initializing the range of numbers to sum\n\n    # loop to iterate through the range of numbers\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:  # checking if the number is odd\n            sum += i  # adding the odd number to the sum\n\n    return sum  # returning the sum of odd numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_odd = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    sum = 0\n    for num in arr:\n        sum += num\n        \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of its elements.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Convert n to a binary string and pad it with zeros to 32 bits\n    n_binary = format(n, '032b')\n    # Convert d to a binary string and pad it with zeros to 5 bits\n    d_binary = format(d, '05b')\n    # Get the number of bits to rotate by\n    shift = int(d_binary, 2)\n    # Pad the binary string with zeros to the left by shift positions\n    rotated_binary = (n_binary[shift:] + n_binary[:shift])\n    # Convert the padded binary string back to an integer\n    rotated_int = int(rotated_binary, 2)\n    # Return the rotated integer\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    rotation_bits = d % 32\n    # Calculate the number of bits to shift\n    shift_bits = 32 - rotation_bits\n\n    # Shift the bits to the left\n    rotated_n = (n << rotation_bits) | (n >> shift_bits)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    rot_bits = d % num_bits\n    \n    # Extract the last d bits of the number\n    mask = (1 << rot_bits) - 1\n    last_bits = n & mask\n    \n    # Shift the bits to the left by d bits\n    shifted_bits = n >> rot_bits\n    \n    # Concatenate the shifted and last bits to form the rotated number\n    rotated_number = shifted_bits | last_bits\n    \n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n    # If d is 0, return the original number\n    if d == 0:\n        return int(bin_str, 2)\n    # If d is greater than 31, return 0\n    if d > 31:\n        return 0\n    # Perform left rotation by d bits\n    rotated_bin_str = bin_str[d:] + bin_str[:d]\n    # Convert the binary string to decimal number\n    rotated_num = int(rotated_bin_str, 2)\n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits that will be rotated\n    num_bits = len(bin(n)) - 2\n    \n    # Calculate the leftmost bits to be rotated and their position\n    bit_to_rotate = (n & ((1 << d) - 1)) << (num_bits - d)\n    bit_pos = d\n    \n    # Rotate the bits\n    rotated_bits = (n >> d) | bit_to_rotate\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Determine the number of bits to rotate left\n    rotate_bits = d % 32\n    # Determine the number of bits to rotate right\n    right_rotate_bits = d - rotate_bits\n    # Rotate left the binary string\n    rotated_binary_str = binary_str[rotate_bits:] + binary_str[:rotate_bits]\n    # Convert the rotated binary string back to decimal\n    rotated_num = int(rotated_binary_str, 2)\n    # Rotate right the rotated number\n    rotated_num = rotated_num >> right_rotate_bits | rotated_num << (32 - right_rotate_bits)\n    # Return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to be rotated\n    num_bits = 32\n    \n    # Calculate the rotation value\n    rotation = d % num_bits\n    \n    # Calculate the number of bits to be shifted\n    shift = num_bits - rotation\n    \n    # Calculate the mask to be used for left shift operation\n    mask = ((1 << shift) - 1) & n\n    \n    # Calculate the shifted value\n    shifted_value = (n & mask) << rotation\n    \n    # Return the shifted value\n    return shifted_value | (n >> shift)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> (32-d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the binary representation of the number to a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    # If d is greater than the length of the bits list, rotate by d modulo the length of bits list\n    if d > len(bits):\n        d = d % len(bits)\n    # Rotate the bits list to the left by d bits\n    rotated_bits = bits[-d:] + bits[:-d]\n    # Convert the rotated bits list back to an integer and return it\n    return int(''.join(map(str, rotated_bits)), 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments - the number n and the number d. The function returns the number rotated left by d bits.\n    \"\"\"\n    # Convert the number to binary format\n    binary_num = bin(n)[2:]\n    \n    # Pad the binary number with leading zeros to make it d bits long\n    padded_num = '0'*(d-len(binary_num)) + binary_num\n    \n    # Convert the padded number back to decimal\n    rotated_num = int(padded_num, 2)\n    \n    return rotated_num"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Args:\n        text: str\n            The string from which to remove all whitespaces.\n\n    Returns:\n        str\n            The string with all whitespaces removed.\n    \"\"\"\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # use regex to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # remove all extra whitespaces\n    text = re.sub(r'\\s+','', text).strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            for k in range(z, x-1, -1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            continue\n        elif x == y or x == z or y == z:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n        elif x!= y!= z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x or num == y or num == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    rotations = 0\n    # Check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            # If the array is not sorted, then we need to rotate the array\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            rotations += 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # find the first element of the array which is less than or equal to its adjacent element\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    \n    # if the first element is greater than its adjacent element, then the array is already sorted\n    if arr[0] > arr[n-1]:\n        return 0\n    \n    # find the last element of the array which is greater than its adjacent element\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            return i+1\n    \n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # create a boolean array to mark the occurrences of each element\n    mark = [False] * n\n    # loop through the array and mark the occurrence of each element\n    for i in range(n):\n        mark[arr[i]] = True\n    # initialize the count of rotations to 0\n    count = 0\n    # loop through the array and check if each element is marked\n    for i in range(n):\n        if not mark[i]:\n            # if an unmarked element is found, increment the count and mark its occurrence\n            count += 1\n            mark[arr[i]] = True\n    # loop through the array again and check if each element is marked\n    for i in range(n):\n        if not mark[i]:\n            # if an unmarked element is found, increment the count and mark its occurrence\n            count += 1\n            mark[arr[i]] = True\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse through the array and check for duplicates\n    for i in range(n):\n        if arr[i]!= arr[(i+n-1)%n]:\n            # If there is a duplicate, then we need to rotate the array\n            count += 1\n            # Reverse the first half of the array\n            arr[:n//2] = arr[:n//2][::-1]\n            # Reverse the second half of the array\n            arr[n//2:] = arr[n//2:][::-1]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return 0\n        elif i > 0 and arr[i] < arr[i-1]:\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    # Function to count the number of rotations required to generate a sorted array\n    n = len(arr)\n    count = 0\n    \n    # Traverse through all possible rotations of the array\n    for i in range(n):\n        # Check if the current element is smaller than its neighbor\n        if arr[i] < arr[i+1]:\n            # If yes, check if the neighbor is smaller than the previous neighbor\n            if i > 0 and arr[i] < arr[i-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] > arr[i + n // 2]:\n            arr[i], arr[i + n // 2] = arr[i + n // 2], arr[i]\n    return n - i - 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Check if array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if arr[i] > arr[j]:\n            i += 1\n            count += j - i\n        else:\n            j -= 1\n            count += i - j\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5) + 1\n    for i in range(1, root+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    # Check if n is a perfect square\n    a = 0\n    while a**2 <= n:\n        a += 1\n    if a**2!= n:\n        return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if number is positive integer\n    if n < 0:\n        return False\n    # check if number is a perfect square\n    root = int(n**0.5) + 1\n    if n == root**2:\n        return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    for i in range(int(n**0.5)+1):\n        if n - i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Find the square root of the given number\n    root = 0\n    left = 1\n    right = n\n    \n    # Iterate until the difference between the left and right ends up being less than or equal to 0.00001\n    while abs(left - right) > 0.00001:\n        mid = (left + right) / 2\n        \n        # Check if the mid value is a perfect square or not\n        mid_sq = mid * mid\n        \n        if mid_sq == n:\n            return True\n        elif mid_sq < n:\n            left = mid\n        else:\n            right = mid\n    \n    # If the loop completes without finding a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # initialize the result variable\n    result = False\n\n    # loop until the square root of n is greater than the number\n    while n > 0:\n        # check if the square of the number is greater than the number\n        if (n * n) > n:\n            break\n        # if the square of the number is less than or equal to the number,\n        # then it is a perfect square\n        else:\n            n = n - 1\n\n    # if the loop completes without finding a perfect square, then the number is not a perfect square\n    if n == 0:\n        result = True\n\n    return result"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        elif n < i * i:\n            return False\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if n == i*i:\n            return True\n        elif n > i*i:\n            n -= i\n        else:\n            n += i\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    # Initialize the upper and lower bounds for the square root of n\n    upper_bound = int(n ** 0.5)\n    lower_bound = int(n ** 0.5) - 1\n\n    # Initialize the variable to check if the square root is an integer\n    is_integer = False\n\n    # Iterate until the upper bound is less than or equal to the lower bound\n    while upper_bound >= lower_bound:\n        # Calculate the square root of the upper bound\n        square_root = (upper_bound + lower_bound) / 2\n\n        # If the square root is an integer, return True\n        if int(square_root) ** 2 == n:\n            return True\n\n        # If the square root is greater than the square root of n, update the upper bound\n        elif int(square_root) ** 2 > n:\n            upper_bound = int(square_root) - 1\n\n        # If the square root is less than the square root of n, update the lower bound\n        else:\n            lower_bound = int(square_root) + 1\n\n    # If the while loop is exited without finding a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case\n    if n < 0:\n        return False\n\n    # Iterate until the square root of the number is greater than the number itself\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(f\"The product of the numbers in the list is even: {product}\")\n    else:\n        print(f\"The product of the numbers in the list is odd: {product}\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # Initialize a variable to store the product of the numbers in the list\n    product = 1\n    \n    # Iterate through the list of numbers and multiply each number by the product variable\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or odd and return the result\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        print(\"The product of numbers in the list is even.\")\n    else: \n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return (product % 2) == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum of all lists\n    max_sum = max(sum(lst) for lst in lists)\n    # Find the list(s) with the maximum sum\n    max_lists = [lst for lst in lists if sum(lst) == max_sum]\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(len(lists)):\n                if i!= k and j!= k:\n                    current_sum += lists[k][j]\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                max_list.append([lists[i][j]])\n                \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            curr_sum = sum(lists[i]) + sum(lists[j])\n\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_list = [lists[i], lists[j]]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for list in lists:\n        sum_list = sum(list)\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for lst in lists:\n        sum_lst = sum(lst)\n\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n    # Initialize the list of maximum sums to an empty list\n    max_sums = []\n    # Loop over the input lists\n    for lst in lists:\n        # Initialize the current sum to zero\n        current_sum = 0\n        # Loop over the elements of the current list\n        for num in lst:\n            # Add the current element to the current sum\n            current_sum += num\n            # If the current sum is greater than the maximum sum so far, update the maximum sum and the list of maximum sums\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sums = [current_sum]\n            # If the current sum is equal to the maximum sum so far, add it to the list of maximum sums\n            elif current_sum == max_sum:\n                max_sums.append(current_sum)\n    # Return the list of maximum sums\n    return max_sums"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [lists[i]]\n        elif current_sum == max_sum:\n            result.append(lists[i])\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > 0:\n                current_sum = sum(lists[i][j:]) + lists[i][j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = [lists[i][j]]\n                elif current_sum == max_sum:\n                    max_list.append(lists[i][j])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a dictionary to store the maximum sum for each list\n    max_sum_dict = {}\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        # If the sum is greater than the current maximum sum for that list, update the max_sum_dict\n        if sum_lst > max_sum_dict.get(lst, 0):\n            max_sum_dict[lst] = sum_lst\n    # Find the list with the highest sum and return it\n    return max(lists, key=lambda x: max_sum_dict.get(x, 0))"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_run = []\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == 0 or not test_str[i-1].isupper():\n                uppercase_run.append(i)\n        else:\n            if len(uppercase_run) > 0 and i - uppercase_run[-1] > 1:\n                return max(uppercase_run)\n            uppercase_run = []\n    if len(uppercase_run) > 0 and len(test_str) - uppercase_run[-1] > 1:\n        return max(uppercase_run)\n    return 0"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to keep track of the maximum run length and current run length\n    max_run = 0\n    run_length = 0\n\n    # iterate through the string\n    for char in test_str:\n        # if the character is uppercase and the previous character was not uppercase\n        if char.isupper() and not test_str[max_run - 1].isupper():\n            # increment the run length\n            run_length += 1\n            # if the run length is greater than the maximum run length so far, update the maximum run length\n            if run_length > max_run:\n                max_run = run_length\n        # if the character is not uppercase, reset the run length to 0\n        else:\n            run_length = 0\n\n    # return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                start = i\n        else:\n            current_length = 0\n    return test_str[start:start+max_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 1\n    max_run = 1\n    current_char = test_str[0].upper()\n\n    for i in range(1, len(test_str)):\n        if test_str[i].upper() == current_char:\n            run_length += 1\n        else:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 1\n            current_char = test_str[i].upper()\n\n    if run_length > max_run:\n        max_run = run_length\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    for char in test_str:\n        if char.isupper():\n            if prev_char is not None and prev_char.isupper():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n        prev_char = char\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n\n        if count == max_count:\n            current_run += 1\n\n    if current_run > max_count:\n        max_count = current_run\n\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    # create an empty dictionary to store the count of uppercase characters in each run\n    count_dict = {}\n\n    # initialize the current run as empty string\n    curr_run = \"\"\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the current character is uppercase, add it to the current run\n        if char.isupper():\n            curr_run += char\n        # if the current character is not uppercase, check if the current run is longer than the longest run seen so far\n        else:\n            # if the current run is longer than the longest run seen so far, update the longest run in the count_dict\n            if len(curr_run) > len(count_dict.get(curr_run, \"\")):\n                count_dict[curr_run] = len(curr_run)\n\n            # reset the current run to the new character\n            curr_run = char\n\n    # check if the current run is longer than the longest run seen so far\n    if len(curr_run) > len(count_dict.get(curr_run, \"\")):\n        count_dict[curr_run] = len(curr_run)\n\n    # return the key with the maximum value in the count_dict\n    return max(count_dict, key=count_dict.get)\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count == 1:\n                current_run = 1\n            elif uppercase_count == 2:\n                current_run = 2\n            else:\n                current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            uppercase_count = 0\n            \n    if current_run > max_run:\n        max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    If the list is empty, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            return num\n    return None  # if no odd number is found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    if test_tup[0] == K or test_tup[1] == K:\n        return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes in a tuple of n elements and an integer K and\n    returns True if K is present in the tuple and False otherwise.\n    \"\"\"\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a number K as inputs and returns a boolean value indicating if the given tuples contain K or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:i] + test_tup[i+1:]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # loop through both tuples and compare each element in the second tuple to its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # if no errors were found, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The lengths of the tuples are not equal!\")\n        return\n\n    # iterate through the tuples and compare each element in the second tuple to the corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is smaller than the second tuple!\")\n            return\n    print(\"The two tuples are equal!\")"
    }
]