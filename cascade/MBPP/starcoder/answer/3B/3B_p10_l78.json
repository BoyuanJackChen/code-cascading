[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    \n    # Loop through each element in the first list\n    for element in test_tup1:\n        # If the element is in the second list and not already in the set, add it to the set\n        if element in test_tup2 and element not in shared_set:\n            shared_set.add(element)\n    \n    # Return the set of shared elements\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of integers as input, and returns a list of the elements that are present in both tuples.\n    \"\"\"\n    # Concatenate the tuples to get a single list\n    combined_list = test_tup1 + test_tup2\n    # Create an empty list to store the shared elements\n    shared_list = []\n    # Loop through the combined list and compare each element with every other element\n    for i in range(len(combined_list)):\n        for j in range(len(combined_list)):\n            if i!= j:\n                if combined_list[i] == combined_list[j]:\n                    shared_list.append(combined_list[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            return element\n    return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = set(test_tup1).intersection(set(test_tup2))\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty set to store the shared elements\n    shared_elements = set()\n    \n    # loop through each element in the first list\n    for element1 in test_tup1:\n        # check if the element is in the second list\n        if element1 in test_tup2:\n            # if the element is in both lists, add it to the shared elements set\n            shared_elements.add(element1)\n    \n    # return the shared elements set as a list\n    return list(shared_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if number is less than 2\n    if n < 2:\n        return True\n\n    # Check if number is divisible by any number from 2 to n-2\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If no factors found, number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a max heap from the first n numbers\n    hq.heapify(nums[:n])\n\n    # Pop the maximum n elements and add the remaining elements to the end of the heap\n    for num in nums[n:]:\n        if num > hq.heappop(nums[:n]):\n            # If the number is greater than the maximum number in the heap, add it to the heap\n            hq.heappush(nums[:n], num)\n        else:\n            # If the number is not greater than the maximum number in the heap, pop the maximum number in the heap\n            hq.heappop(nums[:n])\n\n    # Return the n largest numbers in descending order\n    return nums[:n][::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [-x for x in nums] # create a min heap from the negative values of the input list\n    for i in range(n): # pop off the n largest integers from the heap and return them in descending order\n        heapq.heappop(heap)\n    return [-x for x in heap] # convert the popped integers back to negative values and return them in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a heap\n    heap = hq.nlargest(n, nums)\n    # Return the heap as a list\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap and return the n largest numbers\n    heap = [(-num, i) for i, num in enumerate(nums)]\n    hq.heapify(heap)\n    return [num for num, _ in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list into a min heap\n    nums_heap = hq.nlargest(n, nums)\n    # Convert the heap into a list\n    result = []\n    while nums_heap:\n        result.append(nums_heap[0])\n        hq.heappop(nums_heap)\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap with the first n elements of the list\n    max_heap = hq.nlargest(n, nums)\n    # Return the max-heap as a list\n    return list(max_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap from the given list of numbers\n    hq.heapify(nums)\n\n    # Pop the n largest numbers from the heap\n    for _ in range(n):\n        hq.heappop(nums)\n\n    # Return the n largest numbers in descending order\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap,-num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return -max_heap\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return False\n    \n    # Find the power of 2 \n    power = 0\n    while x > 1:\n        x >>= 1\n        power += 1\n    \n    # Check if there is any bit position where the numbers differ\n    for i in range(1, power + 1):\n        if ((x >> i) & 1)!= ((x >> i) ^ y >> i) & 1:\n            return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert the given number to binary\n    binary_x = bin(x)[2:]\n    # check if the binary representation of both numbers differ only at one bit position\n    if binary_x!= '0' and binary_x[::-1] == binary_x[::-2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only or not.\n\n    Parameters\n    ----------\n    x : int\n        The first number to compare.\n\n    Returns\n    -------\n    bool\n        True if the two numbers differ at one bit position only, False otherwise.\n\n    \"\"\"\n    if x & (x - 1) == 0:  # if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0 or x == 1:\n        return True\n    \n    while x % 2 == 0:\n        x //= 2\n    \n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x & (x-1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expression to find all words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n\n    # Return list of all matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function will find all words that are at least 4 characters long in a string.\n    '''\n    # define the regular expression pattern to match words\n    pattern = re.compile(r'\\b\\w+\\b')\n    # find all the words that match the pattern in the text\n    matches = pattern.findall(text)\n    # filter out words that are less than 4 characters long\n    long_words = [word for word in matches if len(word) >= 4]\n    # return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expression to match words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use re.findall() to find all matches in the string\n    matches = re.findall(pattern, text)\n\n    # Print all matches\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b' # matches words with 4 or more characters\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # convert the string to lowercase for simplicity\n    str = str.lower()\n    \n    # initialize the count of rotations to 0\n    count = 0\n    \n    # check if the length of the string is odd or not\n    if len(str) % 2 == 1:\n        # if the length is odd, check if the middle character is a vowel\n        if str[len(str)//2] in ['a', 'e', 'i', 'o', 'u']:\n            # if the middle character is a vowel, return 0\n            return 0\n    \n    # loop through the string and check if the current character is the same as the next character\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            # if the characters are the same, return the count of rotations as 1\n            return count+1\n        count += 1\n    \n    # if the string is not found with the same characters, return the count of rotations as 2\n    return count+2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    else:\n        min_rotations = float('inf')\n        for i in range(str_len):\n            for j in range(i+1, str_len):\n                substr = str[i:j+1]\n                if substr == str[j::-1]:\n                    if j - i + 1 < min_rotations:\n                        min_rotations = j - i + 1\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize a variable to store the number of rotations required to get the same string\n    rotations = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Calculate the position of the character in the string after rotating one character to the left\n        pos = (i + 1) % len(str)\n        # If the current character is not equal to the character at the new position, increment the rotation count\n        if str[i]!= str[pos]:\n            rotations += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        # check if str[i] can be appended to str[i-1]\n        if str[i] == str[i-1] + str[i-1]:\n            # check if the number of rotations required to get the same string is greater than 0\n            if str[i] == str[-1]:\n                return 0\n            # check if the number of rotations required to get the same string is greater than the current minimum\n            minRotations = find_Rotations(str[:i] + str[-1] + str[:i][::-1] + str[-1][::-1])\n            if minRotations > 0:\n                return minRotations + 1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for char in freq:\n        if freq[char] % 2!= 0:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        freq[c] = freq.get(c, 0) + 1\n\n    # create a list of all characters in the string\n    chars = list(str)\n\n    # sort the characters based on their frequency in the string\n    sorted_chars = sorted(chars, key=lambda x: freq[x], reverse=True)\n\n    # initialize the minimum number of rotations to be equal to the length of the string\n    min_rotations = n\n\n    # iterate through the sorted characters and check if the frequency of each character is equal to 1\n    for c in sorted_chars:\n        if freq[c] == 1:\n            # if the frequency of the character is 1, then the character must be part of the string\n            # check if the character can be added to the end of the string to get the same string\n            if str[:n-1] + c + str[n-1:] == str:\n                # if it can be added to the end of the string, then the character is part of the string and we can increment the minimum number of rotations\n                min_rotations -= 1\n                # if the frequency of the character is greater than 1, then we need to rotate the character to make the frequency equal to 1\n                if freq[c] > 1:\n                    # find the index of the character in the list of characters and rotate it to its correct position\n                    chars.remove(c)\n                    index = chars.index(c)\n                    chars.insert(index - freq[c], c)\n                    # update the frequency of the character in the dictionary\n                    freq[c] = 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        # check for rotations by swapping adjacent characters\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                str = str[j] + str[i] + str[j]\n                break\n        else:\n            # there are no rotations by swapping adjacent characters\n            return 0\n\n    # check for rotations by swapping first and last characters\n    if str[0] == str[-1]:\n        str = str[-1] + str[0] + str[-1]\n        return 1\n\n    # check for rotations by swapping first and second characters\n    if str[0] == str[1]:\n        str = str[1] + str[0] + str[1]\n        return 2\n\n    # no rotations found\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Define the length of the string \n    n = len(str)\n    \n    # Initialize the minimum number of rotations to 0 \n    min_rot = 0\n    \n    # Initialize the maximum number of rotations to 0 \n    max_rot = 0\n    \n    # Initialize the current string and its reverse \n    curr_str = str[::-1]\n    rev_str = str\n    \n    # Loop through the string one character at a time \n    for i in range(n):\n        \n        # If the current and reverse string are not equal, there is a rotation \n        if curr_str!= rev_str:\n            \n            # Increment the minimum number of rotations by 1 \n            min_rot += 1\n            \n            # If the minimum number of rotations is greater than the maximum number of rotations, update the maximum number of rotations to the minimum number of rotations \n            if min_rot > max_rot:\n                max_rot = min_rot\n            \n            # Initialize the current string and its reverse \n            curr_str = str[i:] + str[:i]\n            rev_str = str[:n-i-1] + str[n-i-1:]\n    \n    # If the maximum number of rotations is still 0, it means the string is already the same after all rotations have been applied \n    if max_rot == 0:\n        return 0\n    \n    # Return the minimum number of rotations required to get the same string \n    return max_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    \n    for i in range(1, n): \n        if str[i] == str[0]: \n            return 0\n    \n    for i in range(1, n): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                return 1\n    \n    return 2\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    # count the number of occurrences of each character\n    freq = {}\n    for c in str:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # sort the characters by their frequency\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # count the minimum number of rotations required\n    min_rotations = 0\n    for i in range(n):\n        if sorted_chars[i][0]!= str[i]:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Splitting the string into individual characters\n    chars = list(s)\n    \n    # Initializing two pointers to 0 and length of string respectively\n    i = 0\n    j = len(chars) - 1\n    \n    # Looping through the characters of the string until the pointers meet\n    while i < j:\n        # Checking if the current character is equal to the given character\n        if chars[i] == ch:\n            # If yes, then increment the pointer of the starting index\n            i += 1\n        # If not, then decrement the pointer of the ending index\n        else:\n            j -= 1\n            \n    # Returning the modified string after removing the first and last occurrence of the character\n    return ''.join(chars[i:j+1])"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the character\n    s = s.replace(ch,'',1)\n    # remove last occurrence of the character\n    s = s.replace(ch,'',-1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Find the first and last index of the character to be removed\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    # Check if the character is present in the string\n    if first_index == -1 and last_index == -1:\n        return \"\"\n\n    # If the character is present in the string, remove the first and last occurrence\n    if first_index!= -1:\n        s = s[:first_index] + s[first_index+len(ch):]\n    if last_index!= -1:\n        s = s[:last_index-len(ch)] + s[last_index:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # initialize two pointers, start and end, to 0\n    start = 0\n    end = len(s) - 1\n\n    # loop while start is less than end\n    while start < end:\n        # if the character at start index is equal to the given character, then remove it\n        if s[start] == ch:\n            s = s[:start] + s[start+1:]\n            start += 1 # move start pointer to the next index\n\n        # if the character at end index is equal to the given character, then remove it\n        elif s[end] == ch:\n            s = s[:end] + s[end-1:]\n            end -= 1 # move end pointer to the previous index\n\n        # if neither of the above conditions are true, then move start pointer to the next index\n        else:\n            start += 1\n\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    if len(s) == 1:\n        return s\n\n    # check if the first character is the specified character\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n\n    # check if the last character is the specified character\n    if s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n\n    # remove the specified character from the middle\n    new_s = ''\n    for c in s:\n        if c!= ch:\n            new_s += c\n\n    return new_s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        return s[:s.index(ch)+1]+s[s.index(ch)+2:]\n    else: \n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i] == ch:\n            del s[i]\n        else:\n            i += 1\n    j = len(s) - 1\n    while j >= 0:\n        if s[j] == ch:\n            del s[j]\n        else:\n            j -= 1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        return s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        return s[:len(s)-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a copy of the matrix to avoid modifying the original\n    M = M.copy()\n\n    # Iterate over each row of the matrix\n    for row in range(len(M)):\n        # Sort the row in ascending order\n        M[row] = sorted(M[row])\n\n        # Calculate the sum of the row and add it to the previous row's sum\n        if row > 0:\n            M[row-1][0] += sum(M[row])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # sort the matrix rows based on the row sums\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n\n    # create a new matrix with the sorted rows\n    sorted_M = [[M[i][j] for j in sorted_rows] for i in range(len(M))]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples representing each row and its sum\n    rows = [(sum(row), row) for row in M]\n    # sort the list by the sum in ascending order\n    rows.sort()\n    # create a new matrix with the sorted rows\n    return [row for _, row in rows]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # create a list to store the indices of each row\n    row_indices = [i for i in range(n)]\n\n    # sort the row indices by the sum of their rows\n    row_indices.sort(key=lambda x: sum(M[x]), reverse=True)\n\n    # create a new matrix where each row is sorted according to the row indices\n    sorted_M = [[M[i][j] for j in row_indices] for i in range(n)]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # transpose the matrix\n    M = [list(x) for x in zip(*M)]\n\n    # sort each row of the transposed matrix\n    for row in M:\n        row.sort()\n\n    # transpose the sorted matrix back to its original form\n    M = [list(x) for x in zip(*M)]\n\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    # create a list of all row sums\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a new matrix with the sorted row sums\n    sorted_M = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            sorted_M[i][j] = M[i][j] + row_sums[i]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # flatten the matrix\n    M = [row for row in M]\n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    # sort the rows based on the sums in descending order\n    M.sort(key=lambda x: sums.index(sum(x)), reverse=True)\n    # reshape the matrix back to its original shape\n    M = [row for row in zip(*M)]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n    \"\"\"\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes in three parameters: length (l), width (b), and height (h) of a triangular prism.\n    The function returns the volume of the prism.\n    '''\n    V = (l*b*h)/3\n    print(\"The volume of the prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the prism\n    V = l * b * h\n\n    # Return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6  # Formula to find the volume of the triangular prism\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the triangular prism\n    volume = 0.5 * l * b * h\n\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]*_?[a-z]*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z])_([a-z])')\n    matches = underscore_pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9]+_[a-z0-9]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_?[a-z]*')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z]+)_([a-z]+)') # regex pattern for underscore-separated sequences of lowercase letters\n    matches = underscore_pattern.findall(text) # find all matches of the pattern in the text\n    return any(matches) # return true if any underscore-separated sequences were found, false otherwise"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z])(_)+')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(chr(i))\n    char_list = set(char_list)\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    return list(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] in string:\n            string_list.pop(i)\n            i -= 1\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = list(set(string) - set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))\n    result = ''\n    for char in string:\n        if char not in chars_to_remove:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string1, string2): \n    \"\"\"\n    This function takes two strings as input and returns a new string where all the characters in string1 are present in string2 but not present in string1.\n    \"\"\"\n    list1 = list(string1)\n    list2 = list(string2)\n    result = [char for char in list1 if char not in list2]\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_count = [0] * len(string2)  # to store the count of characters in the second string\n    \n    for char in string2:\n        char_count[ord(char)] += 1\n    \n    new_string = \"\"\n    for char in string1:\n        if ord(char) not in char_count:  # if the character is not present in the second string\n            new_string += char\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list of characters\n    lst = list(string)\n    \n    # create a set of characters in the second string\n    set_chars = set(lst)\n    \n    # remove the characters in the second string from the first string\n    for char in set_chars:\n        if char in lst:\n            lst.remove(char)\n    \n    # convert the list of characters back to a string\n    result = ''.join(lst)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string, characters_to_remove):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string (str): The original string.\n        characters_to_remove (str): The characters to remove from the original string.\n\n    Returns:\n        (str): The modified string with removed characters.\n\n    \"\"\"\n    # Convert the characters to a set to remove duplicates\n    characters_to_remove = set(characters_to_remove)\n    # Convert the string to a list\n    string_list = list(string)\n    # Iterate over the string list\n    for index, char in enumerate(string_list):\n        # If the character is not in the set of characters to remove\n        if char not in characters_to_remove:\n            # Remove the character from the list\n            del string_list[index]\n    # Convert the list back to a string\n    modified_string = ''.join(string_list)\n    return modified_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create a list of all the characters in the first string\n    char_list = list(string)\n\n    # Create a list of all the characters in the second string\n    char_set = set(string)\n\n    # Create a set to store the common characters in the two lists\n    common_chars = char_set.intersection(char_list)\n\n    # Iterate over the characters in the first string and remove those that are present in the common set\n    for i in range(len(string)):\n        if string[i] in common_chars:\n            del char_list[i]\n\n    # Convert the list to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove characters from string which are present in the second string\n    for i in range(len(string)):\n        if string[i] in string:\n            string = string[:i] + string[i+1:]\n    \n    # Convert the resulting string into a list of integers\n    str_list = list(string)\n    \n    # Pad the list with zeros if its length is less than NO_OF_CHARS\n    if len(str_list) < NO_OF_CHARS:\n        str_list += [0]*(NO_OF_CHARS - len(str_list))\n    \n    return str_list"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) < 2:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    return len(arraynums)!= len(unique_nums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the array\n    frequency_dict = {}\n    \n    # Iterate through the array and update the frequency dictionary\n    for num in arraynums:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Iterate through the frequency dictionary and check if any element appears more than once\n    for num, freq in frequency_dict.items():\n        if freq > 1:\n            return True\n    \n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements and their indices\n    unique_dict = {}\n    for i, num in enumerate(arraynums):\n        # check if the current element is already in the dictionary\n        if num in unique_dict:\n            # if it is, return True because there is a duplicate element in the array\n            return True\n        # otherwise, add the element and its index to the dictionary\n        else:\n            unique_dict[num] = i\n    # if no duplicate element is found in the array, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element is already in the set (i.e., unique)\n        if num in unique_set:\n            # if it is, the array contains a duplicate element\n            return True\n        # if the element is not already in the set, add it to the set\n        else:\n            unique_set.add(num)\n\n    # if the loop completes without finding a duplicate, the array does not contain a duplicate\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the number of occurrences of each number in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Check if there are any duplicate numbers in the count dictionary\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Check if the given number is a prime number\n    for prime in primes:\n        if x % prime == 0:\n            return False\n\n    # If the number is not prime, it's not a woodball\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 0:\n        print(x, \"is a woodball.\")\n    else:\n        print(x, \"is not a woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodall number'\n    else:\n        return 'Not a Woodall number'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x % 3 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0 and x % 2 == 0:\n        return True\n    elif x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 10 and x <= 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    elif x < 2:\n        return True\n    elif x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Number is not a woodball'\n    elif x < 2 or x > 100:\n        return 'Number is not within the given range'\n    else:\n        return 'Number is a woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1 or x % 10 == 3 or x % 10 == 7:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    return reverse == 2 * num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num % 10\n        num //= 10\n    if rev_num == 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num - 1) < (num * 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - reverse < 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    if reverse == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num - 1) % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Find the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    if reverse < 10*(num//2) or reverse == 10*(num//2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # reverse the given number\n    reverse = str(num)[::-1]\n\n    # convert the reversed number to integer\n    reversed_num = int(reverse)\n\n    # check if the reversed number is one less than twice the original number\n    if reversed_num - num < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(1, 10**n):\n        if sum(int(d) for d in str(i)) == i:\n            max_num = i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n\n    :param arr: List of digits (integers).\n    :return: Integer.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_num = max(max_num, arr[i] + arr[j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True) # Sort the digits in descending order\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if arr[i] < arr[j]:\n                num = arr[i] + arr[j]\n                if num > max_num:\n                    max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # initialize variables\n    num = 0\n    count = 0\n    \n    # loop through the list of digits and add up the values\n    for digit in arr:\n        num += int(digit) * (10 ** count)\n        count += 1\n        \n    # check if the sum is greater than 10^n\n    while num > (10 ** count):\n        count += 1\n        \n    # return the largest number that can be formed with the given list of digits\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as an argument and returns the maximum number that can be formed with the digits.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize the maximum number as the first digit\n    max_num = arr[0]\n\n    # Iterate over the sorted list from second to last digit\n    for i in range(1, len(arr)):\n        # Check if the current digit can be formed with the remaining digits from the list\n        if arr[i] <= 9:\n            # Calculate the maximum number formed with the current digit and the remaining digits from the list\n            max_num = max(max_num, (10 ** (len(arr) - i - 1)) * arr[i])\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the input array in descending order\n    arr.sort(reverse=True)\n    # initialize a variable to store the largest formed number\n    max_num = 0\n    # loop through the array and check each digit for its presence in the current number\n    for i in range(len(arr)):\n        if arr[i] in str(max_num):\n            max_num += arr[i]\n        else:\n            break\n    # return the largest formed number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            num = int(''.join(sorted(str(arr[i])+str(arr[j]))))\n            if num > max_num:\n                max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    '''\n    # Sort the input list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables to store the largest number formed with the digits and its length\n    max_num = 0\n    max_len = 0\n\n    # Loop through each digit in the sorted list\n    for num in arr:\n        # Initialize variables to store the current number and its length\n        cur_num = 0\n        cur_len = 0\n\n        # Loop through each digit in the input list\n        for digit in num:\n            # If the current digit is a digit, add it to the current number\n            if digit.isdigit():\n                cur_num = cur_num*10 + int(digit)\n                cur_len += 1\n\n        # If the current number is greater than the maximum number formed so far, update the maximum number\n        if cur_num > max_num:\n            max_num = cur_num\n            max_len = cur_len\n\n    # Return the largest number formed with the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Sort the input array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number with the first element\n    max_num = arr[0]\n\n    # Loop through the array and form larger numbers by adding digits from left to right\n    for i in range(1, len(arr)):\n        if arr[i] + arr[i-1] > max_num:\n            max_num = arr[i] + arr[i-1]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Sort the given list of digits in descending order\n    arr.sort(reverse=True)\n    # Initialize the maximum number formed with digits in the list to 0\n    max_num = 0\n    # Iterate through each digit in the list\n    for digit in arr:\n        # Multiply the current digit with the maximum number formed so far and add it to the total\n        max_num = max_num + digit * max_num\n    # Return the maximum number formed with digits in the list\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y > 0:\n        print(\"The given integers have the same sign.\")\n    else:\n        print(\"The given integers have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have same sign\"\n    else:\n        return \"One number has positive sign and the other number has negative sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y < 0:\n        print(\"The given integers have opposite signs\")\n    else:\n        print(\"The given integers have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    Args:\n    x (int): An integer value.\n    y (int): An integer value.\n\n    Returns:\n    bool: Returns True if the two integers have opposite sign, else False.\n    \"\"\"\n\n    # Check if both the numbers have the same sign or not\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    elif x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x <= 0 and y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, else False.\n    \"\"\"\n    # Check if both integers have the same sign\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % (i * (2 * i - 1)) == 0:\n                return True\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    for i in range(1, n+1):\n        if i**2 == (n-i)**2:\n            return True\n    \n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_count = 0\n    while octagonal_count <= n:\n        if octagonal_count**2 == n:\n            return octagonal_count\n        elif octagonal_count**2 > n:\n            return None\n        octagonal_count += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # First octagonal number is 1\n    if n == 1:\n        return True\n\n    # Second octagonal number is 16\n    if n == 2:\n        return True\n\n    # Find the square of the input number\n    square = n ** 2\n\n    # Check if the square is divisible by 8\n    if square % 8 == 0:\n        return True\n\n    # Check if the square is divisible by 24\n    if square % 24 == 0:\n        return True\n\n    # Check if the square is divisible by 64\n    if square % 64 == 0:\n        return True\n\n    # Check if the square is divisible by 128\n    if square % 128 == 0:\n        return True\n\n    # Check if the square is divisible by 256\n    if square % 256 == 0:\n        return True\n\n    # Check if the square is divisible by 512\n    if square % 512 == 0:\n        return True\n\n    # Check if the square is divisible by 1024\n    if square % 1024 == 0:\n        return True\n\n    # If none of the above conditions are met, it's not an octagonal number\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 27\n    for i in range(n):\n        if a + b + c == 24:\n            return a + b + c\n        a = a + 1\n        b = b + 2\n        c = c - 1\n    return \"No octagonal number found.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"Input must be a positive integer.\"\n\n    # Compute the nth octagonal number using formula: n^3 - n^2 + 1\n    nth_octagonal = n ** 3 - n ** 2 + 1\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_octagonal(n // 2)\n    else:\n        return 4 * is_octagonal((n - 1) // 2) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    while a < n:\n        b = 1\n        while b < n:\n            if a**2 + b**2 == n**2:\n                return a**3 + b**3\n            b += 1\n        a += 1\n    return None\n\nn = int(input(\"Enter a number: \"))\nif is_octagonal(n):\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\nelse:\n    print(\"No octagonal number exists with this value.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Function to calculate the nth octagonal number\n    def octagon(n):\n        \"\"\"\n        Calculate the nth octagonal number.\n        \"\"\"\n        return n * (2*n - 1)\n    # Call the octagon function and return the result\n    return octagon(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1 + 7**0.5)**(1/2) + n\n\nprint(is_octagonal(10))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digits_sum = sum(map(int, substring))\n            count[digits_sum] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # initialize a dictionary to store the count of substrings of each length\n    substring_count = defaultdict(int)\n    \n    # loop through all possible substrings of length 1 to n\n    for i in range(len(s)):\n        substring_count[1] += 1\n    \n    # loop through all possible substrings of length 2 to n-1\n    for i in range(len(s)-1):\n        substring_count[2] += substring_count[1] - substring_count[i]\n    \n    # loop through all possible substrings of length 3 to n-2\n    for i in range(len(s)-2):\n        substring_count[3] += substring_count[2] - substring_count[i] - substring_count[i+1]\n        \n    # loop through all possible substrings of length 4 to n-3\n    for i in range(len(s)-3):\n        substring_count[4] += substring_count[3] - substring_count[i] - substring_count[i+1] - substring_count[i+2]\n        \n    # loop through all possible substrings of length 5 to n-4\n    for i in range(len(s)-4):\n        substring_count[5] += substring_count[4] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3]\n        \n    # loop through all possible substrings of length 6 to n-5\n    for i in range(len(s)-5):\n        substring_count[6] += substring_count[5] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4]\n        \n    # loop through all possible substrings of length 7 to n-6\n    for i in range(len(s)-6):\n        substring_count[7] += substring_count[6] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4] - substring_count[i+5]\n        \n    # loop through all possible substrings of length 8 to n-7\n    for i in range(len(s)-7):\n        substring_count[8] += substring_count[7] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4] - substring_count[i+5] - substring_count[i+6]\n        \n    # loop through all possible substrings of length 9 to n-8\n    for i in range(len(s)-8):\n        substring_count[9] += substring_count[8] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4] - substring_count[i+5] - substring_count[i+6] - substring_count[i+7]\n        \n    # loop through all possible substrings of length 10 to n-9\n    for i in range(len(s)-9):\n        substring_count[10] += substring_count[9] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4] - substring_count[i+5] - substring_count[i+6] - substring_count[i+7] - substring_count[i+8]\n        \n    # loop through all possible substrings of length 11 to n-10\n    for i in range(len(s)-10):\n        substring_count[11] += substring_count[10] - substring_count[i] - substring_count[i+1] - substring_count[i+2] - substring_count[i+3] - substring_count[i+4] - substring_count[i+5] - substring_count[i+6] - substring_count[i+7] - substring_count[i+8] - substring_count[i+9]\n        \n    # loop through all possible substrings of length 12 to n-11\n    for i in"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #creating a dictionary to store the count of substrings for each length of digit sum\n    digit_sum_dict = defaultdict(int)\n    \n    #iterating through the string\n    for i in range(len(s)):\n        #finding the digit sum for the current substring\n        digit_sum = sum(int(digit) for digit in s[i:i+5])\n        #incrementing the count of substrings for the current length of digit sum\n        digit_sum_dict[digit_sum] += 1\n    \n    #printing the count of substrings for each length of digit sum\n    for digit_sum, count in digit_sum_dict.items():\n        print(f\"The count of substrings with the sum of digits equal to {digit_sum} is {count}.\")"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with each sum of digits\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(d) for d in substring)\n            # Add the count of the substring to the count dictionary\n            count_dict[substring_sum] += 1\n\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    def is_valid_substring(substring):\n        digits_sum = sum(int(digit) for digit in substring)\n        return digits_sum == len(substring)\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if is_valid_substring(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with each length\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring and store the count of substrings with the given length\n            count[j-i+1] += sum([int(c) for c in s[i:j+1]])\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with a digit of the length of a substring\n    count = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # calculate the sum of digits of the substring\n        substring_sum = sum(int(d) for d in s[i:i+len(str(len(s))))]\n        # increment the count of substrings with the same sum of digits\n        count[substring_sum] += 1\n    # return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    digit_count = defaultdict(int)\n    for i in range(n):\n        digit_count[int(s[i])] += 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if j-i == len(s):\n                digit_sum = sum(digit_count[int(s[k])] for k in range(i,j))\n                if digit_sum == len(s):\n                    count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i+length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings\n    substring_count = defaultdict(int)\n\n    # Loop through all the substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            if substring_sum == j-i:\n                substring_count[substring_sum] += 1\n\n    # Return the count of substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs: # if list is empty\n        return None\n    else:\n        return min(xs) # return the smallest number in the list"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list `xs` as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Loop through the rest of the list\n    for num in xs[1:]:\n        # Check if the current number is smaller than the smallest number\n        if num < smallest:\n            # Update the smallest number to be the current number\n            smallest = num\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf') # initialize smallest to infinity\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Find the smallest number in the list\n    smallest = xs[0]\n    # Loop through the rest of the list and compare each number to the smallest\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the maximum and minimum values in the list\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # Loop through the list and update the min and max values\n    for tup in test_list:\n        if tup[0] < min_val:\n            min_val = tup[0]\n        if tup[1] > max_val:\n            max_val = tup[1]\n\n    # Return the maximum difference between the pairs in the list\n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # initialize maximum difference\n    max_diff = 0\n\n    # iterate through the sorted list\n    for i in range(len(sorted_list) - 1):\n        # calculate the difference between current pair and next pair\n        diff = sorted_list[i+1][0] - sorted_list[i][1]\n\n        # update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(diff, max_diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the given list in ascending order\n    test_list.sort()\n\n    # Initialize two variables to store the maximum and minimum values\n    max_diff = min_diff = float('-inf')\n\n    # Iterate through the sorted list\n    for i in range(len(test_list)-1):\n        # Calculate the difference between adjacent pairs\n        diff = test_list[i+1] - test_list[i]\n\n        # Update the maximum and minimum values\n        if diff > max_diff:\n            max_diff = diff\n        elif diff < min_diff:\n            min_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples where the second value is the subject's mark\n    sorted_marks = [(subject[1], subject[0]) for subject in subjectmarks]\n\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks.sort()\n\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second element of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flatten_list = []\n        for item in data_list:\n            flatten_list.extend(recursive_list_sum(item))\n        return flatten_list\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    flat_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flat_list.extend(recursive_list_sum(item))\n        else:\n            flat_list.append(item)\n    \n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Flatten a list by calling itself on each element.\n        \"\"\"\n        if isinstance(lst, list):\n            return sum(flatten(sub_lst) for sub_lst in lst)\n        else:\n            return lst\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Recursive function to flatten list and sum all elements\n    def flatten_list(data_list, total=0):\n        if isinstance(data_list, list):\n            for item in data_list:\n                if isinstance(item, list):\n                    total += flatten_list(item)\n                else:\n                    total += item\n            return total\n        else:\n            return data_list\n    \n    # Flatten the list\n    flattened_list = flatten_list(data_list)\n    \n    # Sum all elements in the flattened list\n    total_sum = 0\n    for item in flattened_list:\n        if isinstance(item, int):\n            total_sum += item\n    \n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list += flatten_list(item)\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define an empty list to store the flattened elements\n    flattened_list = []\n    # Loop through each element of the input list\n    for element in data_list:\n        # If the element is another list, recursively call the function\n        if isinstance(element, list):\n            flattened_list.extend(recursive_list_sum(element))\n        # If the element is not a list, append it to the flattened list\n        else:\n            flattened_list.append(element)\n    # Sum the flattened list and return the result\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        flatten_list = []\n        for item in data_list:\n            flatten_list.extend(recursive_list_sum(item))\n        return flatten_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Function to flatten a list\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if type(item) == list:\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n    \n    # Flatten the list\n    flat_list = flatten(data_list)\n    \n    # Function to sum the flattened list\n    def sum_list(lst):\n        if len(lst) == 0:\n            return 0\n        else:\n            return lst[0] + sum_list(lst[1:])\n    \n    # Sum the flattened list\n    return sum_list(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a dictionary to store the Bell numbers as keys and their corresponding partitions as values.\n    partition_dict = {0: 1, 1: 1}\n\n    # Iterate from 2 to n-1.\n    for i in range(2, n+1):\n        # Calculate the number of partitions for the current Bell number.\n        num_partitions = 0\n\n        # Iterate from 0 to i-1.\n        for j in range(0, i):\n            # Calculate the number of partitions for the current Bell number when j is chosen as the partition index.\n            num_partitions += partition_dict[j]\n\n        # Store the number of partitions for the current Bell number in the dictionary.\n        partition_dict[i] = num_partitions\n\n    # Return the number of partitions for the Bell number n.\n    return partition_dict[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize the number of ways to partition as 1\n    ways = 1\n    \n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return 0\n    \n    # Check if n is greater than or equal to 1\n    elif n >= 1:\n        # Check if n is equal to 1\n        if n == 1:\n            # Return the number of ways to partition a set of Bell numbers as 1\n            return ways\n        else:\n            # Loop through the range of n\n            for i in range(2, n + 1):\n                # Increment the number of ways to partition as the sum of the number of ways to partition the set of Bell numbers up to i and the number of ways to partition the set of Bell numbers up to n - i\n                ways = ways + bell_number(i) + bell_number(n - i)\n    \n    # Return the number of ways to partition a set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    def partition_helper(i, k):\n        if i == 1 and k == 0:\n            return 1\n        elif i == 1:\n            return 0\n        elif k == 0:\n            return 1\n        elif i == 0:\n            return 0\n        else:\n            return partition_helper(i-1, k-1) + partition_helper(i-1, k)\n\n    # Compute the number of ways to partition the set of Bell numbers\n    num_ways = partition_helper(n, n)\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the number of ways to partition the set of Bell numbers to 0\n    ways = 0\n    \n    # Initialize a boolean array to keep track of whether each number in the set is present or not\n    present = [False] * (n + 1)\n    \n    # Initialize a variable to keep track of the last number we checked\n    last = 0\n    \n    # Loop through the first n Bell numbers\n    for i in range(1, n+1):\n        \n        # If the number i is present, we add 1 to the number of ways to partition the set\n        if present[i]:\n            ways += 1\n        \n        # Check all the numbers from i to n to see if we can partition the set with those numbers\n        for j in range(i, n+1):\n            \n            # If we can partition the set with the numbers i to j, we mark them as present\n            present[j] = True\n            \n            # If we can partition the set with the numbers from i to j and i to last, we add 1 to the number of ways\n            if present[i] and present[j] and not present[last]:\n                ways += 1\n            \n            # Reset the present array\n            present[j] = False\n        \n        # Update the last number we checked\n        last = i\n        \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # initialize the number of ways to partition the set to 0\n    ways = 0\n\n    # iterate over the range of n+1\n    for i in range(1, n+1):\n        # count the number of ways to partition the set of Bell numbers into 2n parts\n        ways += bell_number(n-i)\n\n    # return the number of ways to partition the set of Bell numbers into 2n parts\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition_helper(n, memo):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if memo[n]:\n            return memo[n]\n        ways = partition_helper(n - 1, memo) + partition_helper(n - 2, memo)\n        memo[n] = ways\n        return ways\n\n    memo = [False] * (n + 1)\n    memo[0] = True\n    memo[1] = True\n    return partition_helper(n, memo)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Loop through each odd number up to n\n    for i in range(1, n, 2):\n        # Find the number of ways to partition the first i+1 even numbers\n        first_i_even_ways = bell_number(i-1)\n        \n        # Find the number of ways to partition the first i even numbers\n        first_i_ways = bell_number(i)\n        \n        # Multiply the two to get the number of ways to partition the first i odd numbers\n        ways *= first_i_even_ways + first_i_ways\n    \n    # Return the final result\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    bell_list = [0] * (n+1)\n    bell_list[0] = 0\n    bell_list[1] = 1\n    bell_list[2] = 1\n    \n    # Calculate the bell numbers\n    for i in range(3, n+1):\n        bell_list[i] = bell_list[i-1] + bell_list[i-2]\n    \n    return bell_list[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the Bell numbers\n    bell_numbers = []\n    \n    # Loop through the first n Bell numbers\n    for i in range(1, n+1):\n        # Add each Bell number to the list\n        bell_numbers.append(i)\n    \n    # Initialize a variable to store the number of ways to partition the set\n    ways = 0\n    \n    # Loop through the Bell numbers and calculate the number of ways to partition the set\n    for i in range(n):\n        # Calculate the number of ways to partition the set without i-th Bell number\n        ways += len(bell_numbers) // (i+1)\n        \n        # Remove i-th Bell number from the list\n        bell_numbers.pop(bell_numbers.index(i))\n    \n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1: # base case for empty or single-element array\n        return True\n    for i in range(1, n):\n        if A[i] <= A[i-1]: # if current element is less than previous element, then array is not monotonic\n            return False\n    return True # if we reach here, then the array is monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] > A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n\n    # Check if the array is monotonic in the first half of the array\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n\n    # Check if the array is monotonic in the second half of the array\n    elif A[len(A)-1] >= A[len(A)-2]:\n        for i in range(len(A)-2, 0, -1):\n            if A[i] <= A[i+1]:\n                return False\n        return True\n\n    # If the arrays are not monotonic in either half, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is empty or contains only one element\n    if len(A) <= 1: \n        return True\n\n    # Check if array is monotonic in increasing order\n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i+1]: \n                return False\n        return True\n    # Check if array is monotonic in decreasing order\n    elif A[0] >= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i+1]: \n                return False\n        return True\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:])\n    elif A[0] < A[-1]:\n        return all(A[i] < A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] > A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic \n    and False otherwise.\n    '''\n    # Initialize variables\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n\n    # Check for increasing and decreasing sequences\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n\n    # If both increasing and decreasing sequences are found, then the array is monotonic\n    if is_increasing and is_decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        raise TypeError('Both inputs must be lists')\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) > len(s):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If the length of the sublist is 0, return True\n    if len(s) == 0:\n        return True\n    # If the first element of the list is same as the first element of the sublist\n    elif l[0] == s[0]:\n        # Remove the first element of the list and sublist and call the function recursively\n        return is_sublist(l[1:], s[1:])\n    else:\n        # If the first element of the list is not same as the first element of the sublist\n        # then remove the first element of the sublist and call the function recursively\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        for i in l:\n            if is_sublist([i] + l, s):\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the result of the function\n    result = True\n\n    # Loop through each tuple in the input list\n    for i in Input:\n        # Check if the length of each tuple is equal\n        if len(i)!= len(Input[0]):\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # To check if all the tuples have equal length\n    for i in range(len(Input)):\n        # To check if all the tuples have same length\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    count = 0\n    for tuple_ in Input:\n        if len(tuple_) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check if all tuples have same length\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    count = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i][j])!= len(Input[i][j+1]):\n                count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # check if the input is a list of tuples\n    if not isinstance(Input, list):\n        return False\n    \n    # check if all the tuples have the same length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = gap // 1.3  # Calculate the new gap for the next iteration\n\n        # Bubble sort by iterating through the array with two nested loops\n        for i in range(gap, n):\n            for j in range(0, n-i-gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap = int(gap / 1.3)\n            if gap < 1:\n                gap = 1\n        else:\n            gap = int(gap * 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # define a function to check if the array is sorted in ascending order\n    def is_sorted(arr):\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n\n    # define a function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # define a function to move the sorted part of the array to the end\n    def move_sorted(arr):\n        k = len(arr)\n        while k > 1 and is_sorted(arr[:k]):\n            k -= 1\n        if k*1.0/2 < len(arr):\n            move_sorted(arr[:k])\n            move_sorted(arr[k:])\n\n    # define the main function\n    def sort(arr):\n        # check if the array is already sorted\n        if is_sorted(arr):\n            return arr\n\n        # initialize the gap and count variables\n        gap = len(arr) // 2\n        count = 0\n\n        # main loop to perform the sorting\n        while gap > 0:\n            count += 1\n            gap = (gap * 10) // 13\n            move_sorted(arr)\n\n        return arr\n\n    # call the main function to sort the array\n    sorted_nums = sort(nums)\n\n    return sorted_nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        count = 0\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                count += 1\n        gap = int(gap * 1.2)\n        if count == 0:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \n    The Comb Sort algorithm is an efficient sorting algorithm that sorts a list of elements in O(n log n) time.\n    It works by repeatedly swapping adjacent elements if they are in the wrong order. The algorithm can be \n    adapted to work on any list of elements, but it's most commonly used for sorting numerical arrays.\n    \n    The function takes a list of integers as input and returns the sorted list.\n    '''\n    \n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        # Move the gap closer to the center of the list\n        gap = int(gap / 1.3)\n        \n        for i in range(gap, n):\n            # Check if the element is in the correct position\n            if nums[i] < nums[i - gap]:\n                # If not, swap the elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n//2\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        n = gap\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap = int(gap/1.3)\n        \n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 10\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 1:\n        return False\n    elif n % 2 == 1:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 15 == 0:\n        return False\n    elif n % 5!= 0 and n % 15 == 0:\n        return False\n    elif n % 3!= 0 and n % 5 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if (i**2 == n or n == i**2):\n            print(n, \"=\", i**2, \"-\", n)\n            return True\n    print(n, \"is not a difference of two squares\")\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_Square(num):\n        '''\n        Helper function to check if a number is a square or not.\n        '''\n        return num == int(num ** 0.5) ** 2\n    \n    def is_Difference(num):\n        '''\n        Helper function to check if a number is a difference of two squares or not.\n        '''\n        return (num ** 2 == ((is_Square(num) + is_Square(2 * num)) % 4)) or (num ** 2 == ((is_Square(num) - is_Square(2 * num)) % 4))\n    \n    if is_Difference(n):\n        return \"The number can be represented as the difference of two squares.\"\n    else:\n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    while n > 4:\n        n = (n - 1) ** 2\n    return n == 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The number cannot be represented as the difference of two squares\"\n    # Checking if n is equal to 1 or 4 or 9 or 16\n    if n == 1 or n == 4 or n == 9 or n == 16:\n        return \"The number cannot be represented as the difference of two squares\"\n    # Checking for numbers divisible by 2\n    if n % 2 == 0:\n        return \"The number cannot be represented as the difference of two squares\"\n    # Now checking for the remaining cases\n    # Dividing n by 2 and checking if the result is a square\n    if (n//2)**2 == n:\n        return \"The number can be represented as the difference of two squares\"\n    else:\n        return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2+j**2 == n:\n                print(\"The number can be represented as the difference of two squares\")\n                break\n            elif j**2+i**2 == n:\n                print(\"The number can be represented as the difference of two squares\")\n                break\n            elif i**2+j**2 < n:\n                break\n    else:\n        print(\"The number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is a multiple of 4\n    if n % 4 == 0:\n        return False\n\n    # Check if n is a square\n    sqrt_n = int(n ** 0.5)\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n            else:\n                return False\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0 and (n//i)**2 == i:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    # Check if n is a square number\n    if n == int(n**0.5)**2:\n        return \"n is a square\"\n\n    # Initialize variables\n    i = 1\n    diff = 0\n\n    # Check if n can be represented as the difference of two squares\n    while diff*diff < n:\n        diff += i\n        i += 1\n\n    if diff*diff == n:\n        return \"n can be represented as the difference of two squares\"\n    else:\n        return \"n cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of the given number\n    sqrt = int(n**0.5)\n    \n    # Find the difference of the squares\n    diff = (sqrt * sqrt) - n\n    \n    # Check if the difference is a perfect square\n    for i in range(2, sqrt+1):\n        if diff == i*i:\n            return True\n        \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize variables to keep track of the index of the current pattern\n    current_pattern_index = 0\n    # initialize variables to keep track of the count of consecutive patterns\n    consecutive_count = 1\n    # loop through each color in the input array\n    for color in colors:\n        # check if the current color matches the current pattern in the patterns array\n        if color == patterns[current_pattern_index]:\n            # increment the count of consecutive patterns\n            consecutive_count += 1\n            # if the count of consecutive patterns matches the length of the current pattern,\n            # increment the current pattern index and reset the count of consecutive patterns\n            if consecutive_count == len(patterns[current_pattern_index]):\n                current_pattern_index += 1\n                consecutive_count = 1\n        else:\n            # if the current color does not match the current pattern,\n            # reset the count of consecutive patterns and decrement the current pattern index\n            consecutive_count = 1\n            current_pattern_index -= 1\n    # if the end of the input array has been reached without finding a match,\n    # return True, indicating that the colors follow the patterns\n    if current_pattern_index == 0:\n        return True\n    # otherwise, return False, indicating that the colors do not follow the patterns\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if colors.count(patterns[i]) < i+1:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i] == patterns[i]:\n            for j in range(i+1, len(colors)):\n                if colors[j] == patterns[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    i = 0\n    while i < n:\n        if colors[i] not in patterns[i]:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Sort the colors and patterns arrays in descending order\n    colors.sort(reverse=True)\n    patterns.sort(reverse=True)\n    \n    # Compare the sorted colors with the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)-len(patterns)+1):\n        if colors[i:i+len(patterns)] == patterns:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Arguments:\n    colors (list): A list of colors.\n    patterns (list): A list of patterns.\n\n    Returns:\n    bool: True if it follows the sequence, False otherwise.\n\n    \"\"\"\n    # Initialize variables\n    same_patterns = True\n    index = 0\n    \n    # Loop through the patterns\n    for pattern in patterns:\n        \n        # Check if the current pattern matches the current color in the colors list\n        if colors[index]!= pattern:\n            \n            # If not, set same_patterns to False and break the loop\n            same_patterns = False\n            break\n            \n        # If the pattern matches the current color, increment the index and continue the loop\n        index += 1\n    \n    # Return the same_patterns value\n    return same_patterns"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        tuple_elements = [elem for elem in test_list[i] if elem % K == 0]\n        if len(tuple_elements) == K:\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        # check if all elements are divisible by k\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty set to store the tuples\n    result = set()\n\n    # loop through each tuple in the test_list\n    for i in range(len(test_list)):\n        # loop through each tuple in the test_list\n        for j in range(i+1, len(test_list)):\n            # check if all elements in the current tuple are divisible by K\n            if all(x % K == 0 for x in test_list[i]):\n                # if all elements are divisible by K, add the tuple to the result set\n                result.add(tuple(test_list[i]))\n\n    # return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the tuples\n    result = []\n    # Loop through each tuple in the input list\n    for i in range(len(test_list)):\n        # Loop through each element in the current tuple\n        for j in range(len(test_list[i])):\n            # If the current element is divisible by K\n            if test_list[i][j] % K == 0:\n                # Check if the current tuple is already present in the result list\n                if tuple(test_list[i]) not in result:\n                    result.append(tuple(test_list[i]))\n                    # If we have found all the required tuples, exit the inner loop\n                    if len(result) == len(test_list):\n                        break\n    # Return the list of tuples\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    # Initialize an empty set to store the tuples\n    result = set()\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result set\n            result.add(tup)\n    # Return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, return the tuple\n            return tup"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        print(\"The number is divisible by 11.\")\n        return True\n    else:\n        print(\"The number is not divisible by 11.\")\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Divide the number by 11 and check if the remainder is 0\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11\")\n    else:\n        print(f\"{n} is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks if a number is divisible by 11 or not.\n\n    Args:\n        n: An integer number.\n\n    Returns:\n        A boolean value indicating whether n is divisible by 11 or not.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even.\")\n        else:\n            print(f\"{word} is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words using split() method\n    words = s.split()\n    # iterate through each word in the list\n    for word in words:\n        # get the length of the word using len() method\n        word_len = len(word)\n        # check if the length of the word is odd or even using the modulus operator\n        if word_len % 2 == 0:\n            # if the length is even, print \"even\"\n            print(\"even\")\n        else:\n            # if the length is odd, print \"odd\"\n            print(\"odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Iterate over each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    # If all words have even length, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if its length is odd, otherwise, False.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into a list of words\n    for word in words:  # iterate over each word\n        if len(word) % 2 == 1:  # check if the length of the word is odd\n            return True  # return True if the length of a word is odd\n    return False  # return False if all words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # iterate through the words and check their lengths\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        print(f\"{word} is even\")\n    else:\n        print(f\"{word} is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even.\")\n            return\n        else:\n            print(\"The length of the word is odd.\")\n            return"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 0\n    b = 1\n    c = 0\n    d = 1\n    for i in range(1, n + 1):\n        a, b, c, d = a + b + c + d, b + c + d, c + d, d\n        print(a)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0]\n    for i in range(1, n+1):\n        tetrahedral_numbers.append(4*i*(i-1))\n    return tetrahedral_numbers[n]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def tetrahedral_helper(n, a, b, c, d):\n        if n == 1:\n            return a + b + c + d\n        elif n == 2:\n            return 2 * a * b * c\n        elif n == 3:\n            return 2 * a * b * d\n        elif n == 4:\n            return 2 * a * c * d\n        else:\n            return tetrahedral_helper(n - 1, 2 * a, b, 2 * c, d)\n\n    return tetrahedral_helper(n, 1, 1, 1, 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        return n * 4 * (n - 1) // 3 + 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        return (n * (n - 1) * (2 * n - 1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    num = 0\n\n    # Loop through each value of n\n    for i in range(1, n+1):\n        # Initialize variables\n        j = 1\n        k = 1\n\n        # Loop through each value of j\n        while k <= i:\n            # Update num with the current value of num and j\n            num = num + i * j\n\n            # Update j\n            j = j + 1\n\n            # Update k\n            k = k + 1\n\n    # Return the final value of num\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * n - 1) * (n - 1) * (n - 1) * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first two tetrahedral numbers\n    tetrahedral_numbers = [1, 4]\n\n    # Calculate the next n-2 tetrahedral numbers\n    for i in range(2, n):\n        tetrahedral_numbers.append(tetrahedral_numbers[i-1] + 4 * tetrahedral_numbers[i-2])\n\n    # Return the nth tetrahedral number\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * (n ** 3) - n) // 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula for sphere volume\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with a given radius r.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    char_value = total % 26\n    char = chr(97+char_value)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ASCII = 65\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    char_val %= 26\n    char = chr(ASCII + char_val)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the sum to zero\n    sum_ascii = 0\n    \n    # loop through the characters of the string\n    for char in strr:\n        # convert each character to its ASCII value\n        ascii_val = ord(char)\n        \n        # add the ASCII value to the sum\n        sum_ascii += ascii_val\n        \n    # return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    char_val %= 26\n    return chr(char_val + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    # Initialize the sequence with the first two numbers\n    seq = [1, 2]\n    # Loop for n-2 times\n    for i in range(n-2):\n        # Create a new sequence by appending the next number to the previous two\n        seq.append(seq[-1] + seq[-2])\n    # Return the last number in the sequence\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(n-1):\n            result += 2*i + 1\n        return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        print(\"Invalid input.\")\n        return\n    \n    # Initialize the first two numbers of the sequence\n    sequence = [0, 1]\n    \n    # Iterate over the remaining numbers in the sequence\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = (sequence[i-1] + sequence[i-2]) % 2\n        \n        # Append the next number to the sequence\n        sequence.append(next_num)\n    \n    # Return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    for i in range(1, n+1):\n        seq.append(seq[-1] + seq[-2])\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its surface area.\n    \"\"\"\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # Calculate the surface area of the sphere using the formula A = 4*pi*r^2\n    A = 4 * math.pi * r ** 2\n    \n    # Return the surface area of the sphere\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = 4 * pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Define the radius of the sphere\n    radius = r\n\n    # Calculate the surface area of the sphere using the formula\n    # (4/3) * pi * r^3\n    surface_area = (4/3) * math.pi * radius ** 3\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Compute the surface area using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2  # formula for surface area of a sphere\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (6 * (n - 1) ** 2 + n) // 5"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Check if n is a positive integer\n    if n < 1:\n        return \"n must be a positive integer\"\n    # Initialize variables\n    a = 1\n    b = 0.5\n    c = 0\n    d = 0\n    # Calculate centered hexagonal number\n    for i in range(1, n+1):\n        # Calculate centered hexagonal number using formula\n        centered_hexagonal = (1/3) * (a * a + b * b + c * c + d * d)\n        # Update variables\n        a = centered_hexagonal - b\n        b = centered_hexagonal - c\n        c = centered_hexagonal\n        d = centered_hexagonal - a\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Initialize variables\n    a = 1\n    b = 2\n    c = 1\n    d = 1\n    \n    # Calculate centered hexagonal number\n    while d <= n:\n        centered_hexagonal_number = (a + b + c + d) // 2\n        yield centered_hexagonal_number\n        \n        # Update values for next iteration\n        a = b\n        b = c\n        c = a + b + c\n        d = b + c + d"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function will find the nth centered hexagonal number using the formula:\n\n    H(n) = (1/2)(3n^2 - 1)\n\n    The centered hexagonal number is defined as the sum of the centered\n    cubed hexagonal numbers. It is defined as:\n\n    H(n) = (1/2) * ((2n+1)(2n^2 - 1) - (2n)(2n^2 + 1))\n\n    Using the formula, we can find the nth centered hexagonal number using the following steps:\n\n    1. Initialize a variable called 'a' to 1/2.\n    2. Initialize a variable called 'b' to 1.\n    3. Initialize a variable called 'c' to 1.\n    4. Iterate n times:\n       a. Calculate the value of 'a' and 'b' using the formula 'a = 1/2 * (3b^2 - 1)'.\n       b. Calculate the value of 'c' using the formula 'c = 1/2 * (3a^2 - 1)'.\n       c. Calculate the value of 'd' using the formula 'd = 1/2 * (3a^2 + 1)'.\n       d. Calculate the value of 'e' using the formula 'e = (2n+1)(2n^2 - 1)'.\n       e. Calculate the value of 'f' using the formula 'f = (2n)(2n^2 + 1)'.\n       f. Calculate the value of 'g' using the formula 'g = (2n+1)(2n^2 + 1)'.\n       g. Calculate the value of 'h' using the formula 'h = (2n)(2n^2 - 1)'.\n       h. Calculate the value of 'i' using the formula 'i = (a + b + c + d - e - f - g - h)'.\n       i. Add 'i' to a running total.\n    5. Return the running total.\n\n    The centered hexagonal number is then calculated as the sum of the centered cubed hexagonal numbers.\n    '''\n\n    # Initialize a variable to store the running total.\n    total = 0\n\n    # Initialize a variable to store the centered cubed hexagonal numbers.\n    a = 1/2\n    b = 1\n    c = 1\n\n    # Iterate n times to calculate the centered hexagonal numbers.\n    for i in range(n):\n        # Calculate the values of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', and 'i'.\n        a = 1/2 * (3*b**2 - 1)\n        b = 1/2 * (3*a**2 - 1)\n        c = 1/2 * (3*a**2 + 1)\n        d = (2*i+1)*(2*i**2 - 1)\n        e = (2*i)*(2*i**2 + 1)\n        f = (2*i+1)*(2*i**2 + 1)\n        g = (2*i)*(2*i**2 - 1)\n        h = (2*i+1)*(2*i**2 - 1)\n        i = (a + b + c + d - e - f - g - h)\n\n        # Add 'i' to the running total.\n        total += i\n\n    # Return the total.\n    return total"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Formula to find centered hexagonal number: 2*n*(n+1)\n    # Since the center of the hexagon is located at the midpoint between the 2 midpoints of adjacent squares, we need to\n    # subtract half of the difference between the numbers to get the midpoint.\n    midpoint_difference = (n*(n+1))//2 - n\n    return 2*midpoint_difference + n\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function returns the n-th centered hexagonal number.\n    '''\n    if n < 0 or n % 2!= 0:\n        return None\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return (3 * centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n, x):\n        if n == 1:\n            return x\n        return centered_hexagonal_helper(n-1, (x*(3*x-1))//2)\n    \n    return centered_hexagonal_helper(n, 1)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): Dictionary 1\n    dict2 (dict): Dictionary 2\n    dict3 (dict): Dictionary 3\n\n    Returns:\n    dict: Merged dictionary\n    \"\"\"\n\n    # Create a new dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Loop through the keys in the first dictionary\n    for key in dict1:\n        # Check if the key exists in the second dictionary\n        if key in dict2:\n            # If it does, add the value of the key in the second dictionary to the merged dictionary\n            merged_dict[key] = dict2[key]\n        # Otherwise, check if the key exists in the third dictionary\n        elif key in dict3:\n            # If it does, add the value of the key in the third dictionary to the merged dictionary\n            merged_dict[key] = dict3[key]\n        # Otherwise, add the key-value pair to the merged dictionary\n        else:\n            merged_dict[key] = dict1[key]\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], (list, tuple)):\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], (list, tuple)):\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: First dictionary to be merged.\n    - dict2: Second dictionary to be merged.\n    - dict3: Third dictionary to be merged.\n\n    Returns:\n    A new dictionary that is the merge of the three input dictionaries.\n    \"\"\"\n    # Merge the dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge dictionaries using update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = ct.Counter(dict1[key] + dict2[key] + dict3[key])\n        elif key in dict2.keys():\n            merged_dict[key] = ct.Counter(dict1[key] + dict2[key])\n        elif key in dict3.keys():\n            merged_dict[key] = ct.Counter(dict1[key] + dict3[key])\n        else:\n            merged_dict[key] = ct.Counter(dict1[key])\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an argument and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Start with the smallest number\n    smallest = float('inf')\n\n    # Loop through the numbers in the range [0, N-1]\n    for i in range(N):\n        # Check if this number is smaller than the current smallest\n        if i < smallest:\n            smallest = i\n    \n    # Return the smallest number found\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    closest = n\n    for i in range(1, int(N/2)+1):\n        if n - i < closest:\n            closest = n - i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    smallest = n\n    for i in range(1, n):\n        if n - i < smallest:\n            smallest = n - i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # get the list of numbers from 1 to N\n    numbers = list(range(1, N+1))\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # get the difference between the smallest number and N\n    diff = abs(numbers[0]-N)\n\n    # get the index of the smallest number in the sorted list\n    min_index = numbers.index(numbers[0])\n\n    # find the index of the number closest to N\n    for i in range(min_index, len(numbers)):\n        if abs(numbers[i]-N) < diff:\n            diff = abs(numbers[i]-N)\n            closest_index = i\n\n    # return the number at the closest index\n    return numbers[closest_index]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return 1\n    else:\n        min_num = 1\n        max_num = N\n        while min_num <= max_num:\n            mid_num = (max_num + min_num) // 2\n            if mid_num > N:\n                max_num = mid_num - 1\n            elif mid_num < N:\n                min_num = mid_num + 1\n            else:\n                return mid_num\n        return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Create a list of numbers from 1 to N\n    numbers = list(range(1, N+1))\n    # Sort the list in ascending order\n    numbers.sort()\n    # Calculate the difference between the first and last elements of the sorted list\n    difference = numbers[-1] - numbers[0]\n    # Return the closest smaller number\n    return numbers[0] + difference"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    smallest_diff = float('inf')\n\n    for i in range(1, N+1):\n        if i < smallest_num:\n            smallest_num = i\n            smallest_diff = abs(i - N)\n        elif abs(i - N) < smallest_diff:\n            smallest_diff = abs(i - N)\n\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of a and b\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"\n        Returns the least common multiple of a and b\n        \"\"\"\n        return a * b // gcd(a, b)\n\n    def closest_smaller(N):\n        \"\"\"\n        Returns the smallest number that is a multiple of 3 and greater than N.\n        \"\"\"\n        return N + (lcm(3, N) - N) % lcm(3, N)\n\n    def closest_greater(N):\n        \"\"\"\n        Returns the smallest number that is a multiple of 3 and greater than N.\n        \"\"\"\n        return N - (N % lcm(3, N)) + lcm(3, N)\n\n    def lcm_smaller(N):\n        \"\"\"\n        Returns the smallest number that is a multiple of 5 and greater than N.\n        \"\"\"\n        return closest_greater(N) - (N - closest_smaller(N))\n\n    def lcm_greater(N):\n        \"\"\"\n        Returns the smallest number that is a multiple of 5 and greater than N.\n        \"\"\"\n        return closest_smaller(N) + (N - closest_greater(N))\n\n    return closest_num(N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    else:\n        small_diff = abs(N-1)\n        large_diff = abs(N-2)\n        if small_diff < large_diff:\n            return N-1\n        else:\n            return N-2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    nums = [int(x) for x in input(\"Enter a list of numbers separated by space: \").split()]\n    n = nums[0]\n    min_num = min(nums)\n    min_diff = abs(n-min_num)\n    for num in nums:\n        diff = abs(n-num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    word = ''\n\n    # loop through the list and find the longest word\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    # initialize the length of the longest word as 0\n    max_len = 0\n    # iterate over each word in the list\n    for word in list1:\n        # check if the length of the current word is greater than the current maximum length\n        if len(word) > max_len:\n            # update the maximum length to be the length of the current word\n            max_len = len(word)\n    # return the maximum length of the longest word found in the list\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize variables to store the length of the longest word and the actual word\n    max_length = 0\n    word = \"\"\n    \n    # Loop through the list of words\n    for i in range(len(list1)):\n        # If the current word is longer than the previous longest word, update the variables accordingly\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            word = list1[i]\n    \n    # Return the length of the longest word\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the string.\")\n    else:\n        print(f\"{sub_str} is not present in the string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the substring is present in the list of strings\n    if sub_str in str1:\n        # if the substring is present, return True\n        return True\n    else:\n        # if the substring is not present, return False\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Invalid input\"\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the given string is present as a substring in the given list of string values\n    for s in str1:\n        if s == sub_str:\n            return True\n    # if the given string is not present in the list, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the input string to a list of strings\n    str_list = str1.split()\n\n    # Loop through each string in the list\n    for s in str_list:\n        # Check if the substring is present in the string\n        if sub_str in s:\n            return True\n\n    # If the substring is not found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the number is divisible by 3, it is undulating\n    if n % 3 == 0:\n        return True\n    # If the number is divisible by 2, it is not undulating\n    elif n % 2 == 0:\n        return False\n    # If the number is not divisible by 2 or 3, it is neither undulating nor not\n    else:\n        return None"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return \"Not undulating\"\n    elif n % 2 == 0:\n        return \"Even number undulating\"\n    else:\n        return \"Odd number undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return True if is_undulating(n // 2) else False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even number is not undulating\"\n    else:\n        for i in range(2, int(n/2)+1):\n            if n % i == 0:\n                return \"The given number is not undulating\"\n                break\n        else:\n            return \"The given number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    str: \"Yes\" if the number is undulating, otherwise \"No\".\n    \"\"\"\n    if n % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        result = a\n        for i in range(1, b):\n            result *= a\n        return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments 'a' and 'b', and returns the value of 'a' raised to the power of 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (index 1)\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the first tuple in the sorted list\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples based on the second value (i.e., the second element of each tuple)\n    test_list.sort(key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the built-in min() function to find the index of the minimum element in the list\n    index = test_list.index(min(test_list, key=itemgetter(1)))\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_value = test_list[0][1]\n    index = 0\n    for i, item in enumerate(test_list):\n        if item[1] < minimum_value:\n            minimum_value = item[1]\n            index = i\n    return test_list[index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the length variable to infinity\n    min_len = float('inf')\n\n    # Loop through each list in the list of lists\n    for i in lst:\n        # Check if the length of the current list is smaller than the current minimum length\n        if len(i) < min_len:\n            # Update the minimum length to the length of the current list\n            min_len = len(i)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the length variable to infinity\n    min_len = float('inf')\n\n    # Loop through the list of lists\n    for sublist in lst:\n        # Check if the length of the sublist is smaller than the current minimum length\n        if len(sublist) < min_len:\n            # Update the minimum length to the length of the sublist\n            min_len = len(sublist)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')   # set initial value of min_len to infinity\n\n    for i in range(len(lst)):   # iterate over each list in the input list\n        if len(lst[i]) < min_len:   # if length of current list is smaller than min_len\n            min_len = len(lst[i])   # update min_len with length of current list\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = 1000000\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n\n    # Initialize a counter variable to keep track of the number of divisors of the given integer\n    count = 0\n\n    # Loop through all the numbers from 1 to the square root of the given integer\n    for i in range(1, int(n**0.5)+1):\n\n        # If the given integer is divisible by i, add 1 to the counter variable\n        if n % i == 0:\n            count += 1\n\n    # Return the final count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        \n        # if n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n    \n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        count = 1\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return 1 + divisor(n-1)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Define an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # If it is, add the frequency of the list to the dictionary\n            freq_dict.update(frequency_lists(item))\n        else:\n            # If it's not a list, update the frequency of the item in the dictionary\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [num for sublist in list1 for num in sublist]\n    freq_dict = {}\n    for num in flattened_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate through each item in the list1\n    for item in list1:\n\n        # If the item is a list, recursively call the function to find the frequency of each element in that list\n        if isinstance(item, list):\n            freq.update(frequency_lists(item))\n\n        # If the item is not a list, add 1 to its frequency in the dictionary\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n\n    # Return the dictionary of frequency of each element in the list\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    # Initialize an empty dictionary to store frequency counts\n    freq_dict = {}\n\n    # Flatten the input list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    frequency = {}\n    # loop through each element of the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if element in frequency:\n            frequency[element] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[element] = 1\n    # return the dictionary of frequency of each element in the list\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # iterate over each element in the flattened list\n    for item in flat_list:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # otherwise, increment the frequency by 1\n        else:\n            freq_dict[item] += 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency of each element\n    frequency = {}\n\n    # flatten the input list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # loop through each element in the flattened list\n    for item in flattened_list:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if item in frequency:\n            frequency[item] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[item] = 1\n\n    # return the dictionary of frequency of each element\n    return frequency"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # convert decimal to binary using recursion\n    def helper(num):\n        if num == 0:\n            return \"\"\n        elif num % 2 == 0:\n            return helper(num // 2) + \"0\"\n        else:\n            return helper(num // 2) + \"1\"\n\n    # call the helper function to get the binary equivalent of n\n    binary = helper(n)\n\n    # remove leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize empty list to store binary digits\n    binary_digits = []\n\n    # Convert decimal number to binary\n    while n > 0: \n        # Find last set bit in binary representation of n\n        bit = n & 1\n        # Append the binary digit to the list of digits\n        binary_digits.append(str(bit))\n        # Shift the decimal number to the left by 1 bit\n        n = n >> 1\n\n    # Reverse the list of binary digits to get the final binary number\n    binary_digits = binary_digits[::-1]\n\n    # Convert the list of binary digits to a string and return\n    return ''.join(binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    binary_num = \"\"\n    while n > 0: \n        remainder = n % 2\n        n //= 2\n        binary_num = str(remainder) + binary_num\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = \"\"\n    while n > 0: \n        remainder = n % 2\n        binary_number = str(remainder) + binary_number \n        n = n // 2 \n    return binary_number "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # convert decimal to binary using bitwise operations\n    binary = bin(n)[2:]\n    # remove leading zeros\n    binary = ''.join(filter(lambda x: x!= '0', binary))\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary using recursion\n    def helper(num, binary_str=''):\n        if num == 0:\n            return binary_str\n        elif num % 2 == 0:\n            return helper(num // 2, binary_str + '0')\n        else:\n            return helper(num // 2, binary_str + '1')\n    \n    # Call the helper function and return the binary string\n    return helper(n)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using recursion\n    def decimal_to_binary_helper(n, i):\n        # Base case: if i becomes zero, the number is converted to binary and returned as a string\n        if i == 0:\n            return str(n)\n        \n        # Recursive case: divide the number by 2 and keep the remainder\n        remainder = n % 2\n        return decimal_to_binary_helper(n//2, i-1) + str(remainder)\n    \n    # Call the helper function with the decimal number as the starting value and a zero counter\n    binary_string = decimal_to_binary_helper(n, 0)\n    \n    # Remove any leading zeros from the binary string\n    while binary_string[0] == '0':\n        binary_string = binary_string[1:]\n    \n    return binary_string"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        if n < 0:\n            return False\n        return str(n) == str(n)[::-1]\n\n    def reverse_digits(n):\n        '''\n        Helper function to reverse the digits of a number.\n        '''\n        result = 0\n        while n > 0:\n            result = result * 10 + n % 10\n            n //= 10\n        return result\n\n    if num >= 10**9:\n        return None\n\n    # Find the largest palindrome less than or equal to the specified number\n    largest = num\n    for i in range(9, -1, -1):\n        largest_palindrome = i * i * 100 + 100 * i * i + 100 * i + 10 * i + 1\n        if largest_palindrome <= num:\n            largest = largest_palindrome\n            break\n\n    # Find the next smallest palindrome less than or equal to the largest palindrome\n    next_largest = largest\n    while not is_palindrome(next_largest):\n        next_largest += 1\n\n    # Reverse the digits of the next largest palindrome and add 1 to get the next smallest palindrome\n    next_smallest = reverse_digits(next_largest) + 1\n\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the given number to a string and remove any leading zeros\n    num_str = str(num).lstrip('0')\n    # loop until we find a palindrome greater than the current number\n    while True:\n        # check if the current number is already a palindrome\n        if num_str == num_str[::-1]:\n            # if it is, return the next smallest palindrome\n            return int(num_str + str(int(num_str) + 1))\n        # if it's not, increment the number and convert it to a string\n        num += 1\n        num_str = str(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    \n    i = 0\n    while i * i <= num:\n        i += 1\n        \n    j = i - 1\n    while j * j <= num:\n        j -= 1\n        \n    while i <= j:\n        temp = i * i + j * j\n        if temp == num:\n            return i * 10 + j\n        elif temp < num:\n            i += 1\n        else:\n            j -= 1\n    \n    return None\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is negative\n    if num < 0:\n        # If it is, find the absolute value of the number and check if it is a palindrome\n        while str(abs(num)) not in '0123456789':\n            num -= 1\n        return abs(num)\n\n    # If the input number is positive, check if it is a palindrome\n    elif str(num) == str(num)[::-1]:\n        return num + 1\n\n    # If it is not, find the next smallest palindrome of the input number\n    else:\n        # Convert the input number to a string\n        num_str = str(num)\n\n        # Find the next smallest number that is a palindrome by appending the smallest digit to the end of the number\n        for i in range(9, -1, -1):\n            if int(num_str + str(i)) < int(num_str + str(i))[::-1]:\n                return int(num_str + str(i))\n\n        # If no palindrome is found, return None\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"Find the next smallest palindrome of a specified integer.\"\"\"\n    if num < 10:\n        return 10\n    elif num < 100:\n        return 100\n    elif num < 1000:\n        return 1000\n    elif num < 10000:\n        return 10000\n    else:\n        while True:\n            next_num = num * 10 + 1\n            if is_palindrome(next_num):\n                return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Find the length of the integer\n    length = len(num_str)\n\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n\n    # Check if the reversed string is palindrome or not\n    if num_str == rev_num_str:\n        # Check for the next smallest palindrome\n        next_palindrome = int(num_str + '9' * (length - 1))\n        if next_palindrome <= 10 ** 9:\n            return next_palindrome\n        else:\n            return None\n    else:\n        # Check for the next smaller palindrome\n        for i in range(10 ** (length - 1)):\n            next_num = int(num_str + str(i))\n            if next_num <= 10 ** 9:\n                return next_num\n        return None\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    min_palindrome = sys.maxsize\n    for i in range(num, 1, -1):\n        if is_palindrome(i):\n            if i < min_palindrome:\n                min_palindrome = i\n    return min_palindrome\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is:\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_palindrome = lambda x: x == x[::-1]\n    min_palindrome = float('inf')\n    for i in range(999, num, -1):\n        if is_palindrome(i):\n            min_palindrome = i\n            break\n    return min_palindrome\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python3 next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Finds the next smallest palindrome of a specified integer.\n    '''\n    # Find the largest palindrome less than the given number\n    largest_palindrome = num - 1\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome -= 1\n\n    # Find the next smallest palindrome greater than the largest palindrome\n    next_smallest = largest_palindrome + 1\n    while not is_palindrome(next_smallest):\n        next_smallest += 1\n\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the reversed number is a palindrome\n    is_palindrome = True\n    for i in range(len(num_str)):\n        if num_str[i]!= num_str[-i-1]:\n            is_palindrome = False\n            break\n\n    if is_palindrome:\n        # Find the smallest palindrome greater than the current number\n        for i in range(num+1, 10**9):\n            is_palindrome = True\n            for j in range(len(str(i))):\n                if i%10 == int(str(i)[-j-1]):\n                    is_palindrome = False\n                    break\n            if is_palindrome:\n                return i\n    else:\n        # Find the smallest palindrome greater than the current number and append a 1 to the end\n        for i in range(num+1, 10**9):\n            is_palindrome = True\n            for j in range(len(str(i))+1):\n                if i%10 == int(str(i)[-j-1]):\n                    is_palindrome = False\n                    break\n            if is_palindrome:\n                return i*10 + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a number k as input and returns the kth element of the array.\n    The array is assumed to be 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Error: k is greater than the length of the array.\")\n        return\n    \n    for i in range(1, n+1):\n        if i == k:\n            print(\"The\", k, \"element is:\", arr[i-1])\n            return\n        elif i > k:\n            print(\"The\", k, \"element is:\", arr[i-1])\n            return\n    \n    print(\"Error: k is greater than the length of the array.\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and an integer k and returns the kth element in the array.\n    \"\"\"\n    # check if k is valid\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n\n    # get the length of the array\n    n = len(arr)\n\n    # check if k is less than or equal to the length of the array\n    if k > n:\n        raise ValueError(\"k must be less than or equal to the length of the array.\")\n\n    # loop through the array and count the occurrences of k\n    count = 0\n    for i in range(1, n+1):\n        if arr[i-1] == k:\n            count += 1\n        if count == k:\n            return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid-1] < arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a positive integer k as input and returns the kth element of the array.\n    '''\n    # Calculate the length of the array\n    n = len(arr)\n    # Check if k is less than 1 or greater than the length of the array\n    if k < 1 or k > n:\n        return \"Invalid input. k must be between 1 and the length of the array.\"\n    # Find the index of the kth element\n    kth_index = n - k + 1\n    # Return the kth element\n    return arr[kth_index - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        if k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:]]).replace('_', '')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = [words[0]]\n    for i in range(1, len(words)):\n        if words[i][0].islower():\n            camel_case_words.append(words[i][0].upper() + words[i][1:])\n        else:\n            camel_case_words.append(words[i])\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[i].upper() if i!= 0 and word[i-1]!= '_' else word[i] for i in range(len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = \"\"\n    for char in word:\n        if char.isupper():\n            if prev_char.isupper():\n                camel_case += char.lower()\n            else:\n                camel_case += char\n        else:\n            camel_case += char.upper()\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words separated by underscores\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase and join them with an empty string\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    result = ''\n    for word in words:\n        result += word.capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Remove underscores from the middle of words\n    camel_case = ''.join(word.title().split('_'))\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    prev_is_upper = False\n    for char in word:\n        if char == '_':\n            prev_is_upper = True\n        else:\n            if prev_is_upper:\n                result += char.upper()\n            else:\n                result += char.lower()\n            prev_is_upper = False\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row with ones\n    row = [1]*n\n\n    # Initialize the first column with ones\n    col = [1]*m\n\n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, m):\n            # Fill in the next element with the sum of the top and left elements\n            row[i] += col[j-1]\n            col[j] += row[i-1]\n\n    # Return the final element of the last row\n    return row[n-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # base case\n    if m == 0:\n        return 1\n\n    # recursive case\n    else:\n        a_nm1 = eulerian_num(n-1, m)\n        a_nm = a_nm1 - (n-m)*a_nm1\n        return a_nm"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the matrix\n    first_row = [1] * m\n    first_col = [1] * n\n\n    # Fill the rest of the matrix with the correct values\n    for i in range(1, n):\n        for j in range(1, m):\n            # First row\n            if i < m:\n                first_row[j] *= (i + 1)\n            # First column\n            if j < n:\n                first_col[i] *= (j + 1)\n\n    # Return the product of the first row and first column\n    return first_row[0] * first_col[0]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Returns:\n    The Eulerian number a(n, m) for n >= 0, m >= 0.\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    if m == 0:\n        return 1\n\n    if n < 0 or m < 0:\n        return None\n\n    return (eulerian_num(n - 1, m) + eulerian_num(n, m - 1)) % 1000000007"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if n is a prime number\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find all prime factors of n\n    prime_factors = []\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            prime_factors.append(i)\n\n    # Calculate a(n, m)\n    a = 1\n    for p in prime_factors:\n        a *= (m - p + 1) // p\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a(1, 1) = 1\n    a = 1\n    # Initialize b(1, 1) = 0\n    b = 0\n\n    # Iterate through each row\n    for i in range(1, n+1):\n        # Calculate b(i, j)\n        b = (b + m) % i\n\n    # Initialize a(n, m) = a(n-1, m)\n    a = ((a + b) % i) * ((a + 1) % i)\n\n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Check if n and m are integers\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Both n and m must be integers.\")\n\n    # Check if n and m are positive integers\n    if n <= 0 or m <= 0:\n        raise ValueError(\"Both n and m must be positive integers.\")\n\n    # Initialize the first Eulerian number to 1\n    a = 1\n\n    # Check if the second Eulerian number is also 1\n    if m == 1:\n        return a\n\n    # Iterate from 3 to n\n    for i in range(3, n+1):\n        # Calculate the ith Eulerian number\n        a = (a*i) // m\n\n    # Return the final Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_helper(a, b, c, n, m): \n        '''\n        Helper function to find the Eulerian number.\n        '''\n        if a + b == c or a + c == b or b + c == a: \n            return 1 + eulerian_helper(a, b, c, n - 1, m)\n        else: \n            return eulerian_helper(a, b, c, n, m - 1)\n\n    def eulerian_sum(a, b, c, n, m): \n        '''\n        Helper function to find the sum of the Eulerian numbers.\n        '''\n        if a == 1: \n            return 1 + eulerian_sum(b, c, 1, n - 1, m)\n        else: \n            return eulerian_sum(a - 1, b, c, n, m)\n\n    a = eulerian_helper(1, n - 1, m, n, m)\n    b = eulerian_sum(a, 1, 1, n, m)\n\n    return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    A = [[0, 1, 1, 0],\n         [1, 0, 1, 1],\n         [1, 1, 0, 1],\n         [0, 1, 1, 0]]\n\n    # Count the number of maximal cliques in the graph\n    num_cliques = 0\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                # Mark all adjacent vertices as not visited\n                for k in range(4):\n                    A[i][k] = 0\n                    A[k][j] = 0\n                num_cliques += 1\n\n    return num_cliques"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n):\n    '''\n    Write a function to find the Eulerian number a(n).\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    input_list (list of lists): A list of lists where each sublist contains strings.\n\n    Returns:\n    list of lists: A list of lists where each sublist is sorted in ascending order.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sorted function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = tuple(test_list + test_tup)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # check if the given list is a list and the given tuple is a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # convert the given list to a tuple\n        test_tup = tuple(test_list)\n        # append the given list to the given tuple\n        test_tup = test_tup + (test_list,)\n        return test_tup\n    else:\n        raise TypeError(\"The given input must be a list and a tuple.\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Create a new list to hold the appended elements\n    new_list = []\n    \n    # Loop through each element in the given list\n    for element in test_list:\n        # Append the element to the new list\n        new_list.append(element)\n    \n    # Loop through each element in the given tuple\n    for element in test_tup:\n        # Append the element to the new list\n        new_list.append(element)\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + test_list\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and tuples into a single list\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Add test_list to test_tup\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use the heapq module to merge the lists into a single sorted list\n    return list(heapq.merge(num1, num2, num3))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the merged list in ascending order\n    sorted_list = []\n    heapq.heapify(sorted_list)\n    for num in merged_list:\n        heapq.heappush(sorted_list, num)\n    \n    # Reverse the sorted list to get the final sorted list\n    final_sorted_list = []\n    for num in reversed(sorted_list):\n        final_sorted_list.append(num)\n    \n    return final_sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists and merges them into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Create three lists to be merged\n    list1 = [x for x in num1]\n    list2 = [x for x in num2]\n    list3 = [x for x in num3]\n\n    # Initialize an empty list to store the merged list\n    merged_list = []\n\n    # Iterate through each list in order and add the elements to the merged list\n    while list1 and list2 and list3:\n        if list1[0] <= list2[0] <= list3[0]:\n            merged_list.append(list1[0])\n            list1 = list1[1:]\n        elif list1[0] <= list2[0]:\n            merged_list.append(list1[0])\n            list1 = list1[1:]\n        elif list2[0] <= list3[0]:\n            merged_list.append(list2[0])\n            list2 = list2[1:]\n        elif list1[0] < list3[0]:\n            merged_list.append(list3[0])\n            list3 = list3[1:]\n\n    # Add any remaining elements from the lists to the merged list\n    if list1:\n        merged_list.extend(list1)\n    if list2:\n        merged_list.extend(list2)\n    if list3:\n        merged_list.extend(list3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a heap of size 3, with the smallest elements at the end\n    # and the largest element at the beginning\n    max_heap = [-num1[0]]\n    heapq.heapify(max_heap)\n    min_heap = [num1[0]]\n    heapq.heapify(min_heap)\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n    \n    # merge the lists into a single sorted list\n    merged_list = []\n    while min_heap[0] < 0:\n        merged_list.append(-min_heap[0])\n        heapq.heappop(min_heap)\n    while max_heap[0] > 0:\n        merged_list.append(max_heap[0])\n        heapq.heappop(max_heap)\n    while min_heap[0] < 0:\n        merged_list.append(-min_heap[0])\n        heapq.heappop(min_heap)\n    while max_heap[0] > 0:\n        merged_list.append(max_heap[0])\n        heapq.heappop(max_heap)\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # sort the three input lists\n    sorted_list1 = sorted(num1)\n    sorted_list2 = sorted(num2)\n    sorted_list3 = sorted(num3)\n    \n    # merge the three lists\n    merged_list = []\n    i = j = k = 0\n    \n    # traverse the three lists\n    while i < len(sorted_list1) and j < len(sorted_list2) and k < len(sorted_list3):\n        if sorted_list1[i] < sorted_list2[j] and sorted_list1[i] < sorted_list3[k]:\n            merged_list.append(sorted_list1[i])\n            i += 1\n        elif sorted_list2[j] < sorted_list1[i] and sorted_list2[j] < sorted_list3[k]:\n            merged_list.append(sorted_list2[j])\n            j += 1\n        else:\n            merged_list.append(sorted_list3[k])\n            k += 1\n            \n    # append the remaining elements of the lists\n    merged_list += sorted_list1[i:]\n    merged_list += sorted_list2[j:]\n    merged_list += sorted_list3[k:]\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Convert all the input lists to a list of lists\n    input_lists = [num1, num2, num3]\n\n    # Sort the input lists\n    input_lists.sort()\n\n    # Merge the sorted input lists into a single sorted list\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(input_lists[0]) and j < len(input_lists[1]) and k < len(input_lists[2]):\n        if input_lists[0][i] <= input_lists[1][j] and input_lists[0][i] <= input_lists[2][k]:\n            merged_list.append(input_lists[0][i])\n            i += 1\n        elif input_lists[1][j] <= input_lists[0][i] and input_lists[1][j] <= input_lists[2][k]:\n            merged_list.append(input_lists[1][j])\n            j += 1\n        else:\n            merged_list.append(input_lists[2][k])\n            k += 1\n\n    # Add any remaining elements from the input lists to the merged list\n    if i < len(input_lists[0]):\n        merged_list.extend(input_lists[0][i:])\n    if j < len(input_lists[1]):\n        merged_list.extend(input_lists[1][j:])\n    if k < len(input_lists[2]):\n        merged_list.extend(input_lists[2][k:])\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    merged_list = []\n    \n    # Find the minimum element in each list\n    min_num1 = heapq.heappop(num1)\n    min_num2 = heapq.heappop(num2)\n    min_num3 = heapq.heappop(num3)\n    \n    # Add the minimum element to the merged list\n    heapq.heappush(merged_list, min_num1)\n    heapq.heappush(merged_list, min_num2)\n    heapq.heappush(merged_list, min_num3)\n    \n    # Add the remaining elements of each list to the merged list\n    while num1:\n        heapq.heappush(merged_list, heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    length = len(s)\n    for i in range(length): \n        if s[i] == '0': \n            s = s[i:] + s[:i] + '0' \n        else: \n            s = '0' + s \n    for i in range(length): \n        if s[i] == '0': \n            count += 1 \n        else: \n            break \n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert the binary string to a list of binary digits\n    binary_list = list(bin(int(s, 2))[2:])\n    \n    # Rotate the binary list the given number of times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list) - 1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[-1] = temp\n    \n    # Count the number of odd values in the rotated list\n    count = 0\n    for digit in binary_list:\n        if int(digit) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    def rotate_string(s, n):\n        return s[-n:] + s[:-n]\n\n    def count_odd(s):\n        return sum(1 for c in s if c == '1')\n\n    s = rotate_string(s, n)\n    return count_odd(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s or not isinstance(s, str):\n        return \"Error: Input must be a valid binary string.\"\n\n    if len(s) % 2 == 0:\n        return \"Error: Input must be a binary string with an odd length.\"\n\n    result = 0\n\n    for i in range(1, n+1):\n        result += s.count('1')\n    \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string `s` and an integer `n` as input and returns the number of odd numbers in the rotated string.\n\n    The rotated string is obtained by rotating the binary string `s` `n` times. For example, if `s` is \"101\" and `n` is 3, the rotated string will be \"1101\".\n\n    The rotated string will have the same number of '1's and '0's as the original string, but the order of the '1's and '0's may have changed. For example, if `s` is \"101\" and `n` is 3, the rotated string \"1101\" will have \"101\" and \"1101\" interchanged.\n\n    The number of odd numbers in the rotated string is the total number of '1's in the rotated string.\n\n    Example:\n    >>> odd_Equivalent(\"101\", 3)\n    2\n    >>> odd_Equivalent(\"110010\", 4)\n    1\n    \"\"\"\n\n    # initialize variables\n    rotated = \"\"\n    count = 0\n\n    # loop through the binary string and rotate it n times\n    for i in range(n):\n        rotated = s[::-1] + rotated\n\n    # loop through the rotated binary string and count the number of odd numbers\n    for i in range(len(rotated)):\n        if rotated[i] == '1':\n            count += 1\n\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = ''.join(format(ord(i), '08b') for i in s)\n    rotated_binary = binary[::-1]\n    count = 0\n    for i in rotated_binary:\n        if int(i) % 2!= 0:\n            count += 1\n            if count == n:\n                return count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    if n == 0: \n        return 0 # base case\n    if len(s) == 1: \n        if int(s) % 2 == 1: \n            return 1\n        else: \n            return 0\n    else: \n        odd_count = odd_Equivalent(s[1:], n-1)\n        if odd_count == 0: \n            return odd_Equivalent(s[:-1]+s[0], n-1) # rotate the string and call the function again\n        else: \n            return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    odd_count = 0\n    for i in range(n): \n        for j in range(len(s)): \n            if s[j] == '1': \n                s = s[:j] + '0' + s[j+1:] \n        if len(s) % 2 == 1: \n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 0:\n        s = s[::-1]  # To ensure odd length of the string\n    s = s.zfill(len(s))  # To ensure string length is divisible by 4\n    \n    count = 0\n    for i in range(n):\n        s = ''.join([s[i], s[-i-1]])\n    \n    for i in range(len(s)//2):\n        if int(s[i]) % 2!= int(s[-i-1]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character of the binary string\n    for i in range(len(s)):\n        \n        # Check if the character is odd\n        if int(s[i]) % 2!= 0:\n            \n            # Increment the count variable\n            count += 1\n            \n        # Rotate the binary string n times\n        if i < n-1:\n            s = s[i+1:] + s[:i+1]\n        else:\n            s = s[i+1:] + s[:i+1]\n            \n    # Return the count of odd numbers found after rotating the binary string n times\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each nested list\n    for sublist in nestedlist:\n\n        # Loop through each element of the nested list\n        for elem in sublist:\n\n            # If the element is already in the common set, add it to the result set\n            if elem in common:\n                common.add(elem)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the common elements.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n        # If the element is a list, loop through its elements\n        if isinstance(element, list):\n            # Recursively call the function on the sublist and add the common elements to the set\n            common.update(common_in_nested_lists(element))\n        else:\n            # Add the element to the set if it's in the main list\n            if element in nestedlist:\n                common.add(element)\n\n    # Convert the set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the common set if it is already in the set\n            if element in common_set:\n                continue\n            common_set.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_set)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for item in nestedlist:\n        for subitem in item:\n            if subitem in common_elements:\n                continue\n            else:\n                common_elements.append(subitem)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common_elements:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes in a nested list as an argument and returns a list of common elements in all nested lists.\n    '''\n\n    # Loop through each sub-list in the nested list\n    for sublist in nestedlist:\n\n        # Check if each element in the sub-list is in the first sub-list\n        if all(x in sublist for x in sublist[:1]):\n\n            # If all elements are in the first sub-list, add it to the common list\n            common.append(sublist[0])\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common = []\n        for item in nestedlist[0]:\n            if item in common_in_nested_lists(nestedlist[1:]):\n                common.append(item)\n        return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string is empty\n    if not text:\n        return \"The string is empty\"\n\n    # Check if the string is a number\n    try:\n        num = int(text)\n        return \"The string is a number\"\n    except ValueError:\n        return \"The string is not a number\""
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Define a regular expression to match integers\n    integer_regex = r'\\b[+-]?\\d+\\b'\n\n    # Check if the string matches the regular expression\n    if re.match(integer_regex, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the string is empty or contains non-numeric characters\n    if not text.isdigit():\n        return False\n    # Convert the string to an integer and check if it is a valid integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # loop through the list of dictionaries\n    for dictionary in list1:\n        # check if the dictionary is empty\n        if dictionary:\n            # if the dictionary is not empty, return False\n            return False\n    # if all dictionaries in the list are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list of dictionaries and returns True if all of them are empty or False if at least one of them is not empty.\n    \"\"\"\n    for item in list1:\n        if len(item) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    if not list1: # check if list1 is empty\n        return True\n    else:\n        for item in list1:\n            if item: # check if item is an empty dictionary\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty list to store the converted integers\n    result = []\n    # Iterate through each number in the tuple\n    for num in nums:\n        # Check if the number is a positive integer\n        if type(num) == int and num > 0:\n            # If it is, append it to the result list\n            result.append(num)\n        else:\n            # If it's not, raise an exception\n            raise ValueError('All elements in the tuple must be positive integers.')\n    # Convert the result list to a single integer\n    return sum(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable to store the sum of the given tuple\n    total = 0\n    # Iterate through each element in the tuple\n    for num in nums:\n        # Add the current element to the total sum\n        total += num\n    # Return the final total sum as a single integer\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # converting the tuple of integers into a single integer\n    single_int = sum(nums)\n    \n    return single_int"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n    nums (tuple): Tuple of positive integers.\n\n    Returns:\n    int: The sum of all elements in the tuple.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize a variable to store the sum of the integers in the list\n    total = 0\n    # Loop over the list and add each integer to the total\n    for num in nums:\n        total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError('All elements of the tuple must be integers.')\n        if num < 0:\n            raise ValueError('All elements of the tuple must be non-negative integers.')\n        result = (result << 32) + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each sublist in the main list\n    for sublist in test_list:\n        # loop through each element in the sublist\n        for element in sublist:\n            # try to convert the element to a float and catch any errors that may occur\n            try:\n                converted_element = float(element)\n                # if the conversion was successful, replace the original element with the new float\n                sublist[sublist.index(element)] = converted_element\n            except ValueError:\n                # if the conversion failed, do nothing\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                result.append(item)\n            elif isinstance(item, (list, tuple)):\n                result.extend(list_to_float(item))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result.append(list_to_float(i))\n        elif isinstance(i, float):\n            result.append(i)\n        else:\n            result.append(float(i))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, val in enumerate(row):\n            try:\n                test_list[i][j] = float(val)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                row[row.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_elem = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if unique_elem is None:\n                unique_elem = arr[i]\n            elif arr[i] == unique_elem:\n                return unique_elem\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    count = 0\n    elem = None\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # Check if the current element is equal to the previous element\n        if arr[i] == arr[i-1]:\n            # Increment count\n            count += 1\n            # Update the element if the count is 1\n            if count == 1:\n                elem = arr[i]\n    \n    return elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    count = 0\n    \n    for i in range(len(arr)):\n        if unique_element is None:\n            unique_element = arr[i]\n            count = 1\n        else:\n            if arr[i] == unique_element:\n                count += 1\n            else:\n                count = 1\n                unique_element = arr[i]\n                \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        if search(left_half)!= -1:\n            return search(left_half)\n        else:\n            return search(right_half)"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if arr[i] not in arr[i+1:]:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return None\n    else:\n        mid = len(arr) // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        if left is None:\n            return right\n        elif right is None:\n            return left\n        elif left == right:\n            return left\n        else:\n            if left < right:\n                if mid > 0 and arr[mid-1] == right:\n                    return right\n                else:\n                    return search(arr[mid:])\n            else:\n                if mid > 0 and arr[mid] == right:\n                    return left\n                else:\n                    return search(arr[:mid])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        if left == right:\n            return left\n        elif left < right:\n            return search(arr[mid:])\n        else:\n            return search(arr[:mid])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for num in count:\n        if count[num] == 1:\n            return num\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in an array and returns the element that appears only once in a sorted array.\n    \"\"\"\n\n    # First, we initialize a dictionary to keep track of the frequency of each element in the array.\n    freq = {}\n\n    # Next, we loop through the array and update the frequency of each element in the dictionary.\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Finally, we loop through the dictionary and return the element that appears only once.\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    n = len(arr)\n\n    # Initialize a boolean array to mark the visited elements.\n    visited = [False] * n\n\n    # Initialize a variable to store the element that appears only once.\n    result = None\n\n    # Iterate through the array elements.\n    for i in range(n):\n        # If the element is not visited and its corresponding bit is 0, then it appears only once.\n        if not visited[arr[i]] and (arr[i] & 1) == 0:\n            result = arr[i]\n            break\n\n        # Mark the element as visited.\n        visited[arr[i]] = True\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n                max_pair = pair\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]) * abs(list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]) * abs(list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if (list1[i][0] * list1[j][1] > list1[i][1] * list1[j][0]):\n                max_product = max(max_product, abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            else:\n                max_product = max(max_product, abs(list1[i][0] * list1[j][0]), abs(list1[i][1] * list1[j][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            max_abs_product = max(max_abs_product, abs(product))\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # initialize max_product to negative infinity\n    max_product = -float('inf')\n    \n    # iterate over all pairs of tuples in the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the numbers in the pair\n            product = abs(list1[i][0]*list1[j][1])\n            \n            # update max_product if the product is greater than max_product\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two tuples\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Given a limit, find the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n    # Check if the limit is a positive integer\n    if not isinstance(limit, int) or limit < 1:\n        raise ValueError(\"The limit must be a positive integer.\")\n\n    # Initialize the sum and the list of amicable numbers\n    sum_of_amicable_numbers = 0\n    amicable_numbers = []\n\n    # Check if the limit is divisible by any of the numbers from 2 to the square root of the limit\n    for num in range(2, int(limit ** 0.5) + 1):\n        if limit % num == 0:\n            # Check if the number is both divisible by the limit and divisible by 1 (except for 1)\n            if num == limit // num or num == 1:\n                # Add the amicable number to the list and update the sum\n                amicable_numbers.append(num)\n                sum_of_amicable_numbers += num\n\n    # Return the sum of the amicable numbers\n    return sum_of_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit+1):\n        if num == sum_of_amicable_numbers or num in amicable_pair(num):\n            sum_of_amicable_numbers += num\n    return sum_of_amicable_numbers\n\ndef amicable_pair(num):\n    '''\n    Write a function to find all the amicable pairs of a specified number.\n    '''\n    pairs = []\n    for i in range(1, num):\n        if num % i == 0:\n            pairs.append(i)\n    return pairs"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of proper divisors of a given number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if (num % i) == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if the given number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to the given limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return num == sum([i for i in range(1, int(num**0.5) + 1) if num % i == 0])"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number between 1 and itself.\n    '''\n    for i in range(1, num):\n        if num % i == 0 and num / i!= i:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    sum_amicable = 0\n    num = 1\n    \n    # Loop through all numbers from 1 to the limit\n    while num <= limit:\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the sum if it is\n            sum_amicable += num\n        \n        # Increment the number\n        num += 1\n        \n    # Return the sum of amicable numbers\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable.\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    \n    # Find the sum of all divisors of the number\n    for i in range(1, num):\n        if num % i == 0:\n            a += i\n            \n    # Check if the sum of all divisors is equal to the number\n    if sum(set(range(1, num))) == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        if i in amicable_numbers(i):\n            amicable_sum += i\n        if i == limit:\n            break\n    return amicable_sum\n\ndef amicable_numbers(num):\n    '''\n    Generate a list of amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, num):\n        if num % i == 0 and i!= num/i:\n            amicable.append(i)\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of each pair of amicable numbers\n    amicable_sum_dict = {}\n    # Initialize the amicable numbers as 2 and 3\n    for i in range(2, limit):\n        if i == 2:\n            amicable_sum_dict[i] = 2\n        else:\n            j = 2\n            while i * j <= limit:\n                if i % j == 0:\n                    amicable_sum_dict[i] = i + j\n                    break\n                j += 1\n    # Sum all the amicable numbers in the dictionary and return the result\n    return sum(amicable_sum_dict.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize a list to store amicable numbers\n    amicable_numbers = []\n\n    # Loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        is_amicable = False\n        for i in range(2, num):\n            if num % i == 0:\n                is_amicable = True\n                break\n\n        # If the number is amicable, add it to the list of amicable numbers\n        if is_amicable:\n            amicable_numbers.append(num)\n\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using the arctan2 function\n    angle = cmath.phase(a + b * 1j)\n    # Convert the angle to degrees\n    angle = round(angle * 180/cmath.pi, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # calculate the complex number\n    c = a + b * 1j\n\n    # calculate the angle\n    angle = cmath.phase(c)\n\n    # convert the angle to degrees\n    angle_degrees = cmath.degrees(angle)\n\n    # return the angle\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.phase(angle)\n    angle = cmath.phase(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    complex_number = a + b*1j\n    \n    angle = cmath.phase(complex_number)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the angle using the arccosine function\n    angle = cmath.phase(cmath.rect(a, b))\n    \n    # Convert the angle to degrees\n    angle = angle * 180 / cmath.pi\n    \n    # Return the angle as a string\n    return str(angle)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        max_diff = max(max_diff, abs(count_0s - count_1s))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables to store the count of 0s and 1s\n    zeros = 0\n    ones = 0\n    \n    # Iterate through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            ones += 1\n            \n    # Initialize the maximum difference between the counts\n    max_diff = 0\n    \n    # Iterate through each substring of the binary string of length 3 or more\n    for i in range(len(string) - 2):\n        sub_string = string[i:i+3]\n        count_diff = 0\n        \n        # Iterate through each character in the substring\n        for j in range(3):\n            # If the character is a 0, increment the count of 0s in the substring\n            if sub_string[j] == '0':\n                count_diff += zeros\n            # If the character is a 1, increment the count of 1s in the substring\n            else:\n                count_diff += ones\n        \n        # Update the maximum difference if the current count difference is greater than the maximum\n        if count_diff > max_diff:\n            max_diff = count_diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # initialize variables for counting 0s and 1s\n    count_0 = 0\n    count_1 = 0\n\n    # initialize variables for maximum difference\n    max_diff = 0\n\n    # iterate through each character in the string\n    for char in string:\n        # check if the character is a 0 or a 1\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # calculate the difference between the counts\n        diff = abs(count_0 - count_1)\n\n        # update the maximum difference if this is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    current_diff = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            current_diff += 1\n        else:\n            current_diff = 0\n            \n        if i == n-1:\n            max_diff = max(max_diff, current_diff)\n        elif current_diff > max_diff:\n            max_diff = current_diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)): \n        count0 = 0\n        count1 = 0\n        for j in range(i, len(string)): \n            if string[j] == '0': \n                count0 += 1\n            else: \n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    length = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n            if count0 > count1:\n                length = i - count0 + 1\n        elif string[i] == '1':\n            count1 += 1\n            if count0 > count1:\n                length = i - count1 + 1\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    count_zeros = 0\n    count_ones = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n\n    max_diff = max(count_zeros - count_ones, count_ones - count_zeros)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            if count_1 == 0:\n                max_diff = max(max_diff, i - count_0)\n        else:\n            count_1 += 1\n            if count_0 == 0:\n                max_diff = max(max_diff, i - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        \n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        if count_0 > count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n            count_0 = 0\n        else:\n            count_1 = 0\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two given numbers.\n        '''\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def sum_of_common_divisors(a, b, m):\n        '''\n        Write a python function to find the sum of common divisors of two given numbers up to a given number.\n        '''\n        if a == 0:\n            return 0\n        if a % m == 0 and b % m == 0:\n            return a + b + sum_of_common_divisors(a // m, b // m, m)\n        return sum_of_common_divisors(a, b, m)\n\n    def sum_of_divisors(n):\n        '''\n        Write a python function to find the sum of divisors of a given number.\n        '''\n        return sum_of_common_divisors(1, n, n)\n\n    def common_divisor(a, b):\n        '''\n        Write a python function to find the common divisor of two given numbers.\n        '''\n        if a < b:\n            a, b = b, a\n        for i in range(2, b + 1):\n            if a % i == 0 and b % i == 0:\n                return i\n        return None\n\n    def find_sum_of_common_divisors(a, b):\n        '''\n        Write a python function to find the sum of common divisors of two given numbers.\n        '''\n        return sum_of_common_divisors(min(a, b), max(a, b), max(a, b))\n\n    return find_sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function takes two positive integers as input and returns their sum of their common divisors.\n    '''\n    # Set up a set to store the common divisors of a and b\n    common_divisors = set()\n    # Loop through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the set of common divisors\n            common_divisors.add(i)\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of common divisors of these two numbers.\n    '''\n    common = set(a, b)\n    for i in range(1, min(a, b) + 1):\n        if i in common:\n            common.remove(i)\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers a and b.\n    '''\n    # initialize the sum variable\n    sum = 0\n\n    # loop through all the numbers from 1 to b\n    for i in range(1, b+1):\n        # check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the sum\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers, a and b, and returns the sum of the common divisors of a and b.\n    \"\"\"\n    # Create a set of all the numbers between 1 and the smaller number, as these will be the common divisors.\n    common_divisors = set(range(1, min(a, b) + 1))\n\n    # Calculate the sum of the common divisors of a and b by finding their intersection.\n    sum_common = len(a & b)\n\n    # Calculate the sum of the common divisors of a and b by subtracting their sum.\n    sum_diff = len(a) + len(b) - sum_common\n\n    # Return the sum of the common divisors of a and b.\n    return sum_common + sum_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisor = 1\n    \n    while divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # get the set of common divisors of a and b\n    common_divisors = set(get_common_divisors(a, b))\n\n    # calculate the sum of the common divisors\n    return sum(common_divisors)\n\n\ndef get_common_divisors(a, b):\n    \"\"\"\n    Find the set of common divisors of two given numbers.\n    \"\"\"\n    # initialize an empty set for the common divisors\n    common_divisors = set()\n\n    # iterate over all possible divisors of a and b\n    for i in range(1, a):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    return common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the greatest common divisor of a and b using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a set to store common divisors\n    common_divisors = set()\n    \n    # Loop through all numbers from 1 to the smaller number\n    for num in range(1, min(a, b) + 1):\n        # Check if the number is a divisor of both numbers\n        if a % num == 0 and b % num == 0:\n            # Add the divisor to the set\n            common_divisors.add(num)\n    \n    # Return the sum of the set of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = x % y\n        result += temp\n        x = y\n        y = temp\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # calculate the remainder of x divided by y\n        remainder = x % y\n        # add the remainder to the result\n        result += remainder\n        # shift x to the right by 1 bit (multiply by 2)\n        x >>= 1\n        # shift y to the right by 1 bit (divide by 2)\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into words\n    long_words = [] # empty list to store long words\n\n    # iterate over the words and check if each word is longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if the matrix contains the numbers 1 through n^2\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= (i+1) + (j+1) * n:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = []\n    col_sum = []\n    diag_sum = []\n    for i in range(len(my_matrix)):\n        row_sum.append(sum(my_matrix[i]))\n        col_sum.append(sum(my_matrix[j][i] for j in range(len(my_matrix))))\n        diag_sum.append(my_matrix[i][i])\n    return row_sum == col_sum and row_sum == diag_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    for i in range(n):\n        if my_matrix[i]!= list(range(1, n+1)):\n            return False\n        if my_matrix[i]!= list(reversed(list(range(1, n+1)))):\n            return False\n    for j in range(n):\n        for k in range(n):\n            if sum(my_matrix[i][j]) == sum(my_matrix[i][k]) == sum(my_matrix[k][j]) == n*n:\n                return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3x3 dimensions\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n    \n    # Check if the matrix contains the sum of its rows and columns\n    for i in range(3):\n        for j in range(3):\n            row_sum = sum(my_matrix[i]) + sum(my_matrix[j])\n            col_sum = sum(row[j] for row in my_matrix)\n            if row_sum!= col_sum:\n                return False\n    \n    # Check if the matrix contains the sum of its diagonals\n    diagonal_sum1 = sum(my_matrix[0][0], my_matrix[1][1], my_matrix[2][2])\n    diagonal_sum2 = sum(my_matrix[2][0], my_matrix[1][1], my_matrix[0][2])\n    if diagonal_sum1!= diagonal_sum2:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    \n    # Check if the number of rows and columns is equal\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        return False\n    \n    # Check if the matrix contains only unique values\n    unique_values = set(sum(my_matrix, []))\n    if len(unique_values)!= rows * cols:\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                continue\n            \n            # Check if the sum of the values in the current column, row, and 2x2 sub-matrix equals the value at the current position\n            for x in range(-1, 2):\n                for y in range(-1, 2):\n                    if (i + x < rows and my_matrix[i + x][j] == 0) or (j + y < cols and my_matrix[i][j + y] == 0):\n                        continue\n                    if my_matrix[i + x][j + y]!= my_matrix[i][j] + x + y:\n                        return False\n                    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a set to store the elements of the matrix\n    elements = set()\n    \n    # Loop through each element of the matrix\n    for row in my_matrix:\n        for element in row:\n            if element in elements:\n                return False\n            else:\n                elements.add(element)\n    \n    # If we make it through the loop without returning False, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # define the size of the matrix\n    n = len(my_matrix)\n\n    # check if the matrix is a square\n    if n**2!= len(my_matrix):\n        return False\n\n    # check if the matrix is symmetric\n    for i in range(n):\n        for j in range(i, n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # check if the matrix is a magic square\n    for i in range(n):\n        for j in range(i, n):\n            # calculate the sum of the kth row and column\n            sum_row = sum(my_matrix[i][k] for k in range(n))\n            sum_col = sum(my_matrix[k][j] for k in range(n))\n\n            # check if the sum is equal to the kth diagonal element\n            if i == j:\n                if sum_row!= n**2 + j:\n                    return False\n            elif i == n-j-1:\n                if sum_row!= n**2 - (n-j-1):\n                    return False\n            elif j == n-i-1:\n                if sum_col!= n**2 - (n-i-1):\n                    return False\n            else:\n                if sum_col!= n**2 + i:\n                    return False\n\n    # if all checks pass, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if all rows have the same length\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n\n    # Check if all columns have the same length\n    if not all(len(row) == len(my_matrix[0]) for row in my_matrix):\n        return False\n\n    # Check if all elements are unique\n    if len(set(sum(row, []) for row in my_matrix))!= len(my_matrix) * len(my_matrix[0]):\n        return False\n\n    # Check if all rows and columns have the same sum\n    if not all(sum(row) == sum(my_matrix[0]) for row in my_matrix) and not all(sum(my_matrix[0][i] for row in my_matrix) == sum(row) for row in my_matrix):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a 3x3 square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        for j in range(3):\n            # Check if the element at (i, j) is equal to the sum of the other elements in the row and column\n            if my_matrix[i][j]!= sum(my_matrix[i][k] for k in range(3)) - sum(my_matrix[k][j] for k in range(3)) + my_matrix[i][i] + my_matrix[j][j]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        sum_row = sum(my_matrix[i])\n        sum_col = sum(my_matrix[j] for j in range(n))\n        if sum_row!= sum_col:\n            return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # loop through the list and increment the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    max_num = max(freq, key=freq.get)\n\n    # return the maximum frequency\n    return freq[max_num]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    \n    # Count the frequency of each element in the list\n    for num in nums:\n        count_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_count = max(count_dict.values())\n    max_item = None\n    \n    for item, count in count_dict.items():\n        if count == max_count:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers and returns the item with the maximum frequency.\n    '''\n\n    # create a dictionary to store the frequency of each number\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the maximum frequency\n    max_freq = max(freq.values())\n\n    # find the item with the maximum frequency\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.isupper():\n                str2 += char.lower()\n            else:\n                str2 += char.upper()\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = list(vowels)\n    result = []\n    for char in str1:\n        if char not in vowels_list:\n            result.append(char)\n    result = ''.join(result)\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    \n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n            \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = list(vowels)\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowel_list:\n            new_str += str1[len(str1)-i-1]\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_str = []\n\n    for char in str1:\n        if char not in vowels_set:\n            reversed_str.append(char)\n\n    reversed_str = ''.join(reversed_str[::-1])\n\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_list = [v for v in vowels if v not in str1]\n    return vowels_list + [v for v in str1 if v in vowels]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to list\n    lst = list(tup1)\n    # join the list with comma and space as separator\n    str_tup = ', '.join(map(str, lst))\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ','.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum_neg = 0\n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum_neg += num\n    # Return the sum of negative numbers\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers of the input list.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * ((3 * n) - 1) // 2\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    a, b = 1, 1\n    for i in range(1, n+1):\n        # Find the nth hexagonal number\n        hex_num = a + b\n        print(hex_num)\n        # Update variables for the next iteration\n        a, b = b, hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n*(2*n-1)) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1)**2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = a + b\n    d = 4\n    e = 3\n    f = 1\n    h = n * (a + b + c + d + e + f) // 6\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Calculate the number of rows in the matrix\n    num_rows = (n+1) // 2\n\n    # Initialize the matrix with zeros\n    matrix = [[0]*num_rows]*num_rows\n\n    # Fill the matrix with values\n    for i in range(num_rows):\n        for j in range(num_rows):\n            if i == j == 0:\n                matrix[i][j] = 1\n            elif i == 0:\n                matrix[i][j] = (2*j+1)**2\n            elif j == 0:\n                matrix[i][j] = (2*i+1)**2\n            else:\n                matrix[i][j] = (2*i+1)**2 - (2*j+1)**2\n\n    # Find the nth hexagonal number\n    for _ in range(n-1):\n        matrix = [[matrix[i-1][j] + matrix[i-1][j+1] for j in range(num_rows)] for i in range(num_rows)]\n\n    return matrix[0][0]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a, b = 1, 6\n    for i in range(n):\n        print(a, end=' ')\n        a, b = a + b, a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        return ((n * (3 * n - 1)) // 2)\n    else:\n        return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the list of integers to an array\n    nums_arr = array('i', nums)\n\n    # Count the number of zeros and non-zeros in the array\n    zeros = 0\n    non_zeros = 0\n    for num in nums_arr:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # Find the ratio of zeros to non-zeros\n    ratio = zeros / non_zeros\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    arr = array('i', nums)  # create a new array from the input list\n    count = sum(arr)         # count the total number of elements in the array\n    zero_count = sum(arr == 0)  # count the number of zero elements in the array\n    ratio = zero_count / count if count!= 0 else 0  # calculate the ratio of zeroes to non-zeroes\n    return round(ratio, 3)  # round to 3 decimal places"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n\n    ratio = zeroes / non_zeroes\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            count += 1\n    ratio = non_zero_count / count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    ratio = zeros / nonzeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the list of integers into an array of integers\n    nums_array = array('i', nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    num_zeros = sum(nums_array == 0)\n    num_ones = len(nums_array) - num_zeros\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = num_zeros / num_ones\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = 0\n    for i in range(len(nums)):\n        if zero_count[i] == 0:\n            non_zero_count += 1\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count_array = array('i', [0] * len(nums))\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count_array[non_zero_count] += 1\n        else:\n            non_zero_count += 1\n    non_zero_count_array = array('i', [0] * non_zero_count)\n    for i in range(non_zero_count):\n        non_zero_count_array[i] = zero_count_array[i]\n    ratio = sum(non_zero_count_array) / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    zero_ratio = 0\n    if non_zero_count!= 0:\n        zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case: if the number is 0, then it can be represented as sum of non-zero powers of 2\n    if n == 0: \n        return True\n    \n    # Base case: if the number is 1, then it can be represented as sum of non-zero powers of 2\n    if n == 1: \n        return True\n    \n    # If the number is greater than 1, then it cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is a positive integer\n    if type(n)!= int or n <= 0: \n        return False\n\n    # Initialize the variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Iterate over all the bits in the binary representation of the given number\n    while n > 0: \n        # Get the last bit of the binary representation\n        bit = n % 2\n\n        # Check if the bit is 0\n        if bit == 0: \n            # If it is 0, add the power of 2 to the sum of powers of 2\n            sum_of_powers += 1\n\n            # If the sum of powers of 2 exceeds the number of bits in the binary representation, the number cannot be represented as sum of powers of 2\n            if sum_of_powers > n.bit_length():\n                return False\n\n        # Remove the last bit from the binary representation\n        n //= 2\n\n    # If the loop finishes, the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_2(num):\n        '''\n        Helper function to check if a number is a power of 2 or not.\n        '''\n        if num == 0:\n            return False\n        elif num == 1:\n            return True\n        else:\n            return is_power_of_2(num >> 1) and (num & 1) == 0\n    \n    def power_of_2_sum(num):\n        '''\n        Helper function to find the sum of non-zero powers of 2 of a given number.\n        '''\n        if num == 0:\n            return 0\n        elif is_power_of_2(num):\n            return num + power_of_2_sum(num >> 1)\n        else:\n            return power_of_2_sum(num - 1)\n    \n    if n == 0:\n        return True\n    elif is_power_of_2(n):\n        return power_of_2_sum(n) == n\n    else:\n        return power_of_2_sum(n) == n + 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is a power of 2\n    if n == 1 or n == 2:\n        return True\n\n    # Check if the given number is a sum of powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return is_Sum_Of_Powers_Of_Two(n//i)\n\n    # If the given number is not a sum of powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the given number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check if the given number is a sum of powers of 2\n    else:\n        power = 2\n        while power*power <= n:\n            if n % power == 0:\n                return True\n            power <<= 1\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # find the number of non-zero bits in the binary representation of n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n\n    # check if the number of non-zero bits is even or odd\n    if count % 2 == 0:\n        return True\n\n    # if the number of non-zero bits is odd, check if there exists an integer k such that n = 2^k for some integer k\n    for i in range(1, 32):\n        if (1 << i) * (1 << i) > n:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    \n    power_of_two = 1\n    sum_of_powers = 0\n    \n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            sum_of_powers += power_of_two\n        power_of_two *= 2\n    \n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a dictionary to store the powers of 2\n    powers_of_two = {2:True}\n    \n    # Loop through the digits of the number\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Check if the digit is already in the dictionary\n        if digit_int in powers_of_two:\n            # If it is, check if it's a power of 2\n            if powers_of_two[digit_int] == True:\n                # If it is, remove it from the dictionary\n                powers_of_two.pop(digit_int)\n        else:\n            # If it's not, add it to the dictionary\n            powers_of_two[digit_int] = False\n    \n    # Check if the number can be represented as the sum of non-zero powers of 2\n    if len(powers_of_two) == 1:\n        # If it can, return True\n        return True\n    else:\n        # If it can't, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # check if the given number is even or odd\n    if n % 2 == 0: \n        # divide the number by 2 and recursively check if the result can be represented as sum of non-zero powers of 2\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n    else: \n        # if the number is odd, check if it can be represented as sum of non-zero powers of 2\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n /= 2\n        else:\n            n -= 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference using the formula:\n    # C = 2 * pi * r\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r = circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference using the formula: circumference = 2 * \u03c0 * r\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened_set = set()\n    \n    # Loop through each item in the list of lists\n    for item in test_list:\n        # If the item is a list, recursively call the function on it\n        if isinstance(item, list):\n            flattened_set.update(extract_singly(item))\n        # If the item is a number, add it to the flattened set\n        elif isinstance(item, (int, float)):\n            flattened_set.add(item)\n    \n    # Convert the flattened set to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            for subitem in item:\n                result.add(subitem)\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened list\n    flattened = set()\n    \n    # Iterate through the sublists in the list\n    for sublist in test_list:\n        # Iterate through the elements in the sublist and add them to the flattened set\n        for element in sublist:\n            flattened.add(element)\n    \n    # Convert the flattened set to a list and return it\n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if type(item) == list:\n            flattened += extract_singly(item)\n        else:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result = result.union(set(sublist))\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    import random\n\n    # Start with a random pivot element\n    pivot = random.choice(nums)\n\n    # Sort the list using quicksort with pivot chosen from the list\n    nums = quicksort(nums, 0, len(nums) - 1, pivot)\n\n    # Reverse the sorted list\n    nums = nums[::-1]\n\n    return nums\n\n\ndef quicksort(nums, low, high, pivot):\n    if low < high:\n        # Choose a random partitioning element from the list\n        pivot_index = partition(nums, low, high, pivot)\n\n        # Recursively sort the left and right sublists\n        quicksort(nums, low, pivot_index - 1, pivot)\n        quicksort(nums, pivot_index + 1, high, pivot)\n\n    return nums\n\n\ndef partition(nums, low, high, pivot):\n    pivot_index = low\n    for i in range(low, high):\n        if nums[i] <= pivot:\n            nums[i], nums[pivot_index] = nums[pivot_index], nums[i]\n            pivot_index += 1\n\n    nums[pivot_index], nums[high] = nums[high], nums[pivot_index]\n    return pivot_index"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the array\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        \n        # Swap the largest element with the element at the beginning of the unsorted part\n        nums[i], nums[largest] = nums[largest], nums[i]\n        \n        # Reverse the subarray starting from the second element\n        end = i\n        while end >= 0:\n            nums[i], nums[end] = nums[end], nums[i]\n            end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # create a copy of the input list\n    nums_copy = nums.copy()\n\n    # loop through each number in the list\n    for i in range(len(nums_copy)):\n        # find the largest number in the unsorted part of the list\n        largest = max(nums_copy[:i] + nums_copy[i+1:])\n        # swap the numbers with the largest number\n        nums_copy[i], nums_copy.index(largest) = nums_copy.index(largest), nums_copy[i]\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake(nums):\n        n = len(nums)\n        k = n - 1\n        while k >= 0 and nums[k] == k:\n            k -= 1\n        if k < 0:\n            return\n        nums[k], nums[n - 1] = nums[n - 1], nums[k]\n        reverse_pancake(nums[:n - 1])\n\n    def sort(nums):\n        n = len(nums)\n        for i in range(n):\n            reverse_pancake(nums)\n\n    sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # create a copy of the list to sort\n    nums = nums.copy()\n\n    # find the maximum element in the list\n    max_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # swap the maximum element with the last element in the list\n    nums[0], nums[max_index] = nums[max_index], nums[0]\n\n    # recursively sort the entire list\n    if max_index > 1:\n        pancake_sort(nums[:max_index-1])\n\n    # sort the remaining unsorted sublist\n    pancake_sort(nums[1:])\n\n    # swap the elements back to place them in sorted order\n    for i in range(len(nums)-1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # calculate the maximum swapping value\n    max_swapping = n // 2\n    # while there are elements left to be sorted\n    while max_swapping > 0:\n        # find the maximum element in the current subarray\n        max_idx = 0\n        for i in range(1, n-max_swapping):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # swap the maximum element with the leftmost element\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n        # calculate the maximum swapping value for the next iteration\n        max_swapping = n // 2\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    # Reverse the list to sort in descending order\n    nums.reverse()\n    # Sort the list in ascending order\n    while len(nums) > 1:\n        # Find the maximum element and its index\n        max_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # Swap the maximum element with the first element\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n        # Remove the maximum element from the list\n        nums.pop(max_idx)\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # create a copy of the list\n    nums_copy = nums.copy()\n    \n    # loop through the list until the list is sorted\n    while True:\n        \n        # find the largest element and its index\n        largest = max(nums_copy)\n        index = nums_copy.index(largest)\n        \n        # swap the largest element with the last element in the unsorted part of the list\n        nums_copy[index], nums_copy[-1] = nums_copy[-1], nums_copy[index]\n        \n        # check if the list is sorted\n        if nums_copy == nums_copy[::-1]:\n            break\n    \n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a helper list to store the indices of the sorted pancakes\n    indices = [0] * n\n    # create a helper variable to store the current pancake size\n    current_size = 1\n    # loop through the pancakes\n    while current_size < n:\n        # find the index of the smallest element in the current pancake\n        min_index = current_size\n        for i in range(current_size, n):\n            if nums[i] < nums[min_index]:\n                min_index = i\n        # swap the elements at the current index with the smallest element\n        nums[current_size], nums[min_index] = nums[min_index], nums[current_size]\n        # update the indices list and the current pancake size\n        indices[min_index] = current_size\n        current_size += 1\n    # sort the elements using the sorted indices list\n    nums = sorted([nums[i] for i in indices])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Start from the end of the list\n    for i in range(n-1, 0, -1):\n        # Find the index of the smallest element\n        smallest_index = i\n        for j in range(i-1, -1, -1):\n            if nums[j] < nums[smallest_index]:\n                smallest_index = j\n\n        # Swap the smallest element with the last element\n        nums[i], nums[smallest_index] = nums[smallest_index], nums[i]\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists and counts the number of items that are identical in the same position of the lists.\n\n    Args:\n        list1 (list): The first list of items to compare.\n        list2 (list): The second list of items to compare.\n        list3 (list): The third list of items to compare.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Example:\n        >>> list1 = [1, 2, 3, 4, 5]\n        >>> list2 = [2, 3, 4, 5, 6]\n        >>> list3 = [3, 4, 5, 6, 7]\n        >>> count_samepair(list1, list2, list3)\n        2\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each item in the first list\n    for item1 in list1:\n        # Check if the item is the same as the item in the same position in the second list\n        if item1 == list2[list2.index(item1)]:\n            # If the item is the same, increment the count variable\n            count += 1\n\n    # Return the count of identical items\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if abs(diff) > abs(max_diff):\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    max_diff = 0\n    \n    # Loop through all pairs of elements\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initializing the maximum difference variable as 0\n    max_diff = 0\n    # Looping through the array and comparing each element with the next one\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculating the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            # Updating the maximum difference if it is greater than the current maximum difference\n            if diff > max_diff:\n                max_diff = diff\n    # Returning the maximum difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Find the maximum absolute difference between any two elements in a given array.\n\n    Args:\n    arr: a list or array of numbers\n\n    Returns:\n    max_diff: the maximum absolute difference between any two elements in the array\n\n    '''\n    # Initialize the maximum difference to a very small value\n    max_diff = float('-inf')\n\n    # Loop over the array and calculate the absolute difference between each pair of adjacent elements\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        curr_diff = arr[i] - arr[i - 1]\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the given equation has two solutions\n    if (b**2 - 4*a*n) % 8 == 0:\n        x1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n        if x1 % 1 == 0 and x2 % 1 == 0:\n            return (int(x1), int(x2))\n\n    # Check if the given equation has one solution\n    else:\n        x = (-b) / (2*a)\n        y = n / (2*a)\n        if x % 1 == 0 and y % 1 == 0:\n            return (int(x), int(y))\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the denominator of the equation is zero, if so, no solution exists\n    if b == 0:\n        return None\n    \n    # Calculate the value of x when y = n\n    x = (-n + (b ** 2 - 4 * a * n) ** 0.5) / (2 * a)\n    \n    # Calculate the value of y when x = n\n    y = a * x + n\n    \n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    else:\n        x1 = -n / b\n        y1 = -x1 * a\n        if x1 < 0 or x1 > a:\n            return None\n        else:\n            x2 = (n - b) / b\n            y2 = -x2 * a\n            if x2 < 0 or x2 > a:\n                return None\n            else:\n                return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is valid (i.e. a and b are not zero)\n    if a == 0 or b == 0:\n        return None\n\n    # Compute the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # If the discriminant is negative, there is no real solution\n    if discriminant < 0:\n        return None\n\n    # Compute the two real roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n\n    # Sort the roots in ascending order\n    roots = sorted([root1, root2])\n\n    # Check if the roots are integers\n    if not all(isinstance(x, int) for x in roots):\n        return None\n\n    # Return the roots as a tuple\n    return tuple(roots)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b / (2*a)\n        y = x\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n\n        if x1 > x2:\n            x, y = x2, x1\n        else:\n            x, y = x1, x2\n\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the variables x and y to None\n    x = None\n    y = None\n    \n    # Check if the equation is valid\n    if a == 0 or b == 0:\n        return None\n    elif a == 1 and b == 0:\n        return (0, n)\n    elif a == 0 and b == 1:\n        return (n, 0)\n    else:\n        # Calculate the discriminant\n        discriminant = b**2 - 4*a*n\n        \n        # Check if the discriminant is negative\n        if discriminant < 0:\n            return None\n        else:\n            # Calculate the two solutions\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            \n            # Check if the solutions are distinct and return the result\n            if x1!= x2:\n                return (x1, x2)\n            else:\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize x and y variables\n    x = 0\n    y = 0\n    \n    # Use the quadratic formula to find the root of the equation\n    delta = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if delta < 0:\n        return None\n    \n    # If there is a solution, calculate the roots\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        \n        # Check if the roots are integers\n        if x1.is_integer() and x2.is_integer():\n            return (x1, x2)\n        \n        # If the roots are not integers, round them to the nearest integer\n        else:\n            return (round(x1), round(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is less than zero, indicating no solutions\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Check if both roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n    \n    # Return the solution as a tuple of two integers\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = y = 0\n    count = 0\n    \n    # loop through all possible pairs of integers x and y\n    while count <= n:\n        # check if the current pair satisfies the given equation\n        if a*x + b*y == n:\n            return (x, y)\n        # increment the current count\n        count += 1\n        # increment the value of x or y and reset the count to 0\n        x += 1 if count % 2 == 0 else -1\n        y += 1 if count % 3 == 0 else -1\n        \n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is solvable\n    if a == 0:\n        return None\n    elif b == 0:\n        return None\n    \n    # Find x and y that satisfy the equation\n    x = (-n + b) / a\n    y = (-n - b) / a\n    \n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the second list and remove all elements present in the first list\n    for item in list2:\n        while item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all elements present in the second list from the first list.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    :param list1: the first list of elements to remove\n    :param list2: the second list of elements to remove from\n    :return: a new list with all the elements from `list1` that are not present in `list2`\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # remove elements from list1 present in list2\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Create a new list to store the elements from list1 that are not present in list2.\n    result = [x for x in list1 if x not in list2]\n\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n // 2):\n        sum_ += n - 2 * i\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return n + sum_series(n - 2*n//2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        n_half = n // 2\n        series = [(n - 2*i) for i in range(n_half)]\n    else:\n        n_half = (n - 1) // 2\n        series = [(n - 2*i) for i in range(n_half)]\n\n    series.append(n)\n    sum_series = sum(series)\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        sum = 0\n        for i in range(n//2):\n            sum += n - 2*i\n        return sum\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += n - 2*i - i\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2*i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / l\n    area = (l * (l + 2) * tan(pi / l) + s * (s + 2) * tan(pi / s) + 2 * l * s * tan(pi / 2)) / (4 * tan(pi / l) * tan(pi / s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 2 * s / l\n    return 0.5 * s * tan(pi / l)\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * pi * i) / l)\n    area /= 2  # divide by 2 for area calculation\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s - tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * (tan(pi / l) + tan(pi / (2 * l)))))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan((2*i*pi/l))\n    return area/2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using the formula for the area of a regular polygon\n    area = (s*(l**2)) / (4*pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        x = i * s\n        y = 0\n        area += (x * y) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    area = (s * l * (1 - tan(pi / l))) / 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_div += i\n            if i!= n//i:\n                sum_div += n//i\n    \n    # Calculate the sum of the divisors of the other integer\n    sum_other = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_other += i\n            if i!= n//i:\n                sum_other += n//i\n    \n    # Compare the sums\n    if sum_div == sum_other:\n        print(\"The sum of the divisors of\", n, \"and\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    if len(divs) == 1:\n        return False\n    return sum(divs) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div_sum = sum(divs)\n    \n    if n == div_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Function to check if two numbers are equal\n    def is_equal(a, b):\n        return a == b\n    \n    # Function to calculate the sum of the divisors of a number\n    def div_sum(n):\n        div_list = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_list.append(i)\n                div_list.append(n//i)\n        return sum(div_list)\n    \n    # Function to determine if the sum of the divisors of two numbers are the same\n    def is_same(a, b):\n        return div_sum(a) == div_sum(b)\n    \n    # Main function to check if the sum of the divisors of two integers are the same\n    def div_sum_checker(a, b):\n        if is_equal(div_sum(a), div_sum(b)):\n            print(f\"The sum of divisors of {a} and {b} is the same.\")\n        else:\n            print(f\"The sum of divisors of {a} and {b} are different.\")\n    \n    # Main program\n    div_sum_checker(12, 24)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using the function'sum_divisors'\n    div_sum = sum_divisors(n)\n\n    # Calculate the sum of the divisors of the other number n using the function'sum_divisors'\n    other_div_sum = sum_divisors(other_num)\n\n    # Compare the two sums and return True if they are equal, else False\n    if div_sum == other_div_sum: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Determine the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate sum of divisors using math.prod()\n    divisors = list(math.factorize(n))\n    divisor_sum = math.prod(divisors)\n\n    # check if divisor_sum is equal to n\n    if divisor_sum == n:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n            \n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return True\n    divisors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    divisors.append(n)\n    divisors.sort()\n    return all(divisors[i] == divisors[i + 1] for i in range(len(divisors) - 1))"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower() # convert string to lowercase to ignore case\n    char_count = [0] * 26 # create a list of 26 zeros, one for each letter of the English alphabet\n    for char in str1: # iterate over each character in the string\n        if 'a' <= char <= 'z': # check if character is a lowercase letter (a-z)\n            index = ord(char) - ord('a') # convert character to index (0-25)\n            char_count[index] += 1 # increment the count for the current letter in the list\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the frequency of characters in the English alphabet\n    freq_dict = {}\n    for i in range(ord('a'), ord('z')+1):\n        freq_dict[chr(i)] = 0\n    \n    # loop through the string and update the frequency dictionary\n    for char in str1:\n        char = char.lower()  # convert to lowercase for case insensitivity\n        if char in freq_dict:\n            freq_dict[char] += 1\n    \n    # count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in freq_dict:\n        if char in freq_dict and freq_dict[char] == freq_dict[char.lower()]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        for c in str1:\n            if c.lower() == alphabet[i]:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the counts of characters at each position in the alphabet\n    char_count = {}\n    \n    # loop through the string and count the characters at each position in the alphabet\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() in char_count:\n                char_count[str1[i].lower()] += 1\n            else:\n                char_count[str1[i].lower()] = 1\n    \n    # loop through the dictionary and count the number of characters that occur at each position in the alphabet\n    result = 0\n    for key in char_count:\n        if char_count[key] > 1:\n            result += char_count[key]\n    \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # initialize counters\n    count_alpha = 0\n    count_other = 0\n    \n    # loop through each character in the string\n    for char in str1:\n        \n        # check if the character is in the English alphabet\n        if ord('a') <= ord(char) <= ord('z'):\n            count_alpha += 1\n            \n        # if the character is not in the English alphabet, count it as 'other'\n        else:\n            count_other += 1\n            \n    # return the sum of the two counters\n    return count_alpha + count_other"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert string to lowercase to count occurrences case-insensitively\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is an uppercase English alphabet character, add 1 to its count in the dictionary\n        if 'a' <= char <= 'z':\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Calculate the total number of occurrences of each character in the string\n    total_count = 0\n    for count in char_count.values():\n        total_count += count\n    # Return the total count\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    count_dict = {chr(i): 0 for i in range(ord('a'), ord('z')+1)}\n    \n    # Loop through each character in the string\n    for char in str1: \n        # If the character is in the English alphabet, increment the count in the dictionary\n        if char in count_dict:\n            count_dict[char] += 1\n    \n    # Return the dictionary with the count of characters at each position in the English alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    count = {}\n    # Iterate through the string and count the number of characters at each position\n    for i in range(26):\n        count[chr(i+97)] = 0\n    for char in str1:\n        count[char] += 1\n    # Return the count of characters at each position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    count_dict = {}\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with its position as the key\n        if char.isalpha():\n            position = ord(char) - ord('a')  # Subtract the ASCII value of 'a' to get the position in the alphabet\n            count_dict[position] = count_dict.get(position, 0) + 1  # Increment the count for the current position if it already exists, else set it to 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through the list\n    for i in range(len(A)):\n        # Iterate through the rest of the list\n        for j in range(i+1, len(A)):\n            # If the XOR of the current pair is even, increment the count\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0 and A[j] % 2 == 0: \n                xor_sum = A[i] ^ A[j] \n                if xor_sum == 0: \n                    count += 1 \n    return count "
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n\n    # Find the position of the binary point of n\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n\n    # Check if the bit at position power is set\n    if n == 1:\n        return 2 ** power\n\n    # Check if the bit at position power is unset\n    else:\n        return 2 ** (power - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n\n    # Otherwise, find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n\n    low = 1\n    high = n\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid\n\n    return high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the next power of 2 using bitwise operations\n    while n & (n - 1)!= 0:  # while the least significant bit is set\n        n = n | (n & -n)  # set the least significant bit to 1\n    \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to it.\n    '''\n    return 2**(n.bit_length()-1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # If n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    # If n is not a power of 2, return the next power of 2\n    else:\n        return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to a given number.\n    \"\"\"\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variables\n    i = 0\n    power_of_2 = 1\n    \n    # Loop through all powers of 2 from 2 to n\n    while power_of_2 < n:\n        i += 1\n        power_of_2 *= 2\n    \n    # Return the power of 2 to the power of i\n    return power_of_2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize a variable to store the smallest power of 2 greater than or equal to n\n    power = n\n\n    # loop until power is a power of 2\n    while power & (power - 1)!= 0: \n        power = power | (power & -power)\n\n    # return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n < m:\n        m, n = n, m\n    s = 0\n    for i in range(m, n+1):\n        s += list1[i-1]\n    return s"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the list is not empty\n    if len(list1) == 0:\n        print(\"The list is empty.\")\n        return\n    \n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        print(\"Invalid indices.\")\n        return\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the list and add the numbers within the range\n    for i in range(m, n+1):\n        sum += list1[i]\n    \n    # Return the sum of numbers within the range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(i, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Loop through list from index m to n (inclusive)\n    for i in range(m, n+1):\n        # If the element at index i is an integer, add it to the total_sum\n        if isinstance(list1[i], int):\n            total_sum += list1[i]\n\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through each index in the range\n    for i in range(m, n+1):\n        # Check if the index is within the list range\n        if i >= 0 and i < len(list1):\n            # Add the value at the current index to the total\n            total += list1[i]\n    \n    # Return the total\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices.\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a  # Find the circumference of a regular pentagon\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # convert the length of side a to radians\n    radians = math.radians(a)\n    \n    # calculate the perimeter of the pentagon using the formula\n    perimeter = 5 * math.sin(radians) + 5 * math.sin(radians/2) + 5 * math.sin(radians/2)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find(\"std\")\n    while index!= -1:\n        count += 1\n        index = s.find(\"std\", index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function counts the number of occurances of the string'std' in the given string's'.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize count to 0\n    count = 0\n\n    # loop through tuple elements\n    for element in test_tuple:\n        # check if current element is of same data type as first element\n        if type(element) == type(test_tuple[0]):\n            count += 1\n        else:\n            break\n\n    # if all elements are of same data type, return True\n    if count == len(test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    type_list = []\n    for element in test_tuple:\n        if type(element) not in type_list:\n            type_list.append(type(element))\n    \n    if len(type_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if not test_tuple:\n        return False\n    \n    # get the data type of the first element\n    first_type = type(test_tuple[0])\n    \n    # check if all the elements have the same data type\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n\n    for element in test_tuple:\n        data_types.append(type(element))\n\n    return all(t == data_types[0] for t in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # get the first element's data type\n    for element in test_tuple:\n        if type(element)!= data_type: # if the element's data type is different from the first element's data type, return False\n            return False\n    return True # if all elements have the same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Using list comprehension to convert all elements to same data type\n    test_list = [str(x) for x in test_tuple]\n    # Using set to remove duplicate values in list\n    unique_list = list(set(test_list))\n    # Checking if all elements have same data type\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])  # get the data type of the first element in the tuple\n    for i in range(1, len(test_tuple)):  # iterate over all the remaining elements in the tuple\n        if type(test_tuple[i])!= data_type:  # check if the data type of the current element is not equal to the data type of the first element\n            return False  # return False if the data type of any element is different from the first element\n    return True  # return True if all the data types in the tuple are the same\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize count and candidate\n    count = 0\n    candidate = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count is greater than n/2, return True\n        elif count > n//2:\n            return True\n        # If the count is less than n/2 and the current element is greater than the candidate, update the candidate\n        elif count < n//2 and arr[i] > candidate:\n            candidate = arr[i]\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Create a dictionary to store the counts of each element in the array\n    counts = {}\n\n    # Loop through the array and count the occurrences of each element in the dictionary\n    for elem in arr:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    # Find the majority element by finding the element with the highest count\n    max_count = 0\n    for count in counts.values():\n        if count > max_count:\n            max_count = count\n            majority_elem = next(elem for elem, count in counts.items() if count == max_count)\n\n    # Check if the majority element is equal to the target element\n    return (majority_elem == x)"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of set bits in the binary representation of the number.\n\n    >>> count_Set_Bits(123)\n    3\n    >>> count_Set_Bits(16)\n    4\n    >>> count_Set_Bits(0)\n    0\n    \"\"\"\n\n    count = 0\n    binary_representation = bin(n)[2:] # remove '0b' prefix from binary representation\n\n    for digit in binary_representation:\n        if digit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    odd_indices = [i for i in range(len(str)) if i % 2 == 1]\n    return ''.join(str[i] for i in odd_indices)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = [i for i in range(len(str)) if i % 2!= 0]\n    new_string = ''\n    for i in range(len(odd_index)):\n        new_string += str[odd_index[i]]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    # Convert the input string into a list of characters\n    char_list = list(str)\n\n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the index of the character is odd\n        if i % 2 == 1:\n            # If it is, remove the character from the list\n            char_list.pop(i)\n\n    # Convert the list of characters back into a string and return it\n    return \"\".join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    # Initialize an empty string to store the new string\n    new_string = \"\"\n    \n    # Loop through each character in the input string\n    for i in range(len(string)):\n        # Check if the index of the character is odd\n        if i % 2 == 1:\n            # Append the character to the new string\n            new_string += string[i]\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: A string to be processed.\n    :return: The modified string without odd index characters.\n    \"\"\"\n    return ''.join([chr(ord(char) - 1) if ord(char) % 2!= 0 else char for char in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Loop through the string and check if the index is odd\n    for i in range(len(str)):\n        # If the index is odd, remove the character from the string\n        if i % 2!= 0:\n            str = str[:i] + str[i+1:]\n    return str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Parameters:\n    str (str): The given string.\n\n    Returns:\n    str: The modified string with odd index values removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # check if all three numbers are valid numbers\n    if not all(isinstance(x, (int, float)) for x in [a, b, c]):\n        return \"Invalid input\"\n    \n    # find the minimum number using conditional statements\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as inputs and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the number of set bits in the range (r-l+1)\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & (1 << i)).count('1')\n\n    # Check if all bits are set\n    if count == (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # If l or r are zero, then all the bits are set\n    if l == 0 or r == 0:\n        return True\n\n    # If l is greater than r, then no bit is set in the range\n    if l > r:\n        return False\n\n    # Initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n\n    # Iterate through the bits in the range\n    for i in range(l, r + 1):\n        # Check if the current bit is set or not\n        if n & (1 << i) == 0:\n            # If the current bit is set, increment the unset_bits counter\n            unset_bits += 1\n            # If the number of unset bits reaches the number of bits in the range, return False\n            if unset_bits == (r - l + 1):\n                return False\n\n    # If the loop completes without returning False, then all the bits are set in the range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & (1<<i)).count('1')!= l:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & (1<<i))[2:].count('1')!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if the given range is valid\n    if l > r:\n        return False\n\n    # Convert the given range into binary representation\n    binary_range = format(l, '0' + str(r - l + 1) + 'b')\n\n    # Count the number of bits set in the binary representation\n    count_bits = binary_range.count('1')\n\n    # Check if all the bits are set in the binary representation\n    if count_bits == binary_range.count('0'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a Python function to check whether all the bits are set in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i)!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): The input integer.\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    # Compute the number of bits required to represent n\n    num_bits = 0\n    while n!= 0:\n        num_bits += 1\n        n = n >> 1\n    # Calculate the start and end of the range (inclusive)\n    start = l\n    end = r\n    if l < 0:\n        start = r\n        end = l\n    # Check whether all the bits are set in the given range\n    for i in range(start, end + 1):\n        bit_value = (i >> num_bits) & 1\n        if bit_value == 1:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize count of set bits to n\n    count = n\n    # loop through the range of bits\n    for i in range(l, r + 1):\n        # check if the current bit is set or unset\n        if i < n:\n            if (1 << i) & n == (1 << i):\n                # bit is set, decrement count\n                count -= 1\n    # check if all the bits are set\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a list of all set bits in the given range\n    set_bits = [i for i in range(l, r+1) if bin(i).count('1') == len(bin(i))]\n    # calculate the total number of bits in the given range\n    total_bits = r - l + 1\n    # subtract the number of set bits from the total number of bits to get the number of unset bits\n    unset_bits = total_bits - len(set_bits)\n    # check if all the unset bits are zero\n    if unset_bits == 0:\n        return True\n    # if not, then check if there are any unset bits other than zero in the given range\n    else:\n        for i in range(l, r+1):\n            if bin(i).count('1') == len(bin(i)) and bin(i).count('0')!= len(bin(i)):\n                return False\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a boolean variable to keep track of whether all bits are unset\n    all_unset = True\n\n    # loop through all the bits in the integer n and check if they are set in the given range\n    for i in range(l, r+1):\n        if n & (1 << i):\n            # if a bit is set in the given range, set all_unset to False and break out of the loop\n            all_unset = False\n            break\n\n    return all_unset"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that\n    all negative elements appear before positive ones, and where the relative order among negative and positive elements\n    is preserved.\n    \"\"\"\n    # Create two empty lists for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    # Iterate through the input array\n    for num in arr:\n        # If the number is negative, append it to the negative list\n        if num < 0:\n            neg_arr.append(num)\n        # If the number is positive, append it to the positive list\n        else:\n            pos_arr.append(num)\n    # Iterate through the negative list, appending each element to the output array in the same order as it appeared\n    # in the negative list. This ensures that the relative order is preserved.\n    for i in range(len(neg_arr)):\n        arr[i] = neg_arr[i]\n    # Iterate through the positive list, appending each element to the output array in the same order as it appeared\n    # in the positive list. This ensures that the relative order is preserved.\n    for i in range(len(pos_arr)):\n        arr[n+i] = pos_arr[i]\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # iterate through the array and add elements to the appropriate array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # add the remaining elements to the negative array\n    for i in range(n, len(arr)):\n        neg_arr.append(arr[i])\n    \n    # concatenate the two arrays\n    arr = neg_arr + pos_arr\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # loop through the first n elements of the array\n    for i in range(n):\n        # find the largest negative element in the array\n        max_neg = arr[i]\n        max_pos_index = i\n        for j in range(i+1, n):\n            if arr[j] > max_neg:\n                max_neg = arr[j]\n                max_pos_index = j\n        # swap the largest negative and positive elements\n        arr[i], arr[max_pos_index] = arr[max_pos_index], arr[i]\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: one for positive elements and one for negative elements\n    p1 = 0\n    p2 = 0\n\n    # Iterate through the array\n    while p2 < len(arr):\n        # If we encounter a positive element, swap it with the first element\n        if arr[p2] >= 0:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n        # If we encounter a negative element, swap it with the last element\n        else:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p2 -= 1\n\n    # Return the re-arranged array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Separate the array into two groups: negative and positive\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    \n    # Shuffle the positives to maintain the relative order\n    random.shuffle(positives)\n    \n    # Combine the two groups into a single list\n    combined = negatives + positives\n    \n    # Return the re-arranged array\n    return combined[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a temporary list to hold the negative and positive elements\n    temp = []\n    # Loop through the array and add negative and positive elements to the temporary list\n    for i in range(n):\n        if arr[i] < 0:\n            temp.append(arr[i])\n        else:\n            temp.append(abs(arr[i]))\n    # Loop through the original array and add the elements to the original list in the correct relative order\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            for j in range(len(temp)):\n                if temp[j] < 0:\n                    arr[i], temp[j] = temp[j], arr[i]\n                    break\n        else:\n            for j in range(len(temp)):\n                if temp[j] > 0:\n                    arr[i], temp[j] = temp[j], arr[i]\n                    break\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives.pop(0)\n        else:\n            arr[i] = positives.pop(0)\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = [i for i in arr[:n] if i >= 0]\n    neg = [i for i in arr[:n] if i < 0]\n    arr[:n] = pos + neg\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one for the beginning and one for the end of the array\n    i, j = 0, n - 1\n\n    # Swap the first n elements to the beginning of the array\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    # Use two pointers to find the boundaries of the positive and negative sub-arrays\n    neg_start, pos_start, neg_end = i, i, i\n    pos_end = j\n\n    while i <= j:\n        if arr[i] >= 0:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            i += 1\n            pos_start += 1\n        else:\n            arr[i], arr[neg_start] = arr[neg_start], arr[i]\n            i += 1\n            neg_start += 1\n\n    # Move the negative sub-array to the end of the array\n    while neg_start < neg_end:\n        arr[neg_end], arr[n - 1] = arr[n - 1], arr[neg_end]\n        neg_end -= 1\n\n    # Move the positive sub-array to the end of the array\n    while pos_start < pos_end:\n        arr[pos_end], arr[n - 1] = arr[n - 1], arr[pos_end]\n        pos_end -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive_indices = []\n    negative_indices = []\n    temp_arr = arr.copy()\n\n    for i in range(n):\n        if temp_arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n\n    temp_arr[negative_indices] = [x * -1 for x in temp_arr[negative_indices]]\n    temp_arr[positive_indices] = temp_arr[positive_indices][::-1]\n\n    return temp_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    # Convert the string to a list of characters\n    lst = list(str1)\n\n    # Iterate over the list and replace any blank spaces with the specified character\n    for i in range(len(lst)):\n        if lst[i] =='':\n            lst[i] = char\n\n    # Convert the list back to a string and return the result\n    return ''.join(lst)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character is a space, replace it with the character\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''+char+' ')"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Initialize a new string to store the modified string\n    modified_str = ''\n    # Iterate through each character in the original string\n    for char in str1:\n        # If the character is a space, replace it with the specified character\n        if char =='':\n            modified_str += char\n        else:\n            modified_str += char\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if len(list1) < n:\n        print(\"List is too small\")\n        return []\n    else:\n        heap = []\n        for num in list1:\n            heapq.heappush(heap, num)\n            if len(heap) > n:\n                heapq.heappop(heap)\n        return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq module to sort the list in descending order\n    heapq.heapify(list1)\n    \n    # Return the top n largest items from the heap\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # create a min heap to store the n largest elements\n    max_heap = []\n    \n    # add the first n elements to the heap\n    for i in range(n):\n        heapq.heappush(max_heap,list1[i])\n    \n    # add the remaining elements to the heap\n    for i in range(n,len(list1)):\n        if list1[i] > max_heap[0]:\n            heapq.heappushpop(max_heap,list1[i])\n    \n    # return the heap as a list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to keep track of the n largest items\n    max_heap = []\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n    # Convert the max heap to a list and return it\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n\n    for item in list1:\n        heapq.heappush(heap, item)\n\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    \n    heap = list(reversed(list1[:n]))\n    heapq.heapify(heap)\n    \n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n            \n    return list(reversed(heap))"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Return the first n items from the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize an empty list to store the n largest numbers\n    largest = []\n    # use a min heap to store the n largest numbers\n    heapq.heapify(largest)\n    # loop through the list and add each number to the heap\n    for num in list1:\n        heapq.heappush(largest, num)\n        # if the heap size exceeds n, remove the smallest number from the heap\n        if len(largest) > n:\n            heapq.heappop(largest)\n    # return the largest n numbers in a list\n    return largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a heap of n largest elements\n    heap = []\n    for i in range(n):\n        if len(heap) < n:\n            heapq.heappush(heap, list1[i])\n        else:\n            if list1[i] > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, list1[i])\n    # return the heap as the result\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder: (2/3)\u03c0r\u00b2h\n    lateral_surface_area = (2/3) * 3.14159 * r * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2+h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_surface_area = 2*math.pi*r**2 + 2*math.pi*r*h + 2*math.pi*h**2\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    \n    # calculate lateral surface area of the cylinder\n    lateral_surface_area = 2*pi*r*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Calculate the lateral surface area of the cylinder\n    lateral_area = (2*r*(h/2)**2) + ((math.pi*r**2)*h/2)\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * (r**2 + h**2) * 3.14159\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result of the bitwise AND operation\n    result = 0\n    # Initialize a variable to store the even bits of the input number\n    even_bits = 0\n\n    # Iterate over each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, set the corresponding bit in the result variable to 1\n            result |= (1 << i)\n        # If the current bit is odd, add it to the even_bits variable\n        else:\n            even_bits |= (1 << i)\n\n    # Return the result variable, which contains the input number with all even bits set to 1\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(32):\n        if (n & (1 << i)):\n            n |= 1 << i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is 0, set it to 1 and add it to the even_bits variable\n        if int(bit) == 0:\n            even_bits += 1\n        # If the bit is 1, do nothing and move on to the next bit\n        else:\n            continue\n\n    # Return the number with all even bits set to 1\n    return even_bits + n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, append 1 to the result list\n        if int(bit) == 0:\n            result.append(0)\n        else:\n            result.append(1)\n            \n    # Convert the result list to an integer and return it\n    return int(''.join(str(x) for x in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the bit is even, append a 1 to the result list\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(0)\n    \n    # convert the list of binary digits back to an integer and return it\n    return int(''.join(map(str, result)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    binary_string = bin(n)[2:]\n    # Initialize an empty list to store the updated binary string\n    updated_binary_string = []\n    # Loop through each character in the binary string\n    for char in binary_string:\n        # If the character is even, set it to 1, otherwise, set it to 0\n        if int(char) % 2 == 0:\n            char = '1'\n        else:\n            char = '0'\n        # Append the updated character to the list\n        updated_binary_string.append(char)\n    # Convert the updated binary string to an integer and return it\n    return int(''.join(updated_binary_string), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a counter variable to keep track of the number of even bits set\n    count = 0\n    \n    # Loop through each bit of the binary representation of the number\n    for i in range(32):\n        # Check if the i-th bit of the binary representation is 1\n        if (n & (1 << i)) > 0:\n            # If it is, set the i-th bit of the binary representation to 1\n            n |= (1 << i)\n            # Increment the counter variable\n            count += 1\n    \n    # Return the updated number of even bits set\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the integer to binary format\n    binary = format(n, 'b')\n    \n    # Loop through each bit in the binary string\n    for i in range(len(binary)):\n        # If the current bit is even, set it to 1\n        if int(binary[i]) % 2 == 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    # Convert the binary string back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0 # initialize the result variable\n    for i in range(8): # iterate through each bit of the number\n        if n & (1 << i): # if the i-th bit of n is 1\n            result |= (1 << i) # set the i-th bit of the result to 1\n    return result # return the result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for i in range(8):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the current bit in the result to 1\n            result |= (1 << i)\n            \n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for i in test_list:\n        counter[i] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple in the list\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a list of lists\n    flat_list = [item for sublist in test_list for item in sublist]\n    # count the occurrences of each tuple in the flat list\n    counter = Counter(flat_list)\n    # create a dictionary from the counter object\n    result_dict = dict(counter)\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count occurrences of tuples in the list\n    count_dict = Counter(test_list)\n    \n    # return the dictionary as a result\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a counter to keep track of the number of non-empty substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Create a substring starting at index i\n        substring = str[i:]\n\n        # Check if the substring is non-empty (i.e., it contains at least one character)\n        if substring:\n\n            # Increment the counter\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = set()\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and substring not in substrings:\n                substrings.add(substring)\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(start, cur_seq, length):\n        if length == n:\n            if cur_seq[0] >= 2 * cur_seq[-1] <= m:\n                return 1\n            else:\n                return 0\n        if start > m:\n            return 0\n        else:\n            return helper(start + 1, cur_seq + [start], length + 1) + helper(start + 1, cur_seq, length)\n\n    return helper(1, [2], 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize count variable to 0\n    count = 0\n\n    # loop through all possible numbers between 1 and m\n    for i in range(1, m + 1):\n        # loop through all possible previous numbers between 1 and i - 1\n        for j in range(1, i):\n            # check if current number is within the given range and is greater than twice the previous number\n            if j * 2 <= i and j * 2 >= j and j * 2 >= m and j * 2 <= n:\n                # increment count by 1\n                count += 1\n\n    # return the count of valid sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the total number of sequences\n    total_sequences = []\n\n    # Loop through the range from 1 to m\n    for i in range(1, m+1):\n        # Initialize a variable to store the number of sequences of length n that start with i\n        num_sequences = 0\n\n        # Loop through the range from i to m\n        for j in range(i, m+1):\n            # If j is a valid sequence length and is greater than or equal to twice the previous element\n            if j >= 2 * i and j <= m and j == i or i == j:\n                # Increment the number of sequences\n                num_sequences += 1\n\n        # Append the total number of sequences to the list\n        total_sequences.append(num_sequences)\n\n    # Return the list of total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    previous_element = 1\n\n    for i in range(n):\n        current_element = i + 1\n        if previous_element >= 2 * current_element and previous_element <= m:\n            total_sequences += 1\n        previous_element = current_element\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i < 2 * i:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m+1):\n        if i >= 2*m and i <= m:\n            count += 1\n    for i in range(1,m+1):\n        for j in range(i+1,m+1):\n            if j >= 2*i and j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = 1\n            elif i == j:\n                dp[i][j] = 1\n            else:\n                for k in range(1, i):\n                    if k + 2 * (i - k) <= j <= k:\n                        dp[i][j] += dp[i - k][j]\n    return dp[m][n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    total_sequences = 0\n    current_sequence = [2]\n    previous_element = 2\n    sequence_length = 1\n    # loop through all possible elements from 2 to m\n    for element in range(3, m+1):\n        # check if the element is within the required range\n        if element >= 2*previous_element and element <= m:\n            # if the element is valid, add it to the sequence and increment the sequence length\n            current_sequence.append(element)\n            sequence_length += 1\n        else:\n            # if the element is not valid, reset the sequence and decrement the sequence length\n            current_sequence = [2]\n            sequence_length = 1\n        # update the total number of sequences\n        total_sequences += sequence_length\n        # update the previous element for the next iteration\n        previous_element = element\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, 2 * m):\n        count += sum(1 for j in range(i + 1, min(i + n, m) + 1) if j >= 2 * i)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, cur, length):\n        if length == 1:\n            return 1\n        if cur % 2 == 0 and cur >= prev and cur <= m:\n            return helper(cur, cur + 1, length - 1) + helper(cur, cur + 2, length - 1)\n        else:\n            return helper(prev, cur + 1, length - 1)\n\n    return helper(0, 1, n)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the second list is longer than the first list, in which case we need to remove some elements from the first list.\n    while len(list2) > len(list1):\n        del list1[-1]\n    # Replace the last element of the first list with the elements of the second list.\n    for i, elem in enumerate(list2[-len(list1):]):\n        list1[i] = elem\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    # remove the last element of the first list\n    list1.pop()\n    # append the elements of the second list to the first list\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        for i in range(len(list1)-len(list2), len(list1)):\n            list1[i] = list2[0]\n        return list1\n    else:\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[:]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2[-1:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    # loop through the first list from 0 to length-2\n    for i in range(length-2):\n        # set the last element of the first list to the elements of the second list\n        list1[i] = list2[length-2-i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list1 is less than or equal to the length of list2\n    if len(list1) <= len(list2):\n        # Replace the last element of list1 with elements from list2\n        list1[-1] = list2\n        return list1\n    else:\n        # Return the original list1\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Convert the square root to integer\n    root_int = int(root)\n    # Find the next perfect square greater than the square root\n    next_square = root_int**2 + 1\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    \n    # Calculate the next perfect square\n    next_root = int(math.ceil(root))+1\n    \n    # Return the next perfect square\n    return next_root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        sqrt_N += 1\n    else:\n        sqrt_N += 0.5\n        \n    return int(sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Initialize variables\n    p = int(math.sqrt(N))\n    sqrtN = math.sqrt(N)\n    current = N - p**2\n\n    # Check if current number is a perfect square\n    if math.isqrt(current) == math.floor(math.isqrt(current)):\n        return int(sqrtN + 1)\n    else:\n        return int(current + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_integer(n):\n        '''\n        Check whether a number is an integer or not.\n        '''\n        return n == int(n)\n\n    sqrt_N = math.sqrt(N)\n\n    if is_integer(sqrt_N):\n        return math.sqrt(N) + 1\n    else:\n        return round(sqrt_N) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    square = N\n    i = 0\n    # Iterate until the square is greater than the given number\n    while math.sqrt(square) >= N:\n        square = square + i * i\n        i += 1\n    # Return the square\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    \n    # Check if N is a perfect square\n    if N**0.5**2 == N:\n        # If N is a perfect square, find the next perfect square greater than N\n        x = N**0.5 + 1\n        return int(x**2)\n    else:\n        # If N is not a perfect square, find the next perfect square greater than N\n        x = int(math.sqrt(N)) + 1\n        return int(x**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N -= 1\n    while True:\n        N += 1\n        square = int(math.sqrt(N))\n        if square*square == N:\n            return square\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N)) + 1\n    \n    # check if N is a perfect square\n    if sqrt_N * sqrt_N == N:\n        return sqrt_N * sqrt_N\n    \n    # find the next number greater than sqrt_N\n    next_N = int(math.ceil(sqrt_N * sqrt_N))\n    \n    # check if next_N is a perfect square\n    if next_N * next_N == sqrt_N * sqrt_N:\n        return next_N * next_N\n    \n    # if we reach here, sqrt_N is the next perfect square\n    return sqrt_N * sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    perfect_square = math.pow(sqrt_N, 2)\n\n    return perfect_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    if len(arr) < 3:\n        return 0\n\n    # Find the longest increasing subsequence (LIS)\n    LIS = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j] and LIS[i] < LIS[j] + 1:\n                LIS[i] = LIS[j] + 1\n\n    # Find the longest decreasing subsequence (LDS)\n    LDS = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j] and LDS[i] < LDS[j] + 1:\n                LDS[i] = LDS[j] + 1\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(1, len(arr)):\n        if LIS[i] <= LDS[i]:\n            max_sum += (len(arr) - i) * arr[i]\n        else:\n            max_sum += (len(arr) - i) * arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        if num > arr[0]:\n            current_sum += num\n        elif num < arr[0]:\n            current_sum -= num\n        else:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to keep track of the maximum sum and its indices\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    left = 0\n    right = 1\n    \n    # Loop through the array and update the maximum sum and its indices as we go\n    while right < len(arr):\n        if arr[left] < arr[right]:\n            # Increasing subsequence, update max_ending_here\n            max_ending_here = max(max_ending_here + arr[right], arr[right])\n        else:\n            # Decreasing subsequence, update max_ending_here\n            max_ending_here = max(max_ending_here, arr[right])\n        \n        # Update max_so_far if necessary\n        max_so_far = max(max_so_far, max_ending_here)\n        \n        # Move the pointers to the next subsequence\n        left += 1\n        right += 1\n    \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    # Calculate the maximum sum of a non-decreasing subsequence\n    non_decreasing_sum = arr[0]\n    for i in range(1, n):\n        non_decreasing_sum = max(arr[i], non_decreasing_sum + arr[i])\n\n    # Calculate the maximum sum of a non-increasing subsequence\n    non_increasing_sum = arr[n-1]\n    for i in range(n-2, -1, -1):\n        non_increasing_sum = max(arr[i], non_increasing_sum + arr[i])\n\n    return max(non_decreasing_sum, non_increasing_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)]\n    max_sum = float('-inf')\n    \n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                dp[0][i] = max(arr[i], dp[0][i-1])\n                dp[1][i] = max(arr[i] - arr[j], dp[1][i-1])\n            elif i < j:\n                dp[0][i] = max(arr[i], dp[1][j-1])\n                dp[1][i] = max(arr[i] - arr[j], dp[0][j-1])\n            \n            max_sum = max(max_sum, dp[0][i], dp[1][i])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize variables to store the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and calculate the current subsequence sum\n    for num in arr:\n        if num > arr[0]:\n            current_sum += num\n        elif num < arr[0]:\n            current_sum -= num\n\n        # Update the maximum sum if the current subsequence sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is already bitonic\n    is_bitonic = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_bitonic = False\n            break\n\n    # If the array is not bitonic, reverse it\n    if not is_bitonic:\n        arr = arr[::-1]\n\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Initialize variables for the current subsequence\n    current_sum = 0\n    increasing = True\n\n    # Traverse the array\n    for i in range(len(arr)):\n        if increasing:\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            current_sum -= arr[i]\n            if current_sum < max_sum:\n                max_sum = current_sum\n\n        if arr[i] < arr[i - 1]:\n            increasing = False\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    # Check if the array is bitonic\n    if n % 2 == 0:\n        return max(max_sum(arr[:n//2]), max_sum(arr[n//2:]))\n\n    # Initialize variables\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = float('-inf')\n    max_ending_here_pre = float('-inf')\n    max_ending_here_next = float('-inf')\n\n    # Loop through the array\n    for i in range(1, n):\n        # Update min_ending_here\n        min_ending_here = min(arr[i], min_ending_here)\n\n        # Update max_ending_here and max_ending_here_next\n        max_ending_here = max(arr[i], max_ending_here)\n        max_ending_here_next = max(arr[i], max_ending_here_next)\n\n        # Update max_ending_here_pre\n        max_ending_here_pre = max(max_ending_here, max_ending_here_pre)\n\n        # Check if the maximum subsequence so far is greater than the maximum subsequence ending at the current index\n        if max_ending_here_pre > max_so_far:\n            max_so_far = max_ending_here_pre\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Check if the array is bitonic\n    if arr[1] < arr[0]:\n        if arr[2] < arr[1]:\n            return arr[0] + arr[1] + arr[2]\n        elif arr[1] < arr[2]:\n            return arr[0] + arr[1] + max(arr[0], arr[2])\n        else:\n            return arr[0] + arr[2] + max(arr[0], arr[1])\n    else:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1] + max(arr[1], arr[2])\n        elif arr[1] < arr[2]:\n            return arr[1] + arr[2] + max(arr[0], arr[2])\n        else:\n            return arr[2] + max(arr[0], arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    left_sum = [0] * n\n    right_sum = [0] * n\n\n    # calculate sum of increasing subsequence\n    left_sum[0] = arr[0]\n    for i in range(1, n):\n        left_sum[i] = left_sum[i-1] + arr[i]\n\n    # calculate sum of decreasing subsequence\n    right_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + arr[i]\n\n    # find the maximum sum of a bitonic subsequence\n    max_sum = max(left_sum[0], right_sum[0])\n    for i in range(1, n):\n        max_sum = max(max_sum, left_sum[i] + right_sum[n-1-i])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initial guess\n    guess = number / 2\n    \n    # Continuously improve the guess\n    while True:\n        # Compute the next guess\n        next_guess = (guess + number / guess) / 2\n        \n        # Check if the difference between the current and next guess is less than epsilon\n        epsilon = 0.0001\n        if abs(guess - next_guess) < epsilon:\n            break\n        \n        # Update the guess\n        guess = next_guess\n    \n    # Return the approximate square root\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = 0.5 * (number + number / number)\n    while abs(guess*guess - number) >= epsilon:\n        guess = 0.5 * (number + number / guess)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the starting point and the precision\n    guess = 0.5\n    precision = 1e-10\n\n    while abs(guess*guess - number) > precision:\n        guess = (guess + number/guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        # calculate the number of iterations based on the number of digits in the number\n        num_digits = len(str(number))\n        iterations = num_digits * 10\n\n        # initialize the current approximation and the previous two approximations\n        x = y = 1\n        previous_x = previous_y = 0\n\n        # iterate until the desired accuracy is achieved\n        for i in range(iterations):\n            # calculate the current approximation\n            current_x = (previous_x + x) / 2\n            current_y = (previous_y + y) / 2\n\n            # update the previous two approximations\n            previous_x = x\n            previous_y = y\n\n            # if the current approximation is within the desired accuracy, return it\n            if abs(current_x - x) < 0.0001:\n                return current_x\n\n            # update the current approximation\n            x = current_x\n            y = current_y\n\n        # if the desired accuracy is not achieved, return the largest approximation found\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number / 2\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x0 = 1\n    x1 = 0\n    for i in range(100):\n        x2 = (x0 + x1*number/x0) / 2\n        x0 = x1\n        x1 = x2\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    prev_guess = guess\n    \n    while abs(prev_guess - guess) > 0.00001:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    for i in range(20):\n        x = (1 + (number/x)) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Input must be non-negative\")\n    i = 0\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 1e-10:\n            return next_guess\n        guess = next_guess\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(number, int) or number < 0:\n        return 'Invalid input. Please provide a positive integer.'\n\n    # Initialize two variables: a and b, with b = number / 2 and a = 0\n    a = 0\n    b = number / 2\n\n    # Repeat the following until a and b have the same sign:\n    while a * a!= b:\n        # Update a and b based on the sign of a\n        if a < b:\n            a = a + 1\n        else:\n            b = b - 1\n\n    # Return the square root by taking the average of a and b\n    return math.sqrt(b)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n\n    # Create a 2D table to store the lengths of longest palindromic subsequences ending at each index.\n    lps_table = [[0] * len(string) for i in range(len(string) + 1)]\n\n    # Initialize the base cases for all indices except the first one, which is the empty string.\n    for i in range(1, len(string) + 1):\n        lps_table[i][0] = 0\n\n    # Iterate through the string and fill the LPS table in a bottom-up manner.\n    for i in range(1, len(string) + 1):\n        for j in range(1, len(string) + 1):\n            if string[i - 1] == string[j - 1]:\n                lps_table[i][j] = lps_table[i - 1][j - 1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i - 1][j], lps_table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence.\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    lps = [1] * n\n\n    # Calculate length of LPS for odd length strings\n    for i in range(1, n, 2):\n        if s[i] == s[i - 1]:\n            lps[i] = lps[i - 1] + 2\n        else:\n            lps[i] = 1\n\n    # Calculate length of LPS for even length strings\n    for i in range(0, n - 1, 2):\n        if s[i] == s[i + 1]:\n            lps[i] = lps[i + 1] + 2\n        elif lps[i] > 1:\n            lps[i] = lps[i - 1]\n        else:\n            lps[i] = 1\n\n    # Find maximum length\n    max_len = max(lps)\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    # Initialize an empty list to store all longest palindromic subsequences\n    longest_palindrome = []\n\n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Initialize a variable to store the starting index of the current palindrome\n        start = i\n\n        # Initialize a variable to store the ending index of the current palindrome\n        end = i\n\n        # Iterate through the remaining characters of the string\n        for j in range(i+1, len(str)+1):\n            # Check if the current substring is a palindrome\n            if str[i:j] == str[i:j][::-1]:\n                # If it is, update the starting and ending indices of the current palindrome\n                if j - i > end - start:\n                    start = i\n                    end = j\n\n        # Add the current palindrome to the list of longest palindromic subsequences\n        longest_palindrome.append((start, end))\n\n    # Find the maximum length of the longest palindromic subsequence\n    max_length = max([end - start for start, end in longest_palindrome])\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 1:\n        return 1\n\n    dp = [1] * n\n    longest_palindrome = 1\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n            if dp[i] > longest_palindrome:\n                longest_palindrome = dp[i]\n        else:\n            dp[i] = 1\n            if dp[i] > longest_palindrome:\n                longest_palindrome = dp[i]\n\n    return longest_palindrome\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store the length of longest palindromic subsequence ending at i\n    table = [0] * n\n\n    # Initialize the table with 0\n    for i in range(n):\n        table[i] = 1\n\n    # Find the length of longest palindromic subsequence ending at i\n    for i in range(1, n):\n        # If the current character is same as the previous character or is in the middle of a palindrome\n        if str[i] == str[i-1] or i == n-1:\n            table[i] = 2\n            # Check if the length of the current subsequence is greater than the previous longest subsequence\n            if i + table[i-1] > table[i-2]:\n                table[i] = table[i-1] + 2\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    longest = 1\n    for i in range(n):\n        dp[i][i] = 1\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n            longest = 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > longest:\n                    longest = dp[i][j]\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a 2D table to store the lengths of longest palindromic subsequences\n    table = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and first column of the table with 1\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(str)):\n        for j in range(1, len(str)-i+1):\n            if str[j] == str[j+i-1]:\n                table[i][j] = table[i-1][j-1] + 1\n\n    # Return the length of the longest palindromic subsequence in the string\n    return table[len(str)-1][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # Create a dictionary to store the length of the longest palindromic subsequence for each substring\n    dp = {}\n\n    # Initialize the dictionary with 0 as the value\n    for i in range(len(str)):\n        dp[i] = 0\n\n    # Calculate the length of the longest palindromic subsequence for each substring\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            # If the current character is the same as the next character, and the substring is a palindrome, increase the length by 1\n            if str[i] == str[j] and (j - i <= 2 or dp[j - 1] > dp[j]):\n                dp[j] = dp[j - 1] + 2\n\n    # Return the length of the longest palindromic subsequence\n    return max(dp.values())"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    \"\"\"\n    Given a string, find the length of the longest palindromic subsequence in it.\n    \"\"\"\n    if len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 2\n    else:\n        dp = [1] * len(s)\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                dp[i + 1] = dp[i] + 2\n            else:\n                dp[i + 1] = max(dp[i], dp[i + 1])\n        return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D array to store length of longest palindromic subsequence for all substrings of length i \n    L = [[0] * n for _ in range(n)]\n    # initialize L[i][j] to 0 for all indices (i,j) \n    for i in range(n): \n        L[i][i] = 1 \n    # fill L[i][j] using dynamic programming \n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2 \n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    # return length of longest palindromic subsequence \n    return L[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    This function calculates the harmonic sum of n-1.\n    '''\n    return (n * (n-1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n\n    # Calculate the harmonic sum of n-1 using the formula: sum((1/i)**n for i in range(1,n+1))\n    # The sum() function can be used to add up a sequence of numbers.\n    # Here, we are iterating through all the integers from 1 to n+1 using the range() function,\n    # and for each integer i, we are calculating the harmonic sum of n-1 using the formula.\n    # The (1/i)**n is the nth power of 1/i.\n    harmonic_sum = sum(((1/i)**n for i in range(1, n+1)))\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0.0\n    for i in range(1, n+1):\n        result += 1.0/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(2*n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_lst = []\n    for i in range(1, n):\n        sum_lst.append(1/(i+1))\n    return sum(sum_lst)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1)) + (1/(n-2)) +... + (1/(n-n+1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of numbers in array_nums2\n    set_nums2 = set(array_nums2)\n    # create an empty list to hold the intersection of the two sets\n    intersection = []\n    # loop through each number in array_nums1\n    for num in array_nums1:\n        # if the number is in the set of numbers in array_nums2, add it to the intersection list\n        if num in set_nums2:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create two sets to store the unique elements from each array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in both arrays\n    freq_dict1 = {}\n    freq_dict2 = {}\n    for num in array_nums1:\n        freq_dict1[num] = freq_dict1.get(num, 0) + 1\n    for num in array_nums2:\n        freq_dict2[num] = freq_dict2.get(num, 0) + 1\n    \n    # Find the intersection of the two dictionaries\n    intersection_nums = [num for num in freq_dict1 if num in freq_dict2 and freq_dict1[num] == freq_dict2[num]]\n    \n    return intersection_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating an empty set to store the common elements\n    common = set()\n    # iterating through the first array\n    for num1 in array_nums1:\n        # checking if the number is present in the second array\n        if num1 in array_nums2:\n            # adding the number to the set of common elements\n            common.add(num1)\n    # converting the set to a list and returning it\n    return list(common)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from each array\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Combine the two arrays into one set to find the intersection\n    combined_set = set(array_nums1) & set(array_nums2)\n    # Convert the set back into a list and return it\n    return list(combined_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Initialize empty sets to store the common elements of both arrays\n    common_elements = set()\n\n    # Loop through the first array and check if the element exists in the second array\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_elements:\n            common_elements.add(num)\n\n    # Convert the set of common elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n\n    # Find all the elements in array_nums2 that are present in set1\n    intersection = [x for x in array_nums2 if x in set1]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i, item in enumerate(list):\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Use a for loop to iterate through the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list and return the result.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        # convert to polar coordinates\n        angle = cmath.phase(complex(real, imag))\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        print(f'{number} is a complex number with {angle} rad and {magnitude} magnitude')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(f\"{number} in polar coordinates is r={r} and theta={theta}.\")\n        else:\n            print(f\"{number} is not a complex number.\")\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    result = []\n\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(complex(real, imag))\n\n        result.append((modulus, phase))\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(magnitude, phase)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        complex_num = complex(num)\n        r = abs(complex_num)\n        theta = cmath.phase(complex_num)\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # converting complex number to polar coordinates\n        a = cmath.rect(num)\n        r = a.real\n        theta = cmath.phase(a)\n\n        # printing polar coordinates\n        print(f\"{num} in polar coordinates is ({r}, {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            real = number.real\n            imag = number.imag\n            angle = cmath.phase(number)\n            magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n            print(f\"({angle:.2f}, {magnitude:.2f})\")\n        else:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, converts each number to polar coordinates using the\n    cmath module, and returns the result as a list of tuples.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        r = cmath.sqrt(number.real ** 2 + number.imag ** 2)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []  \n    for num in numbers:  \n        complex_num = complex(num[0], num[1])  \n        r, theta = cmath.polar(complex_num)  \n        result.append([r, theta])  \n    return result  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # add polar coordinates to result list\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #combinations_with_replacement returns all possible combinations of length n from a list with repetition\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations with repetition of n elements from the input list\n    combinations = combinations_with_replacement(l, n)\n    # Convert each combination to a tuple and return as a list\n    result = [(tuple(combination)) for combination in combinations]\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n-1):\n            combinations.append((l[i],) + j)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # convert list to set to remove duplicates\n    l = set(l)\n    # generate all combinations with repetition\n    combinations = list(combinations_with_replacement(l, n))\n    # convert combinations to tuples and return as list\n    return [tuple(combination) for combination in combinations]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_colors = []\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            comb_colors.append(tuple(comb))\n    return comb_colors"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count+=1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements\")\n\n    # Initialize a list to store the maximum values\n    max_list = []\n\n    # Iterate through the tuple elements and find the maximum value\n    for i in range(len(test_tup1)):\n        max_val = max(test_tup1[i], test_tup2[i])\n        max_list.append(max_val)\n\n    # Convert the list of maximum values into a tuple and return it\n    return tuple(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize max_val to the first tuple's value\n    max_val = test_tup1[0]\n\n    # Iterate through the second tuple and compare each value to max_val\n    for num in test_tup2:\n        if num > max_val:\n            max_val = num\n\n    # Return the max_val tuple\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum of the two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # Initialize the maximum value with the first tuple element\n    max_value = test_tup1[0]\n    \n    # Compare the second tuple element with the maximum value\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Find the maximum element from each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Check if the maximum element from the first tuple is greater than the maximum element from the second tuple\n    if max1 > max2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n        \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of equal length and returns a tuple where each element\n    is the maximum of the corresponding elements of the input tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count of primes and the current number being checked\n    count = 0\n    num = 2\n    \n    # Iterate until n primes have been found\n    while count < n:\n        # Check if the current number is prime\n        if is_prime(num):\n            # Increment the count of primes found\n            count += 1\n            \n        # Increment the current number being checked by 1\n        num += 1\n    \n    # Return the nth prime number found\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Initialize variables\n    p = 2\n    count = 0\n    is_prime = False\n\n    # Loop while count is less than n and p is less than the square root of n\n    while count < n and p * p <= n:\n        # Check if p is prime\n        if p % 2 == 0 or (p - 1) % 3 == 0:\n            p += 2\n        else:\n            p += 1\n\n        # Count how many times p divides n\n        count = 0\n        while n % p == 0:\n            count += 1\n            n //= p\n\n        # Check if p is newman-shanks-williams prime\n        if count == 0:\n            is_prime = True\n            break\n\n    # If p is newman-shanks-williams prime, return p\n    if is_prime:\n        return p\n    else:\n        return \"No newman-shanks-williams prime found\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    if n < 2:\n        return None\n\n    primes = [2]\n    for i in range(3, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes[n-2]\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if p**2 > n:\n            return p - 1\n        if p**2 + 4 * p + 4 == n:\n            return p\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    for i in range(3, n+1):\n        prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if i == 2 or i == 3:\n            count += 1\n        else:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list of primes up to sqrt(n)\n    primes = [2]\n    i = 3\n    while primes[-1] * primes[-1] <= n:\n        primes.append(i)\n        i += 2\n    \n    # Find the nth newman\u2013shanks\u2013williams prime number\n    for p in primes:\n        if p * (p - 1) + 1 == n:\n            return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # The first three newman\u2013shanks\u2013williams primes are 2, 3, 5\n    if n < 4:\n        return n\n\n    # Initialize a variable to keep track of the count of primes so far\n    count = 0\n\n    # Initialize a variable to keep track of the previous prime number\n    previous_prime = 2\n\n    # Iterate through the odd numbers between 3 and n (exclusive)\n    for i in range(3, n + 1, 2):\n        # If i is a newman\u2013shanks\u2013williams prime, add 1 to the count\n        if is_newman_shanks_williams_prime(i):\n            count += 1\n\n        # If we have found the nth newman\u2013shanks\u2013williams prime, return the value\n        if count == n:\n            return i\n\n        # If i is not a newman\u2013shanks\u2013williams prime, check if it is a prime\n        if is_prime(i):\n            # If it is a prime, update the previous prime and move on\n            previous_prime = i\n            continue\n\n        # If i is not a prime, we need to check if it is the nth newman\u2013shanks\u2013williams prime after i\n        if is_newman_shanks_williams_prime(previous_prime + 2):\n            # If it is, update the count and move on\n            count += 1\n            continue\n\n        # If i is not a newman\u2013shanks\u2013williams prime after previous_prime, check if it is the nth newman\u2013shanks\u2013williams prime after that\n        if is_newman_shanks_williams_prime(previous_prime + 4):\n            # If it is, update the count and move on\n            count += 1\n\n    # If we have not found the nth newman\u2013shanks\u2013williams prime after iterating through all odd numbers between 3 and n,\n    # it is the next prime number after the last odd number less than or equal to n.\n    return previous_prime + 2\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_newman_shanks_williams_prime(n):\n    \"\"\"\n    Write a function to check if a number is a newman\u2013shanks\u2013williams prime.\n    \"\"\"\n    if n < 3 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # First, we initialize the list of primes up to 25\n    primes = [True] * 25\n    primes[0] = primes[1] = False\n\n    # Next, we loop through the remaining numbers from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # If the number is prime, we mark its multiples as composite\n        if primes[i]:\n            for j in range(i ** 2, n + 1, i):\n                primes[j] = False\n\n    # Finally, we find the nth prime number by counting the number of composite numbers up to n\n    count = 0\n    for prime in primes:\n        if prime:\n            count += 1\n        if count == n:\n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if p % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return primes[n-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty list to store the division result\n    division_result = []\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division and append the result to the division_result list\n        division_result.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the list of division results\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            test_tup1[i] //= test_tup2[i]\n        else:\n            test_tup1[i] = -((-test_tup1[i]) // test_tup2[i])\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup += (test_tup1[i]/test_tup2[i],)\n        elif isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            result_tup += (test_tup1[i]/test_tup2[i],)\n        else:\n            raise TypeError(\"Both tuples must contain numeric values.\")\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same number of elements\")\n    \n    # Perform element-wise division operation and return the result\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the two input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same number of elements.')\n\n    # Divide each element of the two input tuples element-wise\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            raise ValueError('The two input tuples cannot contain 0.')\n        test_tup1[i] /= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division = []\n    for i in range(len(test_tup1)):\n        division.append(test_tup1[i] / test_tup2[i])\n    return division"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        L = n\n    \n    half_len = n // 2\n    part1 = list1[:half_len]\n    part2 = list1[half_len:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts with a length of L.\n\n    Args:\n    list1 (list): a list to split\n    L (int): the desired length of the first part of the list\n\n    Returns:\n    (list, list): two lists, each of length L, where the first list contains the first part of the original list, and the second list contains the second part of the original list.\n    \"\"\"\n    # check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # find the index of the first element that is greater than or equal to L\n    index = bisect_right(list1, L)\n\n    # if there is no element greater than or equal to L, append L to the list\n    if index == len(list1):\n        list1.append(L)\n        index = len(list1) - 1\n\n    # split the list into two parts\n    list1_part = list1[:index]\n    list2_part = list1[index:]\n\n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # first, find the length of the first part\n    length = len(list1) // 2\n    # create a new list with the first part of the original list\n    first_part = list1[:length]\n    # create a new list with the second part of the original list\n    second_part = list1[length:]\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Convert the list into a tuple\n    lst_tup = tuple(lst)\n\n    # Split the tuple into two parts where the length of the first part is L\n    part1, part2 = lst_tup[:L], lst_tup[L:]\n\n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_length = len(list1)\n    if L <= 0 or L >= list1_length:\n        raise ValueError('Length L is not within the range of the list.')\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    n = len(lst)\n    mid = n // 2\n\n    if L <= 0 or L > n:\n        raise ValueError(\"L should be a positive integer less than or equal to the length of the list.\")\n\n    left_part = lst[:mid]\n    right_part = lst[mid:]\n    return left_part, right_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # Calculate the length of the second part of the list\n    length_of_second_part = len(list1) - L\n    \n    # Split the first part of the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('L is greater than the length of the list.')\n\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's years based on the age in human years.\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 12*h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in dog years\n    dog_age = h_age * 7\n\n    # Return the dog's age in dog years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Convert height in inches to centimeters\n    height = h_age * 2.54\n\n    # Calculate dog's age in dog years\n    dog_age = 7 * (height - 120)\n\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (MM/DD/YYYY): \")\n    year = 2021\n    age = year - int(dob.split('/')[2])\n    return f\"{h_age} years old is approximately {age} dog years.\""
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's age in dog's years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hour age to dog years\n    dog_years = h_age * 7\n    # return dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7\n    if h_age < 10:\n        dog_years = 5\n    elif h_age < 20:\n        dog_years = 4\n    elif h_age < 30:\n        dog_years = 3\n    elif h_age < 40:\n        dog_years = 2\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"step must be a positive integer\")\n    if not isinstance(S, list):\n        raise TypeError(\"S must be a list\")\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    while len(S) > 0:\n        result.append(S[:step])\n        S = S[step:]\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    # initialize a variable to keep track of the current index\n    index = 0\n    # iterate through the list\n    for i in range(len(S)):\n        # if the current index is divisible by the step value, add the current element to the result list\n        if index % step == 0:\n            result.append(S[i])\n        # increment the index by 1\n        index += 1\n    # return the list of resulting lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S.copy()  # make a copy of the input list to prevent modification of the original list\n    result = []  # initialize an empty list to store the resulting sublists\n    n = step if step >= 0 else -step  # handle negative values of step by flipping the direction of counting\n    while S:\n        if len(S) >= n:\n            result.append(S[:n])\n            S = S[n:]\n        else:\n            result.append(S)\n            S = []\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area\n    area = 2 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6  # Cube lateral surface area = 6 * side_length^2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l*l*l # surface area of the cube is its side length^3\n    return surface"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum of squares to 0\n    square_sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of each odd natural number to the sum of squares\n        square_sum += i*i\n\n    # Return the sum of squares\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1, 2):\n        sum += i*i\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    i = 1  \n    while i <= n:  \n        sum_of_squares += i**2  \n        i += 2  \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    current_num = 1\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initializing sum variable to zero\n    sum = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n\n        # checking if i is odd\n        if i % 2!= 0:\n\n            # adding the square of i to sum\n            sum += i*i\n\n    # returning the sum of squares of odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*****\"\n    elif n == 2:\n        return \"**\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return \"*\"\n    else: \n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Base case: If n = 0 or n = 1, return 1\n    if n == 0 or n == 1: \n        return 1\n\n    # Recursive case: If n > 1, find the (n-1)'th star number and add n to it\n    else: \n        return find_star_num(n-1) + n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find the nth star number.\n    \"\"\"\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # print the nth star number\n        print(\"*\"*(i*2-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n        print(\"*\" * num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    # Initialize the count variable\n    count = 1\n\n    # Loop until we reach then'th star number\n    while count <= n:\n        # Print the star number\n        print('*' * count)\n\n        # Increment the count variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n > 1:\n        return \"*\" + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each digit in the number n\n    while n > 0: \n        # Find the number of times 10 can be divided by n \n        # using integer division\n        times = n // 10\n        # Multiply the count by the number of times 10 can be divided by n\n        count = count * times\n        # Subtract 10 from n, since we've already divided it by 10\n        n = n % 10\n    \n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the number of spaces and stars needed for each star number\n    num_spaces = n // 2\n    num_stars = n - num_spaces\n    \n    # Print the spaces\n    for i in range(num_spaces):\n        print(' ', end='')\n    \n    # Print the stars\n    for i in range(num_stars):\n        print('*', end='')\n    \n    # Print the spaces\n    for i in range(num_spaces):\n        print(' ', end='')"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first n numbers to 1\n    for i in range(n): \n        print(\"*\", end=\"\")\n    # print the last number as a new line character\n    print()"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(\"The ASCII value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)!= 1:\n        raise ValueError(\"Input should be a single character.\")\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i, num in enumerate(arr):\n        if i % 2 == 0:\n            if num % 2 == 0:\n                sum_even += num\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Check if the current element is at an even index\n            if i % 2 == 0:\n                # Add the current element to the sum\n                sum += arr[i]\n    \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize variables\n    even_sum = 0\n    even_index = 0\n\n    # Iterate over the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # If it is, check if it's at the even position\n            if i % 2 == 0:\n                # If it is, add it to the sum and the index\n                even_sum += arr[i]\n                even_index = i\n\n    # Return the sum and index\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                count += 1\n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the fifth power of the number and add it to the sum\n        sum += i ** 5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize a variable to store the sum\n    total_sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the current number raised to the fifth power to the total sum\n        total_sum += i ** 5\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    # initialize the sum to 0\n    power_sum = 0\n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # add the power of i to the sum\n        power_sum += i**5\n    # return the sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[1] for elem in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    # Return the final list of rear elements\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n    # create a new tuple with the subtractions of the elements of the first tuple by the elements of the second tuple with the same index\n    subtraction_tup = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return subtraction_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: The length of the two tuples must be the same.'\n\n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # subtract the first tuple element from the second tuple element with the same index\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n        else:\n            test_tup1[i] = 0"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of both tuples should be equal.\")\n        return\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element in the second tuple from the first tuple\n        test_tup1[i] -= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum variable\n    even_sum = 0\n\n    # Calculate the first even index binomial coefficient\n    first_coeff = math.comb(n, 0)\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1, 2):\n        even_sum += math.comb(n, i-2)\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    \n    for i in range(2,n+1,2):\n        sum_even_binomial += math.comb(n, i)\n        \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += i * math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff_sum = 0\n    for i in range(2, n+1):\n        even_binomial_coeff_sum += math.comb(n, i) * 2**i\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Error: n must be a positive integer.\"\n    if n == 0:\n        return 0\n\n    total_sum = 0\n\n    # Loop through even indices\n    for i in range(0, n+1, 2):\n        total_sum += math.comb(n, i)\n\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return None\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i//2+1):\n            if i % 2 == 0:\n                even_sum += math.comb(i, j)\n    return even_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer greater than or equal to 1.\")\n        return None\n    \n    sum_even_binomial = 0\n    \n    for i in range(2, n+1, 2):\n        factorial = math.factorial(i)\n        binomial_coeff = factorial / math.factorial(n-i+1)\n        sum_even_binomial += binomial_coeff\n        \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_binomial_coeff_sum = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if i - j % 2 == 0:\n                even_binomial_coeff_sum += math.comb(n, j) * math.comb(n - i, i - j)\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_of_even_binomial_coeffs = 0\n    for i in range(2, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_of_even_binomial_coeffs += coeff\n    return sum_of_even_binomial_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    area = 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * (r**2)) + (h/3) * 3.14 * r**2\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3) * (3.14 * r**2)) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    vol = 3.14 * r * r * h # Formula for calculating the volume of a cylinder\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14159 * r * r * h) / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * (r**2)) * h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] == test_tup[i - 1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the first two terms\n    a, b = 1, 1\n\n    # iterate until n terms have been generated\n    for i in range(2, n + 1):\n        # calculate the next term\n        c = a + b\n\n        # update the values of a and b\n        a = b\n        b = c\n\n    # return the last term\n    return b"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initializing the first and last rows of the decagonal pyramid\n    row1 = [1]\n    row2 = [2, 1]\n\n    # Looping through the rows of the pyramid\n    for i in range(3, n+1):\n        # Adding the first and last elements of each row to get the nth element in the row\n        row2 = [row1[i-1] + row2[i-1] for i in range(1, len(row2)+1)]\n        row1 = row2\n\n    # Returning the nth decagonal number\n    return row1[-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the sum of squares of odd numbers from 1 to n\n    odd_sum_squares = sum([x*x for x in range(1, n+1, 2)])\n    # Calculate the sum of squares of even numbers from 1 to n\n    even_sum_squares = sum([x*x for x in range(2, n+1, 2)])\n    # Return the sum of squares of all odd numbers from 1 to n\n    return odd_sum_squares + even_sum_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((n * (2 * n - 1)) * 6) // 7"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return False\n\n    # Initialize variables\n    num = 1\n    decagonal = 0\n\n    # Calculate the decagonal number\n    for i in range(1, n+1):\n        decagonal += num\n        num += 2\n\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # First, calculate the number of rows required to reach the nth decagonal number.\n    num_rows = (n - 1) // 2 + 1\n\n    # Now, calculate the value of each row.\n    row_values = [1] * num_rows\n    for i in range(2, len(row_values) + 1):\n        row_values[i - 2] = 4 * i - 1\n\n    # Finally, calculate the decagonal number by multiplying the row values together.\n    return sum(row_values)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # find the sum of the squares of numbers up to n\n    # the sum of the squares of numbers up to n is:\n    # sum(i*i for i in range(1, n+1))\n    sum_of_squares = sum(i*i for i in range(1, n+1))\n\n    # convert the sum of squares to a decimal and round down to the nearest integer\n    decagonal_num = int(sum_of_squares**(1/2))\n\n    # return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # Calculate the number of rows in the triangle\n    rows = (n * (n + 1)) // 2\n\n    # Check if the number of rows is divisible by 2 (only odd numbers have decagonal numbers)\n    if rows % 2 == 0:\n        return False\n\n    # Calculate the sum of the numbers on each row\n    row_sum = (2 * rows - 1)\n\n    # Calculate the decagonal number by adding the sum of the first row and the sum of the last row\n    decagonal = row_sum + row_sum\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (1/2) * n * (n + 1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create an empty set to store the unique elements\n    unique_set = set()\n\n    # iterate over the elements of the list\n    for element in test_list:\n        # add the element to the set\n        unique_set.add(element)\n\n    # check if the set is empty or not\n    if len(unique_set) == len(test_list):\n        # if the set is empty, all elements are unique\n        return True\n    else:\n        # if the set is not empty, all elements are not unique\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements in the list are unique, else False.\n    '''\n    # Create a set of the elements in the list\n    unique_set = set(test_list)\n    # If the length of the set is equal to the length of the list, then all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        print(\"The list is unique\")\n    else:\n        print(\"The list is not unique\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the list is empty\n    if len(test_list) == 0:\n        return True\n    # Check if the first element is unique\n    elif len(set(test_list)) == len(test_list):\n        return True\n    # Check if the first element is not unique\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements of the list are unique and False otherwise.\n    '''\n    # create a set to store the unique elements of the list\n    unique_set = set()\n    # iterate over each element of the list\n    for element in test_list:\n        # if the element is already in the set, then the list contains duplicate elements and the function should return False\n        if element in unique_set:\n            return False\n        # otherwise, add the element to the set\n        unique_set.add(element)\n    # if all the elements of the list are unique, then the function should return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    else:\n        result = [nums1[i]-nums2[i] for i in range(len(nums1))]\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # subtract the elements of the two lists element-wise\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Initialize an empty dictionary to store the frequency of digits\n    freq = {}\n\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # If the digit is already in the dictionary, increment its value\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a value of 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through each digit in the string again to check if its frequency is greater than or equal to itself\n    for digit in n_str:\n        # If the digit is not equal to itself and its frequency is greater than or equal to itself, return False\n        if digit!= n and freq[digit] >= freq[n]:\n            return False\n\n    # If all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digit_freq = [0] * 10 # create a list of 10 zeros\n\n    # count the frequency of each digit in the integer\n    for i in str(n):\n        digit_freq[int(i)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Create a dictionary to store the frequency of digits\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of digits is less than or equal to the digits themselves\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0] * 10  # initialize an array of size 10 to store the frequency of each digit\n\n    for i in str(n):  # loop through each digit of the number\n        digit_freq[int(i)] += 1  # increment the frequency of the digit\n\n    for i in range(10):  # loop through each digit again to check whether the frequency is less than or equal to itself\n        if digit_freq[i] > digit_freq[i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize dictionary to store frequency of each digit in the integer\n    freq_dict = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n\n        # if digit already exists in dictionary, increment its value by 1\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # if digit does not exist in dictionary, add it with a value of 1\n        else:\n            freq_dict[digit] = 1\n\n    # loop through each digit in the integer again\n    for digit in freq_dict:\n\n        # if the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq_dict[digit] >= int(digit):\n            return False\n\n    # if all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Check for zero\n    if n == 0: \n        return True\n\n    # Initialize count dictionary\n    count = {}\n\n    # Iterate through digits of n\n    for i in range(len(str(n))): \n        # Get the digit as an integer\n        digit = int(str(n)[i])\n\n        # Check if digit is already present in count dictionary\n        if digit in count: \n            # Increment count\n            count[digit] += 1\n        else: \n            # Add digit to count dictionary\n            count[digit] = 1\n\n    # Iterate through count dictionary and check if any digit frequency is greater than digit itself\n    for digit, freq in count.items(): \n        if freq > digit: \n            return False\n\n    # If no digit frequency is greater than digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # if it is, increment its frequency by 1\n            freq[digit] += 1\n        else:\n            # if it is not, add it to the dictionary with frequency 1\n            freq[digit] = 1\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n\n    # if no digit in the integer has a frequency greater than or equal to its digit, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    for digit in count:\n        if count[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:],element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n        list (list): A list of elements to check.\n        element (object): An object that should be compared with each element in the list.\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'ab{2,3}'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a.*?b{2,3}\"\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?:(?!\\b)[bc]*b(?:(?!\\b)[bc]*b)*(?!\\b))')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[b]{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.*b.{2,3}')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the total sum of the given array\n    total_sum = sum(a)\n\n    # Check if the total sum is divisible by k\n    if total_sum % k!= 0:\n        # If not, add the minimum difference in the total sum to the last element of the array\n        a.append(total_sum - k + n)\n\n    # Sort the array in decreasing order\n    a.sort(reverse=True)\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the array and check for the maximum sum\n    for i in range(k):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a modified array by repeating the given array k times\n    mod_arr = [a[0]]\n    for i in range(1, n):\n        mod_arr.append(a[i] + mod_arr[-1])\n\n    # Initialize variables for the maximum sum of contiguous subarray and the sum of the largest subarray\n    max_sum = mod_arr[0]\n    sub_sum = mod_arr[0]\n\n    # Iterate through the modified array and calculate the sum of the largest subarray\n    for i in range(n, n+k):\n        sub_sum += mod_arr[i]\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n        if sub_sum < 0:\n            sub_sum = 0\n\n    # Return the maximum sum of the contiguous subarray formed by repeating the given array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    temp_sum = 0\n    count = 0\n    start = 0\n    end = 0\n    \n    while end < n:\n        temp_sum += a[end]\n        count += 1\n        end += 1\n        \n        if count == k:\n            temp_sum -= a[start]\n            count -= 1\n            start += 1\n        \n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a list of modified array by repeating the original array k times\n    modified_array = [a] * k\n    # create a list to store the sums of each modified array\n    sum_array = [sum(a)] * k\n    # loop through the modified array and calculate the sum of each modified array\n    for i in range(1, k):\n        modified_array[i] = a + a[i]\n        sum_array[i] = sum_array[i-1] + modified_array[i]\n    # initialize the maximum sum to be the sum of the last element in the original array\n    max_sum = sum_array[-1]\n    # loop through the modified array and update the maximum sum if the sum is greater than the current maximum sum\n    for i in range(k-1, -1, -1):\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    This function finds the maximum sum of a contiguous array in the modified array formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    repeated_array = a * k\n    for i in range(n-k+1):\n        sub_array = repeated_array[i:i+k]\n        sub_array.sort()\n        sub_sum = sum(sub_array)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_subarray = []\n    curr_sum = 0\n    repeated_sum = 0\n    repeated_count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the previous maximum sum, update the maximum sum and the subarray\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_subarray = [a[i]]\n\n        # If the current sum is equal to the previous maximum sum, add the current element to the subarray\n        elif curr_sum == max_sum:\n            max_subarray.append(a[i])\n\n        # If the current sum is greater than the sum of the repeated subarray, update the maximum sum and reset the subarray\n        if i >= k - 1 and curr_sum > repeated_sum:\n            repeated_sum = curr_sum\n            repeated_count = 1\n            max_subarray = [a[i]]\n\n        # If the current sum is equal to the sum of the repeated subarray, increment the repeated count\n        elif i >= k - 1 and curr_sum == repeated_sum:\n            repeated_count += 1\n\n    # If there is a repeated subarray, multiply it by the repeated count and add it to the maximum sum\n    if repeated_count > 0:\n        max_sum += repeated_count * repeated_sum\n\n    return max_sum, max_subarray\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Find the maximum subarray sum without repeating any element\n    max_sum = max(sum(a[i:j]) for i in range(n-k+1) for j in range(i, n+1))\n    \n    # Repeat the array k times, find the maximum subarray sum with repeating elements\n    max_sum_with_repeats = max(sum(a[i:j] * k) for i in range(n-k+1) for j in range(i, n+1))\n    \n    return max(max_sum, max_sum_with_repeats)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    window_sum = sum(a)\n    for i in range(n):\n        if i >= k:\n            window_sum -= a[i-k]\n        window_sum += a[i]\n        max_sum = max(max_sum, window_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the largest sum of a contiguous subarray in the original array\n    max_sum = max(a)\n    \n    # Find the largest sum of a contiguous subarray in the modified array\n    modified_sum = sum(a)\n    for i in range(n-k):\n        modified_sum += a[i]\n    max_modified_sum = max(modified_sum, max_sum)\n    \n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array\n    modified_array = []\n    for i in range(n):\n        modified_array.extend(a)\n\n    # Find the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n    for i in range(len(modified_array) - k + 1):\n        subarray_sum = sum(modified_array[i:i+k])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n\n    for i in range(2, n+1, 2):  # iterate through odd numbers starting from 2 (inclusive)\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = 0\n    sum_of_squares = 0\n    i = 0\n    while even_numbers < n:\n        i += 1\n        if i % 2 == 0:\n            sum_of_squares += i**2\n            even_numbers += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(max(len(lst), max_lengths[-1] if max_lengths else 0))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 1:\n        return 1\n    if k == 2 and n % 2 == 0:\n        return n * 2\n    if n <= 2:\n        return n\n    if k > n:\n        return 0\n    dp = [0] * (k + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, k + 1):\n        if i == 2:\n            dp[i] = 1\n        else:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % (10 ** 9 + 7)\n    ways = 0\n    for i in range(k + 1):\n        if i > 1 and i % 2 == 1:\n            continue\n        for j in range(i + 1, n + 1, 2):\n            if j == 2:\n                ways = (ways + dp[j]) % (10 ** 9 + 7)\n            else:\n                ways = (ways + dp[j - 1] + dp[j - 2]) % (10 ** 9 + 7)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an empty matrix to store the number of ways for each color.\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Base cases.\n    dp[1][1] = 1\n    dp[1][2] = 1\n    \n    # Fill the matrix using dynamic programming.\n    for i in range(2, n+1):\n        for j in range(k+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][2]\n            elif j == 2:\n                dp[i][j] = dp[i-1][1]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    # Return the last element of the matrix.\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # create a list of colors to choose from\n    colors = list(range(1, k+1))\n\n    # create a list to store the number of ways for each color\n    ways = [0] * k\n\n    # initialize the number of ways for each color to 1\n    for i in range(k):\n        ways[i] = 1\n\n    # iterate through the remaining n-2 posts and update the number of ways\n    for i in range(2, n):\n        # iterate through the remaining colors to choose from\n        for j in range(k):\n            # if the current color is not adjacent to the previous two colors, increment the number of ways\n            if ways[j] > 0 and (j+1) % 2!= (i-2) % 2:\n                ways[j] += ways[j-1]\n\n    # return the total number of ways\n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D list to store the number of ways of painting the fence.\n    # The first row and column will be initialized to 1, as there is only one way to paint the fence with 1 post and k colors.\n    dp = [[1] * (k+1) for i in range(n+1)]\n\n    # Fill the first row and column of the 2D list.\n    for i in range(1, k+1):\n        dp[0][i] = 1\n\n    # Fill the rest of the 2D list.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    # Return the number of ways of painting the fence.\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(start, colors_left, visited, result):\n        if colors_left == 0:\n            result += 1\n            return\n        if start == n:\n            backtrack(0, colors_left, visited, result)\n            return\n        for i in range(n):\n            if visited[i] or (i > 0 and visited[i-1] and colors_left > 0 and fence[i] == fence[i-1]):\n                continue\n            visited[i] = True\n            colors_left -= 1\n            backtrack(start+1, colors_left, visited, result)\n            colors_left += 1\n            visited[i] = False\n\n    fence = [0] * k\n    for i in range(n):\n        fence[i%k] += 1\n\n    return backtrack(0, 2, [False] * n, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Using dynamic programming\n    dp = [0] * (k+1) # dp[i] will store the number of ways to paint with i colors\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[j] = 1\n            else:\n                dp[j] = dp[j] + dp[j-1]\n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways of painting the fence\n    # where the i-th post has color j\n    count = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Base cases\n    count[1][1] = 1\n    count[1][2] = 0\n    \n    # Loop through the remaining n-1 posts\n    for i in range(2, n+1):\n        # Loop through the possible colors for the current post\n        for j in range(3, k+1):\n            # If the current post has the same color as the previous post, \n            # we cannot paint it twice\n            if j == 3:\n                count[i][j] = count[i-1][2]\n            else:\n                # If the current post has a different color from the previous post, \n                # we can paint it twice\n                count[i][j] = count[i-1][j-2] + count[i-1][j-3]\n    \n    # Return the final value of count\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a list to store the number of ways of painting the fence\n    ways = []\n    # create a list to store the possible colors\n    colors = []\n\n    # generate all possible colors\n    for i in range(k):\n        colors.append(i)\n\n    # check if the first and last posts have the same color\n    if colors[0] == colors[-1]:\n        ways.append(1)\n\n    # iterate over all possible ways of painting the fence\n    for i in range(1, n):\n        # find the number of ways of painting the fence using the previous way\n        ways_prev = ways[-1]\n        # create a new list of possible colors by excluding the previous color\n        new_colors = colors[1:]\n        # add the number of ways of painting the fence using the previous way and the new colors\n        ways.append(sum([ways_prev] + [len(new_colors)] * (i - 1)))\n\n    # return the number of ways of painting the fence\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    def dfs(i, colors):\n        if i == n:\n            return 1\n        \n        color = colors[i]\n        count = 0\n        for j in range(k):\n            if j!= color:\n                count += dfs(i + 1, colors[:i] + [j] + colors[i+1:])\n        return count\n    \n    return dfs(0, [i for i in range(k)])"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n / m\n    rounded_quotient = int(quotient)\n    return rounded_quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    if (n % m)!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the square root of the semi-perimeter\n    s_sqrt = math.sqrt(s)\n\n    # calculate the length of the other side of the triangle\n    o = (s_sqrt**2 - w**2) / (2 * s_sqrt)\n\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    :param w: the length of the base of the triangle\n    :type w: float\n    :param h: the length of the height of the triangle\n    :type h: float\n    :return: the third side of the triangle\n    :rtype: float\n    \"\"\"\n    # calculate the semi-perimeter and the area of the triangle\n    s = (w + h) / 2\n    A = math.sqrt(s * (s - w) * (s - h))\n\n    # calculate the third side of the triangle\n    return A"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the length of the semi-perimeter of the triangle\n    s = (w**2 + h**2)**0.5\n    \n    # Calculate the square of the hypotenuse\n    h_squared = h**2\n    \n    # Find the square root of h_squared and s\n    root_h_squared = math.sqrt(h_squared)\n    \n    # Calculate the value of the third side of the right angled triangle\n    third_side = (root_h_squared + s)/2\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w ** 2 + h ** 2 - (w / 2) ** 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # calculate the angle of the right triangle\n    angle = math.degrees(math.acos((w * h) / (area * s)))\n\n    # calculate the length of the other side\n    l = area / math.sin(math.radians(angle))\n\n    return l"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the other side\n    other_side = math.sqrt(w**2 + h**2)\n\n    # Calculate the third side\n    third_side = other_side\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # using the formula for the other side of a right triangle\n    s = math.sqrt(w**2 + h**2)\n    # return the third side\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes in a list of values and returns the maximum value in the list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is greater than the maximum value, update it\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # calculate sum of divisors\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number//i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left, right = 0, len(arr) - 1\n    # Initialize a variable to keep track of the count of inversions\n    inv_count = 0\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Partition the array around the pivot element\n        pivot = partition(arr, left, right)\n        # Count the number of inversions to the left of the pivot\n        inv_count += pivot - left\n        # Move the left pointer to the right of the pivot\n        left = pivot + 1\n    return inv_count\n\n\ndef partition(arr, left, right):\n    \"\"\"\n    Partition the array around the pivot element and return the index of the pivot element.\n    \"\"\"\n    # Set the pivot element as the last element of the array\n    pivot = arr[right]\n    # Initialize two pointers, one at the left of the array and one at the right of the array\n    i = left - 1\n    for j in range(left, right):\n        # If the element at the jth index is greater than the pivot, swap the elements\n        if arr[j] > pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    # Swap the pivot element with the element at the right of the array\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    # Return the index of the pivot element\n    return i + 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in descending order\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        \n    # Count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            inv_count += min(i, j, n-1) - max(i, j)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        merged = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n\n        merged += left[i:]\n        merged += right[j:]\n\n        return merged\n\n    arr_sorted = merge_sort(arr)\n\n    inv_count = 0\n    for i in range(len(arr_sorted) - 1):\n        for j in range(i + 1, len(arr_sorted)):\n            if arr_sorted[i] > arr_sorted[j]:\n                inv_count += 1\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Traverse the array twice and count the number of inversions\n    inv_count = 0\n    for i in range(n):\n        # Find the maximum element in the left subarray\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the current element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # Count the number of inversions in the current subarray\n        inv_count += (n-i-1)\n        # Find the maximum element in the right subarray\n        max_idx = n-1\n        for j in range(n-1, i-1, -1):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the current element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # Count the number of inversions in the current subarray\n        inv_count += (max_idx-i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # Count the inversions\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += n - i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Count inversions using a sorting based method\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base case: if the array has only one element, it is not inversed\n    if len(arr) <= 1:\n        return 0\n\n    # Divide the array in two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count the inversions in each half\n    inv_left = get_Inv_Count(left)\n    inv_right = get_Inv_Count(right)\n\n    # Count the inversions by comparing elements and adding to the result\n    inv_total = 0\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            i += 1\n        else:\n            j += 1\n            inv_total += i\n    while i < len(left):\n        i += 1\n        inv_total += i\n    while j < len(right):\n        j += 1\n        inv_total += j\n\n    return inv_total + inv_left + inv_right"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left = i\n        right = n-1\n        while left < right:\n            if arr[i] > arr[left]:\n                left += 1\n            elif arr[i] < arr[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n            inv_count += right - left + 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                # swap arr[j] and arr[j+1] \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                inv_count += n-j-1\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(l):\n        return [item for sublist in l for item in flatten(sublist)] if isinstance(l, list) else [l]\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if type(item) == list:\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each month\n    max_agg = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for t in stdata:\n        # Extract the month and the aggregate value from the tuple\n        month, value = t\n\n        # Update the maximum aggregate for the month if the current value is greater\n        if value > max_agg[month]:\n            max_agg[month] = value\n\n    # Calculate the total maximum aggregate across all months\n    total_agg = sum(max_agg.values())\n\n    # Return the total maximum aggregate\n    return total_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the aggregate for each transaction\n    agg_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for transaction in stdata:\n        # extract the customer id and amount from the tuple\n        customer_id, amount = transaction\n        # add the amount to the aggregate for that customer id\n        agg_dict[customer_id] += amount\n\n    # iterate through the dictionary and find the maximum aggregate\n    max_agg = 0\n    for _, agg in agg_dict.items():\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_val = max(max_dict.values())\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # iterate through the list of tuples and update the maximum aggregate for each customer\n    for customer, purchase in stdata:\n        max_aggr[customer] = max(max_aggr[customer], purchase)\n\n    # return the maximum aggregate for each customer\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for student, aggregate in stdata:\n        if aggregate > max_sum[student]:\n            max_sum[student] = aggregate\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the aggregate and the frequency of each product\n    freq = defaultdict(int)\n    # iterate through the list of tuples\n    for item in stdata:\n        # add the frequency of each product to the defaultdict\n        freq[item[0]] += item[1]\n    # calculate the maximum aggregate from the defaultdict\n    max_agg = max(freq.values())\n    # iterate through the list of tuples again and calculate the maximum frequency of any product\n    max_freq = max(item[1] for item in stdata)\n    # return the maximum aggregate if the maximum frequency is equal to the maximum aggregate\n    if max_freq == max_agg:\n        return max_agg\n    else:\n        return max_agg + 1"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate value\n    max_agg = defaultdict(int)\n\n    # Iterate over each tuple in the list\n    for i in stdata:\n        # If the maximum aggregate is not updated yet, update it\n        if i[0] > max_agg[i[1]]:\n            max_agg[i[1]] = i[0]\n\n    # Find the maximum aggregate value and return it\n    max_value = max(max_agg.values())\n    return max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for transaction in stdata:\n        for product, price in transaction:\n            max_dict[product] += price\n\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for transaction in stdata:\n        for item, price in transaction:\n            aggregate_dict[item] += price\n    max_agg = max(aggregate_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = 1\n    for value in max_dict.values():\n        max_agg *= value\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the sum of first n bits and last n bits\n    first_sum = 0\n    last_sum = 0\n\n    # Initialize the first n bits\n    first_bit = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary sequence to a list of bits\n        binary = bin(i)[2:]\n\n        # Initialize the sum of the current sequence\n        seq_sum = 0\n\n        # Loop through the current sequence to calculate the sum\n        for j in range(n):\n            # Check if the jth bit of the current sequence is 1\n            if binary[j] == '1':\n                # Add the value of the jth bit to the sum\n                seq_sum += (2**j)\n\n        # If the sum of the first n bits is equal to the sum of the last n bits, increment the count\n        if first_sum == seq_sum:\n            count += 1\n\n        # Update the sum of the first n bits and last n bits\n        first_sum += first_bit\n        last_sum += seq_sum\n\n        # Reverse the first n bits\n        first_bit = i & ((1 << n) - 1)\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, (1<<n)+1):\n        if sum(i//2**j % 2 for j in range(n)) == i % 2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    # Initialize variables\n    count = 0\n    last_sum = 0\n    \n    # Calculate sum of first n bits\n    first_sum = 0\n    for i in range(n):\n        first_sum += (2 ** i)\n    \n    # Calculate sum of last n bits\n    last_sum = 0\n    for i in range(n, 2*n):\n        last_sum += (2 ** (i-n))\n    \n    # Compare the two sums and update the count accordingly\n    if first_sum == last_sum:\n        count = 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary_seq(x):\n        return bin(x)[2:].zfill(n)\n\n    def sum_bits(seq):\n        return sum([int(bit) for bit in seq])\n\n    count = 0\n    for i in range(2**n):\n        seq = binary_seq(i)\n        if sum_bits(seq[:n]) == sum_bits(seq[-n:]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        first_half = binary_str[:n]\n        last_half = binary_str[-n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i)[-n:].zfill(n)\n        if int(first_n_bits) == int(last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    last_bits = 0\n    for i in range(1, 2**2*n+1):\n        current_bits = int(bin(i)[2:])\n        if (last_bits + current_bits) == 2**2*n:\n            count += 1\n        last_bits = current_bits\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n        last_sum = sum([int(digit) for digit in bin(i)[-1-n:].zfill(n)])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(1, 2**n+1):\n        bits = bin(i)[2:]\n        if bits[:n] == bits[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        seq_sum = sum(int(bit) for bit in seq)\n        if seq_sum == sum(int(bit) for bit in bin(i)[-n:][::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    new_depth = dict_depth(item) + 1\n                    if new_depth > max_depth:\n                        max_depth = new_depth\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    # Base case\n    if not d:\n        return 0\n\n    # Recursive case\n    return 1 + max(dict_depth(value) for key, value in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            pass\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        depth = max(dict_depth(x) for x in d)\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at the given index after a given number of rotations.\n\n    :param arr: The array to search in.\n    :param ranges: The list of ranges.\n    :param rotations: The number of rotations to perform.\n    :param index: The index of the element to search for.\n    :return: The element at the given index after the specified number of rotations.\n    \"\"\"\n    # Get the current element and its range\n    current_element = arr[index]\n    range_start = ranges[index][0]\n    range_end = ranges[index][1]\n\n    # Perform the specified number of rotations\n    for _ in range(rotations):\n        # Rotate the range left or right\n        if range_start < range_end:\n            range_start += 1\n        else:\n            range_end -= 1\n\n    # Check if the element is still in the current range\n    if range_start <= current_element < range_end:\n        return current_element\n    else:\n        # If the element is not in the current range, search in the previous and next ranges\n        if current_element < range_start:\n            return find_Element(arr, ranges, rotations, index - 1)\n        else:\n            return find_Element(arr, ranges, rotations, index + 1)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \n    Args:\n    arr (list): List of numbers.\n    ranges (list): List of ranges of rotations.\n    rotations (int): Number of rotations.\n    index (int): Index of the element we want to find.\n    \n    Returns:\n    int: The element at the given index after rotations.\n    \n    \"\"\"\n    \n    for i in range(rotations):\n        arr = arr[ranges[i]:ranges[i+1]]\n    \n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the length of the array\n    length = len(arr)\n    # Calculate the element to be found at the given index after rotations\n    element = arr[index]\n    # Loop through the ranges and rotations until the element is found\n    for i in range(rotations):\n        # Calculate the new index\n        new_index = (index + ranges[i]) % length\n        # Check if the new index is valid\n        if new_index < 0:\n            new_index += length\n        # If the element is found, return it\n        if arr[new_index] == element:\n            return element\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index as input.\n    The function finds the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Function to rotate an array\n    def rotate_array(arr, n):\n        return arr[-n:] + arr[:-n]\n\n    # Initialize variables\n    n = len(arr)\n    temp = []\n\n    # Find the length of the rotated array\n    for i in range(rotations):\n        temp = rotate_array(arr, n)\n        n = len(temp)\n\n    # Calculate the index after the rotations\n    new_index = (index % n) if (index >= n) else (index + n - index % n)\n\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # get the element at the given index\n    element = arr[index]\n    \n    # rotate the array by rotations\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n        \n    # search the rotated array for the element\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n        \n    # element not found in rotated array\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    else:\n        for i in range(len(arr)):\n            if i == index:\n                continue\n            else:\n                arr[i] = (arr[i] + arr[i + rotations]) % ranges[i]\n        return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # create a dictionary to store the position of each element\n    pos = {}\n    for i in range(len(arr)):\n        pos[arr[i]] = i\n    \n    # calculate the total number of rotations\n    total_rotations = 0\n    for i in range(len(rotations)):\n        total_rotations += rotations[i]\n\n    # find the rotations until the required index is reached\n    current_rotations = 0\n    current_index = index\n    while current_index!= -1:\n        current_rotations += 1\n        current_index = pos[current_index] - 1\n\n    # calculate the final position of the element\n    final_index = (current_rotations - 1) % total_rotations + index + 1\n    if final_index == len(arr):\n        final_index = 0\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if count == index:\n            return arr[i]\n        count += 1\n\n    for i in range(n):\n        if count == index:\n            return arr[(i + rotations) % n]\n        count += 1\n\n    return \"Element not found\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr = arr[::-1]\n\n    for i in range(len(arr)):\n        if i == index:\n            return arr[i]\n\n    for i in range(len(arr)-1, -1, -1):\n        if (i + index) % len(arr) == 0:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a certain number of rotations.\n\n    Args:\n    arr (list): A list of integers to be rotated.\n    ranges (list): A list of range tuples specifying the rotations. Each tuple contains the starting and ending indices for a rotation.\n    rotations (int): The number of rotations to be applied.\n    index (int): The index of the element to be found.\n\n    Returns:\n    int: The element at the given index after the rotations have been applied.\n\n    '''\n    n = len(arr)\n    # Calculate the total number of elements to be rotated.\n    total_elements = rotations * n\n\n    # Iterate through the rotations and find the element at the given index.\n    for i in range(rotations):\n        start, end = ranges[i]\n        # Reverse the first half of the array.\n        arr[start:end] = arr[start:end][::-1]\n        # Reverse the entire array after the first half.\n        arr[end:] = arr[end:][::-1]\n\n    # Find the element at the given index.\n    element = arr[index % n]\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    \n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'\\b[Pp]\\.?[a-z]+\\b')\n    # Use re.findall() to find all matches in the list of words\n    matches = re.findall(pattern,''.join(words))\n    # Check if there are exactly two matches, otherwise return an empty list\n    if len(matches) == 2:\n        return matches\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w*'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-z]+'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0].lower() == 'p':\n            if i+1 < len(words):\n                return words[i], words[i+1]\n            else:\n                return words[i]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a pattern to find words starting with letter 'p'\n    pattern = r'^p.'\n\n    # Use re.findall() method to find all matches of the pattern in the list\n    matches = re.findall(pattern, words)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Return the two words that start with 'p'\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word[1:]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0].lower() == 'p':\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0\n    \n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index, -1, -1):\n        if a[i] > a[index] and k > i:\n            dp[i] = max(dp[i], dp[i+1] + a[i])\n    \n    max_sum = max(dp)\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    :param a: An array of integers\n    :param n: The size of the array\n    :param index: The index of the last element in the subsequence\n    :param k: The index of the kth element in the array\n    :return: The maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    \"\"\"\n\n    # Initialize variables\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    max_sum = 0\n\n    # Fill the first row of the dp table\n    for i in range(n):\n        if a[i] <= a[index]:\n            dp[0][i] = a[i]\n            max_sum = max(max_sum, a[i])\n        else:\n            dp[0][i] = 0\n\n    # Fill the remaining rows of the dp table\n    for i in range(1, k + 1):\n        for j in range(n):\n            if i == 1:\n                dp[i][j] = a[j]\n            elif a[j] <= a[index]:\n                dp[i][j] = dp[i - 1][j]\n                if i < k and a[j] <= a[k]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][k] + a[j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index] + a[i])\n        else:\n            dp[i] = dp[index] + a[i]\n    if k > index:\n        return dp[k]\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), dp[k])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize the maximum sum and current sum of subsequence\n    max_sum = float('-inf')\n    current_sum = 0\n    # initialize the array to store the last element of the increasing subsequence\n    prev_subseq = [0] * (n - index)\n\n    # loop through the array from index to n-1\n    for i in range(index, n):\n        # if the current element is greater than k, then add the current element to the subsequence and update the current sum\n        if a[i] > k:\n            current_sum += a[i]\n            prev_subseq[i - index] = a[i]\n        else:\n            # if the current element is less than or equal to k, then the current subsequence is the subsequence till i-1 and the current element is the kth element after i-1\n            current_sum = a[i]\n            prev_subseq[i - index] = k\n\n        # if the current sum is greater than the maximum sum, then update the maximum sum and the array to store the last element of the increasing subsequence\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_subseq = [prev_subseq[j] for j in range(i - index, i)]\n\n    # return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    return max_sum, max_subseq\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_so_far and max_ending_here to 0\n    max_so_far = 0\n    max_ending_here = 0\n    \n    # Loop through all prefixes up to the i-th index\n    for i in range(index):\n        # Calculate the difference between the current element and the kth element\n        diff = a[i] - a[k-1]\n        # Update the maximum sum of increasing subsequence starting from prefix i\n        max_ending_here += diff\n        # Update the maximum sum of increasing subsequence so far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    # Calculate the difference between the last element and kth element\n    diff = a[index-1] - a[k-1]\n    # Update the maximum sum of increasing subsequence starting from the last index\n    max_ending_here += diff\n    # Update the maximum sum of increasing subsequence so far\n    max_so_far = max(max_so_far, max_ending_here)\n    \n    # Return the maximum sum of increasing subsequence up to the kth element\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function calculates the maximum sum of an increasing subsequence that ends at a given index (inclusive) and also includes a given kth element.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_ending_here = 0\n    prefix_sum = 0\n\n    # Iterate through the array\n    for i in range(index, n):\n\n        # Check if kth element is before or after the ith element\n        if i == k - 1 or a[i] > a[k - 1]:\n\n            # Calculate the sum of the increasing subsequence ending at i\n            subseq_sum = a[i] + prefix_sum\n\n            # Update the maximum sum if the current subsequence sum is greater\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n                max_ending_here = a[i]\n\n            # Add the current element to the prefix sum\n            prefix_sum = subseq_sum + a[i]\n\n    return max_sum, max_ending_here"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    def find_max_sum_increasing_subseq(a, n, index, k):\n        \"\"\"\n        Helper function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n        \"\"\"\n        max_sum = float('-inf')\n        max_ending_here = 0\n        for i in range(index, n):\n            if i < k:\n                max_ending_here += a[i]\n            else:\n                max_ending_here += a[i] - a[i - k]\n            max_sum = max(max_sum, max_ending_here)\n        return max_sum\n\n    if index > k:\n        return 0\n    elif index == k:\n        return a[index]\n    else:\n        return max(find_max_sum_increasing_subseq(a, n, index, k), max_sum_increasing_subseq(a, n, index + 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize the maximum sum as the first element\n    max_sum = a[index]\n\n    # loop through all elements from 0 to i-1\n    for i in range(index):\n        # check if the element is greater than k\n        if a[i] > k:\n            # if yes, calculate the sum of the increasing subsequence starting from prefix[i+1] and ending at i\n            sum_inc_subseq = a[index] + max_sum_increasing_subseq(a, n, i+1, k)\n            # update the maximum sum if the calculated sum is greater than the current maximum sum\n            if sum_inc_subseq > max_sum:\n                max_sum = sum_inc_subseq\n\n    # return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a (list): List of integers.\n    n (int): Number of elements in the list.\n    index (int): Index of the element from which the subsequence starts.\n    k (int): Index of the element after which the subsequence should end.\n\n    Returns:\n    int: The maximum sum of increasing subsequence from prefix until index and also including kth element.\n    \"\"\"\n\n    # If k is greater than or equal to n, return 0\n    if k >= n:\n        return 0\n\n    # Initialize a table to store the maximum sum of increasing subsequence for each index.\n    table = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence at index 0.\n    table[0] = a[0]\n\n    # Iterate over the remaining indices from 1 to n-1.\n    for i in range(1, n):\n        # If the element at index i is greater than or equal to k, then the maximum sum of increasing subsequence is either the current sum (if the element is the kth element) or the sum of the current sum and the maximum sum of increasing subsequence for the previous index (if the element is not the kth element).\n        table[i] = max(a[i] + table[i - 1] if i == k else table[i - 1], table[i])\n\n    # Return the maximum sum of increasing subsequence from prefix until index and also including kth element.\n    return table[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index\n    and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        a: list of integers\n        n: integer, length of the list\n        index: integer, current index\n        k: integer, index after which we need to find max sum\n\n    Returns:\n        integer, maximum sum of increasing subsequence from prefix until ith index\n        and also including a given kth element which is after i, i.e., k > i\n    \"\"\"\n\n    if index == k:\n        return max(a[index])\n\n    if index > k:\n        return 0\n\n    if a[index] > a[index - 1]:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # get the indices of the elements to be colonized\n    indices = [i for i in range(len(tuplex)) if i % m == 0]\n    \n    # iterate over the indices and colonize the elements\n    for index in indices:\n        tuplex_copy = tuplex_copy[:index] + (tuplex_copy[index],) + tuplex_copy[index+1:]\n    \n    # get the colonized tuple\n    colonized_tuplex = tuple(tuplex_copy)\n    \n    # return the colonized tuple\n    return colonized_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m == 0 and n == 0:\n        return ()\n    if m == 0:\n        return (tuplex[0][n],)\n    if n == 0:\n        return (tuplex[i][0] for i in range(m))\n    return (tuplex[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): the tuple to get a colon from.\n    m (int): the number of rows in the colon.\n    n (int): the number of columns in the colon.\n\n    Returns:\n    tuple: a colon of the input tuple.\n\n    '''\n    # Create an empty list to store the colon\n    colon = []\n    \n    # Loop through each row in the colon\n    for i in range(m):\n        # Loop through each column in the colon\n        for j in range(n):\n            # Copy the row of the tuple at index i\n            row_copy = deepcopy(tuplex[i])\n            # Add the column of the tuple at index j to the row\n            row_copy.insert(j, tuplex[j][i])\n            # Append the row to the colon\n            colon.append(tuple(row_copy))\n    \n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    - tuplex: tuple of any length\n    - m: int, number of rows to include in the colon\n    - n: int, number of columns to include in the colon\n\n    Returns:\n    - colon_tuplex: tuple of length m*n, where the i-th element of the colon is the i-th element of the input tuple.\n    \"\"\"\n\n    if m*n > len(tuplex):\n        raise ValueError(\"The number of columns and rows can't be greater than the length of the input tuple.\")\n\n    colon_tuplex = deepcopy(tuplex[:])\n\n    # loop through each row\n    for i in range(m):\n        # loop through each column\n        for j in range(n):\n            # add the i-th element of the tuple to the j-th element of the colon tuple\n            colon_tuplex[i*n+j] = tuplex[i]\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    i = 0\n    while i < len(new_tuplex):\n        new_tuplex[i] = (new_tuplex[i][0], new_tuplex[i][1][0:m], new_tuplex[i][1][m:])\n        i += 1\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex[0])\n    for i in range(1,m):\n        row = tuple([tuplex[i][j] for j in range(n)])\n    return row"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Take a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Initialize the result list\n    result = []\n    # Iterate over the tuples in the input list\n    for i in range(m):\n        # Get the value at index i in the input tuple\n        value = tuplex_copy[i]\n        # Iterate over the indexes j from n to 0\n        for j in range(n-1):\n            # Shift the value at index i-j to the index i-j+1\n            tuplex_copy[i-j] = tuplex_copy[i-j+1]\n        # Set the value at index i to the last value in the tuple\n        tuplex_copy[i] = value\n        # Append the shifted value to the result list\n        result.append(tuplex_copy[i])\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex_str = str(new_tuplex)\n\n    # Split the tuple into characters\n    tuplex_chars = list(new_tuplex_str)\n\n    # Remove the first and last characters of the tuple\n    for i in range(len(tuplex_chars)):\n        if i == 0 or i == len(tuplex_chars)-1:\n            del tuplex_chars[i]\n\n    # Calculate the number of colons needed\n    num_colons = (len(tuplex_chars) + n - 1) // n\n\n    # Add colons to the tuple\n    for i in range(num_colons):\n        tuplex_chars.insert(i*n, ':')\n\n    # Convert the list back to a tuple\n    colon_tuplex = tuple(tuplex_chars)\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and returns a tuple with the elements colonned.\n    '''\n    if n > len(tuplex[0]):\n        raise ValueError(\"The number of elements in the colon can't be greater than the length of the tuple\")\n    col_tup = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            if j < len(tuplex[i]):\n                col.append(deepcopy(tuplex[i][j]))\n            else:\n                col.append(None)\n        col_tup.append(col)\n    return col_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    if len(colon) < m:\n        for i in range(len(colon), m):\n            colon.append(None)\n    else:\n        for i in range(m, n):\n            colon.append(None)\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a dictionary to store the products\n    product_dict = {}\n    # loop over the numbers in the lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the product and store it in the dictionary\n            product = num1 * num2\n            if product in product_dict:\n                product_dict[product] += 1\n            else:\n                product_dict[product] = 1\n    # sort the products by their value in descending order\n    sorted_products = sorted(product_dict.items(), key=lambda x: x[1], reverse=True)\n    # return the products and their counts\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1: List of integers\n    nums2: List of integers\n    N: Integer\n\n    Returns:\n    A list of integers representing the N largest products found.\n\n    \"\"\"\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Find the maximum value of each list and store it in a variable\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n\n    # Loop through each number in the range of N\n    for i in range(N):\n        # Calculate the largest product of a number in nums1 and nums2\n        product1 = max_num1 * nums1[i]\n        product2 = max_num2 * nums2[i]\n\n        # Check if the product is greater than the current largest product\n        if product1 > largest_products[-1]:\n            # If it is, add it to the list\n            largest_products.append(product1)\n        if product2 > largest_products[-1]:\n            largest_products.append(product2)\n\n    # Return the list of largest products found\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    # Find the maximum product of two lists\n    max_product = max(nums1[i] * nums2[j] for i in range(N) for j in range(N))\n\n    # Sort the two lists by the largest product\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the product of the largest N elements from the two lists\n    product = nums1[0] * nums2[0]\n\n    # Calculate the largest N-1 products and their indices\n    products = [nums1[i] * nums2[j] for i in range(1, N) for j in range(1, N)]\n    indices = [i for i in range(N)]\n\n    # Find the indices of the largest N-1 products\n    indices.extend([i for i in range(1, N) if products[i] == max(products)])\n    indices.sort(reverse=True)\n\n    # Find the maximum N-1 products using the indices\n    largest_products = [products[i] for i in indices[:N-1]]\n\n    # Multiply the largest N-1 products and the maximum product to get the largest product\n    result = max(largest_products) * max_product\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_product = max(nums1[i]*nums2[i], nums1[i]*nums2[0]*nums2[1]*nums2[2]*nums2[3]*nums2[4]*nums2[5]*nums2[6]*nums2[7]*nums2[8]*nums2[9]*nums2[10]*nums2[11]*nums2[12]*nums2[13]*nums2[14]*nums2[15]*nums2[16]*nums2[17]*nums2[18]*nums2[19]*nums2[20]*nums2[21]*nums2[22]*nums2[23]*nums2[24]*nums2[25]*nums2[26]*nums2[27]*nums2[28]*nums2[29]*nums2[30]*nums2[31]*nums2[32]*nums2[33]*nums2[34]*nums2[35]*nums2[36]*nums2[37]*nums2[38]*nums2[39]*nums2[40]*nums2[41]*nums2[42]*nums2[43]*nums2[44]*nums2[45]*nums2[46]*nums2[47]*nums2[48]*nums2[49]*nums2[50], nums2[i]*nums1[0]*nums1[1]*nums1[2]*nums1[3]*nums1[4]*nums1[5]*nums1[6]*nums1[7]*nums1[8]*nums1[9]*nums1[10]*nums1[11]*nums1[12]*nums1[13]*nums1[14]*nums1[15]*nums1[16]*nums1[17]*nums1[18]*nums1[19]*nums1[20]*nums1[21]*nums1[22]*nums1[23]*nums1[24]*nums1[25]*nums1[26]*nums1[27]*nums1[28]*nums1[29]*nums1[30]*nums1[31]*nums1[32]*nums1[33]*nums1[34]*nums1[35]*nums1[36]*nums1[37]*nums1[38]*nums1[39]*nums1[40]*nums1[41]*nums1[42]*nums1[43]*nums1[44]*nums1[45]*nums1[46]*nums1[47]*nums1[48]*nums1[49]*nums1[50])\n        largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    \n    # loop through the numbers to find the largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-1-i]\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n    \n    # return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = 0\n    max_product_nums1 = []\n    max_product_nums2 = []\n\n    # Loop through the list of numbers\n    for i in range(len(nums1)):\n        # Calculate the product of the first list with the second list\n        product_nums1 = nums1[i] * nums2[i]\n\n        # Calculate the product of the second list with the first list\n        product_nums2 = nums2[i] * nums1[i]\n\n        # Check if the product is greater than the current maximum product\n        if product_nums1 > max_product:\n            max_product = product_nums1\n            max_product_nums1 = [nums1[i]]\n\n        if product_nums2 > max_product:\n            max_product = product_nums2\n            max_product_nums1 = [nums2[i]]\n\n    # Check if the number of products is equal to N\n    if len(max_product_nums1) == N:\n        return max_product_nums1\n    else:\n        return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    max_products = []\n    for i in range(N):\n        product1 = max(nums1)\n        product2 = max(nums2)\n        max_product = max(product1 * product2, product2 * product1)\n        max_products.append(max_product)\n        \n        nums1 = [num for num in nums1 if num < max_product]\n        nums2 = [num for num in nums2 if num < max_product]\n    \n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables\n    total_products = 0\n    product_count = 0\n\n    # Loop through the sorted lists and keep track of the largest products\n    for i in range(min(len(nums1), len(nums2))):\n        if i >= N:\n            break\n        product = nums1[i] * nums2[i]\n        if product > total_products:\n            total_products = product\n            product_count = 1\n        elif product == total_products:\n            product_count += 1\n\n    return total_products, product_count"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    \n    if N < 1 or N > len(nums1):\n        raise ValueError('Number of products to find must be between 1 and the length of the lists')\n        \n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i] * nums2[i], nums1[i] * nums2[N-i-1]))\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    return products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum value.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty tuple\n    tuple_str = ()\n\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the tuple\n        tuple_str += (char,)\n\n    # Return the tuple of characters\n    return tuple_str"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    :param str1: the string to convert\n    :return: a tuple of characters\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through the bits of the integer until we find the leftmost unset bit\n    for i in range(31, -1, -1):\n        if n & (1 << i) == 0:\n            result |= (1 << i)\n            n &= ~(1 << i)\n            break\n\n    # if the loop completes without finding a leftmost unset bit, set the rightmost bit\n    if result == 0:\n        result = 1 << 31\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert binary number to a list of bits\n    binary_list = [int(bit) for bit in bin(n)[2:]]\n\n    # reverse the list so that we can iterate through the bits from left to right\n    binary_list.reverse()\n\n    # iterate through the list of bits and set the left most unset bit to 1\n    for i in range(len(binary_list)):\n        if binary_list[i] == 0:\n            binary_list[i] = 1\n            break\n\n    # convert the list of bits back to a binary number and return it\n    return int(''.join(str(bit) for bit in binary_list), 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer n as input and returns the integer with \n    the leftmost unset bit set to 1. If all bits are set, then return n itself.\n    '''\n    while (n & 1) == 0:\n        n = n >> 1\n    return n | (1 << n.bit_length() - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the left most unset bit to 1\n    bit = 1\n\n    # Iterate over all possible bits in n\n    while bit <= n:\n        # Check if the bit is set in n\n        if n & bit == bit:\n            # If the bit is set in n, unset it and return the result\n            n &= ~bit\n            return n\n        # Increment the bit by 1\n        bit <<= 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << 31) == 0:  # loop until the least significant bit is set\n        n = n | (1 << 31)  # set the least significant bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # check if the least significant bit is zero\n        n >>= 1  # shift the number one bit to the right\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number.\n    \"\"\"\n    # Initialize count of unset bits\n    unset_count = 0\n    \n    # Iterate through each bit position\n    for bit in range(31, -1, -1):\n        # If the current bit is set, decrement the count\n        if n & (1 << bit):\n            unset_count -= 1\n        else:\n            unset_count += 1\n        \n        # If the count becomes negative, set the bit to 1\n        if unset_count < 0:\n            n |= 1 << bit\n            \n            # Reset the count to the value it had before\n            unset_count = 0\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the binary representation of the input number\n    binary_representation = bin(n)[2:]\n    # Initialize an empty list to store the set bits\n    set_bits = []\n    # Loop through each bit in the binary representation\n    for i in range(len(binary_representation)):\n        # If the bit is 0, append it to the set_bits list\n        if binary_representation[i] == '0':\n            set_bits.append(int(binary_representation[i]))\n        # If the bit is 1, break out of the loop\n        else:\n            break\n    # Set the leftmost unset bit by shifting the binary representation left by the number of set bits\n    left_most_unset_bit = 2 ** len(set_bits) - 1\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the rightmost bit as 1\n    rightmost_bit = 1\n    \n    # Loop until the leftmost unset bit is found\n    while rightmost_bit & n == 0:\n        rightmost_bit <<= 1\n    \n    # Set the leftmost unset bit\n    n |= rightmost_bit\n    \n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using the formula V=\u03c0r^2h\n    V = math.pi * (r**2) * h\n    \n    # return the volume\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula V = 1/3 * \u03c0 * r^2 * h.\n    \n    Parameters:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n        \n    Returns:\n        float: The volume of the cone.\n    '''\n    \n    V = 1/3 * math.pi * r**2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone using the formula: V = (1/3) * pi * r^2 * h\n    \"\"\"\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    Parameters:\n    r (float): the radius of the cone.\n    h (float): the height of the cone.\n\n    Returns:\n    float: the volume of the cone.\n    \"\"\"\n    # calculate the volume using the formula\n    vol = (1/3) * math.pi * r**2 * h\n\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes two arguments, r, which is the radius of the cone and h, which is the height of the cone.\n    It returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, and calculates the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone using the formula V = (1/3) * pi * r^2 * h\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Convert n to binary and find the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    while highest_power <= n:\n        highest_power <<= 1\n    return highest_power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    # Initialize a variable to store the highest power of 2\n    max_power_of_2 = 1\n    \n    # Check if n is already a power of 2\n    while n >= max_power_of_2:\n        max_power_of_2 <<= 1\n        \n    # Return the highest power of 2\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop from the highest power of 2 to 1\n    for i in range(2**(32), 1, -1):\n        if i <= n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a power of 2\n        if (i & (i - 1)) == 0:\n            # return the power of 2\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize two variables, max_power and power, to 1\n    max_power = 1\n    power = 1\n\n    # Loop until power is greater than n\n    while power <= n:\n        # Check if power is the maximum power of 2\n        if power == 2**max_power:\n            # If it is, update max_power\n            max_power += 1\n        # Increment power by 1\n        power += 1\n\n    # Return max_power\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i *= 2\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return None\n    \n    # loop until we find the highest power of 2 that is less than or equal to n\n    power = 1\n    while 2**power <= n: \n        power += 1\n        \n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n and returns the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number using the Taylor series expansion.\n    \"\"\"\n    # Taylor series coefficients\n    a = 1.0\n    b = 0.5\n    c = 0.25\n    \n    # Initialize lucas number\n    lucas = 0.0\n    \n    # Calculate lucas number using Taylor series expansion\n    for i in range(1, n+1):\n        lucas += a / (2 * i - 1)\n        a, b, c = b, c, a - b + c\n    \n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(1, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number using recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = find_lucas(n-1)\n        curr_lucas = find_lucas(n-2)\n        return prev_lucas + curr_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(elem, string) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): The list of strings to format.\n    string (str): The format string to apply to each element of list_.\n\n    Returns:\n    list: A new list with the elements of list_ formatted according to the given format string.\n    '''\n\n    # Loop through the list and apply the format string to each element\n    formatted_list = [string.format(elem) for elem in list_]\n\n    # Return the formatted list\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n    for i in range(len(l1), len(l1)+len(l2)):\n        data[l1[i-len(l1)]][l2[i-len(l1)]] = l3[i-len(l1)-len(l2)]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(args)):\n        temp_dict = {}\n        for j in range(len(args[i])):\n            temp_dict[args[i][j]] = args[i+1][j]\n        nested_dict[args[0][i]] = temp_dict\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the data\n    data = {}\n    # iterate through each list and add the values to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n    # iterate through the third list and add the values to the dictionary\n    for j in range(len(l3)):\n        data[l3[j]] = l3[j+1]\n    # return the dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return \"Both lists should have the same length\"\n    else:\n        result = {}\n        for i in range(len(l1)):\n            result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n        return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the converted data\n    data = {}\n\n    # iterate over each list and add each item to the dictionary as a key-value pair\n    for item in l1:\n        data[item] = {}\n    for item in l2:\n        data[item]['color'] ='red'\n    for item in l3:\n        data[item]['weight'] = 100\n\n    # return the dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1 (list): A list of strings.\n    l2 (list): A list of integers.\n    l3 (list): A list of dictionaries.\n\n    Returns:\n    dict: A nested dictionary of the input lists.\n\n    Example:\n    >>> l1 = ['apple', 'banana', 'cherry']\n    >>> l2 = [1, 2, 3]\n    >>> l3 = [{'name': 'apple', 'price': 1.5}, {'name': 'banana', 'price': 2.0}, {'name': 'cherry', 'price': 0.5}]\n    >>> convert_list_dictionary(l1, l2, l3)\n    {'apple': {'price': 1.5, 'name': 'apple'}, 'banana': {'price': 2.0, 'name': 'banana'}, 'cherry': {'price': 0.5, 'name': 'cherry'}}\n    '''\n\n    # initialize the nested dictionary\n    result = {}\n\n    # iterate over the lists and add each element to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'price': l2[i], 'name': l3[i]['name']}\n\n    # return the result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    :param l1: A list of integers.\n    :param l2: A list of strings.\n    :param l3: A list of dictionaries.\n    :return: A nested dictionary with the converted lists.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        for j in range(len(l3[i])):\n            result[l1[i]][l3[i][j][\"key\"]] = l3[i][j][\"value\"]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Check if the input is a list\n    if type(args[0]) == list:\n        # Convert the list to dictionary\n        nested_dict = {}\n        for i in range(len(args)):\n            for j in range(len(args[i])):\n                nested_dict[args[i][j]] = args[j][i]\n        # Return the nested dictionary\n        return nested_dict\n    else:\n        # Return an error message if the input is not a list\n        print(\"Input must be a list\")\n        return None"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # Create a list to store the result\n    result = []\n\n    # Loop through the input lists\n    for i in range(len(l1)):\n        # Loop through the first list\n        for j in range(len(l2[i])):\n            # Create a new dictionary with the current values\n            d = {l3[k]: l2[i][j] for k in range(len(l3))}\n            # Add the dictionary to the result list\n            result.append(d)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n\n    # iterate over each list in the input lists\n    for lst in [l1, l2, l3]:\n        # loop over each element in the list\n        for item in lst:\n            # if the item is a dictionary, add it to the nested dictionary\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    if key not in nested_dict:\n                        nested_dict[key] = [value]\n                    else:\n                        nested_dict[key].append(value)\n            else:\n                # if the item is a list or a primitive type, add it to the nested dictionary\n                if isinstance(item, list):\n                    for item2 in item:\n                        if isinstance(item2, dict):\n                            for key, value in item2.items():\n                                if key not in nested_dict:\n                                    nested_dict[key] = [value]\n                                else:\n                                    nested_dict[key].append(value)\n                        else:\n                            if key not in nested_dict:\n                                nested_dict[key] = [item2]\n                            else:\n                                nested_dict[key].append(item2)\n                else:\n                    if key not in nested_dict:\n                        nested_dict[key] = [item]\n                    else:\n                        nested_dict[key].append(item)\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max_sum = n\n        max_sum = max(max_sum, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, i, memo):\n        if n == 0:\n            return 0, 0, 0\n        if i in memo:\n            return memo[i]\n        if n % 5 == 0:\n            memo[i] = helper(n // 5, 0, memo)\n            memo[i] = (max(memo[i][0], memo[i][1]), memo[i][1], memo[i][2])\n        elif n % 3 == 0:\n            memo[i] = helper(n // 3, 1, memo)\n            memo[i] = (max(memo[i][0], memo[i][1]), memo[i][1], memo[i][2])\n        elif n % 2 == 0:\n            memo[i] = helper(n // 2, 2, memo)\n            memo[i] = (max(memo[i][0], memo[i][1]), memo[i][1], memo[i][2])\n        else:\n            memo[i] = helper(n - 1, 3, memo)\n            memo[i] = (max(memo[i][0], memo[i][1]), memo[i][2], memo[i][3])\n        return memo[i]\n\n    memo = {}\n    result = helper(n, 0, memo)\n    return result[0]"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    \n    if max_sum > n:\n        return max_sum\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5),n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_f(n):\n        if n == 1:\n            return n\n        else:\n            return n * (get_f(n//2) + get_f(n//3) + get_f(n//4) + get_f(n//5))\n\n    return get_f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Returns the list with maximum length in the input_list.\n    If there are multiple lists with the same maximum length, it returns the first one.\n    \"\"\"\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    # Initialize the length variable to 0\n    max_length = 0\n    # Iterate over the list and update the max_length variable if the length is greater than the current max\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as an argument and returns the list with the maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list[1:]:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    result_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            result_list = [i]\n        elif len(i) == max_length:\n            result_list.append(i)\n    return result_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set(test_tup)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # Check if set is empty, which means there are no duplicates\n    return bool(test_set)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set and check if its length is equal to the length of the original tuple\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeated character in the dictionary\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n            \n    # if no non-repeated characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_non_repeating_char = None\n    for char in str1:\n        if char_count[char] == 1:\n            if first_non_repeating_char is None:\n                first_non_repeating_char = char\n            else:\n                return None\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n            \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {} # dictionary to keep track of character frequency\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1 # increment count if character is already in the dictionary\n        else:\n            char_count[char] = 1 # add character to dictionary if not already in it\n    \n    for char in str1:\n        if char_count[char] == 1: # if character is only present once in the string, return it\n            return char\n    \n    return None # if no non-repeating character is found, return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character and return its index\n    for i in range(len(str1)):\n        if freq[str1[i]] == 1:\n            return i\n\n    # If no non-repeating character is found, return -1\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    # Example usage\n    string = \"abcd\"\n    print(check_char(string))  # Output: True\n\n    string = \"abcde\"\n    print(check_char(string))  # Output: False\n\n    string = \"abc\"\n    print(check_char(string))  # Output: True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the regular expression\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n\n    The median of three numbers is the number that divides the sum of the three numbers by 2. \n    If there are ties, the median is the average of the two middle numbers.\n    '''\n    # create a list of numbers\n    num_list = [a, b, c]\n    \n    # sort the list in ascending order\n    num_list.sort()\n    \n    # get the length of the list\n    length = len(num_list)\n    \n    # find the middle index\n    middle = length // 2\n    \n    # if the length is odd, the median is the middle number\n    if length % 2!= 0:\n        return num_list[middle]\n    \n    # if the length is even, the median is the average of the middle two numbers\n    else:\n        # calculate the average of the middle two numbers\n        avg = (num_list[middle - 1] + num_list[middle]) / 2\n        return avg"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the middle number\n    middle_number = sorted_numbers[1]\n    \n    # Check if the middle number is the median or not\n    if (a + b + c) % 2 == 0:\n        # If the middle number is even, find the average of the two middle numbers\n        median = (middle_number + sorted_numbers[2]) / 2\n    else:\n        # If the middle number is odd, return it as the median\n        median = middle_number\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Check if the number of elements in the list is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If it is even, find the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # If it is odd, return the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # create a list of numbers\n    num_list = [a, b, c]\n    # sort the list in ascending order\n    num_list.sort()\n    # calculate the middle index\n    mid_index = len(num_list) // 2\n    # calculate the median\n    if len(num_list) % 2 == 0:\n        median = (num_list[mid_index-1] + num_list[mid_index])/2\n    else:\n        median = num_list[mid_index]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # First, sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Determine the length of the list\n    length = len(sorted_list)\n\n    # If the list has an odd number of elements, the median is the middle element\n    if length % 2 == 1:\n        median = sorted_list[length//2]\n\n    # If the list has an even number of elements, the median is the average of the two middle elements\n    else:\n        median = (sorted_list[length//2-1] + sorted_list[length//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as inputs and returns their median value.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculating the middle index of the list\n    mid = len(numbers) // 2\n\n    # If the length of the list is odd, then the median is the middle number\n    if len(numbers) % 2 == 1:\n        median = numbers[mid]\n    # If the length of the list is even, then the median is the average of the two middle numbers\n    else:\n        median = (numbers[mid] + numbers[mid - 1]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Check if the list has an odd or even number of elements\n    if len(sorted_list) % 2 == 0:\n        # If the list has an even number of elements, return the average of the two middle numbers\n        middle_index = len(sorted_list) // 2\n        return (sorted_list[middle_index-1] + sorted_list[middle_index])/2\n    else:\n        # If the list has an odd number of elements, return the middle number\n        middle_index = len(sorted_list) // 2\n        return sorted_list[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the length of the list\n    n = len(sorted_numbers)\n\n    # calculate the middle index of the list\n    mid = n // 2\n\n    # check if the length is odd or even\n    if n % 2 == 0:\n        # return the average of the middle two numbers\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        # return the middle number\n        return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        if b > c:\n            median = (a + b + c) / 3\n        else:\n            median = (a + c + b) / 3\n    elif b > a and b > c:\n        if a > c:\n            median = (b + a + c) / 3\n        else:\n            median = (b + c + a) / 3\n    elif c > a and c > b:\n        if a > b:\n            median = (c + a + b) / 3\n        else:\n            median = (c + b + a) / 3\n    else:\n        median = \"Error: Could not find a valid median\"\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        if isinstance(num, int):\n            result += sum(int(d) for d in str(num))\n        elif isinstance(num, float):\n            result += sum(int(d) for d in str(int(num)))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # convert the number to string and get the digits\n        digits = [int(digit) for digit in str(num)]\n        # add the digits together and add to the total sum\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits for each number in the list\n    sum_of_digits_list = []\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of characters\n        num_str = str(num)\n        # initialize an empty string to store the sum of digits\n        sum_of_digits_str = \"\"\n        # iterate over each character in the string\n        for char in num_str:\n            # convert each character to an integer and add it to the sum of digits string\n            sum_of_digits_str += str(int(char))\n        # convert the sum of digits string to an integer and add it to the sum_of_digits_list\n        sum_of_digits_list.append(int(sum_of_digits_str))\n    # return the sum_of_digits_list\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        for digit in str(num):\n            digits.append(int(digit))\n    return sum(digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        num_str = str(num)\n        sum_num = 0\n        for digit in num_str:\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the result and the number of set bits\n    result = 0\n    count = 0\n\n    # Iterate through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Perform bitwise xor operation on the current elements of the tuples\n        xor_result = test_tup1[i] ^ test_tup2[i]\n\n        # Check if the xor result has any set bits and increment the count\n        if xor_result!= 0:\n            count += 1\n\n        # Update the result variable with the xor result\n        result |= xor_result\n\n    # Return the result and the count of set bits\n    return result, count"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple to be the length of the shorter tuple\n    result_tup = (max(len(test_tup1), len(test_tup2)) * [None])\n    \n    # Iterate through the tuples, performing bitwise xor operation\n    for i in range(len(result_tup)):\n        if i < len(test_tup1):\n            result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        else:\n            result_tup[i] = test_tup2[i]\n            \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # iterate over both tuples and perform bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1: A tuple of integers.\n        test_tup2: A tuple of integers.\n\n    Returns:\n        A tuple of integers representing the bitwise xor of the two tuples.\n    \"\"\"\n    return tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers.\n        test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n        int: The bitwise xor of the given tuples.\n\n    \"\"\"\n    # convert both tuples to lists to perform bitwise xor operation\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # perform bitwise xor operation\n    xor_result = [a ^ b for a, b in zip(tup1_list, tup2_list)]\n\n    # convert the result back to a tuple\n    xor_tup = tuple(xor_result)\n\n    return xor_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[tup] += 1\n        else:\n            # If it's not, add it to the dictionary with a frequency of 1\n            freq_dict[tup] = 1\n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    \n    for item in test_list:\n        if item not in unique_freq:\n            unique_freq[item] = 1\n        else:\n            unique_freq[item] += 1\n    \n    return len(unique_freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        # extract the unique tuples from the item\n        tuples = tuple(set(item))\n        # update the frequency dictionary\n        for t in tuples:\n            freq[t] = freq.get(t, 0) + 1\n    # return the number of unique tuples\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for elem in test_list:\n        unique_tuples.add(tuple(elem))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = test_tup1[i] + test_tup2[i]\n        result.append(temp)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length!\")\n    # Add each tuple element in the index order and return the result\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty tuple\n    new_tup = ()\n    # iterate over each tuple element in both input tuples\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    # return the new tuple with addition of tuple elements\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result = ()\n    \n    # Loop through both the input tuples\n    for i in range(len(test_tup1)):\n        # Get the corresponding element from each tuple and add them\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        result += (element1 + element2,)\n    \n    # Return the result as a new tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a variable to store the sum of elements\n    sum_of_elements = 0\n    # iterate over the tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding elements of the two tuples\n        sum_of_elements += test_tup1[i] + test_tup2[i]\n    # return the sum of elements\n    return sum_of_elements"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        if len(tup1)!= len(tup2):\n            print(\"The tuple lengths do not match for index\", i)\n        else:\n            new_tup = tuple(tup1[j] + tup2[j] for j in range(len(tup1)))\n            result.append(new_tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        row_result = []\n        for j in range(len(row1)):\n            row_result.append(row1[j] + row2[j])\n        result.append(row_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of these two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        print(f\"Element {tuple1} exists in the tuple.\")\n    else:\n        print(f\"Element {tuple1} does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    This function takes two tuples as input and returns True if a particular element exists in the first tuple and False otherwise.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # loop through each element in the tuple1\n    for element in tuple1:\n        # check if element exists within tuplex\n        if element in tuplex:\n            # print True if element exists\n            print(True)\n            return\n    \n    # if no element exists within tuple1\n    print(False)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # if the number is even, it's odd\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even, parity is even\n        return 'Even'\n    else: # if x is odd, parity is odd\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0:\n        parity += x % 2\n        x //= 2\n    if parity % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number as input and returns True if it is odd and False if it is even.\n    \"\"\"\n    return True if x % 2!= 0 else False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(f'{x} is even.')\n    else:\n        print(f'{x} is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # checking if the remainder of the division by 2 is 0 \n        return False # if the remainder is 0, the number is even \n    else:\n        return True # if the remainder is not 0, the number is odd"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    return (x & 1) == 1  # returns True if the parity of x is odd, else returns False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num = str(n)\n\n    # create a list of digits\n    digits = []\n    for digit in num:\n        digits.append(int(digit))\n\n    # create a list of permutations of the digits\n    permutations = []\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            permutations.append([digits[i], digits[j]])\n\n    # find the next bigger number\n    next_bigger = permutations[0][0]\n    for perm in permutations:\n        for digit in perm:\n            if digit > next_bigger:\n                next_bigger = digit\n\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    largest = max(digits)\n    for digit in digits:\n        if int(digit) < largest:\n            digits.remove(digit)\n            digits.append(str(int(digit) + 1))\n    return int(\"\".join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    number = str(n)\n    # split the string into a list of digits\n    digits = [int(digit) for digit in number]\n    # sort the list of digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    # create a new number by reversing the sorted list of digits and converting it back to a string\n    new_number = ''.join(str(digit) for digit in sorted_digits)\n    # convert the new number to an integer and return it\n    return int(new_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    smallest_digit = digits.count(max_digit)\n\n    if smallest_digit == len(digits):\n        # no bigger digit found\n        return \"The number is already the maximum value\"\n    else:\n        new_digits = digits.copy()\n        new_digits[digits.index(max_digit)] = smallest_digit\n        new_number = int(\"\".join(map(str, new_digits)))\n        return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Define a function to swap the digits\n    def swap_digits(digit1, digit2):\n        '''\n        Swap the positions of two digits in a number.\n        '''\n        \n        # Convert the number to a string\n        num_str = str(n)\n        \n        # Swap the positions of the digits\n        num_str = num_str[:digit1] + num_str[digit2] + num_str[digit1+1:]\n        \n        # Convert the string back to an integer\n        return int(num_str)\n    \n    # Rearrange the digits of n by swapping adjacent pairs of digits\n    while n >= 10:\n        # Find the last digit in n\n        last_digit = n % 10\n        \n        # Find the two previous digits that are not last_digit\n        for i in range(1, len(str(n))-1):\n            if n % 10!= i:\n                # Swap the two digits\n                n = swap_digits(i, last_digit)\n                \n        # Remove the last digit from n\n        n = n // 10\n    \n    # Convert n to a string and return it as an integer\n    return int(str(n))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        \n    def rearrange(nums):\n        length = len(nums)\n        for i in range(length//2):\n            j = length - 1 - i\n            if nums[i] > nums[j]:\n                swap(nums, i, j)\n        return nums\n    \n    def is_valid(nums):\n        length = len(nums)\n        for i in range(length//2):\n            if nums[i] == nums[length - i - 1]:\n                return False\n        return True\n    \n    def next_bigger(nums):\n        i = len(nums) - 2\n        while i >= 0 and nums[i] == nums[i+1]:\n            i -= 1\n        if i < 0:\n            return None\n        if nums[i] < nums[i+1]:\n            return None\n        nums[i], nums[i+1] = nums[i+1], nums[i]\n        if is_valid(nums):\n            return nums\n        nums[i+1], nums[i] = nums[i], nums[i+1]\n        return next_bigger(nums)\n    \n    nums = [int(d) for d in str(n)]\n    next_bigger_nums = next_bigger(nums)\n    if next_bigger_nums is None:\n        return None\n    return ''.join(str(d) for d in next_bigger_nums)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the next bigger number with a negative sign\n    bigger = -1\n    \n    # loop through each digit of the input number\n    for digit in str(n):\n        # add the current digit to the next bigger number\n        bigger += int(digit)\n    \n    # add 1 to the next bigger number to get the next biggest number\n    bigger += 1\n    \n    # return the next bigger number\n    return bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    s = str(n)\n    # Reverse the string\n    s = s[::-1]\n    # Convert the reversed string back to an integer\n    result = int(s)\n    # Check if the result is greater than or equal to 10\n    if result >= 10:\n        # Add 1 to the result and subtract 10\n        result = result + 1 - 10\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the index of the first digit that is smaller than the current number\n    for i in range(len(digits)):\n        if digits[i] < n:\n            index = i\n            break\n\n    # Reverse the digits from the index to the end of the list\n    digits[index:] = digits[index:][::-1]\n\n    # Reverse the digits from the beginning to the index (inclusive)\n    digits[:index] = digits[:index][::-1]\n\n    # Convert the list of digits back to a number\n    next_bigger = int(''.join(str(digit) for digit in digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Find the index of the first digit that's greater than the second\n    i = 0\n    while i < len(num_str) and num_str[i] <= num_str[1]:\n        i += 1\n        \n    # If there's no such digit, return None\n    if i == len(num_str):\n        return None\n    \n    # Find the index of the last digit that's smaller than the first\n    j = len(num_str) - 1\n    while j >= 0 and num_str[j] >= num_str[0]:\n        j -= 1\n        \n    # Swap the digits at indices i and j\n    num_str = num_str[:i] + num_str[i+1:j+1] + num_str[j+1:]\n    \n    # Convert the string back to an integer\n    return int(num_str)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap of size k\n    min_heap = []\n\n    # Create a dictionary to store the minimum element\n    min_dict = {}\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Create a temporary dictionary to store the elements of the second array\n        temp_dict = {}\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the current elements and check if it is already in the temporary dictionary\n            if (num1, num2) in temp_dict:\n                # If it is, update the count of the current element in the dictionary\n                temp_dict[(num1, num2)] += 1\n            else:\n                # If not, add the current element as a key in the dictionary with a count of 1\n                temp_dict[(num1, num2)] = 1\n\n            # If the size of the temporary dictionary is greater than or equal to k, remove the smallest element from the heap and its key from the dictionary\n            if len(temp_dict) >= k:\n                # Remove the smallest element from the heap\n                heapq.heappop(min_heap)\n                # Remove the smallest element's key from the dictionary\n                del min_dict[(min_heap[0][0], min_heap[0][1])]\n\n            # Check if the sum of the current elements is already in the min_dict\n            if (num1, num2) in min_dict:\n                # If it is, update its count\n                min_dict[(num1, num2)] += 1\n            else:\n                # If not, add the current element as a key in the dictionary with a count of 1\n                min_dict[(num1, num2)] = 1\n\n            # If the size of the min_dict is greater than or equal to k, remove the smallest element from the heap and its key from the dictionary\n            if len(min_dict) >= k:\n                # Remove the smallest element from the heap\n                heapq.heappop(min_heap)\n                # Remove the smallest element's key from the dictionary\n                del min_dict[(min_heap[0][0], min_heap[0][1])]\n\n            # Add the current elements to the heap\n            heapq.heappush(min_heap, (num1, num2))\n\n    # Return the result\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap for the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # create a min heap for the second array\n    min_heap2 = []\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n        if len(min_heap2) > k:\n            heapq.heappop(min_heap2)\n    \n    # initialize the result list\n    result = []\n    \n    # compare the smallest elements from both heaps and add the pair to the result list if they are equal\n    while min_heap and min_heap2 and k > 0:\n        if min_heap[0] == min_heap2[0]:\n            pair = (min_heap[0], min_heap2[0])\n            result.append(pair)\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap2)\n            k -= 1\n        elif min_heap[0] < min_heap2[0]:\n            heapq.heappop(min_heap)\n        else:\n            heapq.heappop(min_heap2)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    result = []\n\n    # Iterate through the two arrays and add the smallest element to the min heap\n    for num1 in nums1:\n        heapq.heappush(min_heap, num1)\n        # Keep only the top k elements in the min heap\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Iterate through the remaining elements of the first array and pop the smallest element and add the corresponding element from the second array to the result list\n    for num1 in nums1:\n        if num1 == heapq.heappop(min_heap):\n            result.append(nums2.pop(0))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Return the k smallest elements from the heap\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap of size k\n    min_heap = []\n    # initialize a counter for the number of pairs found\n    count = 0\n    # loop through the first array\n    for num1 in nums1:\n        # loop through the second array\n        for num2 in nums2:\n            # add a new pair to the min heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # if the size of the heap is k, check if the pair is smaller than the smallest element in the heap\n            elif num1 + num2 < min_heap[0][0]:\n                # if it is, replace the smallest element with the new pair\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # if the size of the heap is k and the pair is smaller than the smallest element in the heap, increment the count\n            else:\n                count += 1\n    # return the count of pairs found\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            sum_ = nums1[i] + nums2[j]\n            if not min_heap or sum_ < min_heap[0]:\n                heapq.heappush(min_heap, sum_)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            if not result or sum_ + result[-1][1] < min_heap[0]:\n                heapq.heappush(min_heap, sum_)\n                result.append([nums1[i], nums2[j]])\n            if len(min_heap) == k:\n                break\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sorting the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # initializing the result list\n    result = []\n\n    # creating a min heap of size k\n    min_heap = []\n\n    # iterating over the arrays\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        # comparing the current element of nums1 with the first element of nums2\n        if nums1[i] <= nums2[j]:\n            # adding the smallest element to the result list and updating the min heap\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n\n            # if the result list has reached the desired length, adding the minimum element from the min heap to the result list\n            if len(result) == k:\n                result.append((heapq.heappop(min_heap)[0], heapq.heappop(min_heap)[1]))\n\n            # incrementing the index of nums1\n            i += 1\n        else:\n            # incrementing the index of nums2\n            j += 1\n\n    # adding the remaining elements of nums1 and nums2 to the result list\n    while i < len(nums1):\n        heapq.heappush(min_heap, (nums1[i], float('inf')))\n        result.append((heapq.heappop(min_heap)[0], heapq.heappop(min_heap)[1]))\n        i += 1\n\n    while j < len(nums2):\n        heapq.heappush(min_heap, (float('inf'), nums2[j]))\n        result.append((heapq.heappop(min_heap)[0], heapq.heappop(min_heap)[1]))\n        j += 1\n\n    # sorting the result list by the first element of each pair\n    result.sort()\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    \n    # Initialize two pointers to the start of the arrays\n    i, j = 0, 0\n    \n    # Iterate until k pairs are found\n    while len(min_heap) < k:\n        # If the next element in the first array is smaller than the next element in the second array,\n        # add a pair to the heap and increment both pointers\n        if i < len(nums1) and j < len(nums2) and nums1[i] + nums2[j] < nums1[i] or nums2[j] < nums1[i] + nums2[j]:\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            i += 1\n            j += 1\n        # If the next element in the first array is larger than or equal to the next element in the second array,\n        # increment the first pointer\n        else:\n            i += 1\n    \n    # Extract the k smallest pairs from the heap and return them\n    result = []\n    while min_heap:\n        _, pair = heapq.heappop(min_heap)\n        result.append(pair)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap of pairs\n    heap = [(nums1[0], nums2[0], (nums1[0], nums2[0]))]\n    result = []\n\n    # Iterate through the first array\n    for i in range(1, len(nums1)):\n        # Find the smallest element in the heap which is greater than the current element\n        smallest_pair = heapq.heappop(heap)\n        # Add the smallest element to the result\n        result.append(smallest_pair[2])\n        # Add the current element to the heap\n        heapq.heappush(heap, (nums1[i], nums2[0], (nums1[i], nums2[0])))\n\n    # Iterate through the second array\n    for j in range(1, len(nums2)):\n        # Find the smallest element in the heap which is greater than the current element\n        smallest_pair = heapq.heappop(heap)\n        # Add the smallest element to the result\n        result.append(smallest_pair[2])\n        # Add the current element to the heap\n        heapq.heappush(heap, (nums1[0], nums2[j], (nums1[0], nums2[j])))\n\n    # Sort the result list\n    result.sort(key=lambda x: x[0])\n\n    # Return the k smallest elements\n    return result[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the pairs\n    min_heap = []\n    \n    # create a dictionary to store the difference between the target sum and the sum of the pair\n    diff_dict = {}\n    \n    # initialize the difference to a large value\n    target_diff = float('inf')\n    \n    # loop through the first array\n    for num1 in nums1:\n        # loop through the second array\n        for num2 in nums2:\n            # calculate the difference between the target sum and the sum of the pair\n            diff = abs(target_sum - num1 + num2)\n            \n            # if the difference is smaller than the current minimum difference, update the minimum difference\n            if diff < target_diff:\n                target_diff = diff\n                # add the current pair to the min heap\n                heapq.heappush(min_heap, (-diff, num1, num2))\n    \n    # initialize an empty list to store the pairs\n    pairs = []\n    \n    # loop through the min heap k times\n    for _ in range(k):\n        # pop the pair with the smallest difference from the heap\n        pair = heapq.heappop(min_heap)\n        # add the pair to the list of pairs\n        pairs.append((pair[1], pair[2]))\n    \n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            products.append(list1[i][0] * list1[j][1])\n    return min(products)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # find the maximum product of any pair of tuples in the list\n    max_product = max(list1[i][j] * list1[i+1][j+1] for i in range(len(list1)-1) for j in range(i+1, len(list1)))\n    \n    # find the minimum product of any pair of tuples in the list\n    min_product = min(list1[i][j] * list1[i+1][j+1] for i in range(len(list1)-1) for j in range(i+1, len(list1)))\n    \n    # return the minimum of the two products\n    return min(max_product, min_product)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list as input and returns the minimum product of pairs of tuples within the list.\n\n    Args:\n    list1 (list): A list of tuples.\n\n    Returns:\n    int: The minimum product of pairs of tuples within the list.\n    \"\"\"\n    # Initialize variables to store the minimum product of pairs of tuples and the count of pairs\n    min_product = float('inf')\n    count = 0\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each subsequent tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and store the result in the variable product\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the count of pairs and the minimum product if the current product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n                count = 2\n            # If the current product is the same as the minimum product, increment the count of pairs\n            else:\n                count += 1\n    \n    # Return the minimum product of pairs of tuples\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            \n            # Check if the current tuple is equal to the next tuple in the list\n            if i < j and list1[i] == list1[j]:\n                # Calculate the product of the current tuple and the next tuple\n                product = list1[i][0] * list1[j][1]\n                # Check if the product is smaller than the current minimum product\n                if product < min_product:\n                    min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Find the minimum product of any two tuples in the list\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables to keep track of the minimum product and the maximum product\n    min_product = 1\n    max_product = -1\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n\n            # update the minimum and maximum products if necessary\n            if product < min_product:\n                min_product = product\n            elif product > max_product:\n                max_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be a very large number\n    min_product = 10**10\n    \n    # Loop through all tuples in the list\n    for tuple1 in list1:\n        # Loop through all tuples in the list except for the first one\n        for tuple2 in list1[1:]:\n            # Calculate the product of the two tuples\n            product = tuple1[0] * tuple2[0]\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize min value to the first element of the list\n    min_val = listval[0]\n    # iterate over the list and update min_val if an element is smaller than it\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as an input and returns the minimum value in the list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    if len(listval) == 0:\n        return None\n\n    min_val = listval[0]\n\n    for i in range(1, len(listval)):\n        if type(listval[i]) == int:\n            if listval[i] < min_val:\n                min_val = listval[i]\n        elif type(listval[i]) == float:\n            if listval[i] < min_val:\n                min_val = listval[i]\n        elif type(listval[i]) == str:\n            if listval[i] < min_val:\n                min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n\n    Parameters:\n    listval (list): A list of values of any data type.\n\n    Returns:\n    int or float: The minimum value in the list.\n    \"\"\"\n\n    min_val = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize variables to store the minimum value and its position\n    min_val = None\n    min_pos = None\n    # Iterate over the list\n    for i in range(len(listval)):\n        # If the current value is smaller than the minimum value, update the variables\n        if listval[i] < min_val or min_val is None:\n            min_val = listval[i]\n            min_pos = i\n    # Return the minimum value and its position\n    return min_val, min_pos"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value\n    min_val = listval[0]\n    # loop through the list and update minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop through the rest of the list and compare each element to the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Remove the underscore and convert the first letter to lower case\n    first_word = word.split('_')[0]\n    first_word = first_word.lower()\n\n    # Convert the rest of the words to camel case\n    camel_words = [word.split('_')[i].capitalize() for i in range(1, len(word.split('_')))]\n\n    # Join the camel words and return the result\n    return ''.join(camel_words) + first_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase and split it into words\n    words = word.lower().split('_')\n    # Convert the first word to uppercase and concatenate the rest of the words\n    camel_case_word = ''.join(w.title() for w in words[1:])\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace all underscores with spaces\n    word = re.sub('_','', word)\n    # capitalize the first letter of each word\n    words = word.split()\n    result = []\n    for word in words:\n        if word.isupper():\n            result.append(word)\n        else:\n            result.append(word.capitalize())\n    # join the words back into a camel case string\n    camel_case = ''.join(result)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'_(.)', r' \\1', word)\n    # Remove leading space\n    camel_case = re.sub(r'^ ', '', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake_case to CamelCase\n    camel_case = re.sub('([A-Z])', lambda x: \"_\" + x.group(1).lower(), word)\n    # Remove the first underscore\n    camel_case = camel_case[1:]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    prev_upper = False\n    for char in word:\n        if char == \"_\":\n            prev_upper = True\n            continue\n        if prev_upper:\n            camel_case += char.upper()\n            prev_upper = False\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces and split the string into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0].capitalize()]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    # Join the camel case words into a single string\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)?')\n    words = pattern.split(word)\n    camel_case_word = ''.join(words).title()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Replace spaces with underscores and capitalize the first letter\n    word = re.sub(r'(\\s+)', '_', word).capitalize()\n\n    # Split the word into words\n    words = word.split('_')\n\n    # Convert the first letter to lower case\n    words[0] = words[0].lower()\n\n    # Join the words back into a camel case string\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all underscores to camel case letters\n    camel_case_word = re.sub(r'_(.)', lambda match: match.group(1).upper(), word)\n    # Remove any leading or trailing underscores\n    camel_case_word = camel_case_word.strip('_')\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store the odd numbers\n    result = []\n    \n    # loop through the given list\n    for num in l:\n        # if the number is odd, add it to the result list\n        if num % 2!= 0:\n            result.append(num)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a new list to store the even numbers\n    result = []\n    # loop through each number in the input list\n    for num in l:\n        # check if the number is odd\n        if num % 2 == 0:\n            # if it is, add it to the result list\n            result.append(num)\n    # return the result list\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is a valid integer\n    if type(n)!= int:\n        raise ValueError(\"n must be an integer\")\n\n    # Check if the length of the list is greater than 0\n    if len(list1) == 0:\n        raise IndexError(\"List is empty\")\n\n    # Find the index of the nth element from the end of the list\n    index = len(list1) - n\n\n    # Check if the index is within the bounds of the list\n    if index < 0 or index >= len(list1):\n        raise IndexError(\"Index is out of bounds\")\n\n    # Extract and return the nth element\n    return list1[index]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes two parameters: a list of tuples and an integer n.\n    It extracts the nth element from the list of tuples and returns it.\n    '''\n    try:\n        # Convert the list of tuples to a list of lists\n        list2 = [[x[0], x[1]] for x in list1]\n        # Sort the list of lists based on the second element of each tuple\n        list2.sort(key=lambda x: x[1])\n        # Return the nth element from the sorted list of lists\n        return list2[n-1][0]\n    except IndexError:\n        # If the index n is greater than or equal to the length of the list\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in list1 that is also in list2,\n    and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set to store the values in list2\n    set2 = set(list2)\n    # iterate through the values in list1\n    for item in list1:\n        # check if the item exists in set2\n        if item in set2:\n            # if the item exists, return True\n            return True\n    # if no value in list1 exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of all the elements in the first list\n    set1 = set(list1)\n    # Iterate through the elements in the second list\n    for element in list2:\n        # If the element exists in the set, return True\n        if element in set1:\n            return True\n    # If no elements in the second list exist in the first list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n            if product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        temp = max_product\n        max_product = max(max_product, min_product * arr[i])\n        min_product = min(min_product, temp * arr[i])\n        \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:\n                max_pair = (arr[i] * arr[j], arr[i] * arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with the highest product\n    max_product = arr[0] * arr[1]\n    max_pair = arr[0], arr[1]\n\n    # Check if there are any other pairs with the same highest product\n    for i in range(len(arr) - 1):\n        if arr[i] * arr[i + 1] > max_product:\n            max_product = arr[i] * arr[i + 1]\n            max_pair = arr[i], arr[i + 1]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    # Initialize the maximum product and two variables to store the pair with highest product\n    max_product = float('-inf')\n    pair = (float('-inf'), float('-inf'))\n    \n    # Traverse through the array and update the maximum product and pair if necessary\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            # Update the maximum product and pair if the product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    \n    # Return the pair with the highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return \"Array must have at least two elements.\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    # Initialize two variables to store the maximum and minimum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Traverse through the array and update the maximum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize two variables to store the product of the maximum and minimum values\n    max_product = max_val * min_val\n\n    # Traverse through the array again and update the product of the maximum and minimum values\n    for i in range(1, len(arr)):\n        temp = max_val\n        max_val = max_val * arr[i]\n        min_val = min_val * temp\n\n    # Return the product of the maximum and minimum values\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1] * arr[-2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a dictionary to store the products of all possible pairs\n    products = {}\n    # Iterate over the array and compute the products of all possible pairs\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product in products:\n                products[product] += 1\n            else:\n                products[product] = 1\n    # Find the pair with the highest product\n    max_product = -1\n    pair = None\n    for product, count in products.items():\n        if count > max_product:\n            max_product = count\n            pair = product\n    # Return the pair with highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max(max1*max2, max2*max1)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element == None:\n            common_element = i[0]\n        elif i[0] == common_element:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    containing the common first elements of the tuples in the input list.\n    '''\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0] and i not in common_elements:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if len(set(tup)) == 1:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list and count the occurrences of each element\n    for tup in Input:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Iterate through the dictionary and find the first element with count 1\n    for elem, count in count_dict.items():\n        if count == 1:\n            return elem\n\n    # If no element has count 1, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_obj in Input:\n        if common_element is None:\n            common_element = tuple_obj[0]\n        else:\n            if tuple_obj[0] == common_element:\n                continue\n            else:\n                return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_element = None\n    count = 0\n\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        elif common_element == i[0]:\n            count += 1\n        else:\n            common_element = None\n\n    if count == len(Input):\n        return \"All tuples have the same common first element\"\n    else:\n        return f\"Common first element in the list: {common_element}, Count: {count}\""
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if common_element is None:\n            common_element = tuple[0]\n        else:\n            if tuple[0] == common_element:\n                common_element = None\n            else:\n                common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary of tuples where the key is the common first element and the value is the list of tuples with that common first element.\n    '''\n    Common_Elements = {}\n    for i in range(len(Input)):\n        if Input[i][0] in Common_Elements:\n            Common_Elements[Input[i][0]].append(Input[i])\n        else:\n            Common_Elements[Input[i][0]] = [Input[i]]\n    return Common_Elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = None\n\n    for i in Input:\n        if len(set(i)) > 1: # check if the tuple has duplicate elements\n            if common_elem is None:\n                common_elem = i[0]\n            else:\n                if i[0] == common_elem:\n                    return common_elem\n\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set() # create an empty set to store unique first elements\n    \n    # iterate over the list of tuples and add each first element to the set\n    for tup in Input:\n        first_elements.add(tup[0])\n    \n    # iterate over the set of first elements and print the common first element\n    common_element = None\n    for element in first_elements:\n        if common_element is None: # first element is the common element\n            common_element = element\n        else: # if the current element is not the common element, break the loop and return the common element\n            break\n    \n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize variables to store maximum length and maximum element\n    max_len = 0\n    max_elem = None\n\n    # Loop through the list and update max_len and max_elem\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    total_sum *= len(lst)\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    sum_of_cubes = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of i\n        cube = i**3\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube\n        # Increment the count\n        count += 1\n\n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # initializing the sum to 0\n    sum = 0\n\n    # iterating through the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        sum += i**3\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1, 2):\n        sum_cube += i**3\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n    i = 1\n\n    while count < n:\n        if i % 2 == 0:\n            sum_of_cubes += i ** 3\n            count += 1\n        i += 1\n\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes a tuple and concatenates each element by the delimiter.\n    '''\n    concatenated_list = []\n    for item in test_tup:\n        concatenated_list.append(item)\n    concatenated_str = delimiter.join(concatenated_list)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for element in test_tup:\n        result.append(str(element))\n    concatenated_string = delimiter.join(result)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function concatenates each element of tuple by the specified delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','# set delimiter as comma and space\n    concatenated_string = '' # initialize an empty string\n    \n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    \n    return concatenated_string[:-2] # remove last two characters from the string (comma and space)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \" # By default, use a space as the delimiter.\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter # Add the element as a string with the delimiter.\n    return result[:-len(delimiter)] # Remove the final delimiter from the result."
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    average = total / (n*n*n)  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n\n    average = cube_sum/n\n\n    return average\n\nprint(find_Average_Of_Cube(10)) # Output: 243.0"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n\n        # Calculate the cube of the current number\n        cube = i**3\n\n        # Add the cube to the sum\n        sum += cube\n\n    # Calculate the average of the cubes\n    average = sum/n\n\n    # Return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum_of_cubes += cube\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # calculate sum of cubes\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n\n    # calculate average\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize empty list to store the rear elements\n    rear_elements = []\n    \n    # Loop through each string in the tuple\n    for string in test_tuple:\n        # If the string is not empty (i.e., not None), add it to the rear_elements list\n        if string is not None:\n            rear_elements.append(string[-1])\n    \n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for i in range(len(test_tuple)):\n        rear_element.append(test_tuple[i][-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string_in_tuple in test_tuple:\n        rear_index_element = string_in_tuple[-1]\n        rear_index_elements.append(rear_index_element)\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear index elements\n    rear_index_elements = []\n    \n    # Loop through each string in the given tuple\n    for string in test_tuple:\n        # Get the rear index of the current string\n        rear_index = len(string) - 1\n        \n        # Extract the rear index element of the current string and add it to the list\n        rear_index_element = string[rear_index]\n        rear_index_elements.append(rear_index_element)\n    \n    # Return the list of rear index elements\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [elem[-1] for elem in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes two arguments:\n    list1: A list of sublists.\n    x: The element to be searched for in the sublists.\n    \n    This function counts the number of sublists in list1 that contain the element x.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # create a new list to store the odd numbers\n    odd_numbers = []\n    \n    # iterate over the input list\n    for num in nums:\n        # if the number is odd, add it to the new list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    \n    # return the new list with only odd numbers\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:  # check if num is odd\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() function to replace the date format with the new format\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n\n    # Return the new date in dd-mm-yyyy format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex pattern to match date format yyyy-mm-dd\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # replace all the occurrences of pattern with dd-mm-yyyy format\n    new_dt = re.sub(pattern, lambda x: f'{x.group(3)}-{x.group(2)}-{x.group(1)}', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for yyyy-mm-dd format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n    # Use the pattern to search for a match in the input date string\n    match = pattern.match(dt)\n\n    # If there is a match, split the date string into its components and reverse them\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define a regular expression pattern to match the date format in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # check if the input string matches the pattern\n    if re.match(pattern, dt):\n        # split the input string into year, month, and day components\n        year, month, day = dt.split('-')\n        # join the year, month, and day components in the desired order\n        new_dt = day + '-' + month + '-' + year\n        # return the new date in dd-mm-yyyy format\n        return new_dt\n    else:\n        # if the input string does not match the pattern, return the original string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern for yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use re.search() method to search for the pattern in the date string\n    match = re.search(pattern, dt)\n    # if match is found, extract the year, month, and day components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # use the datetime module to convert the date components to yyyy-mm-dd format\n        from datetime import datetime\n        dt_obj = datetime(int(year), int(month), int(day))\n        yyyy_mm_dd = dt_obj.strftime('%Y-%m-%d')\n        # return the converted date string\n        return yyyy_mm_dd\n    else:\n        # if no match is found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.match() method to search for a match in the input string\n    match = re.match(pattern, dt)\n    \n    # If there is a match, use the groups() method to extract the date components\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the pattern to match the date in the input string\n    match = re.match(pattern, dt)\n    # If a match is found, extract the year, month, and day components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Format the date components in the desired output format\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        # If no match is found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_format = re.compile(r'\\d{4}')\n    mm_format = re.compile(r'\\d{2}')\n    dd_format = re.compile(r'\\d{2}')\n\n    # Convert the date string to a list of its components\n    yyyy = yyyy_format.findall(dt)[0]\n    mm = mm_format.findall(dt)[0]\n    dd = dd_format.findall(dt)[0]\n\n    # Reverse the order of the components to match the required format\n    new_yyyy = dd\n    new_mm = yyyy\n    new_dd = mm\n\n    # Reconstruct the date string from the new components\n    new_dt = f'{new_dd}-{new_mm}-{new_yyyy}'\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regex pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Convert date string to datetime object\n    date_obj = datetime.datetime.strptime(dt, pattern)\n    # Convert datetime object to dd-mm-yyyy format\n    new_date = date_obj.strftime('%d-%m-%Y')\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the input date string\n    match = re.match(pattern, dt)\n    \n    # If the pattern is found, extract the groups and convert them to the new format\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    # Calculate the size of the sub-array\n    n = len(my_list)\n    h = 1\n    # While h is less than the length of the array\n    while h < n//3:\n        h = 3*h + 1\n    \n    # Perform insertion sort on the sub-arrays\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            # Shift the elements of the sub-array until the correct position is found\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Step 1: Calculate the largest gap\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # Step 2: Insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        \n        # Step 3: Reducing gap size\n        gap = gap // 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n\n            while j >= gap and key < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = key\n\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest gap between elements\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Reducing gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths!\")\n        return\n\n    # initialize the result tuple\n    result_tup = ()\n\n    # iterate through the tuples and extract the elementwise and\n    for i in range(len(test_tup1)):\n        # extract the elements from the tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # perform the elementwise and\n        and_val = elem1 & elem2\n\n        # append the and value to the result tuple\n        result_tup += (and_val,)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Both tuples must have the same length.'\n    else:\n        and_tup = ()\n        for i in range(len(test_tup1)):\n            and_tup += (test_tup1[i] & test_tup2[i],)\n        return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_list = []\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_list)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The directrix of this parabola is not defined\"\n    else:\n        return -b/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"No real roots\")\n    else:\n        root1 = (-b + delta**0.5) / (2*a)\n        root2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is between the roots:\", root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a, b, c (float): Coefficients of the parabola.\n\n    Returns:\n    float: The directrix of the parabola.\n    '''\n\n    # Calculate the determinant of the matrix\n    determinant = b**2 - 4*a*c\n\n    # Check if the determinant is negative\n    if determinant < 0:\n        return \"The determinant is negative.\"\n\n    # Calculate the two solutions to the quadratic equation\n    discriminant = 0.5*determinant\n    x1 = (-b + discriminant)/(2*a)\n    x2 = (-b - discriminant)/(2*a)\n\n    # Check if there are two real solutions\n    if x1.is_integer() and x2.is_integer():\n        return \"The directrix is real and has two distinct solutions.\", x1, x2\n    elif x1.is_integer():\n        return \"The directrix is real and has one distinct solution.\", x1\n    elif x2.is_integer():\n        return \"The directrix is real and has one distinct solution.\", x2\n    else:\n        return \"The directrix is complex.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n    else:\n        directrix = None\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5)/(2*a) \n        root2 = (-b - discriminant**0.5)/(2*a) \n    elif discriminant == 0: \n        root1 = root2 = -b/(2*a) \n    else: \n        return \"There is no real root.\"\n    \n    return \"The directrix of the parabola is:\", root1, \"and\", root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Args:\n        a (float): The coefficient of the x-axis of the parabola.\n        b (float): The coefficient of the y-axis of the parabola.\n        c (float): The value of y=ax^2+bx+c.\n\n    Returns:\n        float: The value of x where the tangent line of the parabola crosses the y-axis.\n    \"\"\"\n\n    discriminant = b ** 2 - 4 * a * c\n\n    if discriminant < 0:\n        raise ValueError(\"The equation of the parabola does not have a real root.\")\n\n    directrix = (-b + discriminant ** 0.5) / (2 * a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return \"No real roots.\"\n    elif delta == 0:\n        return (-b) / (2 * a)\n    else:\n        return (-b + delta ** 0.5) / (2 * a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant >= 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + (discriminant ** 0.5)) / (2 * a)\n        root2 = (-b - (discriminant ** 0.5)) / (2 * a)\n\n        # Sort the roots in ascending order\n        root1, root2 = sorted((root1, root2))\n\n        # Return the directrix\n        return root1\n\n    # If the discriminant is zero, the directrix is at y = 0\n    elif discriminant == 0:\n        return 0\n\n    # If the discriminant is negative, there is no real solution to the equation\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Finding the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Checking if the discriminant is positive or negative\n    if disc > 0:\n        # Calculating the root of the discriminant\n        root = (-b + (disc**0.5)) / (2*a)\n        \n        # Printing the directrix\n        print(\"The directrix of the parabola is:\", root)\n    \n    elif disc < 0:\n        # Calculating the root of the discriminant\n        root = (-b - (disc**0.5)) / (2*a)\n        \n        # Printing the directrix\n        print(\"The directrix of the parabola is:\", root)\n    \n    else:\n        # If the discriminant is zero\n        print(\"The parabola has a single point as its directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b ** 2 - 4 * a * c\n    \n    if disc > 0:\n        root1 = (-b + disc) / (2 * a)\n        root2 = (-b - disc) / (2 * a)\n        return root1, root2\n    elif disc == 0:\n        root = -b / (2 * a)\n        return root\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if the intersection of two sets is not empty\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # loop through the first list and check if any element is in the second list\n    for element in list1:\n        if element in list2:\n            return True\n    # if no common element was found, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Check if the two lists are of equal length\n    if len(list1)!= len(list2):\n        return False\n\n    # Create a set of the first list to remove duplicates\n    set1 = set(list1)\n\n    # Iterate through the second list to check for common elements\n    for element in list2:\n        if element in set1:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from list1 and list2 to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets to get the common elements\n    intersection = set1.intersection(set2)\n\n    # Return True if there is at least one common element, False otherwise\n    return len(intersection) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Loop through each element in list1\n    for item in list1:\n        # If the element is in list2, return True\n        if item in list2:\n            return True\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for elem in list1:\n        if elem in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length * trapezium_area / (height * (height - 1))\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = base1 + base2\n    length2 = 2 * height\n    length = length1 + length2\n    \n    # Sort the lengths in ascending order\n    sorted_lengths = sorted([length1, length2, length])\n    \n    # Calculate the middle index and the middle length\n    mid_index = sorted_lengths.index(length)\n    mid_length = sorted_lengths[mid_index]\n    \n    # Return the median length\n    return mid_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each half of the trapezium\n    half1 = base1 / 2\n    half2 = base2 / 2\n    # Calculate the area of the trapezium\n    area = half1 + half2\n    # Calculate the area of the base of the trapezium\n    base_area = half1 + half2\n    # Calculate the height of the trapezium\n    height_area = height * height\n    # Calculate the area of the triangle formed by the base and height\n    triangle_area = 0.5 * base_area * height_area\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (half1 + half2) / 2\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    # Calculate the length of the trapezium\n    trapezium_length = math.sqrt(perimeter * perimeter - semi_perimeter * semi_perimeter)\n    # Calculate the area of the trapezium\n    trapezium_area = base1 * height + base2 * height + height * height\n    # Calculate the difference between the area of the trapezium and the area of the triangle formed by the base and height\n    difference = abs(trapezium_area - triangle_area)\n    # Calculate the percentage difference between the areas of the trapezium and the triangle formed by the base and height\n    percentage_difference = difference / triangle_area * 100\n    # Determine which side of the base the trapezium is on\n    if half1 < half2:\n        return trapezium_length, percentage_difference\n    else:\n        return trapezium_length, percentage_difference"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = (base1 + base2) * height\n    \n    # Calculate the area of the trapezium\n    area = (base1 * height) + (base2 * height)\n    \n    # Calculate the midpoint of the trapezium\n    midpoint = perimeter / 2\n    \n    # Find the area of the half of the trapezium\n    half_area = area / 2\n    \n    # Find the median area of the trapezium\n    median_area = half_area * 2\n    \n    # Find the distance from the midpoint to the middle of the half of the trapezium\n    distance = abs(midpoint - median_area)\n    \n    # Find the length of the half of the trapezium\n    half_length = distance / 2\n    \n    # Calculate the median length of the trapezium\n    median_length = base1 + base2 + half_length\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n    \"\"\"\n    # Calculate the base and height of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the area and height of the two trapezoids\n    trap1_area = 0.5 * base1 * height\n    trap2_area = 0.5 * base2 * height\n    trap1_height = trap1_area / (0.5 * base1)\n    trap2_height = trap2_area / (0.5 * base2)\n\n    # Find the length of the trapezoid with the larger area\n    if trap1_area > trap2_area:\n        trap_length = trap1_height + trap2_height\n    else:\n        trap_length = trap2_height + trap1_height\n\n    # Calculate the median length\n    median = 0.5 * trap_length\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    s = (base1 + base2) / 2.0\n    area = (s * height) / 2.0\n    \n    # Calculate the length of the base1 half of the trapezium\n    half1 = base1 / 2.0\n    \n    # Calculate the length of the base2 half of the trapezium\n    half2 = base2 / 2.0\n    \n    # Calculate the length of the trapezium using the formula for trapezium\n    trapezium = half1 + half2\n    \n    # Calculate the length of the base1 half of the trapezium using the formula for half of a trapezium\n    base1_half = 0.5 * half1 + 0.5 * half2\n    \n    # Calculate the length of the base2 half of the trapezium using the formula for half of a trapezium\n    base2_half = 0.5 * half2 + 0.5 * half1\n    \n    # Find the area of each half of the trapezium\n    area_half1 = area / base1_half\n    area_half2 = area / base2_half\n    \n    # Find the area of the trapezium using the formula for the area of a trapezium\n    area_trapezium = area_half1 + area_half2\n    \n    # Calculate the median of the two halves of the trapezium\n    median_half1 = (area_half1 + area_trapezium - area) / 2.0\n    median_half2 = (area_half2 + area_trapezium - area) / 2.0\n    \n    # Calculate the median of the two halves of the trapezium using the formula for half of a trapezium\n    median_trapezium = median_half1 + median_half2\n    \n    # Return the median of the trapezium\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate area of trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate base of trapezium at the median height\n    base_median = 0.5 * (base1 + base2)\n\n    # calculate median length of trapezium\n    median_length = (area * 2) / height\n\n    # find the larger of the two bases\n    base_larger = max(base1, base2)\n\n    # find the smaller of the two bases\n    base_smaller = min(base1, base2)\n\n    # check if the median length is between the two bases\n    if median_length > base_median:\n        # if it is, return the larger of the two bases\n        return base_larger\n    elif median_length < base_median:\n        # if it is, return the smaller of the two bases\n        return base_smaller\n    else:\n        # if the median length is exactly between the two bases, return the median length\n        return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes the base and height of two rectangles and the height of the third rectangle and returns the length of the median trapezium.\n    '''\n    # calculate the area of the first rectangle\n    area_1 = 0.5 * base1 * height\n    \n    # calculate the area of the second rectangle\n    area_2 = 0.5 * base2 * height\n    \n    # calculate the area of the third rectangle\n    area_3 = 0.5 * base2 * height\n    \n    # calculate the length of the trapezium\n    trapezium_length = (area_1 + area_2) / 2\n    \n    # calculate the area of the trapezium\n    trapezium_area = 0.5 * trapezium_length\n    \n    # calculate the difference between the area of the third rectangle and the sum of the areas of the first and second rectangles\n    difference = (area_3 - (area_1 + area_2))\n    \n    # calculate the area of the rectangle with the higher area\n    higher_area = max(area_1, area_2)\n    \n    # calculate the area of the rectangle with the lower area\n    lower_area = min(area_1, area_2)\n    \n    # calculate the height of the rectangle with the higher area\n    higher_height = (higher_area / 0.5) ** 2\n    \n    # calculate the height of the rectangle with the lower area\n    lower_height = (lower_area / 0.5) ** 2\n    \n    # calculate the height of the intersection of the two rectangles\n    intersection_height = height - higher_height - lower_height\n    \n    # calculate the length of the intersection\n    intersection_length = intersection_height / 0.5\n    \n    # calculate the length of the trapezium\n    trapezium_length = trapezium_length + intersection_length\n    \n    # calculate the median of the two rectangles\n    median_1 = 0.5 * (base1 + base2)\n    \n    # calculate the median of the trapezium\n    median_2 = 0.5 * (median_1 + intersection_length)\n    \n    # check which of the two medians is closer to the center\n    if abs(median_2 - median_1) < abs(median_2 - median_trapezium):\n        median_trapezium = median_2\n    else:\n        median_trapezium = median_1\n    \n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height\n    base_trapezium = 0.5 * base1\n    if area < base_trapezium:\n        return 0\n    else:\n        base_area = base_trapezium * (1/2)\n        side_area = 0.5 * base2 * height\n        return math.sqrt(area + side_area) - math.sqrt(base_area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height / 2\n\n    # Calculate the area of the trapezium\n    trapezium_area = (base1 + base2) * height / 2\n\n    # Calculate the number of parts in the trapezium\n    num_parts = int(trapezium_area)\n\n    # Sort the parts of the trapezium by their lengths\n    parts = sorted(trapezium_length / num_parts)\n\n    # Find the median length of the trapezium\n    median_length = parts[num_parts // 2]\n\n    # Return the median length\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes an array and a number as input and returns a boolean value indicating whether\n    the entered number is greater than the elements of the array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > 0:\n        if number > arr[0]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(\"The entered number is greater than the element at index\", i)\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'[ab]+b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n\n    # Get the last digit of the number\n    last_digit = n % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the given number to string\n    str_num = str(n)\n    # Get the length of the string\n    length = len(str_num)\n    # Return the last digit of the string\n    return int(str_num[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    # convert the number to a string to extract the last digit\n    last_digit = str(n)[-1]\n    # return the last digit\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers in the original list.\n    \"\"\"\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list and returns a new list containing the negative numbers in the original list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char.isalpha():\n            if int(char) % 2!= 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if int(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the even characters\n    even_str = \"\"\n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is odd (i.e., its remainder when divided by 2 is not 0),\n        # append it to the even_str variable\n        if char % 2!= 0:\n            even_str += char\n    # Return the even_str variable as the result\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the even characters\n    even_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is even (i.e. not an odd number), append it to the even_str\n        if char % 2 == 0:\n            even_str += char\n    \n    # Return the even_str, which contains only the even characters of the input string\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create a new string to store the non-odd characters\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if ord(char) % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] or (test_list[i][1], test_list[j][0]) in test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create a set of unique tuples from the input list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n\n    # Count the number of bidirectional tuple pairs in the set\n    count = 0\n    for i in range(len(unique_tuples)):\n        for j in range(i + 1, len(unique_tuples)):\n            if unique_tuples[i] == unique_tuples[j][::-1] or unique_tuples[j] == unique_tuples[i][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1:] or (test_list[j][0], test_list[i][0]) in test_list[i][1:]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    seen = set()\n    for i, item in enumerate(test_list):\n        if tuple(reversed(item)) in seen:\n            count += 1\n        seen.add(item)\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Iterate through the list and add unique elements to the set\n    for item in test_list:\n        if item not in unique_elements:\n            unique_elements.add(item)\n\n    # Iterate through the unique elements and count bidirectional pairs\n    count = 0\n    for item1 in unique_elements:\n        for item2 in unique_elements:\n            # Check if the items are in the correct order\n            if item1 < item2:\n                if item2 < item1:\n                    count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if isinstance(num, int):\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        # multiply the current number by the power of 10 (the length of the string representation of the number)\n        single_integer += num * 10**len(str(num))\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple_sum = 0\n    for i in L:\n        multiple_sum += i\n    return multiple_sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result*10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+(ing|ed|er|est|ed)\\b', text)\n\n    # Check if there is at least one adverb\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    first_adverb_position = text.index(adverbs[0])\n\n    # Return the first adverb and its position\n    return adverbs[0], first_adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Extract the adverbs from the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # Iterate through the adverbs and find their positions\n    for i, adverb in enumerate(adverbs):\n        print(f\"Adverb: {adverb}, Position: {i+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"(\\w+)([A-Z])(\\w+)([a-z]+)(\\w+)\"\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    if matches:\n        adverb_positions = []\n        for match in matches:\n            adverb_positions.append(match[0])\n            adverb_positions.append(match[1])\n            adverb_positions.append(match[2])\n            adverb_positions.append(match[3])\n            adverb_positions.append(match[4])\n        return adverb_positions\n    else:\n        return \"No adverbs found in the text\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(a|an|the)\\s+(adverb|adv)\\b')\n    # find all matches of the pattern in the given text\n    matches = pattern.finditer(text)\n    # iterate over all matches and print the position and the matched text\n    for match in matches:\n        print(match.start(), match.group())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression pattern for finding adverbs\n    pattern = r'\\b([a-z]+)s\\b'\n\n    # find all the occurrences of the pattern in the text\n    occurrences = re.findall(pattern, text)\n\n    # create a list of tuples containing the adverb and its position in the sentence\n    result = [(word, index) for index, word in enumerate(text.split()) if word.lower() in ['a', 'an', 'the', 'that']]\n\n    # find the index of the first adverb\n    if occurrences:\n        start_index = occurrences[0][1]\n    else:\n        start_index = 0\n\n    # find the index of the last adverb\n    if occurrences:\n        end_index = occurrences[-1][1] + len(occurrences[-1][0])\n    else:\n        end_index = len(text)\n\n    # add the first adverb to the result\n    if occurrences:\n        result.insert(0, (occurrences[0][0], start_index))\n\n    # add the last adverb to the result\n    if occurrences:\n        result.append((occurrences[-1][0], end_index - len(occurrences[-1][0])))\n\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a dictionary where the keys are the adverbs and the values are their positions in the sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\b', text, re.I)\n    adverb_positions = {}\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i + 1\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    adverb_positions = []\n    for i, word in enumerate(text.split()):\n        if word in adverbs:\n            adverb_positions.append(i)\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples, where each tuple contains\n    the text of the adverb and its position in the sentence.\n    '''\n    \n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b(a|an|the)\\s*(adverb|adv|advantage|advantageous|advantages|advantaged|advantageous|advantaging|advantagingly)\\b')\n    \n    # Find all non-overlapping matches of the adverb pattern in the text\n    matches = re.finditer(adverb_pattern, text)\n    \n    # Convert the matches object to a list of tuples\n    adverbs_list = [(match.group(1), match.start()) for match in matches]\n    \n    return adverbs_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Convert text to lowercase and split into words\n    words = text.lower().split()\n\n    # Initialize a dictionary to store the adverb and its positions\n    adverbs = {}\n\n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n\n        # If the word is an adverb, add it to the dictionary\n        if word in adverb_list:\n            adverbs[word] = i\n\n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Split the text into words and sentences\n    sentences = text.split('.')\n    sentences = sentences[:-1] # Remove the last sentence as it does not contain adverbs\n    \n    # Find the adverbs in each sentence\n    adverbs = []\n    for sentence in sentences:\n        matches = re.findall(r'\\b\\w+\\s*\\-\\s*adverb\\b', sentence)\n        adverbs += matches\n    \n    # Find the positions of the adverbs in the text\n    positions = []\n    for i, sentence in enumerate(sentences):\n        matches = re.findall(r'\\b\\w+\\s*\\-\\s*adverb\\b', sentence)\n        for match in matches:\n            positions.append((i+1, sentence.index(match)+1))\n    \n    return positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 # Cube surface area = 6 * length^2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l  # Formula for surface area of a cube"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l  # formula to find surface area of cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area of the cube\n    area = 6 * l * l\n    # Return the surface area\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    positive_nums = array('i')\n    negative_nums = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n\n    if len(positive_nums) == 0:\n        return 0\n\n    positive_sum = sum(positive_nums)\n    negative_sum = sum(negative_nums)\n\n    if positive_sum == 0:\n        return 0\n\n    positive_ratio = positive_sum / sum(nums)\n    negative_ratio = negative_sum / sum(nums)\n\n    return positive_ratio, negative_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize count and total count\n    count = 0\n    total = 0\n\n    # Iterate over the array\n    for num in nums:\n        # If the number is positive, increment count and add to total\n        if num > 0:\n            count += 1\n            total += num\n\n    # Calculate the ration and return it\n    if total == 0:\n        ration = 0\n    else:\n        ration = count / total\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return float(pos_count) / float(neg_count + pos_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list\n    nums_list = list(nums)\n    # count the number of positive numbers\n    count = 0\n    for num in nums_list:\n        if num > 0:\n            count += 1\n    # calculate the ration of positive numbers\n    ration = count / len(nums_list)\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    pos = 0\n    neg = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        else:\n            neg += 1\n    if pos == 0:\n        print(\"No positive numbers in the array.\")\n    else:\n        print(\"Positive numbers:\", pos)\n        print(\"Positive numbers ratio:\", (pos/len(arr)) * 100, \"%\")\n    if neg == 0:\n        print(\"No negative numbers in the array.\")\n    else:\n        print(\"Negative numbers:\", neg)\n        print(\"Negative numbers ratio:\", (neg/len(arr)) * 100, \"%\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        else:\n            negative.append(1)\n    pos_count = len(positive)\n    neg_count = len(negative)\n    if pos_count == 0:\n        return 0\n    else:\n        return float(pos_count) / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_nums = array('i', [x for x in nums if x > 0])\n    count_positive = len(positive_nums)\n    total_nums = len(nums)\n    ratio = count_positive / total_nums\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    # Initialize variables to store the largest negative number and its index\n    largest = float('-inf')\n    largest_index = -1\n    \n    # Loop through the list and find the largest negative number\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n            largest_index = i\n    \n    # Return the largest negative number and its index\n    return largest, largest_index"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize a variable to store the largest negative number found so far\n    largest = None\n    # iterate through the list of numbers\n    for num in list1:\n        # if the number is negative and larger than the current largest, update the largest variable\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    # return the largest negative number found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest variable\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num  # update largest if new number is larger\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i, tup in enumerate(test_list):\n        if i % K == 0:\n            trim_index = max(0, K - 1)\n            tup = tuple(tup[:trim_index] + tup[trim_index:])\n        test_list[i] = tup\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) <= K:\n            del test_list[i]\n        else:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        trimmed_list.append(item[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j % K == 0:\n                test_list[i][j] = None\n            else:\n                test_list[i][j] = None"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i] = test_list[i][:j] + (0,) + test_list[i][j+1:]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Create a new tuple with the elements of the two input tuples multiplied index wise\n    new_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples should have same number of elements\"\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Initialize the result tuple with all zeros\n    result = (0, 0, 0, 0)\n    \n    # Loop through the two tuples and multiply the corresponding elements\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n        \n    # Return the result tuple\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        print(i, \" x \", test_tup1[i], \" = \", test_tup1[i] * test_tup2[i])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in tup:\n        count[i] += 1\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count = Counter(tup)\n    for elem in lst:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where each key represents an element of the tuple and its value represents its occurrence in the list. \n    '''\n    # Creating a dictionary to store the count of each element in the tuple and the list\n    count_dict = Counter(tup)\n\n    # Counting the occurrence of each element in the list and updating the count in the dictionary\n    for item in lst:\n        count_dict[item] += 1\n\n    # Returning the dictionary with the count of each element in the tuple and the list\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    for i in range(len(lst)): \n        count_lst.append(count_dict.get(lst[i], 0)) \n    return count_lst "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup) \n    count_lst = [] \n\n    for i in count_dict: \n        count = count_dict[i] \n        for j in lst: \n            if i == j: \n                count_lst.append(count) \n                break \n\n    return count_lst "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input. It then counts the occurrence of all elements of the list in the tuple.\n    The output is a dictionary, where the keys are the elements of the list and the values are their count in the tuple.\n    '''\n    count_dict = Counter(lst)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(lst)\n    for key in count:\n        tup_count = tup.count(key)\n        tup = tup.replace(key, str(tup_count))\n    return tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 11, 29, 61, 127, 251, 509, 1021]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total = 0\n    for num in perrin_numbers:\n        total += num\n        if total > n:\n            break\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total = 0\n    for i in range(n):\n        total += perrin[i]\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i+1)**2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(perrin[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and extracts the specified size strings from the list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(l[i][:l[i].index(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i][:size])\n        else:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)+len(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes in a list of strings and an integer l as input.\n    It then extracts the first l characters from each string in the list and returns them in a new list.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        extracted_strings.append(s[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list)-l+1):\n        string_list.append(' '.join(str_list[i:i+l]))\n    return string_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings as input and extracts the specified size of strings from the list.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all whitespace characters with a single space\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all the whitespaces from the given string\n    text1 = re.sub(r'\\s+','', text1)\n    # remove the trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and returns a new string with all whitespaces removed.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the given string\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match all whitespaces\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to replace all whitespaces in the given string\n    text2 = pattern.sub('', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost < sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n\n    return loss_amount"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum of even factors to zero\n    total = 0\n\n    # loop through all numbers between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n\n        # check if the number is evenly divisible by i\n        if n % i == 0 and i % 2 == 0:\n\n            # add the even factor to the sum\n            total += i\n\n    # return the sum of even factors\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenFactors += i + n // i + n // (i+2)\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum and evenFactors list \n    sum = 0 \n    evenFactors = []\n    \n    # Loop through all the numbers from 1 to n \n    for i in range(1, n+1):\n        # Check if the current number is even and has no even factors \n        if i % 2 == 0 and len(set(str(i))) == 2:\n            sum += i\n            evenFactors.append(i)\n    \n    # Return the sum of even factors \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            total += i\n            n //= i\n    if n > 1 and n % 2 == 0:\n        total += n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    # find the sum of even factors using a loop\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    if n > 2:\n        even_sum += n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s*[zZ]\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\sz\\b', re.IGNORECASE)\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Convert the given month number to integer\n    monthnum = int(monthnum2)\n\n    # Check if the month number is in range\n    if monthnum > 0 and monthnum <= 12:\n\n        # Check if the month number has 31 days or not\n        if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum in [4, 6, 9, 11]:\n            return False\n        else:\n            return True\n\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        if 2000 % 4 == 0:\n            return True\n        elif 2000 % 100 == 0 and 2000 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return True if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) else False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return 29\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        print(\"Invalid month number\")\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        return False\n    else:\n        if monthnum2 % 4 == 0 and monthnum2 % 100!= 0:\n            return True\n        elif monthnum2 % 400 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Convert the string to a list of characters\n        charlist = list(stringlist[i])\n        # Reverse the list of characters\n        charlist.reverse()\n        # Convert the list of characters back to a string and assign it to the original stringlist[i]\n        stringlist[i] = ''.join(charlist)\n    # Return the reversed list of string values\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    # return the reversed list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    # Return the reversed list\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Create an empty list to store the sublists with minimum length\n    min_sublist = []\n    # Iterate over the list of sublists\n    for sublist in lst: \n        # If the length of the sublist is less than the length of the minimum sublist, update the minimum sublist\n        if len(sublist) < len(min_sublist): \n            min_sublist = sublist \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length and minimum sublist\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    # Loop through all sublists in the list\n    for i in range(1, len(lst)):\n        # Check if the length of the current sublist is less than minimum\n        if len(lst[i]) < min_len:\n            # Update minimum length and minimum sublist\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the variables to store the minimum length and the sublist\n    min_len = float('inf') # maximum integer value\n    min_lst = []\n\n    # Loop through the list\n    for i in range(len(lst)): \n        # Find the length of the current sublist\n        curr_len = 0\n        for j in range(i, len(lst)): \n            curr_len += 1\n\n        # Compare the length of the sublist with the minimum length found so far\n        if curr_len < min_len: \n            min_len = curr_len \n            min_lst = lst[i:i+min_len] # sublist from index i to i+min_len\n\n    # Return the minimum sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = None\n    min_sublist = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # finding the minimum length sublist\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n\n    min_length = len(lst[0])\n    min_list = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    # initialize min_len and min_sublist as infinities\n    min_len = float('inf')\n    min_sublist = []\n\n    # iterate over each sublist in lst\n    for sublist in lst:\n        # find the length of the sublist\n        length = len(sublist)\n\n        # check if the length of the sublist is less than min_len\n        if length < min_len:\n            # update min_len and min_sublist\n            min_len = length\n            min_sublist = sublist\n\n    # return the minimum sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') \n    min_list = [] \n    \n    for sublist in lst: \n        if len(sublist) < min_length: \n            min_length = len(sublist) \n            min_list = sublist \n        \n    return min_list "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Remove uppercase substrings from the words\n    no_upper = [word for word in words if not word.isupper()]\n    \n    # Join the words back into a string\n    result =''.join(no_upper)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    uppercase = pattern.findall(str1)\n    # Loop through each uppercase substring and remove it from the string\n    for sub in uppercase:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expressions to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # Looping through all uppercase substrings and removing them from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Remove all uppercase substrings using regular expression\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]', str1)\n    # Remove the uppercase substrings from the string\n    cleaned_str = re.sub(r'[A-Z]', '', str1)\n    return cleaned_str"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][A-Z]+\\b'\n\n    # Use the re.sub() method to remove all uppercase substrings from the input string\n    str2 = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if sublist:\n            new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list of the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # iterate over each sublist in lst\n    for sublist in lst:\n        # if the sublist is not empty (i.e. has at least one element), get the first element\n        if sublist:\n            return sublist[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list and returns a new list where each sublist is extracted and the first element is returned.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize counter to 0\n    counter = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the counter\n            counter += 1\n    \n    # return the count\n    return counter"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            print(list1[j-1:j+i], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize a list to store the results\n    results = []\n    # loop through the list of elements\n    for i in range(len(list1)):\n        # loop through the list of elements again, excluding the current element\n        for j in range(i+1, len(list1)):\n            # append the combination to the results list\n            results.append((list1[i], list1[j]))\n    # return the results list\n    return results"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # empty list to store the combinations\n    combinations = []\n\n    # length of the list\n    n = len(list1)\n\n    # loop through all possible indices of the elements in the list\n    for i in range(1, n+1):\n\n        # loop through all possible indices of the remaining elements\n        for j in range(n-i+1):\n\n            # append the combination to the list\n            combinations.append(list1[j:j+i])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n\n        # Loop through each possible position where the next element can be placed\n        for j in range(len(list1) - i):\n\n            # Append the combination to the list of combinations\n            combinations.append(list1[i:i+j+1])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Sort the list\n    list1.sort()\n\n    # Loop through the list and generate all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Generate the combination\n            combination = list1[i:j]\n\n            # Add the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the input list\n    for i in range(len(list1)):\n        # loop through each element from the current index to the end of the list\n        for j in range(i, len(list1)):\n            # append a tuple containing the current element and the remaining elements to the combinations list\n            combinations.append((list1[i], list1[j]))\n\n    # return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize empty list to store all combinations\n    all_combinations = []\n\n    # sort the list in ascending order\n    list1.sort()\n\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # create a new list with all elements except the current element\n        current_combination = list1[:i] + list1[i+1:]\n\n        # if the current combination is not empty, add it to the list of all combinations\n        if current_combination:\n            all_combinations.append(current_combination)\n\n    # return the list of all combinations\n    return all_combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    int: the maximum product subarray\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes in an array and returns the maximum product subarray of the array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # initialize the maximum product subarray variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    # loop through the array and update the maximum product subarray variables\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input and returns True if all values in the dictionary are same as n.\n    '''\n    count = 0\n    for value in dict.values():\n        if value == n:\n            count += 1\n    return count == len(dict)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = set(dict.values())\n    if len(value) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if len(set(i)) > 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for key, value in dict.items():\n            if n == 1:\n                return False\n            elif value!= dict[n-1]:\n                return False\n        return check_value(dict, n-1)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values() == dict.values()[0])"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    return len(set(values)) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the dictionary keys\n    for key in dict:\n        # Check if the value is the same for all keys\n        if len(set(dict[key])) == 1:\n            count += 1\n    \n    # Return True if all values are the same and False otherwise\n    return count == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if n!= value:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the non-empty items\n    dict2 = {}\n    # Iterate through each key-value pair in the input dictionary\n    for key, value in dict1.items():\n        # Check if the value is not an empty string or a list\n        if value is not None and not isinstance(value, (str, list)) and not value == '':\n            # Add the key-value pair to the output dictionary\n            dict2[key] = value\n    # Return the output dictionary\n    return dict2"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    # find the length of the array\n    n = len(arr)\n    \n    # initialize two pointers, left and right, to start and end of the array\n    left = 0\n    right = n-1\n    \n    # initialize variables to store the maximum product and its subsequence\n    max_product = arr[left] * arr[right]\n    max_subseq = [arr[left], arr[right]]\n    \n    # iterate through the array and find the maximum product and its subsequence\n    for i in range(n-1):\n        # if the current element is greater than the maximum product, update both max_product and max_subseq\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_subseq = [arr[i]]\n        else:\n            # if the current element is not greater than the maximum product, check if it can be included in the subsequence\n            if arr[i] > max_subseq[-1] * arr[right]:\n                max_subseq.append(arr[i])\n            \n            # if the current element is less than the maximum subsequence, check if it can be included in the subsequence\n            elif arr[i] < max_subseq[0] * arr[left]:\n                max_subseq.insert(0, arr[i])\n            \n            # if both conditions are false, then the current element is not part of the subsequence\n            else:\n                pass\n        \n        # update the left pointer to the next element\n        left = i\n        \n        # update the right pointer to the last element\n        right = n-1\n    \n    # convert the max_subseq list to an array and return it\n    return max_subseq"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize variables\n    max_product = float('-inf')\n    prev = float('-inf')\n\n    # Traverse the array from right to left\n    for i in range(n-1, -1, -1):\n        # Calculate the current product of the increasing subsequence ending at index i\n        curr_product = arr[i] * prev\n\n        # Update the maximum product if the current product is greater than the previous maximum product\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # Update the previous element\n        prev = arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Traverse through the array\n    for i in range(1, n):\n        # Update max_ending_here and min_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return max(arr[0], arr[1])\n\n    # Find the maximum subsequence ending at each index\n    max_ending_here = [0] * n\n    max_so_far = [0] * n\n\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1] * arr[i])\n        max_so_far[i] = max(max_so_far[i-1], max_ending_here[i])\n\n    return max_so_far[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # initializing variables\n    max_product = 1\n    min_product = 1\n\n    # iterating through the array\n    for i in range(1, len(arr)):\n        # finding the maximum product formed by this subsequence\n        max_product = max(max_product * arr[i], min_product * arr[i])\n        # finding the minimum product formed by this subsequence\n        min_product = min(max_product * arr[i], min_product * arr[i])\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def product(arr, start, end):\n        if start == end:\n            return arr[start]\n        else:\n            return max(arr[start] * product(arr, start+1, end), arr[end] * product(arr, start, end-1))\n\n    if len(arr) < 2:\n        return 0\n\n    return product(arr, 0, len(arr)-1)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    def is_increasing_subsequence(arr):\n        \"\"\"\n        Check if a given array is increasing.\n        \"\"\"\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n        return True\n\n    if not is_increasing_subsequence(arr):\n        return 0\n\n    left, right = 0, 0\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    while right < len(arr) - 1:\n        while right < len(arr) - 1 and arr[right] == arr[right + 1]:\n            right += 1\n        product = arr[left] * arr[right]\n        max_product_ending_here = max(max_product_ending_here, product)\n        if max_product_ending_here > max_product_so_far:\n            max_product_so_far = max_product_ending_here\n        left += 1\n        right += 1\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_ending_here = arr[0]\n    min_ending_here = arr[1]\n    for i in range(2, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    total = 0\n    for i in range(n-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables for the sum and index values\n    sum_val = 0\n    index = 0\n\n    # loop through the tuple and add the pairwise sums\n    for i in range(len(test_tup) - 1):\n        sum_val += test_tup[i] + test_tup[i + 1]\n        index += 1\n\n    return sum_val, index"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Use a list comprehension to create a new list with the pairwise additions\n    pairwise_additions = [test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)]\n    # Return the list of pairwise additions\n    return pairwise_additions"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the first two elements as 0\n    sum1 = sum(test_tup[:2])\n    # Initialize the sum of the next two elements as 0\n    sum2 = sum(test_tup[2:])\n    # Return the sum of the pairwise addition\n    return sum1 + sum2"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i+1] - test_tup[i]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Invalid input. Tuple should have at least two elements.\"\n    \n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i] - test_tup[i-1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        print(\"The tuple must contain at least two elements.\")\n        return\n    \n    pairwise_sum = 0\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize an empty list to hold the pairwise sums\n    pairwise_sum = []\n    \n    # Loop through the tuple and find the pairwise sums\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n        \n    # Return the list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the remainder of the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        if product >= n:\n            product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Initialize the result variable to 1\n    result = 1\n    \n    # Iterate through the array elements and multiply each element with the result\n    for num in arr:\n        result = (result * num) % n\n        \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize product variable\n    product = 1\n    \n    # Iterate through array and multiply each element with product\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for num in arr: \n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product to be 1\n    product = 1\n    # Loop through the array and multiply each element by the product modulo n\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Check whether a list of numbers contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n            \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(f\"{l[i]} and {l[i+1]} are consecutive numbers.\")\n        else:\n            print(f\"{l[i]} and {l[i+1]} are not consecutive numbers.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list contains consecutive numbers, else it returns False.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.add(item)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns the tuple intersection of their elements.\n    '''\n\n    # Using set() to remove duplicates in the test list1 and test list2\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n\n    # Finding the intersection of the two sets\n    intersection = test_list1.intersection(test_list2)\n\n    # Converting the intersection set back to tuple and returning it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Find the intersection of two lists using a set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a tuple\n    result_list = tuple(intersection)\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the common elements of both tuple lists\n    common_elements = set()\n    \n    # Iterate through both tuple lists and add the common elements to the common_elements set\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                common_elements.add(i)\n    \n    # Return the tuple intersection as a new set\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # sort both the input lists\n    test_list1.sort()\n    test_list2.sort()\n    # initialize an empty set to store the common elements\n    common_elements = set()\n    # loop through the first list\n    for element in test_list1:\n        # check if the element exists in the second list\n        if element in test_list2:\n            # if it does, add it to the common_elements set\n            common_elements.add(element)\n    # return the common_elements set as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    # create a set from both lists to remove duplicates\n    unique_set = set(test_list1 + test_list2)\n    # iterate through the unique set\n    for element in unique_set:\n        # check if the element exists in both lists\n        if (element in test_list1) and (element in test_list2):\n            intersection.append(element)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize a set to store unique elements of both lists\n    unique_elements = set(test_list1 + test_list2)\n    # Initialize an empty list to store the intersection of elements\n    intersection = []\n    # Iterate through the unique elements of both lists\n    for element in unique_elements:\n        # If the element is present in both lists, append it to the intersection list\n        if element in test_list1 and element in test_list2:\n            intersection.append(element)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert both lists to sets to remove duplicates\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # use set intersection to find the intersection of the two sets\n    intersection = list1_set.intersection(list2_set)\n\n    # convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back into a list and sort it\n    sorted_intersection = sorted(list(intersection))\n\n    return sorted_intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into individual characters\n    chars = list(str1)\n    # Loop through the characters and replace the specified character with the new character\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            chars[i] = newch\n    # Convert the list of characters back into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through the string and replace each character with the new character\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # iterate through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is the target character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    # return the modified string\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a list of tuples\n    data = list(dict1.items())\n    # Sort the list of tuples based on value\n    data.sort(key=lambda x: x[1], reverse=True)\n    # Create a new dictionary from the sorted list\n    sorted_dict = dict(data)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # create a sorted counter object from the dictionary\n    sorted_counter = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n\n    # convert the sorted counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value in descending order.\n    '''\n    # Use Counter() function from collections module to count the occurrences of each element in the dictionary\n    count = Counter(dict1)\n\n    # Sort the dictionary by values in descending order using sorted() function\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n\n    # Return the sorted dictionary\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_sum = big_sum(nums[1:])\n        min_sum = big_sum(nums[:1])\n        return max(nums[0], nums[-1]) + min(nums[0], nums[-1])"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Calculate the sum of the largest and smallest values\n    max_value = nums[-1]\n    min_value = nums[0]\n    sum_value = max_value + min_value\n    \n    return sum_value"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Add the largest and smallest values to get the sum of the array\n    sum_of_array = largest + smallest\n    return sum_of_array"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Return the sum of the largest and smallest value\n    return nums[0] + nums[1]"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    string = string.lower()\n    # Return the converted string\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # regular expression to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # find all the lowercase substrings\n    matches = pattern.findall(str1)\n    # join all the lowercase substrings into one string\n    result = ''.join(matches)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings\n    str1 = re.sub(r'(?i)[a-z]+', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'([a-zA-Z]+)')\n    return pattern.sub('', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'([a-zA-Z]+)'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    substrings = re.findall(pattern, str1)\n    new_str = re.sub(pattern, '', str1)\n    return new_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() function to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(pattern, str1)\n\n    # Iterate over the list of lowercase substrings and remove them from the original string\n    for i in range(len(lowercase_substrings)):\n        str1 = str1.replace(lowercase_substrings[i], '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # find the first digit of the number using integer division\n    first_digit = n // 10\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    str_num = str(n)\n    # Convert the string to a list of characters\n    lst_char = list(str_num)\n    # Return the first character of the list of characters\n    return lst_char[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the first digit of the string\n    first_digit = num_str[0]\n    # Convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    str_n = str(n)\n    # Use indexing to get the first character of the string\n    digit = str_n[0]\n    # Return the first character of the string as the first digit of the number\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 1000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    # Check if the number is a positive integer\n    if isinstance(n, int) and n > 0:\n        # Convert the number to a string and then get the first character\n        first_char = str(n)[0]\n        return first_char\n    else:\n        # If the input is not a positive integer, return an error message\n        return \"Error: Input is not a positive integer.\""
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the first digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list of the odd integers in the original list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers as input and returns a list of odd integers only.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers in the original list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initializing an empty list to store odd numbers\n    odd_list = []\n    # iterating through the list\n    for num in list: \n        # checking if the number is odd and appending it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n    # returning the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns the odd numbers in the list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # initialize variables\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # calculate the sum of cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = abs(cubes_sum - sum_sum)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = []\n    for i in range(n+1):\n        cubes.append(i**3)\n    sum_cubes = sum(cubes)\n    sum_numbers = sum(range(1,n+1))\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n\n    # sum of first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_cubes = (n * (n+1) * (2*n+1)) / 6\n    # sum of first n natural numbers\n    sum_natural = (n * (n+1)) / 2\n    # difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n    \n    # sum of first n natural numbers\n    sum_first_n = sum(range(1, n+1))\n    \n    # finding difference\n    diff = cubes - sum_first_n\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize sum of cubes to 0\n    sum_cubes = 0\n    \n    # Initialize sum to 0\n    sum_natural = 0\n    \n    # Loop n times to calculate sum of cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        \n    # Loop n times to calculate sum of natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n        \n    # Calculate difference between sum of cubes and sum of natural numbers\n    difference = sum_cubes - sum_natural\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A of size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                xor = A[i] ^ A[j]\n                if xor % 2!= 0:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and its size N as input and returns the number of odd pairs present in A.\n\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    '''\n    xor_val = 0\n    count = 0\n\n    for i in range(N):\n        xor_val ^= A[i]\n        count += (xor_val & 1)\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if A[i] ^ A[j] % 2!= 0:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    \n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_sum = sum(A[j] for j in range(i+1))\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize a new string to hold the toggled string\n    toggled_string = \"\"\n    \n    # iterate over each character in the input string\n    for char in string:\n        # if the character is a lowercase letter, convert it to uppercase and vice versa\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    \n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char.upper())\n    return ''.join(result)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    digit_sum = 0\n    for i in range(len(str(n1))):\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_of_diffs = 0\n    \n    while diff > 0:\n        digit = diff % 10\n        diff = diff // 10\n        sum_of_diffs += digit\n        \n    return sum_of_diffs"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    # Loop through the digits of each number and calculate the per-digit difference\n    difference = 0\n    for digit in s1:\n        difference += int(digit) - int(s2[digit])\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the absolute difference between the two numbers\n    abs_diff = abs(n1 - n2)\n\n    # Calculate the sum of per-digit differences\n    digit_sum = 0\n    for digit_diff in abs_diff:\n        digit_sum += digit_diff\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the length of the smallest number\n    if len(str(min(n1, n2))) < len(str(max(n1, n2))):\n        length = len(str(min(n1, n2)))\n    else:\n        length = len(str(max(n1, n2)))\n    # Loop through the digits of both numbers\n    sum_diff = 0\n    for i in range(length):\n        # Get the difference between the digits\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        # Add the difference to the sum\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize sum to store the result\n    digit_diff_sum = 0\n\n    # Convert the input numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Iterate through each digit in the input numbers\n    for i in range(len(num1_str)):\n        # Subtract the corresponding digits in the two numbers\n        digit_diff = int(num1_str[i]) - int(num2_str[i])\n        # Add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert numbers to lists of digits\n    digits1 = list(map(int, str(n1)))\n    digits2 = list(map(int, str(n2)))\n\n    # calculate the per-digit difference\n    difference = []\n    for i in range(len(digits1)):\n        difference.append(abs(digits1[i] - digits2[i]))\n\n    # convert the difference list to an integer and return the sum\n    return sum(difference)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # calculate the sum of absolute differences for each digit\n    digit_diff_sum = 0\n    for i in range(10):\n        digit_diff_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # calculate the absolute differences between the digits\n    digit_diffs = [abs(num1_digit - num2_digit) for num1_digit, num2_digit in zip(num1_digits, num2_digits)]\n\n    # calculate the sum of the digit differences\n    digit_diff_sum = sum(digit_diffs)\n\n    return digit_diff_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    for i in range(10):\n        digit_sum = abs(n1 % 10 - n2 % 10)\n        total_sum += digit_sum\n        n1 //= 10\n        n2 //= 10\n    return total_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list and update the variables as needed\n    for i in range(size):\n        current_sum += a[i]\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset it to 0\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_sum:\n            max_sum = max_ending_here\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') #initialize max_sum to negative infinity\n    current_sum = 0 #initialize current_sum to 0\n    \n    for i in range(size): #iterate through the array\n        current_sum += a[i] #add the current element to the current_sum\n        if current_sum > max_sum: #if the current_sum is greater than max_sum, update max_sum\n            max_sum = current_sum\n        elif current_sum < 0: #if the current_sum becomes negative, reset it to 0\n            current_sum = 0\n    \n    return max_sum #return the max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): The input list.\n    size (int): The size of the sublist.\n\n    Returns:\n    int: The sum of the largest contiguous sublist in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    # Initialize variables\n    curr_sum = a[0]\n    max_sum = a[0]\n\n    # Iterate through the list\n    for i in range(1, size):\n        # If the current element is positive, add it to the current sum\n        if a[i] > 0:\n            curr_sum += a[i]\n        # If the current element is negative, subtract it from the current sum\n        else:\n            curr_sum = a[i]\n\n        # If the current sum is greater than the max sum, update the max sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list and its size as input and returns the maximum sum of a contiguous subarray of the given size.\n    \"\"\"\n    # Initialize the max_sum and current_sum to zero\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate over the given list and calculate the sum of current_sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # If current_sum is negative, set it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n        # Update the max_sum if the current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # find the union of the two lists\n    union_list = list(set(list1 + list2))\n\n    # sort the list in ascending order\n    union_list.sort()\n\n    # convert the sorted list back to a tuple\n    sorted_union_tup = tuple(union_list)\n\n    # return the sorted union tuple\n    return sorted_union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # combine the two tuples using the + operator\n    combined_tuple = test_tup1 + test_tup2\n\n    # sort the combined tuple in ascending order\n    sorted_tuple = sorted(combined_tuple)\n\n    # print the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two tuples\n    union = set(test_tup1).union(set(test_tup2))\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(union)\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set operations\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set back to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(\"Union of the elements of the two tuples:\", union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to lists\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n\n    # Find the union of the two lists\n    union_list = list_tup1 + list_tup2\n\n    # Remove duplicates from the union list\n    unique_list = list(set(union_list))\n\n    # Sort the list in ascending order\n    sorted_list = sorted(unique_list)\n\n    # Convert the sorted list back to a tuple\n    sorted_tup = tuple(sorted_list)\n\n    # Return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty set to store the union of the two tuples\n    union_set = set()\n    \n    # Append all the elements of the first tuple to the union set\n    union_set.update(test_tup1)\n    \n    # Append all the elements of the second tuple to the union set\n    union_set.update(test_tup2)\n    \n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Define an empty set to store the union of the elements\n    union_set = set()\n\n    # Use a for loop to iterate through the two input tuples and add each element to the set\n    for tup in [test_tup1, test_tup2]:\n        for element in tup:\n            union_set.add(element)\n\n    # Convert the set back to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Merge the lists using set operations and convert them back to tuples\n    merged_set = set(list1).union(set(list2))\n    return tuple(sorted(merged_set))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of the elements from both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:  # base case\n        return 0\n    else:\n        max_len = 0\n        for i in range(len(lst)):\n            if i == 0:  # If current sublist starts, length of sublist is 1\n                max_len = 1\n            else:\n                max_len = max(max_len, Find_Max_Length(lst[:i]))  # Recursive call to find max length of sublist till that index\n            if max_len == len(lst):  # If max length of sublist till that index is equal to length of entire list, return length of entire list\n                return len(lst)\n        return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialising variables to store the length of the longest sublist and the current sublist\n    max_length = 0\n    curr_sublist = []\n\n    # iterating over the list of elements\n    for i in range(len(lst)):\n        # checking if the current element is the start of a new sublist\n        if i == 0:\n            curr_sublist.append(lst[i])\n        else:\n            # appending the current element to the sublist\n            curr_sublist.append(lst[i])\n            # checking if the current sublist is longer than the current maximum length\n            if len(curr_sublist) > max_length:\n                max_length = len(curr_sublist)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0  \n    curr_length = 0  \n    start = 0  \n    \n    for i in range(len(lst)):  \n        if lst[i] == lst[i-1]:  \n            curr_length += 1  \n        else:  \n            if curr_length > max_length:  \n                max_length = curr_length  \n            curr_length = 1  \n            start = i  \n    \n    if curr_length > max_length:  \n        max_length = curr_length  \n    \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 1   # Initialize max_length as 1\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Initialize current_length as 1\n        current_length = 1\n\n        # Loop through each subsequent element of the sublist\n        for j in range(i+1, len(lst)):\n            # Increment current_length\n            current_length += 1\n\n        # Update max_length if current_length is greater\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # loop through the list of sublists\n    for sublist in lst:\n        # add the length of the current sublist to the current length\n        current_length += len(sublist)\n\n        # update the maximum length if the current length is greater\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        current_sublist = []\n        for j in range(i, len(lst)):\n            current_sublist.append(lst[j])\n        if len(current_sublist) > len(longest_sublist):\n            longest_sublist = current_sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            max_length = max(max_length, len(sub_list))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            sublist = lst[i:j+1]  \n            if len(sublist) > max_len:  \n                max_len = len(sublist)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sub_list = lst[i:]\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 0\n        for j in range(i+1, len(lst)+1):\n            current_length += 1\n            if j <= len(lst):\n                if lst[j-1] in lst[:j]:\n                    break\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts all the values between quotation marks in the string.\n\n    Args:\n        text (str): The input string\n\n    Returns:\n        list: A list of all the extracted values\n    '''\n    pattern = re.compile(r'\"(.*?)\"') # matches any string between double quotes\n    matches = re.findall(pattern, text) # finds all the matches in the input string using the pattern\n    values = [match.strip() for match in matches] # removes any leading or trailing whitespace from the matches\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"') # Define the regular expression pattern to match quotation marks\n    matches = re.findall(pattern, text) # Use the pattern to find all matches in the string\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?P<value>.+?)\"'\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    values = [match.group('value') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n\n    pattern = r'\"(?:\\\\.|[^\"])*\"'  # Match double-quoted strings\n    matches = re.findall(pattern, text)  # Find all matches in the string\n\n    for match in matches:\n        print(match)  # Print the values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([^\\\"]*)|(?<!\\\\)\\'\"'\n    matches = re.finditer(pattern, text, re.MULTILINE | re.DOTALL)\n    values = []\n    for match in matches:\n        if match.group(1) is not None:\n            values.append(match.group(1).strip())\n        else:\n            values.append(match.group(0))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to find values between quotation marks\n    pattern = r'(?<=\")[^\"]+(?=\")'\n    # Use the regular expression pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Create a hash table to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through the frequency table\n    for i in freq:\n        for j in range(1, n//2 + 1):\n            # If the sum of the frequency of the current element and j is less than n\n            if freq[i] + j < n:\n                count += freq[i] * (freq[i] + 1) // 2\n            # If the sum of the frequency of the current element and j is equal to n\n            elif freq[i] + j == n:\n                count += freq[i] * (freq[i] - 1) // 2\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    # Create a set of unique elements from the input array\n    unique_elements = set(arr)\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n    # Loop through all possible pairs of elements in the array\n    for i in range(len(unique_elements)):\n        for j in range(i + 1, len(unique_elements)):\n            # If both elements are unequal, increment the count\n            if unique_elements[i]!= unique_elements[j]:\n                count += 1\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Initialize an empty list to store the characters in the string\n    chars = []\n\n    # Loop through each character in the string\n    for char in word:\n        # Add the current character to the list of characters\n        chars.append(char)\n\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        \n        # add the last digit to the sum of digits\n        sum_of_digits += digit\n        \n        # remove the last digit from the number\n        n //= 10\n        \n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the variable to store the sum of digits\n    total = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 10\n        \n        # add it to the total\n        total += digit\n        \n        # remove the last digit of the number\n        n //= 10\n        \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of characters\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n\n    # Loop through each character in the list of characters and add its digit to the total sum\n    for num in num_list:\n        digit = int(num)\n        total_sum += digit\n\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of characters\n    digits_list = list(str(n))\n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    # Loop through the list of digits and add them to the sum variable\n    for digit in digits_list:\n        sum_of_digits += int(digit)\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n    # iterate over each character in the string\n    for digit in num_str:\n        # convert the character to an integer and add to the sum\n        digit_sum += int(digit)\n    # return the sum of digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        last_digit = n % 10\n        # Add the last digit to the sum\n        sum += last_digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n    # Initialize the sum to 0\n    total = 0\n    # Loop through the list of digits and add each digit to the sum\n    for digit in digits:\n        total += digit\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Convert the integer to a string and loop through each digit\n    for digit in str(n):\n        # Add each digit to the sum variable\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # convert the list to a string to sort it\n    sorted_str = ''.join(sorted(list(str(list1)))))\n    # compare the sorted string with the original string\n    if sorted_str == str(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    if len(lst) == 0:\n        return True\n    elif len(lst) == 1:\n        return True\n    elif lst[0] >= lst[1]:\n        return False\n    else:\n        return issort_list(lst[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if isinstance(list1[i][j], str):\n                list1[i][j] = sorted(list1[i][j])"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a dictionary to store the unique numbers and their corresponding indices\n    unique_nums = {}\n    for i, num in enumerate(nums):\n        if num not in unique_nums:\n            unique_nums[num] = [i]\n        else:\n            unique_nums[num].append(i)\n\n    # create a new list with only the unique numbers\n    unique_nums_list = []\n    for num, indices in unique_nums.items():\n        unique_nums_list.append(num)\n\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Convert all the lists to sets\n    nums_set = set(sum(nums, []))\n\n    # Convert the set back to a list\n    unique_nums = list(nums_set)\n\n    # Return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Creating a set to remove duplicate numbers\n    nums = set(nums)\n    # Converting the set to a list\n    result = list(nums)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store the unique numbers from the lists\n    unique_nums = set()\n    \n    # Iterate through the lists and add each unique number to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    \n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n    nums: a list of lists, where each inner list contains unique numbers\n\n    Returns:\n    a list of lists, where each inner list contains unique numbers without any duplicates\n    \"\"\"\n    # create a set to store unique numbers in the outer list\n    unique_nums = set()\n    # iterate over each inner list in the outer list\n    for inner_list in nums:\n        # iterate over each number in the inner list\n        for num in inner_list:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the set back to a list of lists and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # loop through the lists of numbers\n    for num_list in nums:\n        # add each unique number in the list to the set\n        unique_nums.update(num_list)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create an empty set to store unique numbers\n    unique_set = set()\n    # iterate through the list and add each unique number to the set\n    for num in list_data:\n        if num not in unique_set:\n            unique_set.add(num)\n    # calculate the product of the unique numbers in the set\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # remove duplicates and convert to set\n    product = 1\n    for number in unique_numbers:\n        product *= number # multiply each unique number by the product of the rest\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set from the given list to get the unique numbers\n    unique_numbers = set(list_data)\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Loop through the unique numbers and multiply them together to get the product\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))  # create a set of unique numbers from the list\n    product = 1  # initialize the product to 1\n    \n    for num in unique_nums:  # loop over the unique numbers\n        product *= num  # calculate the product of the number and the product so far\n        \n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_number_product = 1\n    for number in unique_numbers:\n        unique_number_product *= number\n    return unique_number_product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r ** 2 + 2 * 3.14 * r * h + 2 * 3.14 * h ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * (r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    pi = 3.14159\n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of cylinder\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the radius squared and the height squared\n    r2 = r**2\n    h2 = h**2\n    \n    # Calculate the surface area using the formula\n    surface_area = 2*math.pi*r*h + 2*math.pi*r2 + 2*math.pi*h2 + 2*math.pi*r*h2 + 2*math.pi*r*h2\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    surface_area = pi * r ** 2 + 2 * pi * r * h + pi * h ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    '''\n\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    # Check if the length of B is less than or equal to the length of A \n    if len(B) > len(A): \n        return False \n  \n    # Traverse through B and check if all elements of A are present in B \n    i = 0 \n    j = 0 \n    while j < len(B): \n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n        else: \n            i = 0 \n            j += 1 \n  \n    # If we reach the end of B and i is equal to len(A), then all elements of A \n    # are present in B. \n    if i == len(A): \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if B[j] in A:\n            i = A.index(B[j])\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False \n    i = 0 \n    j = 0 \n    while j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n        j += 1 \n    if i == len(A): \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B and returns True if B is a sublist of A or False otherwise.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    # check if the length of A is greater than or equal to the length of B\n    if len(A) >= len(B):\n        # loop through A and check if B is a sublist of A\n        for i in range(len(A) - len(B) + 1):\n            if A[i:i+len(B)] == B:\n                return True\n        # if no sublist found, return False\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False\n\n    for i in range(len(A)): \n        if A[i:i+len(B)]!= B: \n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the sublist is a subsequence of the superlist\n    if B in A:\n        return True\n    \n    # Check if the superlist is a sublist of the sublist\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    # If none of the above checks worked, then the superlist is not a sublist of the sublist\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # extract the last digit of the string\n    last_digit = int(str_n[-1])\n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # extract the last digit of the factorial\n    last_digit_factorial = int(str(factorial)[-1])\n    # return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert n to a string\n    n = str(n)\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Loop through each digit in the string and add it to the last_digit variable\n    for digit in n:\n        last_digit += int(digit)\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Convert the string to a list of digits\n    num_list = list(num_str)\n    \n    # Find the last digit in the list\n    last_digit = int(num_list[-1])\n    \n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # Return the factorial of the number with the last digit\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number into a string\n    str_n = str(n)\n    # Get the last digit of the string\n    last_digit = str_n[-1]\n    # Convert the last digit into an integer and multiply it with 10 to get the factorial of the input number\n    factorial = int(last_digit) * 10\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    n = str(n)\n\n    # Initialize the last digit to 0\n    last_digit = 0\n\n    # Iterate through the characters in the string and calculate the last digit\n    for i in n:\n        last_digit = int(i)\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # initialize variables\n    fact = 1\n    last_digit = 0\n\n    # calculate factorial of n\n    for i in range(1, n+1):\n        fact = fact*i\n\n    # find last digit of factorial\n    while fact > 0:\n        last_digit = fact % 10\n        fact = fact // 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    n = str(n)\n    # Find the length of the string\n    length = len(n)\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Initialize a variable to store the factorial without the last digit\n    factorial = 1\n    # Loop through the length of the string from 0 to length-2\n    for i in range(length-2):\n        # Extract the i-th digit of the number\n        digit = int(n[i])\n        # Calculate the factorial of the digit using recursion\n        factorial *= digit\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return str(n) % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the length of the string\n    length = len(num_str)\n    # Initialize the last digit to zero\n    last_digit = 0\n    # Loop through the string from right to left\n    for i in range(length-1, -1, -1):\n        # Convert the current digit to an integer\n        digit = int(num_str[i])\n        # Multiply the current digit by the last_digit\n        last_digit = digit * last_digit\n    # Return the last_digit\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        print(\"Error: All lists must have the same length.\")\n        return\n    \n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Use a for loop to iterate through each of the input lists\n    for i in range(len(list1)):\n        # Add the element from list1 to the interleaved list\n        interleaved_list.append(list1[i])\n\n        # Add the element from list2 to the interleaved list\n        interleaved_list.append(list2[i])\n\n        # Add the element from list3 to the interleaved list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of the same length and returns a single flat list that contains all the elements of all the input lists.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the shortest list\n    min_length = min(len(list1), len(list2), len(list3))\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Iterate through the shortest list\n    for i in range(min_length):\n        # Append the first element from each list to the interleaved list\n        interleaved_list.append(list1[i] if i < len(list1) else None)\n        interleaved_list.append(list2[i] if i < len(list2) else None)\n        interleaved_list.append(list3[i] if i < len(list3) else None)\n\n    # Add any remaining elements from the shortest list to the end of the interleaved list\n    for i in range(min_length, len(list1)):\n        interleaved_list.append(list1[i])\n    for i in range(min_length, len(list2)):\n        interleaved_list.append(list2[i])\n    for i in range(min_length, len(list3)):\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize a new empty list to hold the interleaved elements\n    interleaved_list = []\n\n    # Loop through each element in each list\n    for i in range(len(list1)):\n        # Append the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of the first list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of the first list to the interleaved list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length and returns a single flat list\n    that is obtained by interleaving the 3 lists.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    \n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the lists and append their elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # return the result list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Create a list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through the tuples\n    for i in range(len1):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    \n    for i in range(len2):\n        if test_tup2[i] not in dissimilar_list:\n            dissimilar_list.append(test_tup2[i])\n    \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create a set of the first tuple and check if it's the same as the second tuple\n    if set(test_tup1) == test_tup2:\n        return set(test_tup1).symmetric_difference(set(test_tup2))\n\n    # create a set of the second tuple and check if it's the same as the first tuple\n    elif set(test_tup2) == test_tup1:\n        return set(test_tup2).symmetric_difference(set(test_tup1))\n\n    # if the sets are not equal, then there are no dissimilar elements\n    else:\n        return set()"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using list comprehension to convert the tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Using list of sets to find the dissimilar elements\n    dissimilar = list(set(lst1) ^ set(lst2))\n\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a dictionary to store the counts of each element in the tuples\n    count_dict = {}\n    for tup in (test_tup1, test_tup2):\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Find the dissimilar elements by iterating over the elements in the first tuple\n    dissimilar_elems = []\n    for elem in test_tup1:\n        if count_dict[elem] == 1:\n            dissimilar_elems.append(elem)\n\n    return dissimilar_elems"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set(test_tup1).symmetric_difference(test_tup2)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is the same in both tuples\n        if test_tup1[i]!= test_tup2[i]:\n            # If it's not the same, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the\n    dissimilar elements.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element of the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If it is not, add it to the list of dissimilar elements\n            dissimilar_list.append(element1)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a new tuple to store even elements\n    even_tuple = ()\n    # loop through each element in the original tuple\n    for item in test_tuple:\n        # check if the element is even\n        if even_fnc(item):\n            # if it is, add it to the even tuple\n            even_tuple += (item,)\n    # return the even tuple\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == list:\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif type(i) == tuple:\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_fnc(item)\n        else:\n            if even_fnc(item):\n                print(item)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result_tuple.append(item)\n    return result_tuple\n\n\ndef is_even(num):\n    '''\n    Write a function to determine if a number is even or odd.\n    '''\n    return num % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_tuple.append(even_fnc(element))\n        elif even_fnc(element):\n            even_tuple.append(element)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Create an empty list to store even elements\n    even_list = []\n    \n    # Loop through each element in the tuple\n    for i in test_tuple: \n    \n        # Check if the element is even using the even_fnc function\n        if even_fnc(i): \n    \n            # If the element is even, add it to the even_list\n            even_list.append(i)\n    \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store even elements\n    even_list = []\n    \n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Check if the element is even using the even_fnc function\n        if even_fnc(element):\n            # Add the even element to the even_list\n            even_list.append(element)\n    \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize a new empty list for the even elements\n    even_list = []\n\n    # Iterate through each element in the input tuple\n    for element in test_tuple:\n        # Check if the element is even\n        if even_fnc(element):\n            # If the element is even, append it to the even list\n            even_list.append(element)\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if type(tup) == tuple:\n            result.append(even_ele(tup, even_fnc))\n        else:\n            if even_fnc(tup):\n                result.append(tup)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*s*b) + (s*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area using the formula for a square pyramid\n    surface_area = (1/3) * b * b * s\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # finding the surface area of the base using Heron's formula\n    area = (b**2 + s**2 + b**2 - s**2) / 2\n\n    # finding the surface area of the side\n    side_area = (b**2 + s**2 + b**2 - s**2)**(1/2)\n\n    # finding the surface area of the pyramid\n    pyramid_area = area * side_area\n\n    # printing the result\n    print(\"Surface Area of the Square Pyramid =\", pyramid_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 6*b + 6*s + 12"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 2 * b * b + 2 * s * s - 6 * b * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b + 2*b + 6*s) * s/2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4*b*s + 6*b*s**2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # calculate the length of one side of the pyramid\n    length = 2*b\n    \n    # calculate the number of faces in the pyramid\n    num_faces = int(s/length)\n    \n    # calculate the surface area of each face of the pyramid\n    surface_area = (b**2)*num_faces\n    \n    # return the total surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s + b*s + b*(s-1) + b*(s-1) + b*(s-1)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n) = (2n)!/(n!(n-1)!), where n is the given integer.\n\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return (2 * n) * catalan_number(n - 1) // (n * (n - 1))\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Base cases\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the num-th Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        n = num // 2\n        return catalan_number(n) * (2 * n + 1) / (n + 1) + catalan_number(n) * (2 * n + 1) / (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2*catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n+1) * catalan_number(n-1) - catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The order of the Catalan number to find.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1) // (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2) // (2*n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use regular expression to match all adverbs ending with ly\n    matches = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    \n    # initialize list to store the positions of the matches\n    positions = []\n    \n    # loop through the matches and store their positions in the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # return the list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # Use the re.finditer() method to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Create an empty list to store the adverb positions and their lengths\n    adverb_positions = []\n    # Iterate over all the matches found by the re.finditer() method and extract the positions and lengths of the adverbs\n    for match in matches:\n        start_position = match.start()\n        end_position = match.end()\n        length = end_position - start_position\n        # Add the adverb position and length to the list of adverb positions and lengths\n        adverb_positions.append((start_position, length))\n    # Sort the list of adverb positions and lengths in ascending order of their starting positions\n    adverb_positions.sort()\n    # Return a list of tuples containing the adverb positions and their lengths\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern to find adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b[a-zA-Z]+ly\\b', re.IGNORECASE)\n\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Iterate through the matches and print the adverb and its position in the text\n    for i, match in enumerate(matches):\n        print(f\"Adverb '{match}' found at position {i+1}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # Match the pattern in the given text using re.findall() function\n    adverbs = re.findall(pattern, text)\n\n    # If there are no adverbs in the text, return None\n    if not adverbs:\n        return None\n\n    # Iterate over the list of adverbs and find their positions in the text\n    for i, adv in enumerate(adverbs):\n        # Find the position of the adverb in the text\n        pos = text.find(adv)\n\n        # If the position is found, return a tuple of the adverb and its position\n        return (adv, pos)\n\n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[A-Za-z]+ly\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Iterate over the matches and print their positions and lengths\n    for i, match in enumerate(matches):\n        print(f'Match {i+1}: {match}')\n        print(f'Positions: {match.start()}, {match.end()}')\n        print(f'Length: {match.end() - match.start()}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)$'\n    # find all occurrences of adverbs ending with ly in the text using re.findall()\n    matches = re.findall(pattern, text)\n    # iterate over the matches and print their positions and values\n    for i, match in enumerate(matches):\n        print(f'Adverb {i+1}: {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Loop through each match and append its position to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b(\\w+)\\s*(ly)$\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items in descending order and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size is greater than n, remove the smallest item and add the next item to the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items from the heap in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a heap to store the n most expensive items\n    heap = []\n    # iterate over the dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # if the heap size is greater than n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for price, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,item)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    # Initialize the min heap with the first n items\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    # Update the heap with the remaining items\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their price\n    items.sort(key=lambda x: x[1])\n\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        max_heap.append(items[i][0])\n\n    # Extract the top n items from the heap\n    for i in range(n, len(items)):\n        if items[i][1] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, items[i][0])\n\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items in the dataset\n    for item in items:\n        # Add the item to the min heap if the heap is not full\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and the current item is less than or equal to the smallest item in the heap,\n        # remove the smallest item from the heap and add the current item to the heap\n        elif len(min_heap) == n and item <= min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n            \n    # Return the n most expensive items in the dataset\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    heap = []\n    \n    # add each item to the heap\n    for item in items:\n        heapq.heappush(heap, -item)\n    \n    # return the n most expensive items\n    return [-item for item in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        return []\n    else:\n        return [l[n]] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # if n is greater than the length of the list, return the original list\n    if n > len(l):\n        return l\n    \n    # create a new list with the first n elements from l\n    part1 = l[:n]\n    \n    # create a new list with the remaining elements from l\n    part2 = l[n:]\n    \n    # return the concatenated list with part1 at the end\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    i = 0\n    while i < len(l):\n        if i == n:\n            new_list.extend(l[:i+1])\n            break\n        new_list.append(l[i])\n        i += 1\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: The length of the list must be greater than or equal to the nth element.\"\n    else:\n        lst = l[n:]\n        lst.extend(l[:n])\n        return lst"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if n < mid:\n        return l[:n] + l[n:] + [l[mid]]\n    else:\n        return [l[0]] + split_Arr(l[1:], n - mid - 1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # get the length of the list\n    length = len(l)\n\n    # check if the nth element is in the list\n    if n > length:\n        return \"Error: n is greater than the length of the list.\"\n\n    # split the list at the nth element\n    first_part = l[:n]\n    last_part = l[n:]\n\n    # concatenate the first and last parts to form the new list\n    new_list = first_part + last_part\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[:n]\n    return split_list + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0 or n > len(l):\n        return None\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Convert the list to a tuple\n    tuple_x = tuple(listx)\n    return tuple_x"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Find the largest value in the list\n    largest = max(nums)\n    \n    # Find the smallest value in the list\n    smallest = min(nums)\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Return the difference between the first and last elements\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the list and find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    \n    # Find the maximum value in the list\n    max_val = max(nums)\n    \n    # Find the minimum value in the list\n    min_val = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables for maximum and minimum values\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # loop through the list and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # find the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Calculate the difference between the two values\n    diff = max_num - min_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i**2:\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    squares = []\n\n    # Loop through all numbers from a to b\n    for i in range(a, b+1):\n        # Check if the number is a perfect square\n        num_sqrt = i ** 0.5\n        if int(num_sqrt) ** 2 == i:\n            # If the number is a perfect square, add it to the list\n            squares.append(i)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns a list of all perfect squares between a and b.\n    \"\"\"\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if the current number is a perfect square\n        if i**0.5 == int(i**0.5):\n            # If it is a perfect square, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i ** 2 == sum(int(x) ** 2 for x in str(i)):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        j = 1\n        square = i\n        while square * square <= b:\n            j += 1\n            square += i\n        if j == 1:\n            squares.append(square)\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        if i**2 == a:\n            squares.add(i)\n        elif i**2 == b:\n            squares.add(i)\n        else:\n            j = int(i**0.5)\n            if j**2 == i:\n                squares.add(j)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i*i == a**2 or i*i == b**2:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        square = num * num\n        if square == num:\n            print(num, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    if b == 0:\n        return []\n    elif a == b:\n        return [a]\n    elif a < b:\n        squares = perfect_squares(a, b-1)\n        squares.append(a*a)\n        return squares\n    else:\n        squares = perfect_squares(a-1, b)\n        squares.append(a*a)\n        return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        j = i*i\n        while j <= b:\n            squares.append(j)\n            j += i\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan(y/x)\n    return r.real, r.imag, theta.real, theta.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): the length of the radius vector\n    theta (float): the angle between the x-axis and the radius vector\n\n    Returns:\n    x (float): the x-coordinate of the rectangular point\n    y (float): the y-coordinate of the rectangular point\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): The radius of the polar coordinate.\n        theta (float): The angle of the polar coordinate in radians.\n\n    Returns:\n        tuple: A tuple containing the x and y coordinates of the rectangular coordinate.\n\n    Raises:\n        ValueError: If either r or theta is a complex number.\n    \"\"\"\n    if isinstance(r, complex) or isinstance(theta, complex):\n        raise ValueError(\"r and theta must be real numbers.\")\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    return r * cmath.cos(phi), r * cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to complex number\n    z = x + y*1j\n\n    # Convert complex number to rectangular coordinates\n    x = cmath.rect(z)\n    y = cmath.rect(z.imag)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Inputs:\n    r - float, radius of the point\n    phi - float, angle in radians\n\n    Outputs:\n    x - float, x-coordinate of the point\n    y - float, y-coordinate of the point\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function takes in two inputs, x and y, which represent the polar coordinates of a point.\n    It returns the corresponding rectangular coordinates in a tuple.\n    '''\n\n    # Convert polar coordinates to rectangular coordinates\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n\n    # Return the converted rectangular coordinates as a tuple\n    return (rect_x, rect_y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = last\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or not\n    if len(newList) == 0:\n        return \"The list is empty.\"\n    \n    # Get the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # Create a new list with the swapped elements\n    newList = [last_element, first_element]\n    \n    # Return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # find the length of the list\n    length = len(newList)\n    \n    # check if the list has less than 2 elements\n    if length < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is of type list or not\n    if not isinstance(newList, list):\n        print(\"Input must be of type list\")\n        return\n    \n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Input list must have at least two elements\")\n        return\n    \n    # Check if the first and last elements of the list are already swapped\n    if newList[0] == newList[-1]:\n        print(\"The list is already sorted\")\n        return\n    \n    # Swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # Check if the list is empty or not\n    if len(newList) == 0:\n        print(\"The list is empty.\")\n        return\n    \n    # Check if the list has only one element\n    if len(newList) == 1:\n        print(\"The list has only one element.\")\n        return\n    \n    # Swap the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    # Print the updated list\n    print(\"Updated List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function swaps the first and last elements of a list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum = 0\n    for i in range(n+1): \n        for j in range(i, min(i+k, n)+1): \n            sum += (j-i)/(j-i+1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result *= (n-i) // (i+1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Initialize the product variable to 1\n    product = 1\n    # Loop through the first n-k numbers of binomial coefficients\n    for i in range(n-k+1):\n        # Multiply the product by the binomial coefficient\n        product *= (n-i)\n        # Add the product to the sum\n        sum += product\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    # Calculating the factorial of n using recursion\n    def fact(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    # Calculating the factorial of n-k using recursion\n    def fact_k(n,k):\n        if k == 0 or n == 1:\n            return 1\n        else:\n            return n * fact_k(n-1,k-1)\n    \n    # Calculating the binomial coefficient using recursion\n    def binomial(n,k):\n        if n == 0 or k == 0 or k > n:\n            return 0\n        elif k == 1 or k == n:\n            return 1\n        else:\n            return binomial(n-1,k-1) + binomial(n-1,k)\n    \n    # Calculating the sum of the product of consecutive binomial co-efficients\n    def sum_product(n,k):\n        sum_prod = 0\n        for i in range(1, k+1):\n            sum_prod += binomial(n,i) * fact(n-i) * fact_k(n,i)\n        return sum_prod\n    \n    # Returning the sum of the product of consecutive binomial co-efficients\n    return sum_product(n,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the variables for the sum and the product of binomial co-efficients\n    sum_binomial_coeffs = 0\n    product_binomial_coeffs = 1\n\n    # Calculate the product of binomial co-efficients using a loop\n    for i in range(1, n+1):\n        product_binomial_coeffs *= i\n\n    # Calculate the sum of the product of binomial co-efficients\n    sum_binomial_coeffs = product_binomial_coeffs / (factorial(n) * factorial(k) * factorial(n-k))\n\n    return sum_binomial_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n\n    # Initialize the sum of consecutive binomial coefficients to 1\n    sum_coeff = 1\n\n    # Calculate the factorial of n and k\n    fact_n = 1\n    for i in range(1,n+1):\n        fact_n *= i\n\n    fact_k = 1\n    for i in range(1,k+1):\n        fact_k *= i\n\n    # Calculate the factorial of n-k\n    fact_n_minus_k = 1\n    for i in range(1,n-k+1):\n        fact_n_minus_k *= i\n\n    # Calculate the product of the factorials\n    product = fact_n // (fact_k * fact_n_minus_k)\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(1,k+1):\n        sum_coeff *= i\n        sum_coeff *= (n-i+1)\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        result = 0\n        for i in range(1, k + 1):\n            result += n * binomial_Coeff(n - 1, i)\n        return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Define regular expression pattern to match leading zeros in an IP address\n    pattern = re.compile(r'^\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}$')\n\n    # Check if the input string matches the pattern\n    if pattern.match(ip):\n        # Remove leading zeros from the IP address\n        ip = ip.replace('0.', '.')\n    else:\n        print('Invalid IP address format')\n\n    # Return the modified IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    match = re.match(pattern, ip)\n    if match:\n        ip_addr = match.group(0)\n        new_ip_addr = ''.join(filter(lambda x: x!= '0', ip_addr.split('.')))\n        return new_ip_addr\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('0.0.0.0', '0.0.0')\n    ip = ip.replace('0.0.0', '0.0')\n    ip = ip.replace('0.0', '0')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function will remove the leading zeroes from an IP address.\n    '''\n    # Convert IP to list of integers\n    ip_list = list(map(int, ip.split('.')))\n\n    # Iterate over the list of integers and remove the first zero\n    for i in range(len(ip_list)):\n        if ip_list[i] == 0:\n            ip_list.pop(i)\n            break\n\n    # Convert list of integers back to string\n    ip_string = '.'.join(str(x) for x in ip_list)\n\n    return ip_string"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\d)\\.0\\.0\\.0', r'\\1', ip)\n    ip = re.sub(r'0\\.(\\d)\\.0\\.0', r'0.\\1', ip)\n    ip = re.sub(r'0\\.0\\.(\\d)\\.0', r'0.0.\\1', ip)\n    ip = re.sub(r'0\\.0\\.0\\.(\\d)', r'0.0.0.\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern for IPv4 address\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$'\n\n    # Check if the input matches the IPv4 pattern\n    if re.match(pattern, ip):\n        # Convert the input to a list of integers\n        ip_list = [int(i) for i in ip.split('.')]\n        # Loop through the list and remove leading zeroes\n        for i in range(len(ip_list)):\n            if ip_list[i] == 0:\n                ip_list[i] = 255\n        # Convert the list of integers back to a string\n        ip = '.'.join(str(i) for i in ip_list)\n        return ip\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Use regex to match leading zeroes and remove them\n    ip = re.sub(r'^(0{1,3}\\.){3}(0{1,3})$', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2!= 0]\n\n    if len(evens) == 0:\n        return 0\n    elif len(odds) == 0:\n        return max(evens)\n    else:\n        return evens[0] - odds[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = None\n    odd_first = None\n    for i in list1:\n        if i % 2 == 0:\n            if even_first is None:\n                even_first = i\n            else:\n                even_first = i - even_first\n        else:\n            if odd_first is None:\n                odd_first = i\n            else:\n                odd_first = i - odd_first\n    if even_first is not None and odd_first is not None:\n        return even_first - odd_first\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = 0\n    \n    if even_num % 2 == 0:\n        diff = odd_num - even_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Returns the difference of the first even and first odd numbers of the list.\n\n    Parameters:\n    lst (list): a list of integers\n\n    Returns:\n    int: the difference of the first even and first odd numbers of the list\n    \"\"\"\n    even_first = None\n    odd_first = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_first is None:\n                even_first = num\n            else:\n                even_first = even_first - num\n        else:\n            if odd_first is None:\n                odd_first = num\n            else:\n                odd_first = odd_first - num\n\n    if even_first is None or odd_first is None:\n        return None\n    else:\n        return even_first + odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Loop through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    # Return the difference of the even and odd numbers\n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers in the list\n    even = [x for x in list1 if x % 2 == 0][0]\n    odd = [x for x in list1 if x % 2!= 0][0]\n    # Return the difference between the two numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least 2 elements.\"\n    if not all(isinstance(i, int) for i in list1):\n        return \"All elements in the list should be integers.\"\n    \n    even_first = list1[0]\n    odd_first = list1[1]\n    \n    if even_first % 2 == 0 and odd_first % 2 == 1:\n        diff = even_first - odd_first\n        return diff\n    else:\n        return \"The difference between the first even and first odd number is not found.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    '''\n    # Find the first even number\n    for num in list1:\n        if num % 2 == 0:\n            break\n    else:\n        return \"No even numbers found in the list.\"\n    \n    # Find the first odd number\n    for num in list1:\n        if num % 2!= 0:\n            break\n    else:\n        return \"No odd numbers found in the list.\"\n    \n    # Find the difference between the first even and first odd numbers\n    diff = num - list1[0]\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    diff = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            diff += 1\n            if diff > 1:\n                return 1\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the XOR of two numbers\n    xor = num1 ^ num2\n\n    # Calculate the number of ones in the XOR number\n    ones = xor.bit_length()\n\n    # Calculate the number of swaps required\n    swaps = 0\n    for i in range(ones):\n        # Get the positions of the bits in the XOR number\n        pos1 = xor.bit_length() - 1 - i\n        pos2 = xor.bit_length() - 1 - (i + 1)\n\n        # Swap the bits at positions pos1 and pos2 if they are equal\n        if xor & (1 << pos1) == (1 << pos1) and xor & (1 << pos2) == (1 << pos2):\n            xor ^= (1 << pos1) ^ (1 << pos2)\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to integers\n    int1 = int(str1,2)\n    int2 = int(str2,2)\n\n    # Find the maximum common prefix of the two binary strings\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n\n    # Calculate the minimum number of swaps required to convert the two binary strings\n    swaps = 0\n    j = 0\n    while j < len(str1):\n        if str1[j]!= str2[j]:\n            swaps += 1\n            # Swap the characters at positions i and j of the binary strings\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:j] + str2[j+1:]\n            # Reverse the string at position i\n            str1 = str1[:i] + str1[i:][::-1] + str1[i+1:]\n            str2 = str2[:j] + str2[j:][::-1] + str2[j+1:]\n            swaps += 1\n        j += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary form\n    binary_str1 = bin(int(str1, 2))[2:].zfill(len(str1))\n    binary_str2 = bin(int(str2, 2))[2:].zfill(len(str2))\n\n    # Check if the binary strings are of equal length\n    if len(binary_str1)!= len(binary_str2):\n        return \"Error: Binary strings are not of equal length\"\n\n    # Initialize a variable to store the count of swaps required\n    swap_count = 0\n\n    # Iterate over the characters of the binary strings\n    for i in range(len(binary_str1)):\n        # If the characters are not equal, swap them\n        if binary_str1[i]!= binary_str2[i]:\n            swap_count += 1\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert strings to binary\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n\n    # Convert binary numbers to lists of digits\n    digit1 = []\n    while num1:\n        digit1.append(num1%10)\n        num1 //= 10\n    digit2 = []\n    while num2:\n        digit2.append(num2%10)\n        num2 //= 10\n\n    # Compare lists of digits\n    i = 0\n    j = 0\n    while i < len(digit1) and j < len(digit2):\n        if digit1[i] < digit2[j]:\n            i += 1\n        elif digit1[i] > digit2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    # Count minimum number of swaps required\n    min_swaps = i + j\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # initialize dp table with all zeros\n    dp = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)]\n\n    # base case: no swaps needed if strings are the same\n    if str1 == str2:\n        return 0\n\n    # fill dp table with minimum number of swaps required to convert each digit of each string\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            # if digits are same, no swaps required\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            # if digits are different, insert or delete digit in string 1\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    # return the minimum number of swaps required\n    return dp[len(str1)][len(str2)]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two variables to store the lengths of both strings\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # Initialize a variable to store the maximum value of both strings\n    max_val = max(len1, len2)\n\n    # Initialize a variable to store the minimum number of swaps required to convert one binary number to another\n    min_swaps = 0\n\n    # Loop through all possible positions i of str1 and str2\n    for i in range(max_val):\n        # If str1[i] and str2[i] are equal, skip it and continue to the next position\n        if str1[i] == str2[i]:\n            continue\n\n        # If str1[i] is 0 and str2[i] is 1, then a swap is required\n        if str1[i] == '0' and str2[i] == '1':\n            min_swaps += 1\n\n        # If str1[i] is 1 and str2[i] is 0, then a swap is required\n        elif str1[i] == '1' and str2[i] == '0':\n            min_swaps += 1\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to lists of bits\n    bits1 = [int(bit) for bit in str1[::-1]]\n    bits2 = [int(bit) for bit in str2[::-1]]\n\n    # Initialize the swaps counter to 0\n    swaps = 0\n\n    # Iterate over the bits of the two binary strings\n    for i in range(len(bits1)):\n        # If the bits are different, swap them\n        if bits1[i]!= bits2[i]:\n            # Increment the swaps counter\n            swaps += 1\n            # Swap the bits\n            bits1[i], bits2[i] = bits2[i], bits1[i]\n\n    # Return the minimum number of swaps required to convert the two binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of swaps\n    swaps = 0\n\n    # Compare each bit of the binary strings\n    while num1!= num2:\n        # If the bits are different, swap the bits and increment the number of swaps\n        if num1 < num2:\n            num1 = (num1 << 1) | (num2 & 1)\n            num2 >>= 1\n            swaps += 1\n        else:\n            num2 = (num2 << 1) | (num1 & 1)\n            num1 >>= 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # create a list to store the number of swaps required for each bit position\n    swaps = []\n    # loop through the binary strings\n    for i in range(len(str1)):\n        # calculate the XOR of the i-th bit of str1 and str2\n        xor = int(str1[i]) ^ int(str2[i])\n        # loop through the bits of the binary string to find the number of swaps required\n        for j in range(len(str1[i])):\n            # check if the j-th bit of xor is 1\n            if xor & (1 << j):\n                # add 1 to the swap count for this bit position\n                swaps.append(1)\n            else:\n                # add 0 to the swap count for this bit position\n                swaps.append(0)\n    # calculate the minimum number of swaps required\n    min_swaps = min(swaps)\n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # Recursively calculate the size of the tuple\n            total_size += tuple_size(element)\n        elif isinstance(element, list):\n            # Recursively calculate the size of the list\n            total_size += list_size(element)\n        else:\n            # If the element is not a tuple or list, simply add its size to the total size\n            total_size += sys.getsizeof(element)\n    return total_size\n\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    total_size = 0\n    for element in list_list:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Recursively calculate the size of the list\n            total_size += list_size(element)\n        else:\n            # If the element is not a list, simply add its size to the total size\n            total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Use the sys module to find the size of the object in memory\n    # (assuming it is an immutable data type)\n    import sys\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Convert the tuple list to bytes\n    byte_list = bytearray(tuple_list)\n\n    # Calculate the size of the bytes list\n    size = len(byte_list)\n\n    # Convert the size to bytes\n    size_bytes = size.to_bytes(8, byteorder='big')\n\n    # Combine the bytes list and the size bytes list\n    result = byte_list + size_bytes\n\n    return result"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Returns the kth smallest element in the two sorted arrays.\n    \"\"\"\n    # Merge the two arrays into one sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Calculate the index of the kth smallest element\n    index = k - 1\n\n    # Search for the kth smallest element in the merged array\n    for i in range(len(merged_arr)):\n        if merged_arr[i] == index:\n            return i\n\n    # If the kth smallest element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k or len(arr2) < k:\n        return \"Error: k must be less than the sum of the lengths of the two arrays.\"\n    \n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n            \n    return \"Error: kth element not found in the arrays.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n\n    Args:\n        arr1 (list): List of integers sorted in non-decreasing order.\n        arr2 (list): List of integers sorted in non-decreasing order.\n        k (int): The position of the element to find.\n\n    Returns:\n        The kth smallest element in the two sorted arrays.\n    \"\"\"\n    # Initialize variables\n    i, j = 0, 0\n    kth = None\n\n    # Loop until we find the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            kth = arr1[i]\n            k -= 1\n            i += 1\n        else:\n            kth = arr2[j]\n            j += 1\n\n    # If we find the kth smallest element, return it\n    if k == 1:\n        return kth\n    elif k == 2:\n        return arr1[-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    kth = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            kth = arr1[i]\n            i += 1\n        else:\n            kth = arr2[j]\n            j += 1\n        if k == kth:\n            return kth\n        k -= 1\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            k -= 2\n            i += 1\n            j += 1\n\n    # If any of the arrays is exhausted, return the remaining elements of the other array\n    return arr1[i:] + arr2[j:]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    total_elements = len(arr1) + len(arr2)\n\n    # Find the number of elements in the first array\n    first_elements = len(arr1)\n\n    # Find the number of elements in the second array\n    second_elements = len(arr2)\n\n    # If k is less than the total number of elements, we need to find k in the first half of both arrays\n    if k < total_elements:\n        # Find the kth element in the first half of both arrays\n        kth_element = find_kth(arr1[:first_elements], arr2[:second_elements], k)\n\n        # If kth element is found in the first half of both arrays, return it\n        if kth_element is not None:\n            return kth_element\n\n        # If kth element is not found in the first half of both arrays, find it in the second half of both arrays\n        else:\n            return find_kth(arr1[first_elements:], arr2[second_elements:], k - first_elements)\n\n    # If k is equal to the total number of elements, we have found the kth element in both arrays\n    elif k == total_elements:\n        return k\n\n    # If k is greater than the total number of elements, we need to find k in the second half of both arrays\n    else:\n        return find_kth(arr1[first_elements:], arr2[second_elements:], k - first_elements)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    n = int(n)\n    if n < 10:\n        return False\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A function to check whether a number is an Armstrong number or not.\n    \"\"\"\n    if num < 10:\n        return False\n    else:\n        power = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            power += digit ** 3\n            temp //= 10\n        return num == power"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # initialize variables to store the sum of cubes and digits of the number\n    sum_of_cubes = 0\n    digits = 0\n\n    # convert the number to a string and split it into digits\n    number_str = str(number)\n    for digit in number_str:\n        digits += int(digit)\n\n    # calculate the sum of cubes of digits\n    for i in range(1, digits + 1):\n        sum_of_cubes += i ** digits\n\n    # compare the sum of cubes with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number and False otherwise.\n    A number is said to be an Armstrong number if the sum of its digits raised to the power of the number of digits is equal to the number itself.\n    \"\"\"\n    digits_sum = 0\n    power = 0\n    num_digits = len(str(number))\n\n    while number > 0:\n        digit = number % 10\n        digits_sum += digit ** power\n        number //= 10\n        power += 1\n\n    return digits_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    num_str = str(number)\n    power = len(num_str)\n    sum_of_squares = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum_of_squares += digit ** power\n        num //= 10\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    sum = 0\n    for digit in num_str:\n        power = len(num_str)\n        sum += int(digit) ** power\n    \n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    num = number\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    sum_of_powers = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_powers += digit ** len(num_str)\n    return number == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to string and calculate the sum of its digits raised to the power of the number of digits\n    # if the result of this process is equal to the original number, the number is an armstrong number\n    digits = len(str(number))\n    total = 0\n    temp_num = number\n    while temp_num > 0:\n        digit = temp_num % 10\n        total += digit ** digits\n        temp_num //= 10\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(number)\n    # Calculate the length of the string\n    length = len(num_str)\n    # Initialize the sum of the digits to zero\n    sum_of_digits = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # If the length of the string is equal to the sum of digits, the number is armstrong\n    if length == sum_of_digits:\n        return True\n    # Otherwise, the number is not armstrong\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    n = int(input(\"Enter the number of natural numbers to calculate their sum and average: \"))\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n\n    average = sum/n\n\n    print(\"Sum of first\", n, \"natural numbers:\", sum)\n    print(\"Average of first\", n, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    for i in range(number):\n        sum_of_numbers += i\n        count += 1\n    \n    average = sum_of_numbers / count\n    \n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(1, number + 1):\n        sum_ += i\n    \n    average = sum_ / number\n    \n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum\n        sum += i\n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum / count\n    \n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count\n    sum = 0\n    count = 0\n    \n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        # add i to sum and increment count\n        sum += i\n        count += 1\n    \n    # calculate average\n    average = sum / count\n    \n    # return sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"The sum of the first {} natural numbers is: {}\".format(n, total))\n    print(\"The average of the first {} natural numbers is: {}\".format(n, average))\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a Python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    repeated_char = None\n    \n    for char in str1:\n        if str1.count(char) > 1 and repeated_char is None:\n            repeated_char = char\n    \n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If the string contains no repeated character, it will return None.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character with frequency greater than 1\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n\n    # If no character has frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the dictionary and return its index\n    for index, value in enumerate(char_count.values()):\n        if value > 1:\n            return index\n    \n    # If no repeated characters are found, return -1\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = set()  # create an empty set to store unique characters\n    repeated_char = None  # initialize the repeated character variable\n    \n    for char in str1:\n        if char in char_set:\n            if repeated_char is None:\n                repeated_char = char  # update the repeated character if it hasn't been found yet\n            elif repeated_char!= char:\n                # if the current character is not the repeated character, it means we've found the first repeated character\n                return repeated_char\n        else:\n            char_set.add(char)  # add the current character to the set of unique characters\n    \n    return repeated_char  # return the first repeated character if it hasn't been found yet"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # convert string to set to remove duplicate characters\n    str1 = set(str1)\n    # iterate through the string and keep track of the first repeated character\n    first_repeated = None\n    for char in str1:\n        if str1.count(char) > 1 and (first_repeated is None or char < first_repeated):\n            first_repeated = char\n    # return the first repeated character\n    return first_repeated"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_list = []\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        # Loop through all previous numbers in the list\n        for j in lucid_list:\n            # Check if i is equal to j + k or i is equal to j - k\n            if i == j + k or i == j - k:\n                is_lucid = False\n                break\n        # If i is a lucid number, add it to the list\n        if is_lucid:\n            lucid_list.append(i)\n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                break\n        else:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    current = 2\n    while current <= n:\n        if is_lucid(current):\n            lucid_numbers.append(current)\n        current += 1\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a number is a lucid number.\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(1, n+1):\n        if all(int(str(i)[j]) == int(str(i)[j-1]) + 1 for j in range(1, len(str(i)))):\n            lucid_set.add(i)\n    return sorted(list(lucid_set))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 1 and i ** 2 <= n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        for j in range(i+1):\n            ludic_numbers.append(i**j)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            j = 3\n            while j <= int(i**0.5):\n                if i % j == 0:\n                    break\n                j += 2\n        else:\n            j = 5\n            while j <= int(i**0.5):\n                if i % j == 0:\n                    break\n                j += 4\n        if i not in ludic_list:\n            ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = [2]\n    while True:\n        ludic.append(ludic[-1] + ludic[-2])\n        if ludic[-1] > n:\n            break\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store the lucid numbers\n    lucid_list = []\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a lucid number\n        if i % sum([2**j for j in range(int(math.log2(i))+1)]) == 0:\n            # add i to the list of lucid numbers\n            lucid_list.append(i)\n    \n    # return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n < 2:\n        return []\n    lucid = []\n    for i in range(2, n+1):\n        lucid.append(2*i-1)\n    return lucid"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string by spaces\n    words = s.split()\n    # Reverse the order of words\n    words.reverse()\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back together with spaces in between\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n        \n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words in-place\n    words.reverse()\n\n    # Convert the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A simple function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    The main function that checks if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return \"The number is a prime number.\"\n    else:\n        return \"The number is not a prime number.\""
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # if no divisor is found, then the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns its corresponding value in radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        match_str = match.group(0)\n        match_start = match.start()\n        match_end = match.end()\n        print(\"Match found:\", match_str, \"at indices\", match_start, \"to\", match_end)\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        print(f\"Found literal: {literal} at index {start} to {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and return the first match found\n    for match in matches:\n        return match, matches.index(match), matches.index(match) + len(match) - 1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    The Bell number is a sequence of numbers in which each number after the first two is the sum of the previous two numbers.\n    For example, the first 10 Bell numbers are 1, 12, 26, 52, 108, 228, 472, 988, 1872, 3432.\n    '''\n    if n < 2:\n        return n\n    else:\n        bell_num = 2*n - 1\n        prev_bell = 1\n        for i in range(2, n):\n            bell_num = bell_num + prev_bell\n            prev_bell = bell_num\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Find the nth triangular number\n    nth_triangular = (n * (n + 1)) // 2\n    # Find the nth triangular number modulo 2\n    nth_triangular_mod_2 = nth_triangular % 2\n    # Return the nth bell number\n    return (nth_triangular + 1) // 2 if nth_triangular_mod_2 == 1 else (nth_triangular + 1) // 2 + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize variables\n    bell = 0\n    current = 1\n\n    # Loop through the range of n and add the bell numbers\n    for i in range(1, n+1):\n        bell += current\n        # Update the value of the current number\n        current = bell - current\n\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    This function will find the nth bell number using dynamic programming approach. \n    The nth bell number is defined as the number of ways to reach the nth flowerbed (0 or 1) \n    state using 0 or 1 flowerbed. The number of ways to reach the nth flowerbed state is equal to \n    the number of ways to reach the (n-1)th flowerbed state plus the number of ways to reach the \n    (n-1)th flowerbed state and (n-1)th flowerbed state + 1.\n    '''\n\n    # initialize a list to store the results\n    bell_number = [0] * (n+1)\n\n    # initialize the first two bell numbers\n    bell_number[0] = 0\n    bell_number[1] = 1\n\n    # use dynamic programming to calculate the rest of the bell numbers\n    for i in range(2, n+1):\n        bell_number[i] = bell_number[i-1] + bell_number[i-2] + bell_number[i-3]\n\n    return bell_number[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [1]\n    for i in range(2, n+1):\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n    return bell_list[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    return (10**n) * (10**(-n))\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # get the length of the list\n    n = len(list1)\n    # check if k is less than or equal to 0 or greater than n\n    if L <= 0 or L > n:\n        print(\"Invalid input. k must be a positive integer less than or equal to\", n, \"and greater than 0.\")\n        return None\n    # create an empty list to store the remaining elements\n    list2 = []\n    # iterate over the list and add each element to the list2\n    for i in range(n):\n        if i!= L - 1:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    n = len(list1)\n    k = L\n\n    if k > n or k < 1:\n        return None\n\n    for i in range(k-1, n):\n        list1[i] = list1[i+1]\n\n    del list1[n-1]\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a positive integer k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If k is greater than or equal to the length of the list, return an empty list\n    if k >= len(list1):\n        return []\n    \n    # Create an empty list to store the elements from the list except the k'th element\n    list2 = []\n    \n    # Iterate over the list and add elements to list2 except for the k'th element\n    for i in range(len(list1)):\n        if i!= k-1:\n            list2.append(list1[i])\n    \n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    if k > n:\n        print(\"Error: K is greater than the length of the list\")\n        return list1\n    \n    result = []\n    for i in range(n):\n        if i!= k-1:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return []\n    elif L == len(list1):\n        return list1\n    else:\n        k = len(list1) - L\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize an empty list to store the max values of the nth column\n    max_values = []\n    # iterate over each row in the matrix\n    for row in test_list:\n        # append the nth column max value to the max_values list\n        max_values.append(max(row[N-1]))\n    # return the max_values list\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Given a matrix represented as a list of lists, return the maximum value of the Nth column.\n    '''\n    # Initialize max_val with the first value in the column\n    max_val = matrix[0][N]\n    # Loop through each row in the matrix\n    for row in matrix[1:]:\n        # If the value in the Nth column is greater than the current max_val, update max_val\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # get the length of the first row of the matrix\n    m = len(test_list)\n\n    # initialize the max value to be negative infinity\n    max_val = float('-inf')\n\n    # loop through the matrix\n    for i in range(m):\n        # get then'th column value\n        column_val = test_list[i][N-1]\n\n        # check if this value is greater than the current max value\n        if column_val > max_val:\n            max_val = column_val\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # get the length of the first list in the matrix\n    length = len(test_list)\n\n    # iterate over all rows and find the max of then'th column\n    max_val = 0\n    for i in range(length):\n        if i < N or i >= (length - N):\n            continue\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    max_col = []\n    for row in matrix:\n        max_col.append(max(row[i] for i in range(len(row))))\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    # initialize max_value as the first element of the first row\n    max_value = test_list[0][0]\n    # iterate over the remaining rows and columns\n    for i in range(1, len(test_list)):\n        for j in range(len(test_list[i])):\n            # if the current element is greater than the max_value, update max_value\n            if test_list[i][j] > max_value:\n                max_value = test_list[i][j]\n    # return the max_value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of columns in the matrix\n    n = len(test_list[0])\n    # Initialize the variable to store the maximum value\n    max_value = float('-inf')\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the value of then'th column in the current row\n        value = row[N-1]\n        # Update the maximum value if necessary\n        if value > max_value:\n            max_value = value\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = 0\n\n    # Iterate through each row of the matrix\n    for row in test_list:\n        # If the current value is greater than the maximum value, update the maximum value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize empty lists for the first and second elements of each sublist\n    first_elements = []\n    second_elements = []\n\n    # Loop through each sublist\n    for sublist in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sublist[1])\n\n    # Combine the first_elements and second_elements lists into a single list of tuples\n    merged_list = list(zip(first_elements, second_elements))\n\n    # Return the merged_list as the result of the function\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        sublist = lst[i]\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    return [[lst[0][0], lst[1][0]], [lst[0][1], lst[1][1]]]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first, second = sublist\n        result.append([first, second])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    total = test_list[0]\n    for num in test_list[1:]:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum as 0\n    cum_sum = 0\n    # loop through the tuple list\n    for item in test_list:\n        # add the item to the cumulative sum\n        cum_sum += item\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][0]\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_tuples = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averaged_tuples.append(average)\n    return averaged_tuples"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to hold the average values for each tuple\n    avg_list = []\n    # iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the average value for each tuple using the sum() and len() functions\n        avg = (sum(tup)/len(tup))\n        # append the average value to the avg_list\n        avg_list.append(avg)\n    # return the avg_list of average values for each tuple\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(sum(nums[i]) / len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the average values\n    averages = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for i in range(len(nums)):\n        # Loop through each element in the current tuple\n        for j in range(len(nums[i])):\n            # Add the current element to the running total\n            total += nums[i][j]\n        # Divide the total by the number of elements in the current tuple to get the average\n        averages.append(total / len(nums[i]))\n        # Reset the total for the next tuple\n        total = 0\n\n    # Return the averages as a list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        averages.append(sum / len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(sum(num)/len(num))\n    return num_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for sub_num in num:\n            sum += sub_num\n        avg = sum / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sublist in nums:\n        avg = sum(sublist) / len(sublist)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    # Perform element wise modulo and return the result as a tuple\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    mod_tup = ()\n    for i in range(len(test_tup1)):\n        mod_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return mod_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_x = d\n    current_y = 0\n\n    while current_x >= 0 and current_y <= steps:\n        if current_x == 0:\n            current_y += 1\n        else:\n            current_x -= 1\n        jumps += 1\n\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    This function calculates the minimum number of jumps required to reach the point (d, 0) from the origin of a 2D plane.\n    '''\n    # Calculate the number of steps required to reach the point (d, 0) from the origin.\n    steps_to_d = abs(d)\n    # Calculate the number of jumps required to reach the point (d, 0) from the origin.\n    jumps = steps // steps_to_d\n    # If there are no jumps possible, return 0.\n    if jumps == 0:\n        return 0\n    # If there are jumps possible, calculate the number of remaining steps required to reach (d, 0) from the origin.\n    remaining_steps = steps % steps_to_d\n    # If there are no remaining steps, return the number of jumps required.\n    if remaining_steps == 0:\n        return jumps\n    # Otherwise, calculate the number of jumps required to reach (d, 0) from the origin.\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif d > 0:\n        return min_Jumps(steps + 1, d - 1) + 1\n    else:\n        return min_Jumps(steps + 1, abs(d)) + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initializing variables\n    current = 0\n    jumps = 0\n\n    # iterating through the steps\n    for i in range(steps):\n        # checking for destination point\n        if current == d:\n            return jumps\n\n        # checking if the current point is reachable\n        if current == 0:\n            current = 1\n        elif current == 1:\n            current = 2\n        else:\n            return -1\n\n        # incrementing the jumps\n        jumps += 1\n\n    # if the destination point is not reachable\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    curr_x = 0\n    curr_y = 0\n    steps_left = steps\n\n    # Iterate until we reach the point (d, 0)\n    while steps_left > 0:\n        # Determine the number of steps to take in each direction\n        steps_to_take_up = min(d, steps_left)\n        steps_to_take_down = min(d, steps_left)\n        steps_to_take_left = min(d, steps_left)\n        steps_to_take_right = min(d, steps_left)\n\n        # Take the minimum number of steps in each direction\n        if curr_y > 0:\n            steps_to_take_up = min(steps_to_take_up, curr_y)\n        if curr_x > 0:\n            steps_to_take_left = min(steps_to_take_left, curr_x)\n        if curr_x < d:\n            steps_to_take_right = min(steps_to_take_right, d - curr_x)\n        if curr_y < d:\n            steps_to_take_down = min(steps_to_take_down, d - curr_y)\n\n        # Update the current position\n        curr_x += steps_to_take_left\n        curr_y += steps_to_take_up\n        curr_x += steps_to_take_right\n        curr_y += steps_to_take_down\n\n        # Update the number of steps left to take\n        steps_left -= min(steps_to_take_up, steps_to_take_down, steps_to_take_left, steps_to_take_right)\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check if the given point is outside the 2D plane\n    if d >= steps:\n        return -1\n    \n    # Initialize variables\n    count = 0\n    remaining_steps = steps - d\n    curr_pos = 0\n    \n    # Keep moving right until the remaining_steps are less than or equal to 0\n    while remaining_steps > 0:\n        \n        # Move right by one position\n        curr_pos += 1\n        \n        # Update remaining steps and count the number of jumps\n        remaining_steps -= 1\n        count += 1\n        \n        # If the current position is greater than the given d, we have reached the required point\n        if curr_pos > d:\n            return count\n    \n    # If we have reached here, the given point is not reachable from origin\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    steps_taken = 0\n    step_size = 1\n    \n    while i < len(steps):\n        if steps[i] == (d, 0):\n            return count + steps_taken + 1\n        \n        if steps[i] == (0, d):\n            count += 1\n            steps_taken += 1\n            if steps_taken == steps[i][0]:\n                steps_taken = 0\n                i += 1\n                j += step_size\n        \n        i += 1\n        j += step_size\n        \n    return None"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the number of jumps and the maximum possible number of jumps.\n    jumps = 0\n    max_jumps = 0\n\n    # Iterate through the given number of steps.\n    for i in range(steps):\n\n        # Check if the point has been reached.\n        if (d, 0) == (0, i):\n\n            # Increment the number of jumps.\n            jumps += 1\n\n        # Update the maximum number of jumps if necessary.\n        else:\n            max_jumps = max(max_jumps, jumps)\n            jumps = 0\n\n        # Move to the next step.\n        d = max(d - 1, 0)\n\n    # Return the maximum number of jumps.\n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    current_position = (0, 0)\n    jump_count = 0\n\n    # loop until current position is (d, 0)\n    while current_position!= (d, 0): \n        # increment jump count\n        jump_count += 1\n\n        # calculate next position\n        next_position = (current_position[0] + 1, current_position[1])\n\n        # check if next position is valid\n        if next_position[0] < 0 or next_position[0] >= steps or next_position[1] < 0 or next_position[1] >= steps: \n            # if next position is outside the grid, then there is no valid path\n            return -1\n\n        # update current position\n        current_position = next_position\n\n    # if the loop completes without returning -1, then there is a valid path\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps_taken = 0\n    jumps_required = 0\n    current_pos = 0\n    \n    # Iterate until we reach the destination point\n    while current_pos!= d:\n        # Increment steps taken and check if we can move\n        steps_taken += 1\n        current_pos = (current_pos + steps) % d\n        \n        # If we can move, increment jumps required\n        if current_pos == d:\n            jumps_required += 1\n    \n    # Return the total number of jumps\n    return jumps_required"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the input lists have same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of the two lists must be same\")\n        return\n    \n    # Create a new list to store the result\n    result = []\n    \n    # Loop through each element in the lists\n    for i in range(len(nums1)):\n        # Divide the elements and append the result to the new list\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    else:\n        return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    else:\n        # create an empty list to store the result\n        result = []\n        # loop through the two lists and divide each element\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        # return the result list\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if len(num_list) > 0:\n        test_str = ''.join(num_list) + test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables\n    num_count = 0\n    str_count = 0\n    num_start = -1\n    num_end = -1\n    new_str = \"\"\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is a number\n        if test_str[i].isdigit():\n            # If it is, increment the count of numbers\n            num_count += 1\n            # If the number has not been found yet, set the start and end indices\n            if num_start == -1:\n                num_start = i\n            num_end = i\n        # If the current character is not a number, increment the count of strings\n        else:\n            str_count += 1\n            # If the string has not been found yet, set the start index\n            if num_start == -1:\n                num_start = i\n    \n    # If no numbers were found, return the original string\n    if num_count == 0:\n        return test_str\n    \n    # Create a new string with all the numbers moved to the end\n    for i in range(len(test_str)):\n        # If the current character is a number, append it to the new string and update the indices\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n            new_str += test_str[num_start:num_end+1]\n            num_start += 1\n            num_end += 1\n    \n    # Add the remaining characters of the original string to the new string\n    for i in range(num_start, len(test_str)):\n        new_str += test_str[i]\n    \n    # Return the new string with all the numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Define an empty string to store numbers\n    num_str = \"\"\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the number string\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, append it to the original string\n        else:\n            test_str = test_str.replace(char, \"\")\n    # Return the modified string with numbers moved to the end\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str + test_str.replace(num_str, '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Define the regex pattern to match numbers\n    pattern = r'\\d+'\n\n    # Find all the numbers in the string\n    matches = re.findall(pattern, test_str)\n\n    # Loop through all the matches and move them to the end of the string\n    for match in matches:\n        test_str = re.sub(f'^{match}$', f'{match}\\g<0>', test_str)\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initializing an empty string to hold the numbers\n    num_str = \"\"\n    # iterating through each character in the input string\n    for char in test_str:\n        # if the character is a number, adding it to the num_str\n        if char.isdigit():\n            num_str += char\n        # if the character is not a number, adding it to the original string\n        else:\n            test_str += char\n    # returning the modified string with numbers at the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_regex = r'\\d+'\n    num_list = re.findall(num_regex, test_str)\n    if num_list:\n        test_str = test_str.replace(num_list[0], '')\n        test_str += num_list[0]\n        for num in num_list[1:]:\n            test_str += num\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    result = ''\n    for num in numbers:\n        result += num\n    return result + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n\n    Args:\n        test_str (str): a string with numbers\n\n    Returns:\n        str: a new string with all numbers moved to the end\n    \"\"\"\n    # convert the input string to a list of characters\n    char_list = list(test_str)\n    # loop through the list in reverse order\n    for i in range(len(char_list)-1, -1, -1):\n        # if the current character is a digit, append it to a new list\n        if char_list[i].isdigit():\n            # create a new list to store all the numbers in reverse order\n            num_list = []\n            # loop through the list again from the end to the current index\n            for j in range(i+1, len(char_list)):\n                # if the character is a digit, append it to the new list\n                if char_list[j].isdigit():\n                    num_list.append(char_list[j])\n                # if the character is not a digit, break out of the loop\n                else:\n                    break\n            # reverse the list of numbers and append it to the character list\n            char_list[i:i+len(num_list)] = num_list[::-1]\n    # convert the character list back to a string and return it\n    return \"\".join(char_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set to store all unique numbers in the list\n    unique_nums = set(a)\n    # create a dictionary to store the size of the largest subset\n    subset_sizes = {}\n    # loop through all unique numbers and check if they can be divided by every number in the list\n    for num in unique_nums:\n        if num % 2 == 0:\n            # if a number is even, check if it can be divided by every number in the list\n            for i in range(1, len(a) + 1):\n                if i % 2 == 0:\n                    subset = a[:i] + [num] + a[i:]\n                    if subset in subset_sizes:\n                        subset_sizes[subset] = max(subset_sizes[subset], i)\n                    else:\n                        subset_sizes[subset] = i\n    # find the largest subset and return its size\n    return max(subset_sizes, key=subset_sizes.get)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in descending order\n    a.sort(reverse=True)\n\n    # initialize the largest subset size\n    size = 0\n\n    # iterate through the list and find the largest subset size\n    for i in range(len(a)):\n        # if the current number is divisible by the current subset size, add 1 to the size\n        if a[i] % size == 0:\n            size += 1\n        # if the current number is not divisible by the current subset size, reset the size to 1\n        else:\n            size = 1\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables to keep track of the maximum subset size and the current subset\n    max_size = 0\n    current_subset = [a[0]]\n    \n    # Iterate through the list of numbers\n    for num in a[1:]:\n        # Check if the current number is divisible by the last number in the current subset\n        if num % current_subset[-1] == 0:\n            # If it is, add it to the subset and update the maximum size if necessary\n            current_subset.append(num)\n            max_size = max(max_size, len(current_subset))\n        else:\n            # If it's not, reset the current subset and start a new one\n            current_subset = [num]\n    \n    # If the current subset is longer than the maximum, update the maximum\n    if len(current_subset) > max_size:\n        max_size = len(current_subset)\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Loop through the sorted list\n    for i in range(len(a)):\n        # Add the current number to the current subset size\n        current_size += 1\n\n        # Check if the current subset size exceeds the maximum size\n        if current_size > max_size:\n            max_size = current_size\n\n        # Subtract the current number from the current subset size\n        current_size -= a[i]\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    max_size = 1\n    curr_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n            if curr_size > max_size:\n                max_size = curr_size\n        else:\n            curr_size = 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # create a list to store the largest subset size\n    subset_sizes = [1] * n\n    \n    # loop through the list from start to end\n    for i in range(n):\n        # loop through all previous indices to find the largest subset size\n        for j in range(i):\n            # check if the current element is divisible by the previous element\n            if a[i] % a[j] == 0:\n                # if it is, update the subset size to the maximum of the current and previous subset sizes\n                subset_sizes[i] = max(subset_sizes[i], subset_sizes[j] + 1)\n    \n    # return the largest subset size\n    return max(subset_sizes)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a, divisor):\n    '''\n    Finds the size of the largest subset of a list of numbers that has every pair of numbers divisible by a given number.\n    '''\n    # Initialize variables\n    max_subset_size = 0\n    current_subset_size = 0\n    \n    # Loop through the list of numbers\n    for num in a:\n        # Check if the number is divisible by the divisor\n        if num % divisor == 0:\n            # If it is, add it to the subset size and update the maximum size if necessary\n            current_subset_size += 1\n            max_subset_size = max(max_subset_size, current_subset_size)\n            \n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    count = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            count += 1\n            if count > max_size:\n                max_size = count\n        else:\n            count = 1\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        median = sorted_list[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n    \n    # Find the median index\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If the length is even, take the average of two middle elements\n        median = (sorted_arr[mid-1] + sorted_arr[mid]) / 2\n    else:\n        # If the length is odd, take the middle element\n        median = sorted_arr[mid]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    sorted_arr = sorted(merged_arr)\n\n    # Find the middle index of the merged list\n    mid = len(sorted_arr) // 2\n\n    # If the length of the sorted array is odd, return the middle element\n    if len(sorted_arr) % 2 == 1:\n        return sorted_arr[mid]\n\n    # If the length of the sorted array is even, return the average of the middle two elements\n    else:\n        return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two input lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the indices of the middle elements\n    middle1 = n // 2\n    middle2 = (n + 1) // 2\n\n    # Find the median based on the indices\n    if n % 2 == 0:\n        median = (arr1[middle1 - 1] + arr1[middle1]) / 2.0\n    else:\n        median = arr1[middle1]\n\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    arr = arr1 + arr2\n    # Find the middle index of the merged list\n    mid = n // 2\n    # Find the median of the merged list\n    if n % 2 == 0:\n        return (arr[mid] + arr[mid - 1]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the list has an even number of elements, take the average of the middle two elements\n        m = n // 2\n        median1 = (arr1[m-1] + arr1[m]) / 2\n        median2 = (arr2[m-1] + arr2[m]) / 2\n        return (median1, median2)\n    else:\n        # If the list has an odd number of elements, take the middle element\n        m = n // 2\n        median = arr1[m]\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in three arguments:\n    arr1: The first sorted list.\n    arr2: The second sorted list.\n    n: The size of the list.\n    \n    This function returns the median of the two sorted lists.\n    '''\n\n    # Merge the two sorted lists and sort it.\n    merged_list = merge_sort(arr1, arr2, n)\n    sorted_list = sorted(merged_list)\n\n    # Find the median index.\n    median_index = n // 2\n\n    # If the list has an even number of elements, the median index is average of the indices of two medians.\n    if n % 2 == 0:\n        median_index = (median_index - 1) // 2\n\n    # Return the median value.\n    return sorted_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the median by sorting the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the index of the median\n    median_index = n // 2\n\n    # Return the median\n    if n % 2 == 0:\n        return (sorted_list[median_index - 1] + sorted_list[median_index]) / 2\n    else:\n        return sorted_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the length of the list is odd, then the median is in the middle\n    if n % 2 == 1:\n        return merged_list[median_index]\n    \n    # Otherwise, the median is the average of the two middle numbers\n    else:\n        return (merged_list[median_index - 1] + merged_list[median_index]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power_list.append(num ** n)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    result = []\n    for num in nums:\n        result.append(num ** power)\n        power += 1\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns a list of n-th power of each number in the input list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase and store it in a new variable\n    new_string = string.upper()\n    # Return the new string\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string contains only uppercase characters, and False otherwise.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input, swaps the first and last elements of the list, and returns the modified list.\n    \"\"\"\n    # Initialize the first and last indices\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # Swap the first and last elements\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        raise ValueError('The list must have at least two elements')\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an argument and swaps the first and last elements of the list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length >= 2:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is less than 2, return the list as is\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the input list is valid\n    if not isinstance(newList, list):\n        return \"Invalid input. Please enter a list.\"\n    \n    # If the input list has less than two elements, return an error message\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    \n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the updated list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semi-circle\n    x_0, y_0 = 0, 0\n    r_0 = r\n\n    # Find the x-coordinate of the largest point that can be inscribed in the semi-circle\n    x_1 = r_0 * (r_0 + r)\n    y_1 = 0\n\n    # Find the area of the triangle\n    area_triangle = 0.5 * abs(r_0 * (x_0 * y_1 - x_1 * y_0) + x_1 * y_0)\n\n    # Find the area of the largest triangle that can be inscribed in the semi-circle\n    area_largest = (r_0 * r_0 * (x_1 - x_0) + r_0 * (y_1 - y_0) + x_0 * y_0) / 2\n\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the semi-circle area\n    semi_area = 3.14159 * r**2\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    triangle_area = semi_area / 3\n\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from sympy import sqrt\n\n    # function to calculate the area of a triangle\n    def triangle_area_formula(s, a, b):\n        s_sqrt = sqrt(s)\n        return 0.5 * a * b * s_sqrt\n\n    # function to calculate the largest triangle area that can be inscribed in a semicircle\n    def largest_triangle_area_formula(r):\n        return r ** 2 * math.pi\n\n    # calculate the semi-circle area\n    s = (4 * r * math.pi) / 3\n\n    # calculate the area of the largest triangle that can be inscribed in the semi-circle\n    a = 2 * r\n    b = 2 * r\n    largest_triangle_area = triangle_area_formula(s, a, b)\n\n    # calculate the area of the smallest triangle that can be inscribed in the semi-circle\n    s_min = largest_triangle_area / math.sqrt(2)\n    a_min = r * math.cos(math.pi / 3)\n    b_min = r * math.sin(math.pi / 3)\n    area_min = triangle_area_formula(s_min, a_min, b_min)\n\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (3*r**2)/2\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the semicircle\n    s = 2 * r\n    \n    # Calculate the area of each triangle that can be formed with the semicircle\n    area1 = (s * (s - r)) / (4 * math.tan(math.pi / 3))\n    area2 = (s * (s - r)) / (4 * math.tan(math.pi / 6))\n    area3 = (s * (s - r)) / (4 * math.tan(2 * math.pi / 3))\n    \n    # Find the largest area\n    if area1 > area2 and area1 > area3:\n        largest_area = area1\n    elif area2 > area1 and area2 > area3:\n        largest_area = area2\n    else:\n        largest_area = area3\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    return (2/3) * pi * r**3"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3 * r ** 2) / (4 * (1 + r))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = math.sqrt(s * (s - r) * (s - 2*r))\n    \n    # Return the area\n    return a"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number in the list.\n    If no missing number is found, it returns None.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number in the list.\n\n    Args:\n    array (list): The sorted list of natural numbers.\n\n    Keyword Args:\n    start (int): The starting index of the search range. Default is 0.\n    end (int): The ending index of the search range. If not specified, the function will search through all indices.\n\n    Returns:\n    int: The smallest missing number in the list.\n    \"\"\"\n\n    # If the start index is not provided, set it to 0\n    if start == 0:\n        start = 1\n\n    # If the end index is not provided, set it to the maximum index in the array\n    if end is None:\n        end = len(array)\n\n    # Loop through the array and check if each element is present in the correct position\n    for i in range(start,end):\n        if array[i]!= i:\n            # If the element is not present in the correct position, return the element plus 1\n            return i+1\n\n    # If the loop completes without finding the smallest missing number, return the maximum index plus 1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the first number that is not in the array\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    # All numbers in the array are present in the array\n    return end + 2\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n    - array (list): a sorted list of natural numbers\n    - start (int): the starting index of the array. Default is 0\n    - end (int): the ending index of the array. Default is None\n\n    Returns:\n    - int: the smallest missing number in the array\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If the list is empty or None, return None\n    if not array:\n        return None\n    \n    # If the list contains only one number, return None\n    if len(array) == 1:\n        return None\n    \n    # If the list contains only two numbers, return the other number\n    if len(array) == 2:\n        return array[1] if array[0] == array[1] else array[0]\n    \n    # If the list contains three numbers, return the second number\n    if len(array) == 3:\n        return array[1] if array[0] == array[1] or array[0] == array[2] or array[1] == array[2] else array[0]\n    \n    # Find the smallest missing number in the list using binary search\n    first = start\n    last = end\n    while first <= last:\n        mid = (first + last) // 2\n        if mid == 0:\n            return array[mid]\n        elif mid == len(array) - 1:\n            return array[mid] + 1\n        elif array[mid - 1] < array[mid]:\n            return array[mid]\n        else:\n            first = mid + 1\n    \n    # If the function reaches here, it means that the list is not sorted and cannot be found in a sorted manner.\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in an array of natural numbers and returns the smallest missing number.\n    If the array is not sorted, the function will sort the array in ascending order.\n    \"\"\"\n\n    # Check if the array is sorted or not\n    if start < end:\n        pass\n    else:\n        array.sort()\n        start = 0\n        end = len(array) - 1\n\n    # Traverse the array and find the first missing number\n    for i in range(start, end):\n        if array[i] == array[i + 1]:\n            return i + 1\n        elif array[i] < array[i + 1]:\n            return array[i + 1] + 1\n\n    # If the array is not sorted or the missing number is not found, return the last element of the array\n    return array[-1] + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    \"\"\"\n    # Find the first missing number\n    for i in range(start, end):\n        if i+1 not in array:\n            return i+1\n    # If we reach this point, the last number in the array is the missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: The sorted list of natural numbers.\n    :param start: The starting index of the array.\n    :param end: The ending index of the array.\n    :return: The smallest missing number.\n    \"\"\"\n    # Check if the array is empty\n    if len(array) == 0:\n        return None\n\n    # Check if the starting index is greater than the ending index\n    if start > end:\n        return None\n\n    # Find the middle index of the array\n    mid = (start + end) // 2\n\n    # Check if the middle element is the missing number\n    if array[mid] == mid:\n        return mid\n\n    # Check if the left half of the array has the missing number\n    if array[start] <= mid:\n        return find_First_Missing(array, start, mid)\n\n    # Check if the right half of the array has the missing number\n    return find_First_Missing(array, mid + 1, end)\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a tuple of coordinates and returns a list of all adjacent coordinates.\n    If the sub-list is not provided, then it will be initialized as an empty list.\n    '''\n\n    if sub is None:\n        sub = []\n\n    x, y = ele\n    adjacent = [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]\n\n    return sub + adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = []\n    # Add the adjacent coordinates to the list\n    if x > 0 and y > 0:\n        neighbors.append((x-1, y-1))\n    if x > 0 and y < len(sub)-1:\n        neighbors.append((x-1, y+1))\n    if x < len(sub)-1 and y > 0:\n        neighbors.append((x+1, y-1))\n    if x < len(sub)-1 and y < len(sub)-1:\n        neighbors.append((x+1, y+1))\n    return neighbors"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (0 <= x+i < len(sub) and 0 <= y+j < len(sub[0])):\n                adj_coords.append((x+i, y+j))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    \n    Args:\n        ele: A coordinate tuple (x,y).\n        sub: A list to store the adjacent coordinates.\n    \n    Returns:\n        A list of all the adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    \n    # Define the adjacent coordinates\n    adj = [\n        (x+1,y), # Right\n        (x-1,y), # Left\n        (x,y+1), # Up\n        (x,y-1), # Down\n        (x+1,y+1), # Top right\n        (x-1,y-1), # Bottom left\n        (x+1,y-1), # Top left\n        (x-1,y+1), # Bottom right\n    ]\n    \n    # Add adjacent coordinates to the sublist\n    sub.extend(adj)\n    \n    # Return the updated sublist\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x - 1, y))\n    if x < len(grid[0]) - 1:\n        sub.append((x + 1, y))\n    if y > 0:\n        sub.append((x, y - 1))\n    if y < len(grid) - 1:\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub == []:\n        sub = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    adj_coords = []\n    for x, y in sub:\n        if 0 <= x < len(ele[0]) and 0 <= y < len(ele[1]):\n            adj_coords.append((ele[0][x] + x, ele[1][y] + y))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    for dx, dy in directions:\n        new_x = x + dx\n        new_y = y + dy\n        if 0 <= new_x < len(sub) and 0 <= new_y < len(sub[0]):\n            sub[new_y][new_x] = ele\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize the adjacent coordinates list\n    adj_coords = []\n    # get the coordinates of the current element\n    coord = ele\n    # loop through all the possible adjacent elements\n    for i in range(len(coord)):\n        # check if the current element is not equal to the neighbor\n        if i == 0 or coord[i]!= coord[i-1]:\n            # if it is not, add its coordinates to the list\n            adj_coords.append(tuple(coord[:i] + (coord[i] + 1,) + coord[i+1:]))\n    # return the adjacent coordinates list\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    \n    # append the adjacent coordinates to the sub list\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j)!= ele:\n                sub.append((i, j))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and replaces all the whitespaces with an underscore and vice versa.\n    '''\n    # Split the string into a list of words\n    words = text.split()\n\n    # Loop through each word in the list and replace whitespaces with underscores\n    for i in range(len(words)):\n        if words[i] =='':\n            words[i] = '_'\n\n    # Join the list of words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create an empty list to store the non-zero elements\n    non_zero_list = []\n    \n    # iterate over the list and append non-zero elements to the non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # append all zero elements to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # replace the original list with the non-zero list\n    num_list = non_zero_list\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: one for moving non-zero elements and one for skipping the zeroes\n    move_index = 0\n    skip_index = 0\n\n    # Iterate through the list\n    while skip_index < len(num_list):\n        # If the current element is not zero, move it to the next index\n        if num_list[skip_index]!= 0:\n            num_list[move_index], num_list[skip_index] = num_list[skip_index], num_list[move_index]\n            move_index += 1\n        # Otherwise, increment the skip index\n        else:\n            skip_index += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Find the index of the last non-zero element\n    last_nonzero = len(num_list) - 1\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[i], num_list[last_nonzero] = num_list[last_nonzero], num_list[i]\n            last_nonzero -= 1\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num == 0:\n            num_list[count] = num\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: start and end\n    start = 0\n    end = len(num_list) - 1\n\n    # Iterate through the list until start is less than or equal to end\n    while start <= end:\n        # If the current element is zero, move it to the end of the list\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            end -= 1\n        else:\n            start += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        else:\n            num_list.pop(i)\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i]!= 0:\n            break\n        else:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero values\n    non_zero_list = []\n\n    # loop through each element in the original list\n    for num in num_list:\n        # if the element is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the original list again and append any zero values to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(num_list[i])\n\n    # replace the original list with the new list\n    num_list = non_zero_list\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two pointers: left and right\n    left = 0\n    right = 0\n    \n    # iterate through the list from left to right\n    while right < len(num_list):\n        # if the element at right is not zero, move it to left\n        if num_list[right]!= 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        # if the element at right is zero, increment right\n        else:\n            right += 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of n integers and returns the sum of the xor of all pairs of numbers in the list.\n\n    Args:\n        arr (list of integers): A list of n integers.\n        n (integer): The length of the list.\n\n    Returns:\n        int: The sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    # XOR operator to find the xor of two numbers\n    xor = lambda a, b: a ^ b\n\n    # Initialize a variable to store the sum of xor of all pairs of numbers\n    xor_sum = 0\n\n    # Iterate through all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the two numbers and add it to the sum\n            xor_sum += xor(arr[i], arr[j])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n\n    # XOR of all pairs of numbers in the list\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of first and second numbers in the list\n    xor_sum = arr[0] ^ arr[1]\n\n    # XOR of all numbers after the first two in the list\n    for i in range(2, n):\n        xor_sum = xor_sum ^ arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers arr and an integer n.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum_of_xor = 0\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            sum_of_xor += xor_sum\n\n    return sum_of_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heappushpop(iterable)\n    return [heap] + [hq.heappop(iterable) for _ in range(len(iterable) - 1)]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    # Build a max heap by repeatedly removing the max element and adding the remaining elements\n    while len(iterable) > 1:\n        # Remove the max element from the heap\n        max_element = hq.heappop(iterable)\n        # Add the remaining elements to the heap\n        for element in iterable:\n            hq.heappush(iterable, element)\n    # Return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using the heap sort algorithm.\n    \"\"\"\n    hq.heapify(iterable)  # convert the list to a max heap\n    sorted_list = []\n    while iterable:  # while the heap is not empty\n        max_item = hq.heappop(iterable)  # pop the max item from the heap\n        sorted_list.append(max_item)  # append it to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heapsort algorithm.\n    \"\"\"\n    heap = []\n    for element in iterable:\n        heapq.heappush(heap, element)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Create a max heap from the list\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from the heap in sorted order and append to a new list\n    sorted_list = []\n    while n > 0:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n        n -= 1\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the input iterable\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    \n    # sort the heap and return the sorted list\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    # Iterate over the sorted list\n    while iterable:\n        # Pop the smallest element from the heap\n        min_element = hq.heappop(iterable)\n        # Add the minimum element to the end of the sorted list\n        yield min_element"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a min heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Extract the elements from the min heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale.\n    sale_amount (float): The amount that was sold.\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if sale_amount <= actual_cost:\n        # If the sale amount is less than or equal to the actual cost, then there is no profit and no loss.\n        return True\n    else:\n        # Otherwise, check if the sale amount is greater than the actual cost, which would have made the sale profit.\n        return sale_amount - actual_cost <= 0"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are positive or negative\n    if profit >= 0 and loss <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n\n    # Check if sale amount is greater than or equal to actual cost\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if sale amount is greater than actual cost\n    if sale_amount > actual_cost:\n        # check if the sale amount is greater than 50% of actual cost\n        if sale_amount > 0.5*actual_cost:\n            # check if the sale amount is greater than 100% of actual cost\n            if sale_amount > 1.0*actual_cost:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v: float\n        Wind velocity in km/h.\n    t: float\n        Temperature in celsius.\n        \n    Returns:\n    int\n        The wind chill index rounded to the nearest integer.\n    '''\n    if v > 10 and t >= 0 and t < 6:\n        a = 17.27\n        b = -237.3\n        c = 63.86\n        d = 0.396\n        e = 0.13\n        return math.ceil((a + b * (t - 32) + c * (t - 32)**2 + d * (v / 10)) / (e + (v / 10)**2))\n    elif v > 10 and t >= 6 and t < 18:\n        a = 17.27\n        b = -237.3\n        c = 63.86\n        d = 0.396\n        e = 0.13\n        f = 0.0065\n        return math.ceil((a + b * (t - 32) + c * (t - 32)**2 + d * (v / 10) + f * (v / 10)**2) / (e + (v / 10)**2))\n    elif v > 10 and t >= 18:\n        a = 17.27\n        b = -237.3\n        c = 63.86\n        d = 0.396\n        e = 0.13\n        f = 0.0065\n        g = 0.00000056\n        return math.ceil((a + b * (t - 32) + c * (t - 32)**2 + d * (v / 10) + f * (v / 10)**2 + g * (v / 10)**3) / (e + (v / 10)**2))\n    else:\n        raise ValueError('Invalid input values. Wind velocity and temperature must be positive.')"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 6:\n        chill_index = math.floor((v - 0.11 * t) / 0.094)\n    else:\n        chill_index = math.floor((v - 0.08 * t) / 0.092)\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def wind_chill(v, t):\n    # convert temperature to Kelvin\n    t = t + 273.15\n    \n    # calculate the dewpoint using the given temperature and wind speed\n    dew_point = 243.04 * (1 - 0.0065 * t) / (1 - 0.0065 * t * math.exp((17.625 * t) / (t + 243.04)))\n    \n    # calculate the wind chill index using the given temperature, dewpoint and wind speed\n    wind_chill_index = 35.74 + 0.6215 * v - 35.75 * t + 0.4275 * dew_point\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function takes in the wind speed (v) and temperature (t) in km/h and celsius, respectively, and returns the wind chill index rounded to the nearest integer.\n    \n    If v is greater than or equal to 10, then the function uses a different formula to calculate the wind chill index.\n    \"\"\"\n    if v >= 10:\n        v = v / 1.609\n        return int(max(13, min(35, 23 + (v - 10) * 0.16)))\n    \n    t = t + 273.15\n    v = v * 1.609\n    chill = 23 + (0.0065 * (t - 273.15)) + (0.018 * (v - 10)) + (0.0012 * (t - 273.15) * (v - 10))\n    return int(max(13, min(35, chill)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula used is: \n    # wind chill = 35.74 + 0.6215 * temperature - 35.757 * wind speed + 0.4275 * temperature * wind speed\n    # Temperature in Fahrenheit is converted to Celsius using (F - 32) * 5/9.\n    \n    # Converting temperature from Fahrenheit to Celsius\n    celsius = (t - 32) * 5/9\n    \n    # Calculating wind chill index\n    wind_chill_index = math.floor(35.74 + 0.6215 * celsius - 35.757 * v + 0.4275 * celsius * v)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v > 10:\n        fc = 11.13 * math.exp((17.625 * t) / (t + 243.5))\n    else:\n        fc = 13.12 + (0.6215 * v) + (13.37 * t) - (0.3568 * t**2) + (5.385 * math.log(t)) + (0.144 * t**2 * math.log(t)) - (0.0088 * t**3 * math.log(t))\n    fc = round(fc)\n    return fc\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    c = 216.65\n    f = 1.8 * t + 32\n    \n    chill_index = math.ceil((f - 32) * (1 - 0.0065 * (v**0.16)) / (c * (f - 32) + (v**0.16) * (1 - 0.0065)))\n\n    return round(chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula for wind chill index\n    wci = 35.74 + 0.6215*t - 35.75*math.exp((17.625*t)/(t+243.5)) + 0.4275*v**0.16\n    # round to the nearest integer\n    wci = round(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v)\n    return round(wind_chill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temperature = t\n\n    # Calculate the heat index\n    heat_index = 23.4 * math.log10(wind_speed) - 459.67 * math.log10(temperature) + 0.6215 * temperature\n\n    # Calculate the wind chill\n    wind_chill_value = 0\n    if 0 <= temperature <= 0.5:\n        wind_chill_value = 32 + 0.6215 * temperature\n    elif 0.5 < temperature <= 15:\n        wind_chill_value = 32 + 0.486 * temperature + 13.37 * (temperature - 0.5)**1.5\n    else:\n        wind_chill_value = 32 + 0.344 * temperature + 10.4 * (temperature - 15)**0.5\n\n    # Round the wind chill value to the nearest integer\n    wind_chill_rounded = round(wind_chill_value)\n\n    return wind_chill_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # filter out names starting with a lowercase letter\n    sample_names = list(filter(lambda x: x[0].isupper(), sample_names))\n    # sum the length of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]  # filter names that start with a lowercase letter\n    lengths = [len(name) for name in names]  # calculate the length of each name\n    return sum(lengths)  # return the sum of the lengths of the names that start with a letter\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create a new list to store the names that do not start with lowercase letters\n    valid_names = []\n    # Iterate through each name in the sample names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add it to the new list of valid names\n            valid_names.append(name)\n    # Use the sum() function to add up the lengths of the valid names\n    total_length = sum(len(name) for name in valid_names)\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_name_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_name_lengths += len(name)\n    return sum_name_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of lengths of the names as 0\n    total_length = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if it is, skip this name and move on to the next one\n            continue\n        # otherwise, add the length of the name to the total length\n        total_length += len(name)\n    \n    # return the total length\n    return total_length\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n\n    # Remove the extra space\n    items = items.strip()\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^\\)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to remove the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and returns a string with all the parenthesis and what is inbetween them removed.\n    '''\n    # create a regular expression to match all the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n\n    # use re.sub to replace all the parenthesis and what is inbetween them with an empty string\n    items = re.sub(pattern, '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Replace all the spaces with an empty string\n    items = re.sub(r'\\s', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize a variable to keep track of the sum of nonagonal numbers\n    sum = 0\n    \n    # iterate from 1 to n/2 (inclusive)\n    for i in range(1, n//2+1):\n        # add the sum of the squares of the previous two nonagonal numbers\n        sum += i*(i+1)*(n-2*i+1)\n    \n    # return the sum of nonagonal numbers\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def get_sum(n):\n        if n % 2 == 0:\n            return (n * (n + 1)) // 2\n        else:\n            return (n * (n + 1)) // 2 - n\n\n    def get_nonagonal(n):\n        if n % 2 == 0:\n            return (n * (n + 1)) // 2 - n - 1\n        else:\n            return (n * (n + 1)) // 2 - 1\n\n    return get_nonagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the sum of nonagonal numbers\n    sum_nonagonal = 0\n\n    # Initialize the counter variable\n    counter = 1\n\n    # Iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the counter is even, add it to the sum\n        if counter % 2 == 0:\n            sum_nonagonal += counter\n\n        # Increment the counter by 1\n        counter += 1\n\n    # Return the sum of nonagonal numbers\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    nonagonal_number = 0\n    \n    while i <= n:\n        nonagonal_number = (i * (i + 1)) / 2\n        i += 1\n        \n        if j > 0 and nonagonal_number == 2 * j:\n            return True\n            \n        j += 1\n        \n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the first nonagonal number\n    first_nonagonal = 1\n    \n    # Loop through the number of nonagonal numbers to find the nth one\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        next_nonagonal = i * (2*i-1)\n        \n        # If the next nonagonal number is equal to n, return it\n        if next_nonagonal == n:\n            return next_nonagonal\n        \n        # If the next nonagonal number is greater than n, return the first nonagonal number\n        elif next_nonagonal > n:\n            return first_nonagonal\n        \n        # Increment the first nonagonal number\n        first_nonagonal += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the nonagonal number and the sum of the first n nonagonal numbers\n    nonagonal = 0\n    sum_of_first_n_nonagonal = 0\n\n    # Loop through the first n nonagonal numbers and calculate the sum\n    for i in range(n):\n        nonagonal = (i * (i + 1)) // 2\n        sum_of_first_n_nonagonal += nonagonal\n\n    # Return the sum of the first n nonagonal numbers\n    return sum_of_first_n_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Calculate the sum of nonagonal numbers from 1 to n\n    sum_nonagonal = (n * (n + 1)) // 2\n\n    # Return the sum\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    for i in range(1, n+1):\n        nonagonal_num += (i * (2*i-1)) // 2\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 2\n    while b <= n:\n        a += b\n        b += 2\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = n * (n - 1) // 2\n    while i <= j:\n        if i == n - i + 1:\n            return i\n        i += 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\W)z(?=\\W)'  # matches 'z' except at the start of the word\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z])[zZ](?![a-zA-Z])')\n    matches = pattern.finditer(text)\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+z\\b', text)\n    return any(words)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Check if the first character of the word is not 'z'\n    if not text[0] == 'z':\n        return False\n\n    # Check if the last character of the word is not 'z'\n    if not text[-1] == 'z':\n        return False\n\n    # Check if the word contains 'z' except at the start and end of the word\n    if re.search(r'\\bz\\b', text[1:-1]) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove non-word characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate over the words and check if 'z' is present except at the start and end of the word\n    for i in range(len(words)):\n        if words[i][0].lower() == 'z':\n            if i == 0 or i == len(words) - 1:\n                continue\n            else:\n                return False\n    \n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define the regular expression to match 'z' at the middle of a word\n    pattern = r'\\b[zZ]\\w*\\b'\n\n    # use the re.search() method to search for matches in the string\n    matches = re.search(pattern, text)\n\n    # return True if a match was found, otherwise return False\n    return True if matches else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define a regular expression pattern to match 'z' except at the start and end of a word\n    pattern = r'(?<=\\b)(?!.*\\b)[zZ](?=\\b)'\n    \n    # Use the pattern to search for matches in the text\n    matches = re.findall(pattern, text)\n    \n    # If there are matches, return True, else return False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*z)\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z0-9])(z)(?!.*\\1)(?![a-zA-Z0-9])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array from 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:len(input)] = input[k:len(input)][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # convert input to a list\n    input_list = list(input)\n\n    # reverse the list from the first position to k-1\n    for i in range(k):\n        input_list[i], input_list[-1-i] = input_list[-1-i], input_list[i]\n\n    # convert the list back to a string and return it\n    return ''.join(map(str, input_list))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a given position k and reverses the array upto that position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a new array to store the reversed portion of the original array\n    reversed_array = []\n\n    # loop through the original array from the start to the kth position\n    for i in range(k): \n        reversed_array.append(input[i])\n\n    # loop through the original array from kth position to the end\n    for i in range(k, len(input)): \n        reversed_array.append(input[i])\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the start and end pointers\n    start = 0\n    end = k - 1\n    \n    # Initialize the temp variable\n    temp = 0\n    \n    # Loop through the array until the start pointer reaches the end\n    while start < end:\n        \n        # Swap the elements at start and end pointers\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        \n        # Increment the start and end pointers\n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse an array up to a given position k.\n    \"\"\"\n    for i in range(k-1, -1, -1):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k > len(input):\n        return input\n    else:\n        left = 0\n        right = k - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from index 0 to k-1\n    for i in range(0, k):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n\n    # Reverse the remaining elements in the array\n    input[k:] = input[:k][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to the k-th element\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from the k-th to the end\n    input[k:len(input)] = input[k:len(input)][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse an array up to a given position.\n\n    Args:\n        input (list): the input array to reverse.\n        k (int): the position at which to stop reversing the array.\n\n    Returns:\n        The reversed array up to position k.\n    \"\"\"\n    input.reverse()\n    return input[:k]"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to store the result\n    result_dict = {}\n    \n    # Loop over the keys of the test dictionary and add them to the result dictionary\n    for key in test_dict:\n        result_dict[key] = test_dict[key]\n    \n    # Add the result dictionary to the tuple\n    test_tup += (result_dict,)\n    \n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the test_dict values added to the test_tup values\n    new_dict = {**test_dict, **test_tup}\n    # convert the new dictionary into a tuple\n    new_tuple = tuple(new_dict.values())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the key-value pairs from the input tuple\n    new_dict = {}\n    for i in range(len(test_tup)):\n        new_dict[i] = test_tup[i]\n    # Merge the new dictionary with the input dictionary\n    test_dict.update(new_dict)\n    # Return the merged dictionary\n    return test_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key in test_dict:\n        test_tup = test_tup + (key, test_dict[key])\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the key-value pairs from the original dictionary and the new dictionary\n    combined_dict = {**test_dict, **test_tup[1]}\n    \n    # Return the modified tuple with the combined dictionary\n    return (test_tup[0], combined_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the dictionary is empty\n    if not test_dict:\n        return test_tup\n    \n    # Check if the tuple is empty\n    if not test_tup:\n        return (test_dict,)\n    \n    # Check if the tuple is a dictionary\n    if isinstance(test_tup, dict):\n        return (test_tup, test_dict)\n    \n    # Check if the dictionary is a dictionary\n    if isinstance(test_dict, dict):\n        return (test_dict,) + test_tup\n    \n    # If the dictionary is a list, add it to the tuple\n    if isinstance(test_dict, list):\n        return (test_dict,) + test_tup\n    \n    # If the dictionary is a tuple, add it to the tuple\n    if isinstance(test_dict, tuple):\n        return (test_dict,) + test_tup\n    \n    # If the dictionary is not a dictionary or list or tuple, return the original tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict}\n    new_tup = (*test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def helper(path, i, j, visited):\n        if i == n-1 and j == n-1:\n            return path, visited\n        visited.add((i,j))\n        if i < n-1 and (i+1,j) not in visited:\n            path, visited = helper(path+(i+1,j), i+1, j, visited)\n        if j < n-1 and (i,j+1) not in visited:\n            path, visited = helper(path+(i,j+1), i, j+1, visited)\n        return path, visited\n\n    n = len(cost)\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            visited = set()\n            if (i,j) not in visited:\n                path, _ = helper((i,j), 0, 0, visited)\n                path_cost = sum([cost[x][y] for x,y in path])\n                avg = path_cost / len(path)\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            up = dp[i - 1][j]\n            left = dp[i][j - 1]\n            dp[i][j] = min(up, left) + cost[i][j]\n\n    return dp[N - 1][N - 1] / (N * N)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    n = len(cost)\n    path_sum = 0\n    path_count = 0\n    max_avg = 0\n    \n    # iterate through all paths\n    for i in range(n):\n        for j in range(n):\n            \n            # if current cell is the bottom-right cell, stop iterating\n            if i == n-1 and j == n-1:\n                break\n            \n            # if current cell is the top-right cell, move down\n            if i == n-1 and j < n-1:\n                new_i = i\n                new_j = j+1\n                \n            # if current cell is the bottom-left cell, move right\n            elif i < n-1 and j == n-1:\n                new_i = i+1\n                new_j = j\n                \n            # if current cell is neither the top-right nor bottom-left cell, move right or down\n            elif i < n-1 and j < n-1:\n                new_i = i+1\n                new_j = j+1\n            \n            # compute path cost and update sum and count\n            path_cost = cost[i][j] + cost[new_i][new_j]\n            path_sum += path_cost\n            path_count += 1\n            \n            # update max average if necessary\n            if path_count > 0 and path_sum > 0 and max_avg < path_sum / path_count:\n                max_avg = path_sum / path_count\n                \n    # return max average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = set()\n    max_avg = float('-inf')\n    start = (0, 0)\n\n    def dfs(x, y):\n        nonlocal max_avg\n        visited.add((x, y))\n        if x == N - 1 and y == N - 1:\n            total_cost = 0\n            for i, j in visited:\n                total_cost += cost[i][j]\n            avg_cost = total_cost / len(visited)\n            max_avg = max(max_avg, avg_cost)\n            return\n        if x < N - 1:\n            dfs(x + 1, y)\n        if y < N - 1:\n            dfs(x, y + 1)\n\n    dfs(*start)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Helper function to find the maximum path with the given constraints\n    def max_path(cost, row, col, total_cost, visited):\n        # If the cell is out of the matrix, return the maximum cost with the current visited cells\n        if row < 0 or row >= len(cost) or col < 0 or col >= len(cost[0]):\n            return total_cost, visited\n\n        # Check if the current cell is already visited\n        if (row, col) in visited:\n            return total_cost, visited\n\n        # Mark the current cell as visited\n        visited.add((row, col))\n\n        # Compute the cost of moving right\n        cost_right, new_visited = max_path(cost, row, col + 1, total_cost + cost[row][col], visited)\n\n        # Compute the cost of moving down\n        cost_down, new_visited = max_path(cost, row + 1, col, total_cost + cost[row][col], visited)\n\n        # Return the maximum cost\n        return max(cost_right, cost_down), new_visited\n\n    # Find the maximum path with the given constraints\n    max_cost, visited = max_path(cost, 0, 0, 0, set())\n\n    # Compute the total cost and number of cells visited in the path\n    total_cost = 0\n    for row, col in visited:\n        total_cost += cost[row][col]\n\n    # Compute the average\n    average = total_cost / len(visited)\n\n    # Return the maximum average\n    return average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, total_cost, total_cells, visited, result):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            result.append(total_cost / total_cells)\n            return\n\n        if i < len(cost) and j < len(cost[0]) and (i, j) not in visited:\n            visited.add((i, j))\n            dfs(i + 1, j, total_cost + cost[i][j], total_cells + 1, visited, result)\n            dfs(i, j + 1, total_cost + cost[i][j], total_cells + 1, visited, result)\n            visited.remove((i, j))\n\n    max_average = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited = {(i, j)}\n            dfs(i, j, cost[i][j], 1, visited, [])\n            if max_average < max(result):\n                max_average = max(result)\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    n = len(cost)\n    paths = []\n    max_avg = 0\n    \n    # compute the maximum average for each cell\n    for i in range(n):\n        for j in range(n):\n            # create a list of cells for this path\n            path_cells = [(i,j)]\n            \n            # traverse the matrix and add adjacent cells to the path\n            while 0 <= i-1 < n and 0 <= j-1 < n:\n                i -= 1\n                j -= 1\n                path_cells.append((i,j))\n            \n            # compute the total cost for the path and its length\n            total_cost = sum(cost[i][j] for i,j in path_cells)\n            path_length = len(path_cells)\n            \n            # add the average to the list of paths\n            paths.append((total_cost, path_length, max_avg))\n            \n            # update the maximum average if necessary\n            if path_length > 0 and total_cost/path_length > max_avg:\n                max_avg = total_cost/path_length\n    \n    # find the maximum average path\n    max_path = max(paths, key=lambda x: x[2])\n    \n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 1:\n        return max(cost[0])\n\n    dp = [[0]*n for _ in range(n)]\n    max_avg = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = cost[0][j] + max(dp[i][k] for k in range(j, n))\n            elif j == 0:\n                dp[i][j] = cost[i][0] + max(dp[k][j] for k in range(i, n))\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][k] + dp[k][j-1] for k in range(i, j))\n\n    max_avg = dp[n-1][n-1]\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = set()\n\n    # Helper function to check if a path exists from current position\n    def check_path(i, j, path_sum):\n        # Check if we have reached bottom right cell\n        if i == N-1 and j == N-1:\n            return True, path_sum\n\n        # Check if we have already visited this position\n        if (i, j) in visited:\n            return False, path_sum\n\n        # Check if we can move right or down\n        if i < N-1:\n            right, left = check_path(i+1, j, path_sum)\n            if right:\n                visited.add((i+1, j))\n                return True, path_sum + cost[i+1][j]\n        if j < N-1:\n            down, up = check_path(i, j+1, path_sum)\n            if down:\n                visited.add((i, j+1))\n                return True, path_sum + cost[i][j+1]\n\n        # We cannot move right or down, so we cannot make a path from here\n        return False, path_sum\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                path_sum = cost[i][j]\n                max_avg = path_sum\n            else:\n                can_move, path_sum = check_path(i, j, path_sum)\n                if can_move and path_sum > max_avg:\n                    max_avg = path_sum\n\n    return max_avg / N"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    paths = []\n    max_avg = 0.0\n    visited = set()\n\n    for i in range(n):\n        paths.append([])\n        for j in range(n):\n            paths[i].append((i, j))\n\n    def backtrack(current, path):\n        if current[0] == n - 1 and current[1] == n - 1:\n            avg = sum(cost[path[i][0]][path[i][1]] for i in range(len(path))) / len(path)\n            if avg > max_avg:\n                max_avg = avg\n            visited.add(tuple(path))\n            return\n\n        if (current[0], current[1]) not in visited:\n            visited.add((current[0], current[1]))\n\n            if current[0] < n - 1:\n                backtrack((current[0] + 1, current[1]), path + [(current[0] + 1, current[1])])\n            if current[1] < n - 1:\n                backtrack((current[0], current[1] + 1), path + [(current[0], current[1] + 1)])\n\n            visited.remove((current[0], current[1]))\n\n    backtrack((0, 0), [])\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        height, weight = students[student]\n        if height > h and weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # loop through the students dictionary\n    for name, info in students.items():\n        # get the height and weight of the student\n        height, weight = info\n        # check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered students list\n            filtered_students.append(name)\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, value in students.items():\n        height, weight = value\n        if height > h and weight > w:\n            filtered_students[name] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Create a new dictionary to store the filtered students\n    filtered_students = {}\n\n    # Iterate through the students dictionary and check if the height and weight of each student are above the minimum\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            # If the height and weight are above the minimum, add the student to the filtered dictionary\n            filtered_students[name] = info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create a list to store filtered students\n    filtered_students = []\n    # iterate through the students dictionary\n    for student, info in students.items():\n        # unpack the student height and weight\n        student_height, student_weight = info\n        # check if the height is above the minimum and the weight is above the minimum\n        if student_height > h and student_weight > w:\n            # add the student to the filtered students list\n            filtered_students.append(student)\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create a new dictionary to store the filtered students\n    filtered_students = {}\n    # loop through the students dictionary and add the students to the filtered_students dictionary if their height and weight are above the minimum\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Create a dictionary to store the count of each number in the first list\n    count_dict = {}\n    for num in nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize an empty list to store the indices where the numbers are the same\n    same_indices = []\n    \n    # Loop over the second list\n    for i, num in enumerate(nums2):\n        # If the number is already in the dictionary, check if it matches the current number\n        if num in count_dict:\n            count_dict[num] -= 1\n            # If the count is now zero, add the index to the list of same indices\n            if count_dict[num] == 0:\n                same_indices.append(i)\n    \n    # Return the list of same indices\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    This function returns a list of pairs of indices where the lists have the same values.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result.append((i, i))\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return (i, j) for i in range(len(nums1)) for j in range(i+1, len(nums1)) if nums1[i] == nums1[j] and nums2[i] == nums2[j]\n    return (i, j) for i in range(len(nums1)) for j in range(len(nums2)) if nums1[i] == nums2[j] and nums1[i]!= nums2[j]"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for i in range(power):\n        sum += int(base_str[-1])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        remainder = base % 10\n        sum_of_digits += remainder\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    \n    while power > 0:\n        digit = num % 10\n        total += digit\n        power -= 1\n        num //= 10\n    \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize the sum of digits to zero\n    digit_sum = 0\n    # iterate over the digits of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the digit to the sum of digits\n        digit_sum += digit_int**power\n    # return the sum of digits\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    result = 0\n    # Iterate over the digits of the base string and calculate the sum of the digits raised to the power\n    for digit in base_str:\n        result += int(digit) ** power\n    # Return the sum of digits raised to the power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    for digit in str(base):\n        sum_digits += int(digit) ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize a variable to store the sum of all digits\n    sum_of_digits = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Iterate through the string and add the digits raised to the power\n    for digit in base_str:\n        sum_of_digits += int(digit)**power\n    \n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_str = str(base)\n    total_sum = 0\n    for digit in base_str:\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    total = 0\n    for i in range(1, power + 1):\n        total += base % 10\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = \"This is a test \" + \"of the function.\"\nresult = extract_quotation(text)\nprint(result)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # find all occurrences of \" \" between double quotes \"\n    quotation = re.findall('\" (.*?)\"', text1)\n    # loop through the list of quotations and extract the value\n    values = []\n    for q in quotation:\n        values.append(q.strip('\" '))\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")' # regular expression pattern to match quotation marks with values between them\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern for extracting quotation marks\n    pattern = r'(\".*?\"|\\'.*?\\')'\n    # Use the re.findall() method to find all matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Loop through the matches and remove the quotation marks from each match\n    for i in range(len(matches)):\n        matches[i] = matches[i][1:-1]\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=\")[^\"]*?(?=\")')\n    return pattern.findall(text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Iterate over the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element with the next element and append it to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    # Return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements\")\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (0, ) * N\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length\")\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the lists and add their elements together\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # group the numbers by the sum of their positions in the list\n    grouped = groupby(enumerate(nums), lambda x: sum(x[0]-y for y in x[1][1:]))\n    # return only the groups where the sum is the same as the index of the first element\n    return [list(g) for g in grouped if len(list(g)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(nums) if not group.next()]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    for key, group in groupby(nums):\n        if key == 1:\n            continue\n        elif key == 2:\n            nums.remove(group[0])\n        else:\n            group[0], *group[1:] = nums[group[0]]\n            nums = [x for x in nums if x!= nums[group[0]]]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # group the numbers into consecutive duplicates\n    grouped = groupby(nums)\n\n    # iterate over the groups, keeping track of the last number seen\n    for key, group in grouped:\n        # check if the length of the group is greater than 1\n        if len(list(group)) > 1:\n            # create a new list with only the first number in each group\n            new_group = [num for num in group]\n            # add the first number to the new group\n            new_group.append(next(group))\n            # remove the original number from the original list\n            nums.remove(key)\n            # add the new group to the list of consecutive duplicates\n            nums.extend(new_group)\n\n    # return the list of consecutive duplicates\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def consecutive_duplicate_finder(iterable):\n        '''\n        A generator function that finds consecutive duplicates in a given iterable.\n        '''\n        key = None\n        for num in iterable:\n            if num == key:\n                yield None\n            else:\n                yield num\n                key = num\n\n    # Group consecutive duplicates together using the `groupby()` function from the `itertools` module\n    grouped_nums = groupby(consecutive_duplicate_finder(nums), None)\n\n    # Convert the grouped iterator back to a list and return it\n    return list(grouped_nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for k, g in groupby(nums) if not k]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    prev_num = None\n\n    for num in nums:\n        if prev_num!= num:\n            unique_nums.append(num)\n        prev_num = num\n\n    return unique_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*r*h\n    lsa = math.pi*r**2*h\n    return s,lsa"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * (r + h)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r ** 2 * h / 3\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate lateral surface area\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (1/3) * math.pi * (r**2)  # using Heron's formula\n    lateral_surface_area = surface_area * (h/2)  # using the formula for cone lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula:\n    #    A = 1/2 * r^2 * sin(theta) * h\n    # where theta is the angle between the cone and the z-axis.\n    theta = math.acos((r**2 + h**2 - r**2 * math.cos(math.pi/3)) / (2 * r * h))\n    A = 0.5 * r**2 * math.sin(theta) * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    Area = math.pi * r * h\n    return Area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5 * math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of a cone\n    lateral_surface_area = (1/3) * math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([,.])', r':\\1', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match special characters\n    pattern = r'[\\s.,]'\n\n    # Use the re.sub() method to replace all matches with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n\n    # Replace all commas with a colon\n    text = re.sub(r',+', ':', text)\n\n    # Replace all dots with a colon\n    text = re.sub(r'\\.\\.+', ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([,.])', r':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^a-zA-Z0-9]', '', text).replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[\\s,.]\"\n    text = re.sub(pattern, \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match special characters\n    pattern = r'\\s+|,|\\.'\n    # Replace all matches with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if the mid element is the first occurrence of x\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # If x is not present in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Search the array for the first occurrence of x\n    first_occurrence = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence = i\n            break\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x, and returns the index of the first occurrence of x in A. If x is not found in A, it returns -1.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    \n    i = 0\n    while i < len(A) - 1 and A[i] <= x:\n        i += 1\n    \n    if i == len(A) or A[i]!= x:\n        return -1\n    \n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # calculating the prefix sum array\n    pre_sum = [0] * (len(arr)+1)\n    for i in range(1, len(arr)+1):\n        pre_sum[i] = pre_sum[i-1] + arr[i-1]\n\n    # calculating the product array\n    prod_arr = [1] * (len(arr)+1)\n    for i in range(1, len(arr)+1):\n        prod_arr[i] = prod_arr[i-1] * arr[i-1]\n\n    # calculating the sum of products of subarrays\n    subarray_sum = 0\n    for i in range(1, len(pre_sum)-1):\n        subarray_sum = subarray_sum + pre_sum[i]*prod_arr[i]\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n\n    # calculate prefix sum array\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # calculate sum of products of all sublists\n    dp = [0] * (n+1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            dp[j] += prefix_sum[j]*prod\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize two variables for the sum of products and the sum of squares of products\n    sum_of_products = 0\n    sum_of_squares_of_products = 0\n\n    # Iterate through each sublist starting from 1 to n-1\n    for i in range(1, n):\n\n        # Calculate the product of all the elements in the sublist\n        sublist_product = 1\n        for j in range(i):\n            sublist_product *= arr[j]\n\n        # Calculate the sum of squares of products\n        sublist_sum_of_squares = 0\n        for j in range(i):\n            sublist_sum_of_squares += arr[j] ** 2\n\n        # Update the sum of products and the sum of squares of products\n        sum_of_products += sublist_product\n        sum_of_squares_of_products += sublist_sum_of_squares\n\n    # Calculate the sum of products of all sublists\n    total_sum_of_products = sum_of_products * (n - 1) / 2\n\n    # Calculate the sum of squares of products of all sublists\n    total_sum_of_squares_of_products = sum_of_squares_of_products * (n - 1) / 2\n\n    # Calculate the sum of squares of the sublist of length n\n    sum_of_squares = n * (n - 1)\n\n    # Calculate the final answer\n    return total_sum_of_products - total_sum_of_squares_of_products + sum_of_squares"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 10**9 + 7\n    prefix_sum = [0] * (n + 1)\n    prod_sum = [0] * (n + 1)\n\n    for i in range(n + 1):\n        prefix_sum[i] = (prefix_sum[i - 1] + arr[i - 1]) % MOD\n\n    for i in range(1, n + 1):\n        prod_sum[i] = (prod_sum[i - 1] + arr[i - 1] * prefix_sum[i - 1]) % MOD\n\n    total_sum = 0\n    for i in range(n):\n        sub_sum = 0\n        for j in range(i, n + 1):\n            sub_sum = (sub_sum + (prefix_sum[j] - prefix_sum[i]) * prod_sum[j]) % MOD\n            sub_sum = (sub_sum + MOD) % MOD\n        total_sum = (total_sum + sub_sum) % MOD\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def product_subarray(arr, start, end):\n        '''\n        Helper function to find product of subarray from start to end\n        '''\n        prod = 1\n        for i in range(start, end):\n            prod *= arr[i]\n        return prod\n\n    n = len(arr)\n    # Initialize product array\n    product_arr = [product_subarray(arr, i, n) for i in range(n)]\n\n    # Calculate sum of products\n    subarray_sum = sum(product_arr)\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(1, n):\n        for j in range(i, n):\n            result += arr[j] * (arr[j] - 1) // 2\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = arr[0]\n    for i in range(2, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    result = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            result[i] += product * prefix_sum[j]\n\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    \n    # Initialize a 2D array to store the product of sublists\n    subarray_prod = [[1]*n for _ in range(n)]\n    \n    for i in range(n):\n        # Multiply each element with the product of previous elements to form the product of sublists\n        subarray_prod[i][i] = arr[i] * product\n        \n        # Multiply the current element with the product of previous elements to form the product of sublists\n        for j in range(i):\n            subarray_prod[i][j] = arr[i] * subarray_prod[i][j]\n        \n        # Multiply the product of previous elements with the product of sublists to form the product of sublists\n        for j in range(i+1, n):\n            subarray_prod[i][j] = subarray_prod[i][j-1] * subarray_prod[j][j]\n        \n        # Update the product of sublists\n        product *= subarray_prod[i][i]\n    \n    # Initialize the sum of products to 0\n    sum_of_products = 0\n    \n    # Multiply the product of sublists with each element of the original array to get the sum of products\n    for i in range(n):\n        sum_of_products += product * arr[i]\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0]*(n+1)\n    for i in range(1,n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    def prod_of_subarray(start, end):\n        return prefix_sum[end] * prefix_sum[n] - prefix_sum[start] * prefix_sum[end-1]\n\n    max_sum = float('-inf')\n    for start in range(1, n):\n        for end in range(start, n+1):\n            sub_sum = 0\n            for i in range(start, end):\n                sub_sum += arr[i]\n            sub_prod = prod_of_subarray(start, end)\n            if sub_sum >= 0:\n                max_sum = max(max_sum, sub_sum * sub_prod)\n\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        sublist_sum = sum(arr[i:j+1])\n        for j in range(i+1, n):\n            sublist_prod = 1\n            for k in range(i, j+1):\n                sublist_prod *= arr[k]\n            result += sublist_prod * sublist_sum\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number as input and returns the number with the middle bits toggled.\n    \"\"\"\n    # Initialize the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    # Toggle the first and last bits except the middle one\n    middle_bit = (n >> 1) & 1\n    n = (n & (1 << (n.bit_length() - 2))) | ((middle_bit ^ first_bit) & (1 << (n.bit_length() - 1)))\n    \n    # Toggle the remaining middle bits\n    for i in range(1, (n.bit_length() // 2) + 1):\n        middle_bit = (n >> (i + 1)) & 1\n        n = (n & ~(1 << (i + 1))) | ((middle_bit ^ last_bit) & (1 << (i + 1)))\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize the first and last bit of the number\n    first_bit = n & 1\n    last_bit = (n & (2**32 - 1)) >> 31\n\n    # toggle all other bits\n    n = n ^ (first_bit ^ last_bit)\n\n    # reset the first and last bit\n    n = n & ~(first_bit ^ last_bit)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of a given number.\n\n    Parameters:\n    n: An integer representing the number to be toggled.\n\n    Returns:\n    An integer representing the toggled number.\n    \"\"\"\n\n    # Initialize variables\n    first_bit = n & 1\n    last_bit = n >> 31\n    mid_bit = n & ~(1 << (first_bit + last_bit))\n\n    # Toggle the middle bits\n    mid_bit ^= 1\n\n    # Combine the first and last bits\n    n = (n & ~(1 << first_bit)) | ((mid_bit & 1) << first_bit)\n\n    # Combine the last and middle bits\n    n = (n & ~(1 << (last_bit + 1))) | ((n >> 1) & (1 << last_bit))\n\n    # Combine the first and last bits again to form the original number\n    n = (n & ~(1 << (last_bit + 1))) | ((n >> 1) & (1 << last_bit))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Store the first and last bits separately\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n\n    # Combine the first and last bits with the middle bits\n    return (middle_bits << 1) | first_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Bitwise XOR (^) operator to toggle bits of the number except the first and last bit\n    n = n ^ 0b1010101010101010\n    # Return the number with the toggled bits\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Check if the number is a negative number\n    is_negative = False\n    if n < 0:\n        is_negative = True\n        n = abs(n)\n\n    # Find the index of the first and last set bit\n    first_set_bit = 0\n    last_set_bit = 0\n    for i in range(32):\n        if (n >> i) & 1 == 1:\n            first_set_bit = i\n            if i == 0:\n                break\n            elif i == 31:\n                last_set_bit = i\n                break\n\n    # Toggle bits of the number except the first and last bit\n    n ^= ((1 << first_set_bit) ^ (1 << last_set_bit))\n\n    # Check if the number is negative\n    if is_negative:\n        n = -n\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n    Function to toggle bits of the number except the first and the last bit.\n    '''\n    # Initialize the variables\n    first = n & 1  # first bit\n    last = n & 0b111111111111111111111111111111111  # last bit\n    second = n & 0b111111111111111111111111111111110  # second to last bit\n\n    # Toggle the first and last bits\n    n ^= first ^ last\n\n    # Toggle the second to last bit\n    n ^= second ^ last\n\n    # Return the new number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # initialize variables\n    first_bit = n & (n-1) # first set bit\n    last_bit = n & (-n) # last set bit\n    other_bits = n & ((1<<1)-1) # all other bits\n    middle_bits = other_bits ^ (first_bit | last_bit) # middle bits\n\n    # toggle middle bits\n    middle_bits ^= (1 << (middle_bits.bit_length() - 1))\n    \n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    \n    # Toggle the bits except for the first and the last bit\n    n = (n ^ (first_bit | last_bit))\n    \n    # Set the first and last bits to the original values\n    n = (n ^ first_bit) | (n ^ last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bit of the number\n    first_bit = 1 << 31\n    last_bit = 1 << 0\n    \n    # Initialize the shifted bits\n    shifted_bits = (n & first_bit) >> 31\n    shifted_bits += (n & last_bit) << 31\n    \n    # Toggle the shifted bits\n    toggled_bits = shifted_bits ^ shifted_bits\n    \n    # Combine the original number with the toggled bits\n    result = n ^ toggled_bits\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect library to find the left insertion point for the value x in the sorted list a.\n    index = bisect.bisect_left(a, x)\n    # If the value x is not found in the list, return the length of the list.\n    if index == len(a):\n        return len(a)\n    # If the value x is greater than the first element in the list, return index-1.\n    elif x > a[0]:\n        return index-1\n    # If the value x is less than the first element in the list, return index.\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): a sorted list\n    x (int): a value to be inserted\n\n    Returns:\n    int: the left insertion point\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use the binary search algorithm to find the index at which x should be inserted\n    index = bisect.bisect_left(a, x)\n    # If the index at which x should be inserted is equal to len(a), then the left insertion point is len(a)\n    if index == len(a):\n        return len(a)\n    # If the index at which x should be inserted is greater than len(a), then the left insertion point is len(a)\n    elif index > len(a):\n        return len(a)\n    # Otherwise, return the index at which x should be inserted\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    # Use bisect to find the index of the specified value in the sorted list a\n    index = bisect.bisect_left(a, x)\n    \n    # If the specified value is smaller than the first element in the list, return 0\n    if index == 0:\n        return 0\n    \n    # If the specified value is greater than the last element in the list, return the index + 1\n    if index == len(a):\n        return index + 1\n    \n    # If the specified value is between the first and last elements in the list, return the index\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A sorted list.\n    x (int): A value to be inserted.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    \"\"\"\n    # Use binary search algorithm to find the left insertion point.\n    left = bisect.bisect_left(a, x)\n    if left == len(a) or a[left]!= x:\n        return left\n    else:\n        return left - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a list of sorted elements `a` and a value `x` as input and returns the left insertion point of `x` in `a`.\n\n    The function uses the `bisect` module to search for the left insertion point of `x` in the list `a` using the binary search algorithm. The binary search algorithm returns the index where `x` should be inserted in the list `a` such that all elements to its left are smaller than `x`, and all elements to its right are larger than `x`.\n\n    The time complexity of the binary search algorithm is O(log n), which makes the function efficient for large lists.\n\n    If `x` is not found in `a`, the function returns the index where `x` should be inserted in `a` such that `x` belongs to the list `a`.\n\n    Example:\n    >>> a = [1, 3, 5, 7, 9]\n    >>> left_insertion(a, 4)\n    2\n\n    >>> a = [1, 3, 5, 7, 9]\n    >>> left_insertion(a, 10)\n    5\n\n    >>> a = [1, 3, 5, 7, 9]\n    >>> left_insertion(a, 7)\n    1\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes in a sorted list a and a value x and returns the left insertion point of x in a.\n    \"\"\"\n    # Find the index where x should be inserted using binary search\n    index = bisect.bisect_left(a, x)\n\n    # Return the left insertion point\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string is starting with a vowel, \n    else False.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 / (2**n)) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return geometric_sum(n-1) + n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return (1/n) * (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        min_num = 10**n - 1\n        min_tri = int(min_num / math.factorial(n))\n        return min_tri"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_smallest_triangular_num(n):\n    triangular_nums = [1]\n    while len(str(len(triangular_nums))) < n:\n        triangular_nums.append(triangular_nums[-1]+1)\n    smallest_triangular_num = triangular_nums[-1]\n    index = triangular_nums.index(smallest_triangular_num)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_num = 10**n\n    count = 0\n    index = 0\n\n    for i in range(1, max_num + 1):\n        triangular = (i*(i+1))/2\n        if triangular < max_num:\n            index += 1\n        else:\n            count += 1\n            if count == max_num:\n                index -= 1\n                break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # define the maximum number of digits for which we can calculate the smallest triangular number\n    max_digits = 10**n - 1\n\n    # initialize a list to store the triangular numbers\n    tris = []\n\n    # loop through all possible values of n and calculate the smallest triangular number with that many digits\n    for i in range(1, max_digits+1):\n        # calculate the smallest triangular number with n digits\n        tri = math.factorial(n) // math.factorial(i) * math.factorial(max_digits - n) // math.factorial(n - i)\n        \n        # check if the triangular number is already in the list\n        if tri not in tris:\n            tris.append(tri)\n\n    # find the index of the smallest triangular number with n digits\n    index = tris.index(min(tris))\n\n    # return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Initialize a list to store the sum of each triangular number with n digits\n    triangular_sum = [0] * (n + 1)\n\n    # Fill the list with the sum of each triangular number with n digits\n    triangular_sum[0] = 0\n    for i in range(1, n + 1):\n        triangular_sum[i] = triangular_sum[i-1] + i\n\n    # Find the smallest triangular number with n digits\n    min_triangular = triangular_sum[0]\n\n    # Initialize variables to store the current triangular number and its index\n    current_triangular = min_triangular\n    current_index = 0\n\n    # Loop through each triangular number with n digits\n    for i in range(1, n + 1):\n\n        # If the current triangular number is smaller than the smallest triangular number, update the smallest triangular number and its index\n        if current_triangular < min_triangular:\n            min_triangular = current_triangular\n            current_index = i\n\n        # Calculate the next triangular number using the formula T(n) = T(n-1) + n\n        current_triangular = triangular_sum[i-1] + i\n\n    # Return the index of the smallest triangular number with n digits\n    return current_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    for i in range(n, 1, -1):\n        for j in range(1, i+1):\n            triangular_number = int(math.pow(j, i))\n            if triangular_number >= 10**(i-1) and triangular_number < 10**i:\n                return i - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # Helper function to find the next triangular number\n    def next_triangular(n):\n        return int(math.ceil(math.log10(10**(n-1)) + 1) * 10**(n-1))\n\n    # Initialize index variable\n    index = next_triangular(n)\n\n    # Loop through digits of the smallest triangular number\n    while len(str(index)) < n:\n        index = next_triangular(n)\n\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_valid_triangular_number(num, n):\n        if len(str(num))!= n:\n            return False\n        return is_prime(num)\n    \n    triangular_numbers = [0]\n    for i in range(1, 10**n):\n        triangular_numbers.append(i**2 + i + 1)\n    \n    min_triangular_number = min(triangular_numbers)\n    smallest_triangular_number = min_triangular_number\n    \n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                if is_valid_triangular_number(i*j*k, n):\n                    smallest_triangular_number = i*j*k\n                    break\n            else:\n                continue\n            break\n        else:\n            break\n    \n    return triangular_numbers.index(smallest_triangular_number)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the smallest triangular number to 1\n    smallest_triangular_number = 1\n    \n    # Initialize the index of the smallest triangular number to 1\n    index = 1\n    \n    # Find the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # Loop through all possible triangular numbers up to the square root of n\n    for triangular_number in range(2, int(sqrt_n) + 1):\n        # Check if the triangular number has n digits\n        if triangular_number.bit_length() == n:\n            # If it does, update the smallest triangular number and its index\n            if triangular_number < smallest_triangular_number:\n                smallest_triangular_number = triangular_number\n                index = 1\n            elif triangular_number == smallest_triangular_number:\n                index += 1\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def triangular_number(n):\n        t = 1\n        for i in range(1, n+1):\n            t = t * i\n        return t\n    \n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n    \n    def smallest_triangular_number(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            t = triangular_number(n-1)\n            while not is_prime(t):\n                t += 1\n            return t\n    \n    def index_of_smallest_triangular_number(n):\n        if n > 10:\n            return -1\n        index = 0\n        triangular_number_count = 0\n        while triangular_number_count < n:\n            index += 1\n            triangular_number_count += count_digits(smallest_triangular_number(index))\n        return index\n    \n    return index_of_smallest_triangular_number(n)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    my_dict = {}\n    # Iterate over the tuple\n    for i in range(0, len(test_tup)-1):\n        # Add the current element as a key and the next element as a value\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = {i: test_tup[i+1] for i in range(len(test_tup)-1)}\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Tuple length should be even.\")\n        return None\n    \n    result = {}\n    \n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n        \n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Extract the key and value from the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        \n        # Add the key-value pair to the dictionary\n        result[key] = value\n    \n    # Return the dictionary\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"The input tuple must have an even length.\"\n    \n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Checks whether all characters in a string are the same.\n\n    Args:\n        s (str): The string to check.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the count of characters in the string\n    count = len(s)\n    # Loop through each character in the string\n    for i in range(count):\n        # If the count of characters is greater than 1, the function returns False\n        if count > 1:\n            return False\n    # If the loop completes without finding any duplicate characters, the function returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize the variable to store the first character of the string\n    first_char = s[0]\n    # Loop through each character of the string\n    for char in s:\n        # If any character is different from the first character, return False\n        if char!= first_char:\n            return False\n    # If no character is different from the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set(s)\n    if len(char_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string\n    for char in s:\n        # If the character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for char in s:\n        if s.count(char) > 1:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    s = (1 + math.sqrt(5)) / 2\n\n    # calculate the area of the tetrahedron\n    area = (s * (s - 1) * (s - 2) * (s - 3)) ** 0.5\n\n    # multiply the area with the base of the side to find the area of the tetrahedron\n    return area * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 0.5 * side * math.sin(math.pi / 3)\n\n    # calculate the area of the tetrahedron\n    area = (1.0 / 6) * side ** 3\n\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) / 4 # Heron's formula\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(s * (s - 1) * (s - 2) * (s - 3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) ** 0.5\n    return (1/6) * side * s * math.sqrt(3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side/2\n    area = (3*base**2)/4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of the side of the tetrahedron as input and returns its area as output.\n    '''\n    s = side / 2 # side of the square of the right triangle\n    return math.sqrt(s ** 2 + s ** 2 + s ** 2) # formula for the area of a right triangle"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    '''\n    return 1/6 * (side**2 + side**3 + side**4)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (3*side**2 + 4*side + 4)/6\n    return math.sqrt(s)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m > n, then simply reverse the list\n    if m > n:\n        list = list[::-1]\n        m = n - m\n\n    # If m == 0 or m > n, then return the list as it is\n    if m == 0 or m > n:\n        return list\n\n    # Calculate the number of times to rotate the list\n    count = m // n\n    # Calculate the remaining number of items to rotate\n    remain = m % n\n\n    # Rotate the list by count times\n    for i in range(count):\n        left, right = 0, n - 1\n        while left < right:\n            list[left], list[right] = list[right], list[left]\n            left += 1\n            right -= 1\n\n    # Rotate the remaining items by m\n    for i in range(remain):\n        list.append(list.pop(0))\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    n = len(list)\n    for i in range(m):\n        list.append(list[i])\n        list.pop(0)\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        list.append(list.pop(0))\n        for i in range(m):\n            list.append(list.pop(0))\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Check if the list is empty\n    if not list:\n        return None\n    \n    # Calculate the number of items to be rotated\n    n = len(list)\n    m = m % n\n    \n    # Reverse the first m items of the list\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining n-m items of the list\n    list[m:] = list[m:][::-1]\n    \n    # Reverse the entire list\n    list[:] = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    -----------\n    list: list of any type\n        A list to be rotated.\n    m: int\n        The number of items to rotate the list to the right.\n\n    Returns:\n    --------\n    list of any type\n        The rotated list.\n\n    Examples:\n    ---------\n    >>> rotate_right([1, 2, 3, 4, 5], 2)\n    [3, 4, 5, 1, 2]\n    >>> rotate_right([1, 2, 3, 4, 5], 0)\n    [1, 2, 3, 4, 5]\n    >>> rotate_right([1, 2, 3, 4, 5], 5)\n    [5, 1, 2, 3, 4]\n    \"\"\"\n\n    n = len(list)\n    if m == 0:\n        return list\n    elif m >= n:\n        return list + list[:m]\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and a number n and rotates the list n items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        n (int): The number of items to be rotated to the right.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function will rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if there is a None value in the tuple, else False.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(value is None for value in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as an input and checks if it has any None value or not.\n    '''\n\n    # iterate through the tuple using a for loop\n    for elem in test_tup:\n\n        # if an element is None, return True\n        if elem is None:\n            return True\n\n    # if the loop completes without finding any None value, return False\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(elem is None for elem in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n\n    # Create a list of all the digits in the range\n    digits = [int(digit) for digit in str(startnum)] + [int(digit) for digit in str(endnum)]\n\n    # Use a lambda function to filter the numbers within the given range\n    filter_numbers = lambda x: all(digit in str(x) for digit in digits)\n\n    # Use the filter function to get all the numbers within the given range that are divisible by every digit\n    divisible_numbers = list(filter(filter_numbers, range(startnum, endnum+1)))\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n\n    numbers = [num for num in range(startnum, endnum+1)]\n    divisible_numbers = [num for num in numbers if is_divisible_by_digit(num)]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a function to check if a number is divisible by every digit it contains\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    # Find all numbers within the given range that are divisible by every digit it contains\n    numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(int(digit) in str(num) for digit in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        def check_digit(digit):\n            return 1 if digit % 2 == 0 else 0\n        return all(num % digit == 0 for digit in map(check_digit, str(num)))\n\n    numbers = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a/360))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs. The function returns the area of the sector if the angle is within the range of 0 to 360 degrees. If the angle is greater than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    area = math.pi * r * r * (a/360)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is between 0 and 360 degrees\n    if a < 0 or a > 360:\n        print(\"The angle must be between 0 and 360 degrees.\")\n        return None\n\n    # Calculate the area of the sector using the formula A = pi*r^2*sin(a)\n    area = math.pi*r**2*math.sin(math.radians(a))\n\n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # calculate area of sector\n    area = r * math.pi * (a/360)\n    \n    # return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = r * a / 360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    # create a 3x3 matrix to store the lengths of the longest common subsequences of the three sequences\n    L = [[0]*3 for _ in range(3)]\n    \n    # initialize the first row and column of the matrix\n    for i in range(3):\n        L[i][0] = 0\n        L[0][i] = 0\n        \n    # fill the rest of the matrix\n    for i in range(1, 3):\n        for j in range(1, 3):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j]\n            elif X[i-1] == Z[i-1]:\n                L[i][j] = L[i][j-1]\n            elif Y[j-1] == Z[i-1]:\n                L[i][j] = L[i][j-1]\n    \n    # backtrack to find the common subsequence\n    result = ''\n    i = 2\n    j = 2\n    while L[i][j] > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[i-1]:\n            j -= 1\n        elif Y[j-1] == Z[i-1]:\n            i -= 1\n    \n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    def helper(X, Y, Z, m, n, p, q, r): \n        if m == 0 or n == 0: \n            return 0 \n        elif X[m-1] == Y[n-1] and Z[p-1] == Y[n-1]: \n            return 1 + helper(X, Y, Z, m-1, n-1, p-1, q, r) \n        else: \n            return max(helper(X, Y, Z, m-1, n, p, q, r), \n                      helper(X, Y, Z, m, n-1, p, q, r),\n                      helper(X, Y, Z, m-1, n-1, p-1, q-1, r)) \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n    q = len(X) + len(Y) - 1 \n    r = min(m, p) \n    return helper(X, Y, Z, m, n, p, q, r) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Initialize a 2D table to store the lengths of LCS for all possible substrings of X and Y\n    L = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] \n  \n    # Fill the table in bottom-up manner\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Return the length of the longest common subsequence\n    return L[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D table to store LCS of three subsequences\n    L = [[[0 for j in range(o + 1)] for i in range(m + 1)] for k in range(n + 1)]\n\n    # fill the table diagonally\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k])\n\n    # find the LCS of the three subsequences\n    max_len = L[m][n][o]\n    lcs = []\n    i, j, k = m, n, o\n    while max_len!= 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences X, Y and Z as input and returns the longest common subsequence of the three sequences.\n    '''\n    # creating a dictionary to store lengths of subsequences\n    lengths = {}\n\n    # iterating through all subsequences of X\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                # calculating the length of the current subsequence\n                length = 0\n                while X[i+length] == Y[j+length] and X[i+length] == Z[k+length]:\n                    length += 1\n\n                # storing the length of the current subsequence in the dictionary\n                if length > 0:\n                    if (i,j,k) not in lengths or lengths[(i,j,k)] < length:\n                        lengths[(i,j,k)] = length\n\n    # finding the longest common subsequence from the dictionary\n    max_length = 0\n    lcs = ''\n    for key, value in lengths.items():\n        if value > max_length:\n            max_length = value\n            lcs = X[key[0]:key[0]+key[2]]\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # function to calculate the length of a string \n    def length(s): \n        return len(s) \n\n    # function to find the length of the longest common subsequence of two strings \n    def lcs_length(s1, s2): \n        m = length(s1) \n        n = length(s2) \n        dp = [[0] * (n + 1) for _ in range(m + 1)] \n        max_len = 0 \n\n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                if s1[i - 1] == s2[j - 1]: \n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                    if dp[i][j] > max_len:\n                        max_len = dp[i][j]\n                else: \n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n\n        return max_len\n\n    # function to find the longest common subsequence of three strings \n    def lcs_of_three_strings(s1, s2, s3): \n        m = length(s1) \n        n = length(s2) \n        o = length(s3) \n        dp = [[[0] * (o + 1) for _ in range(m + 1)] for _ in range(n + 1)] \n        max_len = 0 \n\n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                for k in range(1, o + 1): \n                    if s1[i - 1] == s2[j - 1] and s2[j - 1] == s3[k - 1]: \n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                        if dp[i][j][k] > max_len:\n                            max_len = dp[i][j][k]\n                    else: \n                        dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) \n\n        return max_len\n\n    # main function to find the longest common subsequence of three strings \n    def main(): \n        s1 = input(\"Enter the first string: \") \n        s2 = input(\"Enter the second string: \") \n        s3 = input(\"Enter the third string: \") \n\n        print(\"Length of longest common subsequence:\", lcs_length(s1, s2)) \n        print(\"Length of longest common subsequence of\", s1, \"and\", s2, \"and\", s3, \":\", lcs_of_three_strings(s1, s2, s3)) \n\n    # calling the main function \n    if __name__ == \"__main__\": \n        main() "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n\n    # Create a 2D table to store length of longest common subsequence for all prefixes of X,Y,Z\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Initialize the result string as empty string\n    result = \"\"\n\n    # Traverse the table to construct the result string\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            result = X[i - 1] + result\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the result string\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    The function uses dynamic programming to find the length of the LCS and then backtrack to find the actual LCS.\n    Time Complexity: O(nm), where n and m are the lengths of the three strings.\n    Space Complexity: O(nm), where n and m are the lengths of the three strings.\n    '''\n    \n    # Helper function to find the length of the LCS of two strings\n    def lcs_length(X, Y):\n        m = len(X)\n        n = len(Y)\n        \n        # Create a 2D table to store lengths of LCS for subproblems\n        L = [[0] * (n+1) for _ in range(m+1)]\n        \n        # Fill the table in bottom-up manner\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n        \n        return L[m][n]\n    \n    # Find the length of the LCS of X, Y and Z\n    L = lcs_length(X, Y)\n    m, n = len(X), len(Y)\n    lcs_len = L\n    \n    # Backtrack to find the actual LCS\n    LCS = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Reverse the LCS and return it\n    return ''.join(reversed(LCS))[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    i, j = n, m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs_length = p[m][n]\n    lcs = []\n    i = m\n    j = n\n    while lcs_length > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            lcs_length -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"\\b[A-Z][a-z]+\\b\"\n    words = re.findall(pattern, str1)\n    new_str = \" \".join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, lambda x:'' + x.group(), str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate through the words and replace the first letter of each word with a space\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n    \n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expressions to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-letter characters with spaces\n    str1 = re.sub(r'[^a-zA-Z\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        result.append(word.replace(word[0],'') + word[1:])\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, string)\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Join the words with spaces between them\n    result =''.join(words)\n    # Capitalize the first word\n    result = result.capitalize()\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w+\\b', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            pass\n    return sorted(nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    # remove all non-numeric characters from the list of strings\n    nums_str = [str(num) for num in nums_str if num.isdigit()]\n    # sort the list of strings numerically\n    nums_str.sort(key=lambda x: int(x))\n    # convert the sorted list of strings back to a list of numbers\n    nums = [int(num) for num in nums_str]\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list numerically\n    nums.sort()\n    # convert the sorted list back to a list of strings\n    nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of strings of numbers numerically.\n    \"\"\"\n    # Split the strings into a list of numbers\n    nums = [float(num) for num in nums_str]\n    # Sort the list of numbers in ascending order\n    nums.sort()\n    # Convert the sorted list of numbers back into a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: (int(x[1:-1]), x[0]))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x.replace(\",\", \"\").replace(\"$\", \"\").replace(\" \", \"\")))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the list into a list of lists of integers\n    int_lists = [list(map(int, num_str.split(','))) for num_str in nums_str]\n    # sort each inner list of integers numerically\n    int_lists = sorted(int_lists)\n    # join the sorted inner lists into a single list of strings of numbers separated by commas\n    sorted_nums_str = ','.join([''.join(str(num)) for num_list in int_lists for num in num_list])\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        for i in test_tup:\n            item += i\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return check_min_heap_helper(arr, left) or check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Given an array, check if it represents a min heap or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 0 and arr[i] < arr[i//2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # If left subtree root is smaller than current node, then the parent is not a min heap\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    \n    # Check the right subtree if it exists\n    if i < len(arr) // 2 - 1:\n        if arr[i] < arr[2 * i + 2]:\n            return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i >= len(arr):\n        return True\n    \n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2 * i + 1) or check_min_heap_helper(arr, 2 * i + 2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if i == 0:\n        return arr[i] <= arr[1]\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case - if the root is None, the array is not a min heap\n    if arr[0] is None:\n        return False\n    \n    # Compare the root with its children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If both children are None, the array is a min heap\n    if arr[left] is None and arr[right] is None:\n        return True\n    \n    # If one child is None, the array is not a min heap\n    if arr[left] is None:\n        return False\n    \n    # If the root is smaller than both its children, the array is a min heap\n    if arr[i] < min(arr[left], arr[right]):\n        return True\n    \n    # If the root is larger than both its children, the array is not a min heap\n    return False\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Check if the root is None, which means the array is not a min heap\n    if arr[0] is None:\n        return False\n    \n    # If the root is None, the array is a min heap\n    if arr[0] is None:\n        return True\n    \n    # Check if the array is a min heap by traversing the array and calling the helper function\n    for i in range(1, len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n\n    # Check if parent is smaller than its children\n    if arr[i] < arr[parent(i)]:\n        return False\n\n    # Recursively check if parent is smaller than its children\n    return check_min_heap_helper(arr, parent(i))\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Call helper function to check if the array is a valid min heap\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # If array is empty or not an array\n    if not isinstance(arr, list) or len(arr) == 0:\n        return None\n    \n    # Base case\n    if i >= len(arr) - 1:\n        return True\n    \n    # If current element is greater than the next element, then its not a min heap\n    if arr[i] > arr[i+1]:\n        return False\n    \n    # Recursively call the function for the left and right subarrays\n    left_heap = check_min_heap_helper(arr, 2*i+1)\n    right_heap = check_min_heap_helper(arr, 2*i+2)\n    \n    # If any of the subarrays are not min heaps, then the array is not min heap\n    if left_heap is False or right_heap is False:\n        return False\n    \n    # If all the subarrays are min heaps, then the array is min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root node is greater than the left child\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n\n    # Recursively check the left and right children\n    left_child = i * 2\n    right_child = i * 2 + 1\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    for i in range(2, n + 1):\n        j += (i * (i - 1)) // 2\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    jacobsthal = 0\n    jacobsthal_prev = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            jacobsthal += i\n        else:\n            jacobsthal_prev += i\n    return jacobsthal - jacobsthal_prev"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 0\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    j = 0\n    k = 1\n    l = 1\n    a = 2\n    b = 1\n    c = 1\n    d = 1\n\n    # Loop through the number of times specified by the user\n    for i in range(2, n+1):\n\n        # Update values of a, b, c, d\n        a = b + c + d\n        b = a + k\n        c = b + l\n        d = c + l\n\n        # Update values of j, k, l\n        j = a - b + k\n        k = a - b + l\n        l = a + b + k\n\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n <= 1:\n        return n\n\n    jacobsthal_lst = [0, 1]\n\n    for i in range(2, n):\n        jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n\n    return jacobsthal_lst[n-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    \n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    \n    return c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num((n-1)//2) + jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    l = 1\n    while n > 0:\n        if n % 2 == 1:\n            j += l\n        l += l\n        n //= 2\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        return 2*jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    jacobsthal_numbers = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87383, 174765, 349531, 699061, 1398123, 2796245, 5592491, 11184981, 22369963, 44739925, 89479851, 178959701, 357919403, 715838805, 1431677611, 2863355221, 5726710443, 11453420885, 22906841771, 45813683541, 91627367083, 183254734165, 366509468331, 733018936661, 1466037873323, 2932075746645, 5864151493291, 11728302986581, 23456605973163, 46913211946325, 93826423892651, 187652847785302, 375305695570603, 750611391141205, 1501222782282411, 3002445564564821, 6004891129129643, 12009782258259285, 24019564516518571, 48039129033037142, 96078258066074285, 192156516132148571, 384313032264297142, 768626064528594285, 1537252129057188571, 3074504258114377142, 6149008516228754285, 12298017032457508571, 24596034064915017142, 49192068129830034285, 98384136259660068571, 196768272519320137142, 393536545038640274285, 787073090077280548571]\n    \n    if n < 0 or n > len(jacobsthal_numbers):\n        raise ValueError(\"Input value is out of range\")\n   "
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    test_list: a list of tuples (e.g. [(1, 2, 3), (4, 5, 6), (7, 8, 9)])\n    K: an integer representing the number of records to be returned (e.g. 2)\n    '''\n    \n    # Initialize variables to store the minimum k records and their indices\n    min_records = []\n    min_indices = []\n    \n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        \n        # Find the indices of the minimum k records\n        min_index = i\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                min_index = j\n        \n        # Check if the current tuple is the minimum k record\n        if len(min_records) < K:\n            min_records.append(test_list[i])\n            min_indices.append(min_index)\n        else:\n            # If the current tuple is not the minimum k record, check if the current tuple is smaller than the smallest k record\n            if test_list[i][0] < min_records[0][0]:\n                min_records[0] = test_list[i]\n                min_indices[0] = min_index\n                \n        # If the length of the minimum k record is greater than K, remove the last record from the list\n        if len(min_records) > K:\n            del min_records[-1]\n            del min_indices[-1]\n    \n    # Return the minimum k records\n    return min_records, min_indices"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize minimum count and minimum value to infinity\n    count = float('inf')\n    min_val = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Increment the count of the minimum value seen so far\n        count += 1\n        # Update the minimum value if the current element is less than the current minimum value\n        if sorted_list[i][0] < min_val:\n            min_val = sorted_list[i][0]\n            # Reset the count to 1\n            count = 1\n\n    # Return the minimum count\n    return count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(float('inf'))\n\n    for item in test_list:\n        for j in range(K):\n            if item[j] < min_list[j]:\n                min_list[j] = item[j]\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_lst = sorted(test_list, key=lambda x: x[1], reverse=True)[:K]\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns the minimum K tuples from the list.\n\n    Parameters:\n    test_list (list): A list of tuples.\n    K (int): A positive integer representing the minimum number of tuples required.\n\n    Returns:\n    list: A list of tuples representing the minimum K tuples from the test_list.\n\n    Example:\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n    K = 2\n    Output: [(1, 2, 3), (7, 8, 9)]\n\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: (x[1], x[2]))  # sort the list based on the second element of each tuple and third element\n    return sorted_list[:K]  # return the first K tuples from the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Initialize the minimum k value and the index of the minimum k value\n    min_val = float('inf')\n    min_index = -1\n    # Traverse the sorted list and find the minimum k value and its index\n    for i in range(len(test_list)):\n        if i < K:\n            if test_list[i][1] < min_val:\n                min_val = test_list[i][1]\n                min_index = i\n        else:\n            break\n    # Return the minimum k value and its index\n    return min_val, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by the first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum number of records\n    min_k_count = 0\n\n    # Initialize minimum record\n    min_record = None\n\n    # Loop through the sorted list\n    for record in test_list:\n        # Increment the count\n        min_k_count += 1\n\n        # If we have found minimum k records, break out of the loop\n        if min_k_count == K:\n            break\n\n        # If this record is less than the current minimum record, update the minimum record\n        if record[0] < min_record[0]:\n            min_record = record\n\n    # Return the minimum record\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list: a list of tuples where each tuple has two elements\n    K: an integer representing the number of records to find the minimum from the list\n    \n    Returns:\n    a list of tuples containing the minimum k records from the input list\n    '''\n    # sort the input list by the first element of each tuple (assuming the first element is the key)\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize an empty list to store the minimum k records found so far\n    min_k_list = []\n\n    # iterate through the sorted list\n    i = 0\n    while i < len(sorted_list):\n        # if the list has less than k records left, stop iterating\n        if i + K > len(sorted_list):\n            break\n        # if the list has more than k records left, move to the next group of k records\n        elif i + K < len(sorted_list):\n            j = i + K\n        # if the list has exactly k records left, add them to the min_k_list\n        else:\n            min_k_list = sorted_list[i:i+K]\n            break\n\n        # if the current group of k records has a smaller first element, add them to the min_k_list\n        if sorted_list[i][0] <= min_k_list[-1][0]:\n            min_k_list.extend(sorted_list[i:i+K])\n            break\n        # if the current group of k records has a larger first element, move on to the next group of k records\n        else:\n            i += K\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 1:\n        return min(test_list, key=lambda x: x[1])\n    else:\n        min_k_list = []\n        for i in range(len(test_list)):\n            min_k_list.append((test_list[i][0], min_k(test_list[:i] + test_list[i+1:], K-1)))\n        return min(min_k_list, key=lambda x: x[1])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # sort the list of tuples by value\n    test_list.sort(key=lambda x: x[1])\n\n    # create an empty dictionary to store minimum values\n    min_dict = {}\n\n    # loop through the first K tuples\n    for i in range(K):\n        # get the current value and index of the tuple\n        value, index = test_list[i]\n        # if the value is not already in the dictionary, add it with its index\n        if value not in min_dict:\n            min_dict[value] = index\n    \n    # create an empty list to store the minimum records\n    min_records = []\n\n    # loop through the remaining tuples and add them to the min_records list if they meet the minimum value requirement\n    for i in range(K, len(test_list)):\n        value, index = test_list[i]\n        if value in min_dict and value == min_dict[value]:\n            min_records.append(test_list[i])\n\n    # sort the min_records list by value\n    min_records.sort(key=lambda x: x[1])\n\n    # return the minimum K records\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # create a dictionary to store common elements\n    common_elements = {}\n\n    # iterate through each index in the lists\n    for i in range(len(l1)):\n        # check if the current index exists in the second list\n        if i in l2:\n            # check if the current element exists in the third list\n            if l1[i] in l3:\n                # if the element is common, add it to the dictionary\n                common_elements[l1[i]] = 1\n\n    # return the list of common elements\n    return list(common_elements.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_list = []\n    \n    # Iterate through each index of each list\n    for i in range(len(l1)):\n        # Check if the element at the current index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # Add the element to the common list\n            common_list.append(l1[i])\n    \n    # Return the common list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \n    Example:\n    >>> second_smallest([1, 2, 3, 4, 5])\n    3\n    '''\n    \n    # sort the list in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    \n    # return the second smallest number\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    \n    # Return the second smallest element\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # return the second smallest number in the sorted list\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check that the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    # Sort the list\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\b[ab]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string '{text}' contains an 'a' followed by one or more 'b's.\")\n    else:\n        print(f\"The string '{text}' does not contain an 'a' followed by one or more 'b's.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b+)'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] or test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if both strings are reversed and not equal to each other\n            if test_list[i][::-1] == test_list[j] and test_list[j][::-1]!= test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store unique lists and their counts\n    count_dict = {}\n    # loop through each element of the list\n    for i in range(len(list1)):\n        # if the element is not a tuple, convert it to a tuple\n        if not isinstance(list1[i], tuple):\n            list1[i] = (list1[i],)\n        # loop through each tuple in the list\n        for j in range(len(list1[i])):\n            # if the tuple is not already a key in the count_dict, add it with a count of 1\n            if (list1[i][j],) not in count_dict:\n                count_dict[(list1[i][j],)] = 1\n            # if the tuple is already a key in the count_dict, increment its count by 1\n            else:\n                count_dict[(list1[i][j],)] += 1\n    # return the dictionary of unique lists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in lst:\n        for j in lst:\n            if i == j:\n                continue\n            if i in j:\n                if tuple(sorted(i)) in count:\n                    count[tuple(sorted(i))] += 1\n                else:\n                    count[tuple(sorted(i))] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        tuple_item = tuple(item)\n        if tuple_item in count:\n            count[tuple_item] += 1\n        else:\n            count[tuple_item] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        count_dict[tuple(list1[i])] = count_dict.get(tuple(list1[i]), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    unique_lst = {}\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            tup = tuple(lst[i:j])\n            if tup in unique_lst:\n                unique_lst[tup] += 1\n            else:\n                unique_lst[tup] = 1\n                \n    return unique_lst"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            tuple_list = tuple(list1[i:j])\n            if tuple_list in count_dict:\n                count_dict[tuple_list] += 1\n            else:\n                count_dict[tuple_list] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the count of each unique list\n    count_dict = {}\n    \n    # iterate through each element in the input list\n    for i in range(len(list1)):\n        # convert each element to a tuple and store it in a set to count its occurrence\n        count_set = set()\n        for j in range(i, len(list1)):\n            count_set.add(tuple(list1[j]))\n        # convert the set to a tuple and store its count in the dictionary\n        count_dict[tuple(list1[i])] = len(count_set)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of unique sublists\n    count = {}\n    \n    # Loop through each list in the original list\n    for i in list1:\n        # Convert the list to a tuple\n        tup = tuple(i)\n        \n        # Check if the tuple is already in the dictionary\n        if tup not in count:\n            # If not, add it and set the count to 1\n            count[tup] = 1\n        else:\n            # If it is, increment the count\n            count[tup] += 1\n    \n    # Return the dictionary of unique sublists and their count\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.replace('.', '', 1).isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num % 1!= 0:\n            return False\n        num_str = str(num)\n        dot_index = num_str.index('.')\n        if dot_index == 0:\n            return False\n        if dot_index == len(num_str) - 1:\n            return False\n        if dot_index == 0 or dot_index == len(num_str) - 1:\n            return False\n        if dot_index > len(num_str) - 2:\n            return False\n        if num_str.count('.')!= 1:\n            return False\n        if num_str[dot_index - 1] == '0':\n            return False\n        if num_str[dot_index + 1] == '0':\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        else:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) > 2:\n                return False\n            else:\n                return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[0]) <= 2 and len(parts[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    \n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    for part in parts:\n        if part.isdigit():\n            if len(part) > 2:\n                return False\n        else:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if str(float_num).split('.')[1].isdigit():\n            if len(str(float_num).split('.')[1]) <= 2:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = str(num).strip()  # remove leading/trailing white spaces\n    if num == '' or '.' in num or '-' in num:  # check for invalid input\n        return False\n    else:\n        num = float(num)  # convert string to float\n        return str(num).split('.')[-1] == '00'"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    nums = num.split('.')\n    if len(nums)!= 2:\n        return False\n\n    whole = int(nums[0])\n    decimal = int(nums[1])\n\n    if whole < 0 or decimal < 0 or decimal > 99:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_number = float(num)\n        return decimal_number.is_integer() and decimal_number.as_integer_ratio()[1] <= 2\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n    \n    # Iterate over the list of numbers\n    for num in arr:\n        # Add the number to the set if it is not already there\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the set contains more than one element, there are duplicates\n        elif len(unique_set) > 1:\n            return False\n    \n    # If the loop completes, there are no duplicates and the function returns True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) > 1:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to set and check if its length is 1\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(arr) < 2:\n        return False\n    elif len(arr) == 2:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number.\"\n\n    # convert the month number to a string\n    monthnum3_str = str(monthnum3)\n\n    # convert the month number to an integer\n    monthnum3_int = int(monthnum3_str)\n\n    # check if the month number is divisible by 3\n    if monthnum3_int % 3 == 0:\n        # if it is, check if it is divisible by 100\n        if monthnum3_int % 100 == 0:\n            # if it is, check if it is divisible by 400\n            if monthnum3_int % 400 == 0:\n                # if it is, the month contains 30 days\n                return \"True\"\n            else:\n                # if it is not, the month does not contain 30 days\n                return \"False\"\n        else:\n            # if it is not, the month contains 30 days\n            return \"True\"\n    else:\n        # if it is not, the month does not contain 30 days\n        return \"False\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is valid or not\n    if monthnum3 not in range(1, 13):\n        print(\"Invalid month number.\")\n        return\n\n    # Get the number of days in the month\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            num_days = 29\n        else:\n            num_days = 28\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        num_days = 30\n    else:\n        num_days = 31\n\n    # Check if the given month number contains 30 days or not\n    if num_days == 30:\n        print(\"This month has 30 days.\")\n    else:\n        print(\"This month does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        elif monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and is_leapyear(year):\n            return \"30\"\n        else:\n            return days_in_month[monthnum3-1]\n    else:\n        return \"Invalid Month Number\"\n\ndef is_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number. Month numbers should be between 1 and 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 3:\n        return True\n    elif 4 <= monthnum3 <= 6:\n        return False\n    elif 7 <= monthnum3 <= 9:\n        return True\n    elif 10 <= monthnum3 <= 12:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    # Dictionary to map month numbers to the number of days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number is in the dictionary\n    if monthnum in days_in_month:\n        # If it is, check if the month contains 30 days\n        if days_in_month[monthnum] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If it is not, return False\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    diff = arr[-1] - arr[0]\n    for i in range(1, n-1):\n        curr_diff = arr[-i] - arr[i]\n        if curr_diff < diff:\n            diff = curr_diff\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It returns the minimum difference.\n    \"\"\"\n\n    # Sort the given array\n    arr.sort()\n\n    # Initialize the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_element = float('inf')\n\n    # Loop through the sorted array\n    for i in range(n-1):\n        # Check if the difference between the current element and the previous element is smaller than the current minimum difference\n        if arr[i+1] - arr[i] < min_diff:\n            # Update the minimum difference and the minimum element\n            min_diff = arr[i+1] - arr[i]\n            min_element = arr[i]\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize min_diff with the difference of the first two elements\n    min_diff = abs(arr[1] - arr[0])\n    \n    # Iterate through the array starting from the third element\n    for i in range(2, n):\n        # Calculate the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Update min_diff if the current difference is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n\ndef find_min_diff(arr, n):\n    sorted_arr = merge_sort(arr)\n    min_diff = float('inf')\n\n    for i in range(len(sorted_arr) - 1):\n        diff = sorted_arr[i+1] - sorted_arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n elements and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum difference and the first element in the array\n    min_diff = arr[1] - arr[0]\n    min_elem = arr[0]\n\n    # Iterate through the array from the second element to the end\n    for i in range(1, n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference and the corresponding element if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n\n    # Return the minimum difference and the corresponding element\n    return min_diff, min_elem"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Initialize min_diff and current_diff with the first element in the array\n    min_diff = abs(arr[0] - arr[1])\n    current_diff = abs(arr[0] - arr[1])\n    \n    # Iterate through the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n        \n        # If the difference between the current element and the next element is less than the current minimum difference, update min_diff and current_diff\n        if diff < current_diff:\n            min_diff = current_diff\n            current_diff = diff\n        \n        # If the difference between the current element and the next element is equal to the current minimum difference, update current_diff\n        elif diff == current_diff:\n            current_diff = diff\n    \n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n\n    # initialize minimum difference\n    min_diff = float('inf')\n\n    # loop through the array and check for minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference to be the difference between the first and second element\n    min_diff = abs(arr[1] - arr[0])\n    # Traverse the sorted array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i+1] - arr[i])\n        # Update the minimum difference if the current difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize variables to store the minimum difference and the minimum element\n    min_diff = arr[1] - arr[0]\n    min_elem = arr[0]\n\n    # iterate over the remaining array elements\n    for i in range(1, n):\n        # calculate the difference between the current element and the minimum element\n        diff = arr[i] - min_elem\n\n        # update the minimum difference and minimum element if the current difference is smaller than the previous minimum\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 4\n    elif n == 9:\n        return 5\n    elif n == 10:\n        return 5\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 6\n    elif n == 13:\n        return 7\n    elif n == 14:\n        return 7\n    elif n == 15:\n        return 8\n    elif n == 16:\n        return 8\n    elif n == 17:\n        return 9\n    elif n == 18:\n        return 9\n    elif n == 19:\n        return 10\n    elif n == 20:\n        return 10\n    \n    # Recursive case\n    else:\n        # Calculate the polite number using the formula:\n        # (2^n + n) * (3^n - 3^(n-1))\n        result = (2**n + n) * (3**n - 3**(n-1))\n        # Return the result rounded to the nearest integer\n        return int(round(result))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        count = 0\n        for i in range(1, n+1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if the number is a polite number, and False otherwise. A polite number is defined as a number greater than 5, and if the sum of its digits is divisible by 10. For example, 10, 15, 20, 25, and 30 are all polite numbers, but 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, and 21 are not.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    total = sum(digits)\n    return total % 10 == 0\n\ndef nth_polite(n):\n    \"\"\"\n    Returns the nth polite number. If n is less than or equal to 5, 5 is returned.\n    \"\"\"\n    if n <= 5:\n        return 5\n    for i in range(1, n):\n        if is_polite(i):\n            return i\n    return None\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    polite = nth_polite(n)\n    if polite is None:\n        print(f\"There are no polite numbers up to {n}.\")\n    else:\n        print(f\"The {n}th polite number is {polite}.\")"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite_number(m):\n        polite = 1\n        while True:\n            if m > 1:\n                polite *= m\n            m -= 1\n            if is_prime(polite):\n                return polite\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n\n    m = int(math.log(n, 5)) + 1\n    return nth_polite_number(m)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_polite(n):\n    \"\"\"\n    This function calculates the nth polite number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # create a list of all numbers from 2 to n\n    numbers = [i for i in range(2, n+1)]\n\n    # create a boolean list to mark whether each number is prime or not\n    is_prime = [True] * (n+1)\n\n    # use the Sieve of Eratosthenes algorithm to find primes up to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # count the number of prime numbers up to n\n    count = 0\n    for num in numbers:\n        if is_prime[num]:\n            count += 1\n            if count == n:\n                return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return math.ceil(math.log2(n))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n\n    # find the number of polites less than or equal to n\n    polites = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            polites += 1\n        i += 1\n\n    # return the nth polite number\n    return polites"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite = 1\n    while True:\n        if is_prime(polite):\n            polite += 1\n        else:\n            break\n\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return polite\n\n    return is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += math.factorial(i)\n    return num\n\nprint(is_polite(1000))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        \"\"\"\n        Helper function to find nth polite number.\n        \"\"\"\n        i = 1\n        while True:\n            if is_prime(i) and not is_prime(i - 2) and not is_prime(i - 4):\n                return i\n            i += 2\n\n    return nth_polite_number(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1 - set2)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n\n    :param li1: list of elements\n    :param li2: list of elements\n    :return: list of elements that are present in li1 but not in li2\n    \"\"\"\n    # create an empty list to store the differences\n    diff_list = []\n    # loop through the first list\n    for item in li1:\n        # if the item is not in the second list, add it to the diff list\n        if item not in li2:\n            diff_list.append(item)\n    # return the diff list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # initialize an empty list to store the difference\n    diff_list = []\n    # loop through the elements of both lists\n    for i in li1:\n        # check if the element is present in the second list\n        if i not in li2:\n            # if it is not present, add it to the difference list\n            diff_list.append(i)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = []\n    for i in range(1, n+1, 2):\n        odd_nums.append(i)\n\n    sum_of_fourth_powers = sum([num**4 for num in odd_nums])\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 3\n    sum = 0\n    while num <= n:\n        sum += num ** 4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    fourth_power = [num**4 for num in odd_numbers]\n    sum_of_fourth_power = sum(fourth_power)\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n % 2 == 0:\n        print(\"Please enter an odd value for n\")\n        return\n    else:\n        sum_of_powers = 0\n        for i in range(1, n+1, 2):\n            sum_of_powers += i**4\n        return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        odd_num = i*2 + 1\n        fourth_power = odd_num**4\n        sum += fourth_power\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through first n odd numbers\n    for i in range(1, n+1, 2):\n        # Find the fourth power of the number\n        fourth_power = i ** 4\n        # Add the fourth power to the sum\n        sum += fourth_power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            if c == ')' and stack[-1]!= '(':\n                return False\n            if c == '}' and stack[-1]!= '{':\n                return False\n            if c == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in \"({[\":\n            stack.append(c)\n        elif c in \")]}\":\n            if not stack:\n                return False\n            if c == \"(\":\n                if not stack[-1] == \")\":\n                    return False\n            elif c == \"{\":\n                if not stack[-1] == \"}\":\n                    return False\n            elif c == \"[\":\n                if not stack[-1] == \"]\":\n                    return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.appendleft(i)\n        elif c == ')':\n            if not stack:\n                return False\n            index = stack.pop()\n            if i - index!= 1:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char!= last_char and (char in close_brackets and last_char in open_brackets):\n                return False\n            elif char == ')' and last_char == '(':\n                pass\n            elif char == ']' and last_char == '[':\n                pass\n            elif char == '}' and last_char == '{':\n                pass\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == i-1:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n\n    # Loop through the words and check if their length is greater than or equal to K\n    for word in words:\n        if len(word) >= K:\n            # If it is, append it to the filtered list\n            filtered_words.append(word)\n\n    # Join the filtered words into a single string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with length less than K\n    result = []\n    \n    # Iterate through the words and check if each word has length less than K\n    for word in words:\n        if len(word) < K:\n            # If the word has length less than K, add it to the result list\n            result.append(word)\n    \n    # Join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # create an empty list to store the result\n    result = []\n    \n    # loop through each word in the list\n    for word in words:\n        \n        # check if the length of the word is less than or equal to K\n        if len(word) <= K:\n            \n            # if it is, append it to the result list\n            result.append(word)\n            \n    # join the result list into a string with spaces\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(f\"Substring found at index {start}, length {end}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        position = match.start()\n        occurrence = text.count(match.group())\n        return {\"position\": position, \"occurrence\": occurrence}\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            pos = text.find(match)\n            print(f\"Substring found at position {pos}: {match}\")\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Substring found at position {match.start()} and length {match.end()} in the string: {text}\")\n        return True\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        if pattern in text:\n            pattern_obj = re.compile(pattern)\n            matches = pattern_obj.findall(text)\n            if len(matches) > 0:\n                for match in matches:\n                    start_index = text.find(match)\n                    end_index = start_index + len(match)\n                    print(\"Substring found: {}\".format(match))\n                    print(\"Occurrence: {}\".format(matches.index(match) + 1))\n                    print(\"Position: {}\".format(start_index))\n            else:\n                print(\"No match found.\")\n        else:\n            print(\"Pattern not found in the text.\")\n    except Exception as e:\n        print(\"An error occurred: {}\".format(e))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    for match in matches:\n        print(f\"Match found: {match}, position: {text.find(match)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append((text.index(match), match))\n        return result\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(0, len(nums), 2):\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n                break\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    n = len(nums)\n    for i in range(1, n, 2):\n        if sum(nums[i:]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:  # only check odd positions\n            continue\n\n        count = 0\n        for num in nums[i:]:\n            count += 1\n\n        if count % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and i % 2!= 1:\n            if i >= len(nums) or nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if sum(nums[i:i+2]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        elif nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:  # Check for even index\n            if nums[i] % 2 == 0:  # Check for odd number at odd index\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len([num for num in nums[i:] if num % 2 == 1]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = 'aeiou'\n    count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i] in vowels:\n                count += 1\n        elif i == len(test_str)-1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or i == len(test_str) - 1 or test_str[i-1] not in vowels or test_str[i+1] not in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the non-repeated elements in the list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    \n    # iterate through the list and update the count of each element in the dictionary\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    \n    # initialize the sum variable to zero\n    sum_ = 0\n    \n    # iterate through the dictionary and add up the non-repeated elements\n    for num in count:\n        if count[num] == 1:\n            sum_ += num\n    \n    # return the sum\n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of all unique non-repeating elements in the list.\n    '''\n    # Create a dictionary to store the elements of the list and their count\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Iterate through the dictionary to calculate the sum of unique non-repeating elements\n    for element in element_count:\n        if element_count[element] == 1:\n            sum += element\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Using a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Calculating the sum of non-repeated elements\n    sum = 0\n    for i in arr:\n        if freq[i] == 1:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their frequencies\n    freq_dict = {}\n\n    # loop through the list and update the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # loop through the dictionary to find the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            sum_of_non_repeated += num\n\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Initialize a dictionary to store unique elements and their indices\n    unique_dict = {}\n\n    # Iterate through the list and update the dictionary with unique elements and their indices\n    for i, num in enumerate(arr):\n        if num in unique_dict:\n            unique_dict[num].append(i)\n        else:\n            unique_dict[num] = [i]\n\n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n\n    # Iterate through the dictionary and add up the non-repeated elements\n    for num, indices in unique_dict.items():\n        if len(indices) == 1:\n            sum_non_repeated += num\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_elems = set(arr)\n    \n    # Convert the set back to a list and sort it\n    sorted_elems = list(unique_elems)\n    sorted_elems.sort()\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the sorted list and add up all non-repeated elements\n    for elem in sorted_elems:\n        if arr.count(elem) == 1:\n            total_sum += elem\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # Create a list to store the unique elements in the list\n    unique_list = []\n    for key in freq_dict:\n        if freq_dict[key] == 1:\n            unique_list.append(key)\n    \n    # Find the sum of the unique elements\n    unique_sum = 0\n    for i in unique_list:\n        unique_sum += i\n    \n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Use a set to remove duplicates from the list\n    unique_arr = list(set(arr))\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Given a list of non-negative integers, return the sum of non-repeated elements.\n    \"\"\"\n    # Create a set to keep track of the non-repeated elements\n    unique_set = set(arr)\n\n    # Calculate the sum of the unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Parameters:\n    arr (list): List of elements to find the sum of non-repeated elements in.\n\n    Returns:\n    int: The sum of non-repeated elements in the given list.\n    \"\"\"\n    # Initialize a set to store the non-repeated elements\n    non_repeated = set()\n\n    # Loop through the list and add each element to the set if it's not already there\n    for element in arr:\n        if element not in non_repeated:\n            non_repeated.add(element)\n\n    # Initialize the sum variable\n    sum_non_repeated = 0\n\n    # Loop through the non-repeated set and add its values to the sum variable\n    for element in non_repeated:\n        sum_non_repeated += element\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    prev = None\n    for item in list1:\n        if item == prev:\n            if result and result[-1][-1] == prev:\n                result[-1].append(item)\n            else:\n                result.append([item, prev])\n        else:\n            if result and result[-1][-1] == prev:\n                result[-1].append(item)\n            else:\n                result.append([item, prev])\n        prev = item\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define a function to iterate through a list and group by consecutive duplicates\n    def consecutive_duplicates(lst):\n        for k, g in groupby(lst):\n            if k == list(g):\n                yield g\n            else:\n                yield list(g)\n\n    # Call the function to pack consecutive duplicates\n    packed_list = list(consecutive_duplicates(list1))\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(sorted(list1)) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[-1]:\n            yield list(group)\n        else:\n            yield list(group) + [list1[list1.index(key) + 1]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n    for group, items in grouped_list:\n        if len(list(items)) > 1:\n            packed_list.append(list(items))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create an iterator over the grouped list of consecutive duplicates\n    group_iter = groupby(iter(list1), lambda x: x)\n    \n    # Extract the grouped consecutive duplicates and pack them into sublists\n    sublists = []\n    for key, group in group_iter:\n        if key == None:\n            # This is the end of the list\n            group_iter = groupby(group, lambda x: x)\n        else:\n            # This is a regular element in the list\n            sublists.append(list(group))\n    \n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.extend([list(group)])\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # loop through the list1\n    for sublist in list1:\n        \n        # check if the sublist is already in the count_dict\n        if sublist not in count_dict:\n            \n            # if not, add it with a count of 1\n            count_dict[sublist] = 1\n            \n        # if the sublist is already in the count_dict, increment its count by 1\n        else:\n            count_dict[sublist] += 1\n            \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n\n    # loop through each list in the list1\n    for sublist in list1:\n        # convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each list in the main list\n    for sublist in list1:\n        # turn the sublist into a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # if it is, increment the count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            count[tuple(item)] = count.get(tuple(item), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store the unique sublists and their occurrences\n    unique_sublist_dict = {}\n    # loop through each list in the original list\n    for sublist in list1:\n        # check if the sublist is already in the dictionary\n        if sublist not in unique_sublist_dict:\n            # if not, add the sublist to the dictionary and set its value to 1\n            unique_sublist_dict[sublist] = 1\n        else:\n            # if it is, increment its value by 1\n            unique_sublist_dict[sublist] += 1\n    # return the dictionary of unique sublists and their occurrences\n    return unique_sublist_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the unique sublists and their counts\n    sublist_count = {}\n    for sublist in list1:\n        # convert the sublist to a tuple and add it to the dictionary\n        if tuple(sorted(sublist)) not in sublist_count:\n            sublist_count[tuple(sorted(sublist))] = 1\n        else:\n            sublist_count[tuple(sorted(sublist))]+=1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    \n    for sublist in list1:\n        if tuple(sublist) in sublists:\n            sublists[tuple(sublist)] += 1\n        else:\n            sublists[tuple(sublist)] = 1\n            \n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the unique sublists and their counts\n    counts = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple and check if it's already in the dictionary\n        if tuple(element) in counts:\n            # Increment the count for the tuple\n            counts[tuple(element)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tuple(element)] = 1\n    # Return the dictionary with unique sublists and their counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if (sum(test_list[i]), sum(test_list[j]), sum(test_list[k])) in test_list:\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            combinations_list.append(tuple(comb))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    print(test_list[i]+test_list[j]+test_list[k]+test_list[l])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the maximum sum in the given list\n    max_sum = max(sum(t) for t in test_list)\n    # Create a list of all tuples in the given list\n    all_tuples = [(t[0], t[1]) for t in test_list]\n    # Find all combinations of sums with tuples in the given list\n    comb_list = combinations(all_tuples, r=2)\n    # Create a dictionary to store the combinations of sums with tuples and their respective values\n    comb_dict = {}\n    for comb in comb_list:\n        # Calculate the sum of the two tuples in the combination\n        sum_value = sum(comb)\n        # Check if the sum of the two tuples is equal to the maximum sum in the given list\n        if sum_value == max_sum:\n            # If it is, add the combination to the dictionary with the respective value\n            comb_dict[(comb[0], comb[1])] = sum_value\n    # Return the dictionary of combinations of sums with tuples and their respective values\n    return comb_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(lst, target, current_sum, res):\n        if current_sum == target and not res:\n            res.append(tuple(lst))\n        elif current_sum < target:\n            for i in range(len(lst)):\n                helper(lst[:i] + lst[i+1:], target, current_sum + lst[i], res)\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = tuple(sorted(test_list[i] + test_list[j]))\n            if comb not in test_list:\n                helper(test_list, comb, comb[0], [])\n\n    return list(set(res))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the input list in descending order\n    sorted_list = sorted(test_list, key=lambda x: sum(x), reverse=True)\n\n    # Initialize a list to store the combinations\n    combinations_list = []\n\n    # Iterate through the sorted list and find all combinations of sums with tuples\n    for i in range(len(sorted_list)):\n        for j in range(i + 1, len(sorted_list)):\n            if sorted_list[i][0] + sorted_list[j][0] == sorted_list[0][0]:\n                combinations_list.append(sorted_list[i][1:3] + sorted_list[j][1:3])\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as an input and returns all combinations of sums with tuples in the list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                combinations_list.append((test_list[i], test_list[j]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the input list of tuples\n    test_list.sort(key=lambda x: sum(x))\n\n    # Initialize empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through the combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Check if the current combination sums up to the total sum\n            if sum(test_list[i:j]) == 0:\n                # Append the current combination to the list\n                combinations_list.append(tuple(test_list[i:j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]) + sum(test_list[l]) + sum(test_list[m]):\n                            print(test_list[i], test_list[j], test_list[k], test_list[l], test_list[m])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(current_combination, test_list, target_sum, result):\n        if target_sum == 0:\n            result.append(tuple(current_combination))\n        else:\n            for i in range(len(test_list)):\n                if sum(current_combination) + test_list[i][1] == target_sum:\n                    current_combination.append(test_list[i][0])\n                    find_combinations_helper(current_combination, test_list, target_sum - test_list[i][1], result)\n                    current_combination.pop()\n\n    result = []\n    find_combinations_helper([], test_list, 0, result)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n): \n    \"\"\"\n    This function returns True if the count of divisors is even else False.\n    \"\"\"\n    divisors = [1]\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n//i: \n                divisors.append(n//i) \n            count += 2 \n            if count == len(divisors): \n                break \n    if count == len(divisors): \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # calculate the count of divisors\n    count = len(divisors)\n    # check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        print(n, 'has an even count of divisors')\n    else:\n        print(n, 'has an odd count of divisors')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function returns the count of divisors of a given number n. \n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            count += 1 \n            if n // i!= i: \n                count += 1 \n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function will count the number of divisors of a given number.\n    The function will return True if the count of divisors is even and False otherwise.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n    if n > 1:\n        divisors_count += 1\n    return divisors_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def count_divisors_helper(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return divisors\n\n    divisors = count_divisors_helper(n)\n    count_even = 0\n    count_odd = 0\n\n    for divisor in divisors:\n        if divisor % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    if count_even == count_odd:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if the count of its divisors is even, and False otherwise.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    def count_divisors_helper(n): \n        '''\n        Helper function to count divisors of a number. \n        '''\n        divisors = [] \n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                if i!= n//i: \n                    divisors.append(i) \n                    divisors.append(n//i) \n        if n > 1: \n            divisors.append(n) \n        return divisors \n        \n    divisors = count_divisors_helper(n) \n    count_even_divisors = sum(1 for divisor in divisors if divisor % 2 == 0) \n    if count_even_divisors % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the sum of all positive integers up to n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n\n    # Calculate the count of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n            if n / i!= i:\n                count += 1\n\n    if count % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n\n    for i in range(n-1):\n        if i % 2 == 0:\n            continue\n        sum_odd_length_subarrays += sum(arr[i:i+2])\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr) - 1):\n        if i % 2 == 0:\n            continue\n        for j in range(i + 1, len(arr)):\n            if j % 2 == 0:\n                continue\n            if j - i == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        if i == 0 or (i % 2 == 1 and arr[i] % 2 == 0):\n            left = 0\n            right = i\n            current_sum = 0\n            while left < right:\n                current_sum += arr[left]\n                left += 1\n                right += 1\n            total_sum += current_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sub_arr = arr[i:j+1]\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr) - 1 or (i + 1) % 2 == 0:\n            if i + 1 == len(arr):\n                break\n            sub_arr = arr[i:i+2]\n            total_sum += sum(sub_arr)\n            count += 1\n    return total_sum, count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2 == 1:\n            for j in range(i, len(arr)):\n                if j == len(arr)-1 or arr[j] % 2 == 1:\n                    sum_odd += sum(arr[i:j+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(1, len(arr)):\n        subarray_sum += arr[i]\n        if i % 2 == 0:\n            subarray_sum -= arr[i-1]\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n-1, 2):\n            subarray = arr[j:j+2]\n            sum += sum(subarray)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-2):\n        if i%2==0:\n            continue\n        left = i+1\n        right = min(i+5, n-1)\n        for j in range(left, right):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 1:\n        return 0\n\n    n = len(arr)\n    result = 0\n\n    # Traverse through all possible subarrays\n    for i in range(1, n+1):\n        current_sum = 0\n        for j in range(i):\n            current_sum += arr[j]\n        if i % 2 == 1:\n            result += current_sum\n\n    return result"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color value to HSV color value.\n    Conversion formula:\n    h = (((r & 0xFF0000) >> 16) / 255) * 360\n    s = (((g & 0xFF00) >> 8) / 255) * 100\n    v = ((b & 0xFF) / 255) * 100\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    h = 0\n    s = 0\n    v = max_c * 100\n\n    if max_c == min_c:\n        h = 0\n    elif max_c == r:\n        h = (g - b) / delta % 6\n    elif max_c == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_c * 100\n\n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif cmax == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    if h < 0:\n        h += 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to integers\n    r = int(r)\n    g = int(g)\n    b = int(b)\n\n    # Find max and min values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate h, s, and v values\n    if max_val == 0:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        s = diff / max_val\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n\n        v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \n    :param r: Red component of the color (0-255)\n    :type r: int\n    \n    :param g: Green component of the color (0-255)\n    :type g: int\n    \n    :param b: Blue component of the color (0-255)\n    :type b: int\n    \n    :return: Hue (0-360), Saturation (0-100), Value (0-100)\n    :rtype: tuple\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        hue = 0\n        saturation = 0\n        value = max_val * 100\n    else:\n        if max_val == r:\n            hue = (g - b) / delta % 6\n        elif max_val == g:\n            hue = (b - r) / delta + 2\n        else:\n            hue = (r - g) / delta + 4\n\n        hue = int(hue * 60)\n        if hue < 0:\n            hue += 360\n\n        saturation = delta * 100 / max_val\n        value = max_val * 100\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert to float\n    r, g, b = map(float, [r, g, b])\n\n    # Find minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find delta value\n    delta = max_val - min_val\n\n    # Find hue\n    if max_val == r:\n        hue = (60 * ((g - b) / delta)) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / delta) + 240) % 360\n\n    # Find saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Find value\n    value = max_val\n\n    # Return hsv values in a tuple\n    return (int(hue), int(saturation * 100), int(value * 100))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    h = 0.0\n    s = 0.0\n    v = max_rgb / 255.0\n    delta = max_rgb - min_rgb\n    \n    if delta == 0:\n        h = 0.0\n    elif max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2.0 + (b - r) / delta\n    else:\n        h = 4.0 + (r - g) / delta\n    \n    if h < 0:\n        h += 1.0\n    \n    s = delta / (max_rgb + delta)\n    s = max(0.0, min(1.0, s))\n    \n    if max_rgb == 0:\n        v = 0.0\n    else:\n        v = max_rgb / 255.0\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    # Convert to float and divide by 255 to normalize the values\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the greatest and least values of each channel\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the delta value between the max and min values\n    delta = max_val - min_val\n\n    # If the maximum value is zero, it is not possible to differentiate between hues\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # If the maximum value is greater than zero, find the hue\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Convert the hue from degrees to radians\n        h *= 60\n\n        # If the hue is less than 0, add 360 degrees to the value\n        if h < 0:\n            h += 360\n\n        # Calculate the saturation and value\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        # Normalize the hue to 0-360 degrees\n        if h < 0:\n            h += 360\n\n    # Return the values in a tuple\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in RGB color values and returns their HSV values.\n    \"\"\"\n\n    # Convert the RGB values to the range [0, 1]\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n\n    # Find the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Find the value\n    value = max_val\n\n    # Return the HSV values\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values\n    r, g, b = [float(x) for x in [r, g, b]]\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find range of values\n    range_val = max_val - min_val\n\n    # Find saturation\n    if max_val == 0:\n        hsv_vals = [0, 0, 0]\n    else:\n        if range_val == 0:\n            hsv_vals = [0, 0, max_val]\n        else:\n            if max_val == r:\n                h = 60 * (((g - b) / range_val) % 6)\n            elif max_val == g:\n                h = 60 * (((b - r) / range_val) + 2)\n            else:\n                h = 60 * (((r - g) / range_val) + 4)\n\n            if h < 0:\n                h += 360\n\n            hsv_vals = [h, range_val / max_val, max_val]\n\n    return hsv_vals"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts RGB color to HSV color.\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    h = None\n    s = None\n    v = max_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h *= 60\n    if h < 0:\n        h += 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == 1 and odd_count == 1:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count == 1 and odd_count == 1:\n            product = num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count == 0 and odd_count == 0:\n        return 1\n    elif even_count == 0 and odd_count > 0:\n        return odd_product\n    elif even_count > 0 and odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        print(\"No even number found\")\n    else:\n        first_even = list1[0]\n        product = first_even * odd_count\n        print(\"The product of the first even number and odd count is:\", product)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n        \n        product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        product = lst[0] * lst[1]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= num\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0:\n        product = 0\n    else:\n        product = list1[0] * even_count\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str.split(','))\n    int_tuple = tuple(int(i) for i in test_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    tup_str = test_str.split(',')\n\n    # Convert each string to integer\n    tup_int = tuple(int(i) for i in tup_str)\n\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into tuples\n    tuples = test_str.split(',')\n    \n    # Convert each tuple to an integer\n    int_tuples = []\n    for tuple in tuples:\n        int_tuple = tuple.split(' ')\n        int_tuples.append(int(int_tuple[0]))\n    \n    # Convert the integer tuple into a tuple of tuples\n    return tuple_to_tuple_tuple(int_tuples)\n\ndef tuple_to_tuple_tuple(tup):\n    '''\n    Convert a tuple to a tuple of tuples.\n    '''\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by spaces to get a list of strings\n    str_list = test_str.split()\n\n    # Create an empty list to hold the integers\n    int_list = []\n\n    # Loop through each string in the list\n    for string in str_list:\n        # Check if the string is an integer\n        try:\n            int_list.append(int(string))\n        except ValueError:\n            pass\n\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Create a list to hold the integer values\n    int_list = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Try to convert the word to an integer and append it to the list\n        try:\n            int_list.append(int(word))\n        except ValueError:\n            continue\n    \n    # Return the final list of integers\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove non-integer values from tuple string\n    test_str = [int(i) for i in test_str if i.isdigit()]\n    # Convert string tuple to integer tuple\n    return tuple([int(i) for i in test_str])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.strip('()').split(',')\n    int_tuple = tuple(int(x) for x in tuple_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Loop through the list and convert each string to an integer\n    int_list = [int(i.strip()) for i in str_list]\n\n    # Convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    str_list = test_str.split(',')\n    # Create an empty list to store the integer values\n    int_list = []\n    # Loop through the list of strings\n    for str_item in str_list:\n        # Try to convert the string to an integer\n        try:\n            int_val = int(str_item)\n            # If the conversion was successful, append the integer to the list\n            int_list.append(int_val)\n        except ValueError:\n            # If the conversion was not successful, return None\n            return None\n    # If the loop completes without returning None, return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Use bisect.bisect_right to find the insertion point of x in a.\n    i = bisect.bisect_right(a, x)\n\n    # If x is already present in a, return the index of the element.\n    if i < len(a) and a[i] == x:\n        return i\n\n    # If x is not present in a, return the index where it should be inserted.\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the rightmost element that is greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    # Return the index of the rightmost element that is greater than or equal to x\n    return i - 1 if i < len(a) and a[i] == x else i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    # Bisect the array to find the index where to insert the element x\n    index = bisect.bisect_right(a, x)\n    # If the element is already in the array, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index where to insert x\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect module to find the position where to insert x\n    i = bisect.bisect_right(a, x)\n    \n    # If the new element is already present in the list, the bisect_right function returns the index of the next occurrence of x\n    if i < len(a) and a[i] == x:\n        i += 1\n    \n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # use bisect to find the insertion point\n    i = bisect.bisect_right(a, x)\n\n    # if the element to be inserted is greater than or equal to the current element, then insert it at the current position\n    if x >= a[i - 1]:\n        return i\n\n    # if the element to be inserted is less than the current element, then search for the insertion point in the left half of the list\n    elif x < a[i - 1]:\n        # find the rightmost index where the value before the current position is less than or equal to x\n        j = i - 1\n        while j >= 0 and x >= a[j]:\n            j -= 1\n\n        # return the index of the rightmost element in the left half of the list plus 1\n        return j + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'\\ba{3}b')\n    result = pattern.search(text)\n    if result:\n        return 'Match found: %s' % result.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\s*b{3}\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'apple bananas are good'\nprint(text_match_three(text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list + [test_str], tuple(set(test_list)))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list\n    test_list_ = list(test_str)\n    # Concatenate the list and the given list\n    new_list = test_list + test_list_\n    # Convert the concatenated list back to a tuple\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # split the list into a list of characters\n    chars_list = list(test_str)\n    \n    # create a new empty tuple\n    new_tuple = ()\n    \n    # loop through the list of characters and add each character to the new tuple\n    for char in chars_list:\n        new_tuple += (char,)\n    \n    # add the list of characters to the new tuple\n    new_tuple += (test_list,)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    return test_list + test_str"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the two lists into one list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str + item for item in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Reverse the list of characters\n    char_list.reverse()\n    # Convert the list of characters back to a string\n    new_str = ''.join(char_list)\n    # Convert the list to a tuple and return it\n    return tuple(new_str), tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of values.\n        test_str (str): A string value.\n\n    Returns:\n        tuple: A new tuple with the given values.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n        else:\n            even_count = 0\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_index_count += 1\n    return even_index_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        print(\"All even index contain even numbers.\")\n    else:\n        print(\"Some even index contain odd numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            if len([x for x in nums[i+1:] if x % 2 == 0]) == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:])) % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    # Create a list to store the even numbers in the list\n    even_nums = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is even, append it to the even_nums list\n        if num % 2 == 0:\n            even_nums.append(num)\n    \n    # Check if every even index has an even number of even numbers\n    for i in range(0, len(nums), 2):\n        # If the list of even numbers in the even index is not equal to the length of the even_nums list, then there is an even index without even numbers\n        if len(even_nums)!= nums[i]:\n            return False\n    \n    # If we've made it this far, then all even indexes have an even number of even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n        else:\n            if nums[i] % 2 == 1:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # iterate over the given tuple\n    for i in test_tup:\n        # if the element is a tuple, recursively call the function\n        if isinstance(i, tuple):\n            # remove the nested tuple\n            remove_nested(i)\n        # if the element is not a tuple, remove it\n        else:\n            test_tup.remove(i)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        return None\n    new_tup = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup.append(elem)\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist if not isinstance(item, tuple))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Convert the given tuple to a list to iterate over its elements\n    list_test = list(test_tup)\n    # Initialize an empty list to store the non-tuple elements\n    non_tuple_elements = []\n    # Iterate over the list of elements in the given tuple\n    for element in list_test:\n        # If the element is a tuple, recursively call the remove_nested function on it\n        if isinstance(element, tuple):\n            non_tuple_elements.extend(remove_nested(element))\n        # If the element is not a tuple, append it to the non_tuple_elements list\n        else:\n            non_tuple_elements.append(element)\n    # Return the non_tuple_elements list containing all non-tuple elements in the given tuple\n    return non_tuple_elements"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists that are present in the list.\n    '''\n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list: \n        if isinstance(i, list): \n            count += 1 \n        else: \n            continue \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while arr[i]!= x and i >= 0:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input and returns the index of the last occurrence of x in the array.\n\n    Args:\n    arr (list): The sorted array.\n    x (int): The element to find in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in the array.\n\n    Raises:\n    TypeError: If the input is not a list or if x is not an integer.\n    '''\n\n    if not isinstance(arr, list):\n        raise TypeError('Input is not a list.')\n\n    if not isinstance(x, int):\n        raise TypeError('x is not an integer.')\n\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Parameters:\n    -----------\n    arr : list of integers\n        The sorted array.\n    x : integer\n        The element to search for.\n\n    Returns:\n    --------\n    int\n        The last position of `x` in `arr`, or -1 if `x` is not found.\n    \"\"\"\n\n    # find the leftmost index of x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # if x was found, return its index, otherwise return -1\n    return left if left < len(arr) and arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of x in the array.\n    \"\"\"\n    # Find the first element greater than or equal to x\n    i = bisect_left(arr, x)\n    if i!= len(arr) and arr[i] == x:\n        return i - 1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the result variable\n    result = -1\n\n    # Loop through the array until the left index is greater than the right index\n    while left <= right:\n        # Calculate the middle index of the current subarray\n        mid = left + (right - left) // 2\n\n        # If the element at the middle index is equal to the target element,\n        # update the result variable and the left index to the right of the middle index\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        # If the element at the middle index is less than the target element,\n        # update the right index to the middle index minus 1\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the element at the middle index is greater than the target element,\n        # update the left index to the middle index plus 1\n        else:\n            right = mid - 1\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input. It returns the index of the last occurrence of x in the array. If x is not found in the array, it returns -1.\n    \"\"\"\n    # find the last index of x in the array\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    # check if x is found in the array\n    if i == -1:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a[^b]*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)\\w*b(?=\\W|\\Z)'\n    return re.search(pattern, text).group(0)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)(.*?)(?=b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'\\ba[^b]*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z])a.*?b(?![a-zA-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 1:\n        print(\"Invalid range!\")\n    else:\n        l, r = 1, n\n        sum_odd = 0\n        while l <= r:\n            sum_odd += l\n            l += 2\n        print(\"Sum of all odd natural numbers in the range:\", sum_odd)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0 \n    for i in range(1, n+1, 2): \n        sum += i \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments: l and r which are the lower and upper limit of the range in which \n    odd natural numbers are to be considered. It then calculates the sum of all odd natural numbers \n    within the given range and returns the result.\n    '''\n    if l < 1:\n        raise ValueError(\"The lower limit of the range must be at least 1.\")\n    elif r < 1:\n        raise ValueError(\"The upper limit of the range must be at least 1.\")\n    else:\n        return sum(x for x in range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, 2 * n\n    sum_of_odds = 0\n    for i in range(l, r, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1, 2*n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Args:\n        arr (list): The array to sum up.\n\n    Returns:\n        int: The sum of the array.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Cannot calculate sum of empty array.\")\n\n    return sum(arr[1:]) + arr[0]"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): The list of numbers to sum up.\n\n    Returns:\n    int: The sum of the array elements.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # Calculate the number of bits to rotate left\n    num_bits = n.bit_length()\n    d_bits = d % num_bits\n    \n    # Calculate the number of bits to shift\n    shift = num_bits - d_bits\n    \n    # Rotate the number\n    rotated = (n << shift) | (n >> d_bits)\n    \n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n    d %= 32\n    return (n<<d) | (n>>(32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Shift d bits to the left\n    n = n << d\n    # Shift the remaining bits to the right\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary representation of n to a list of digits\n    digits = [int(digit) for digit in bin(n)[2:]]\n    # Reverse the order of the digits\n    digits.reverse()\n    # Calculate the number of bits to rotate by\n    num_bits = len(digits) * 4\n    # Calculate the number of bits to rotate\n    num_rot = (d % num_bits) if d >= num_bits else d\n    # Reverse the order of the digits again\n    digits.reverse()\n    # Calculate the new value of n\n    new_n = 0\n    for i in range(len(digits)):\n        # Add the rotated bits to the new value of n\n        new_n |= (digits[i] << num_rot)\n    # Return the new value of n\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Shift the number to the left by d bits\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # check if d is within the range of 0 to 31\n    if d < 0 or d >= 32:\n        raise ValueError(\"d must be within the range of 0 to 31\")\n\n    # extract the last d bits of n\n    mask = 0xFFFFFFFF >> (32 - d)\n    last_d_bits = (n >> d) & mask\n\n    # extract the first d bits of n and shift the remaining bits to the left by d bits\n    first_d_bits = (n << (32 - d)) & 0xFFFFFFFF\n\n    # concatenate the last d bits of n with the first d bits of n rotated left by d bits\n    rotated_bits = last_d_bits | first_d_bits\n\n    # return the rotated bits\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert number to binary representation\n    bin_n = bin(n)[2:]\n    # Calculate number of bits to rotate left\n    num_bits = len(bin_n)\n    rot_bits = d % num_bits\n    # Calculate number of bits to shift by\n    shift_bits = num_bits - rot_bits\n    # Calculate the left rotated binary number\n    rotated_bin = bin_n[-shift_bits:] + bin_n[:-shift_bits]\n    # Convert back to decimal\n    rotated_dec = int(rotated_bin, 2)\n    # Return the rotated decimal number\n    return rotated_dec"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary and add 0's to the left by d bits\n    binary_n = bin(n)[2:].zfill(32)\n    # Split the binary number into groups of 4 bits\n    binary_groups = [binary_n[i:i+4] for i in range(0, len(binary_n), 4)]\n    # Reverse the order of the groups\n    binary_groups.reverse()\n    # Join the groups back together to form the rotated binary number\n    rotated_binary = ''.join(binary_groups)\n    # Convert the rotated binary number back to an integer\n    rotated_n = int(rotated_binary, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Get the number of bits in the binary string\n    num_bits = len(binary_str)\n    # Compute the number of rotations required\n    rotations = d % num_bits\n    # Compute the number of bits to shift the binary string\n    shift = num_bits - rotations\n    # Compute the shifted binary string\n    shifted_str = binary_str[:shift] + binary_str[shift:]\n    # Convert the shifted binary string to integer\n    result = int(shifted_str, 2)\n    # Return the rotated number\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d == 0:\n        return n\n    \n    # To rotate left by d bits, we need to perform the following steps:\n    # 1. Find the least significant bit of the number (LSB)\n    # 2. Extract the LSB d times and add the rest to the new LSB position\n    # 3. Shift the remaining bits to the right by d positions\n    # 4. Add the original LSB to the new LSB position\n    # 5. Return the rotated number\n    \n    # Step 1: Find the least significant bit of the number (LSB)\n    lsb = n & 1\n    # Step 2: Extract the LSB d times and add the rest to the new LSB position\n    new_lsb = ((n >> d) & 1) + (n & ((1 << d) - 1))\n    # Step 3: Shift the remaining bits to the right by d positions\n    shifted_bits = (n >> (d + 1))\n    # Step 4: Add the original LSB to the new LSB position\n    new_number = (new_lsb << (d + 1)) + shifted_bits\n    # Step 5: Return the rotated number\n    return new_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use a regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Using a dictionary to store the frequency of each number\n    freq_dict = {}\n\n    # Counting the frequency of each number in the list\n    for num in [x, y, z]:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Counting the number of equal numbers in the list\n    count = 0\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            count += 1\n\n    # Returning the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y), max(x, y)):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j or i == z or j == z:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n    # If the array is already sorted in reverse order, there is no rotation required\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # If the array is already sorted in a descending order, there is no rotation required\n    if arr == sorted(arr, reverse=True) and arr == sorted(arr, reverse=False):\n        return 0\n    # Otherwise, we need to count rotations by comparing adjacent elements\n    rot = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i+1]:\n            rot += 1\n    return rot"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Check if the array is sorted or not\n    if sorted(arr) == arr:\n        return 0\n    else:\n        # Initialize variables\n        n = len(arr)\n        count = 0\n        temp = arr[0]\n        # Loop through the array and count rotations\n        for i in range(1, n):\n            if arr[i] < temp:\n                count += 1\n            temp = arr[i]\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        # Find the smallest element in the unsorted part of the array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        # If the smallest element is already at the end of the array, there's no rotation needed\n        if min_idx == n-1:\n            return 0\n\n        # Swap the smallest element with the last element of the unsorted part of the array\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        min_idx = i\n\n        # Find the smallest element in the unsorted part of the array again\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        # If the smallest element is already at the end of the array, there's no rotation needed\n        if min_idx == n-1:\n            return 0\n\n        # Swap the smallest element with the last element of the unsorted part of the array\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # If the loop completes without finding a rotation, there must be at least one rotation\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Find the smallest and largest element in the array\n    smallest = min(arr)\n    largest = max(arr)\n    \n    # Check if the array is already sorted\n    if smallest == largest:\n        return 0\n    \n    # Find the difference between the smallest and largest element\n    diff = largest - smallest\n    \n    # Create a list of tuples containing the difference and the index of the element\n    diff_list = [(diff, i) for i in range(len(arr))]\n    \n    # Sort the list of tuples in ascending order\n    diff_list.sort()\n    \n    # Iterate through the sorted list of tuples and count the number of rotations\n    count = 0\n    for i in range(len(diff_list)):\n        if diff_list[i][0] == 0:\n            count += 1\n        else:\n            break\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n    # count the number of rotations required to sort the array\n    count = 0\n    # initialize the left and right pointers for the array\n    left = 0\n    right = n - 1\n    # while the left pointer is less than the right pointer\n    while left < right:\n        # swap the elements at the left and right pointers\n        arr[left], arr[right] = arr[right], arr[left]\n        # increment the left and right pointers\n        left += 1\n        right -= 1\n        # check if the sorted array is equal to the original array\n        if sorted(arr) == arr:\n            return count\n        # increment the count of rotations\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    # Check if the array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the mid element of the array\n    mid = n // 2\n    \n    # Traverse the array and check if the mid element is present in the left half or right half of the array\n    left = [x for x in arr[:mid]]\n    right = [x for x in arr[mid:]]\n    if mid in left or mid in right:\n        return 1\n    else:\n        # If the mid element is not present in the left or right half of the array, check if the array can be rotated in any direction\n        for i in range(n-1):\n            if arr[i] > arr[i+1]:\n                left = [x for x in arr[:i]]\n                right = [x for x in arr[i+1:]]\n                if mid in left or mid in right:\n                    return 1 + count_rotation(arr[:i]) + count_rotation(arr[i+1:])\n        # If no direction of rotation can be found, return -1\n        return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                return 1 + count_rotation(arr[:i] + arr[j:] + arr[i+1:])"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n\n    # Function to find the minimum element in an array\n    def find_min(arr):\n        min_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min_val:\n                min_val = arr[i]\n        return min_val\n\n    # Function to rotate an array\n    def rotate(arr, d):\n        n = len(arr)\n        k = n - d\n        arr = arr[k:] + arr[:k]\n        return arr\n\n    # Find the minimum element in the array\n    min_val = find_min(arr)\n\n    # Count the number of rotations required\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > min_val:\n            count += 1\n        else:\n            break\n\n    # Rotate the array\n    rotated_arr = rotate(arr, count)\n\n    # Count the number of distinct elements in the rotated array\n    count_distinct = len(set(rotated_arr))\n\n    return count_distinct"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = n - 1\n        while j > i:\n            if arr[i] > arr[j]:\n                j -= 1\n            else:\n                break\n        if j < n - 1:\n            count += n - j - 1\n        else:\n            count += n - i - 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # check if n is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return True\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    sqrt_n = math.sqrt(n)\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    \n    # Compute the square root of n\n    sqrt_n = n ** 0.5\n    \n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    if n < 2:\n        return False\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n    # Check if n is a perfect square\n    for i in range(sqrt_n, 1, -1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return \"The given number is negative.\"\n    \n    # Check for square root of n\n    root = n ** 0.5\n    if root ** 2 == n:\n        return True\n    \n    # Check for square root of n - 1\n    root_minus_one = (n - 1) ** 0.5\n    if root_minus_one ** 2 + 1 == n:\n        return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is 1\n    if n == 1:\n        return True\n    # check if the number is already a square\n    if n * n == n:\n        return True\n    # check if the number is divisible by 4\n    elif n % 4 == 0:\n        return False\n    # check if the number is divisible by 9\n    elif n % 9 == 0:\n        return False\n    # check if the number is divisible by 16\n    elif n % 16 == 0:\n        return False\n    # check if the number is divisible by 25\n    elif n % 25 == 0:\n        return False\n    # check if the number is divisible by 36\n    elif n % 36 == 0:\n        return False\n    # check if the number is divisible by 49\n    elif n % 49 == 0:\n        return False\n    # check if the number is divisible by 64\n    elif n % 64 == 0:\n        return False\n    # check if the number is divisible by 81\n    elif n % 81 == 0:\n        return False\n    # check if the number is divisible by 100\n    elif n % 100 == 0:\n        return False\n    # check if the number is divisible by 121\n    elif n % 121 == 0:\n        return False\n    # check if the number is divisible by 144\n    elif n % 144 == 0:\n        return False\n    # check if the number is divisible by 169\n    elif n % 169 == 0:\n        return False\n    # check if the number is divisible by 196\n    elif n % 196 == 0:\n        return False\n    # check if the number is divisible by 225\n    elif n % 225 == 0:\n        return False\n    # check if the number is divisible by 256\n    elif n % 256 == 0:\n        return False\n    # check if the number is divisible by 289\n    elif n % 289 == 0:\n        return False\n    # check if the number is divisible by 324\n    elif n % 324 == 0:\n        return False\n    # check if the number is divisible by 361\n    elif n % 361 == 0:\n        return False\n    # check if the number is divisible by 400\n    elif n % 400 == 0:\n        return False\n    # check if the number is divisible by 441\n    elif n % 441 == 0:\n        return False\n    # check if the number is divisible by 484\n    elif n % 484 == 0:\n        return False\n    # check if the number is divisible by 529\n    elif n % 529 == 0:\n        return False\n    # check if the number is divisible by 576\n    elif n % 576 == 0:\n        return False\n    # check if the number is divisible by 625\n    elif n % 625 == 0:\n        return False\n    # check if the number is divisible by 676\n    elif n % 676 == 0:\n        return False\n    # check if the number is divisible by 729\n    elif n % 729 == 0:\n        return False\n    # check if the number is divisible by 784\n    elif n % 784 == 0:\n        return False\n    # check if the number is divisible by 841\n    elif n % 841 == 0:\n        return False\n    # check if the number is divisible by 900\n    elif n % 900 == 0:\n        return False\n    # check if the number is divisible by 961\n    elif n % 961 == 0:\n        return False\n    # check if the number is divisible by 1024\n    elif n % 1024 == 0:\n        return False\n    # check if the number is divisible by 1089\n    elif n % 10"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # check if n is a perfect square\n    i = 0\n    while i * i <= n:\n        i += 1\n    if i * i == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    if n < 0:\n        return False\n\n    # start from 1 to sqrt(n)\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Calculate the product of the list\n    product = 1\n    for num in arr:\n        product *= num\n        \n    # Check if the product is even\n    if product % 2 == 0:\n        print(\"The product of the list is even.\")\n    else:\n        print(\"The product of the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    product = 1 \n    for num in arr: \n        product *= num \n    return product % 2 == 0 "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr: \n        product *= i\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n\n    for sublist in lists:\n        total_sum = sum(sublist)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_lists = [sublist]\n        elif total_sum == max_sum:\n            max_lists.append(sublist)\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists\n    whose sum of elements is the highest. If there are multiple lists with the same highest sum,\n    it returns the first such list.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n        # Loop through each element in the list\n        for num in lst:\n            # Add the current element to the current sum\n            current_sum += num\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Create a new list that contains the elements of the input list of lists whose sum is the maximum\n    result = []\n    for lst in lists:\n        if sum(lst) == max_sum:\n            result.append(lst)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Get the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate over all the lists in the list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total_sum = sum(lst)\n\n        # Update the maximum sum if the current sum is greater\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n    # Create a list of lists that contains the indices of the maximum sum list\n    max_sum_indices = []\n\n    # Iterate over all the lists in the list of lists again\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total_sum = sum(lst)\n\n        # If the current sum is equal to the maximum sum, add the index of the current list to the max_sum_indices list\n        if total_sum == max_sum:\n            max_sum_indices.append(lst.index(max(lst)))\n\n    # Create a new list of lists that contains the maximum sum list and its index in the original list of lists\n    max_sum_lists = []\n\n    # Iterate over all the indices in the max_sum_indices list and add the corresponding list to the max_sum_lists list\n    for index in max_sum_indices:\n        max_sum_lists.append(lists[index])\n\n    return max_sum_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Define a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize a variable to store the current sum\n        current_sum = 0\n        \n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n        \n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum variable\n            max_sum = current_sum\n            \n    # Return the list with the maximum sum\n    return lists[lists.index(max(lists, key=len))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # initialize the max sum and the max sum list\n    max_sum = float('-inf')\n    max_sum_list = None\n\n    # loop through all the sublists in the list of lists\n    for sublist in lists:\n        # initialize the current sum\n        current_sum = 0\n\n        # loop through all the elements in the sublist\n        for element in sublist:\n            # add the element to the current sum\n            current_sum += element\n\n        # check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            # update the max sum and max sum list\n            max_sum = current_sum\n            max_sum_list = sublist\n\n    # return the max sum list\n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 1\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 1\n    max_run_start = 0\n    current_run = 1\n    current_run_start = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # If the character is uppercase, increment the run length\n            current_run += 1\n            # If the run length is greater than the current max run, update the max run and start positions\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = current_run_start\n        else:\n            # If the character is not uppercase, reset the run length and start position\n            current_run = 1\n            current_run_start = i + 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n\n    # Iterate through the string and count uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n\n    # Return maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i, j = 0, 0\n    max_run = 0\n    max_run_start = 0\n\n    while i < len(test_str):\n        if test_str[i].isupper():\n            j = i + 1\n            while j < len(test_str) and test_str[j].isupper():\n                j += 1\n            if j - i > max_run:\n                max_run = j - i\n                max_run_start = i\n\n        i += 1\n\n    return test_str[max_run_start:max_run_start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the uppercase count\n            uppercase_count += 1\n            # Check if the current run exceeds the maximum run so far\n            if current_run > max_run:\n                # Update the maximum run\n                max_run = current_run\n        else:\n            # Reset the uppercase count if the character is not uppercase\n            uppercase_count = 0\n        # Increment the current run\n        current_run += 1\n\n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables for maximum run and current run\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        \n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        \n        # If the character is not uppercase, reset the current run to 0\n        else:\n            current_run = 0\n        \n        # Update the maximum run if the current run is greater\n        if current_run > max_run:\n            max_run = current_run\n            \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables for maximum run and current run\n    max_run = 1\n    current_run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run\n        else:\n            current_run = 0\n        # Update the maximum run if the current run is greater\n        if current_run > max_run:\n            max_run = current_run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run_length = 0\n    prev_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            if prev_uppercase:\n                uppercase_count += 1\n            else:\n                prev_uppercase = True\n        else:\n            prev_uppercase = False\n        if uppercase_count > max_run_length:\n            max_run_length = uppercase_count\n        uppercase_count = 0\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - max_count + 1\n        else:\n            count = 0\n    return test_str[start:start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i\n        else:\n            count = 0\n            \n    return test_str[start:start+max_count]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the first odd number in the list.\n    If there is no odd number in the list, it will return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, return the number\n            return num\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K)!= 0:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\ntest_tup3 = (1, 2, 3, 4)\ntest_tup4 = (1, 2, 3, 4, 5, 6)\n\nprint(check_K(test_tup1, 3))  # Output: True\nprint(check_K(test_tup2, 3))  # Output: False\nprint(check_K(test_tup3, 3))  # Output: False\nprint(check_K(test_tup4, 6))  # Output: True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    return count >= K"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the tuples are equal. If not, return False.\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through each element of the tuples.\n    for i in range(len(test_tup1)):\n        # Check if the element in the second tuple is smaller than the element in the first tuple.\n        if test_tup2[i] < test_tup1[i]:\n            return True\n\n    # If all the elements of the tuples are smaller than each other, return False.\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element at position\", i, \"in the first tuple is larger than the corresponding element in the second tuple.\")\n            return False\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"The element at position\", i, \"in the first tuple is smaller than the corresponding element in the second tuple.\")\n            return False\n    \n    print(\"All elements in the second tuple are smaller or equal to their corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the lengths of the tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # if the element in the first tuple is greater than the element in the second tuple\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # if we make it through the loop without returning False, we know that all elements in the second tuple are smaller\n    return True"
    }
]