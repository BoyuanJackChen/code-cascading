[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Find the shared elements\n    shared_elements = []\n    for elem in test_list1:\n        if elem in test_list2:\n            shared_elements.append(elem)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # find the intersection of the two lists\n    intersection = [x for x in test_tup1 if x in test_tup2]\n\n    # check if the intersection is not empty\n    if intersection:\n        # print the intersection\n        print('The shared elements are:', intersection)\n    else:\n        # print a message if the intersection is empty\n        print('No shared elements found.')"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # create an empty set to store shared elements\n    shared_elements = set()\n\n    # loop through the first list and check if each element is in the second list\n    for element in list1:\n        if element in list2:\n            shared_elements.add(element)\n\n    # convert the set back to a list and return it\n    return list(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # convert the input tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared = set1.intersection(set2)\n    # convert the intersection set back to a list\n    shared_list = list(shared)\n    # return the shared elements\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if n is not a prime number,\n    and False otherwise. The function checks whether n is divisible by any number\n    from 2 to the square root of n minus 1, inclusive.\n    \"\"\"\n    if n <= 1:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    A number is considered prime if it is greater than 1 and only divisible by 1 and itself.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if n is not a prime number, False otherwise.\n    '''\n    # Check if n is less than 2 (the smallest prime number)\n    if n < 2:\n        return True\n    # Check if n is divisible by any number between 2 and n-1 (inclusive)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If we reach this point, n is not a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check if n is 1 or a negative number\n    if n <= 1:\n        return True\n\n    # check if n is even\n    if n % 2 == 0:\n        return True\n\n    # check if n is odd and divisible by 3, 5, or 7\n    if n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n        return True\n\n    # check if n is divisible by any of the numbers from 1 to n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # n is not prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n >= len(nums):\n        return nums\n    \n    min_heap = hq.heapify(nums)\n    \n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(min_heap):\n            hq.heappush(min_heap, nums[i])\n    \n    return hq.nlargest(n, min_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize an empty max heap\n    max_heap = []\n    # push the first n elements of the list into the max heap\n    for num in nums[:n]:\n        hq.heappush(max_heap, -num)\n    # push the remaining elements of the list into the max heap in decreasing order\n    for num in nums[n:]:\n        hq.heappush(max_heap, -num)\n    # pop and return the largest n elements from the max heap\n    return [-num for num in hq.nlargest(n, max_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # sort the list in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap of size n and fill it with the numbers in nums\n    heap = hq.nlargest(n, nums)\n    # extract the largest n integers from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap and push all the numbers into it\n    hq.heapify(nums)\n\n    # Pop the n largest numbers and return them\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input, and returns the n largest integers from the list in descending order.\n    \"\"\"\n\n    # Convert the list of numbers into a min-heap\n    hq.heapify(nums)\n\n    # Return the n largest integers from the list in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # convert list to heap\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # extract and remove the largest element from the heap\n    for _ in range(n, len(nums)):\n        largest = hq.heappop(heap)\n        nums.remove(largest)\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Using a min heap with negative numbers as keys and positive numbers as values\n    heap = [(x, -x) for x in nums]\n    # We use a min heap, so we need to pop the maximum n elements\n    for i in range(n):\n        hq.heappop(heap)\n    # Finally, we return the negative numbers of the min heap\n    return [-x for x, _ in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers.\n    \"\"\"\n    # Build a min heap of size n from the first n elements of the list\n    min_heap = hq.nsmallest(n, nums)\n    # Return the largest n elements from the min heap\n    return [min_heap[0]] + min_heap[1:]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x % 2 == 0: \n            x //= 2\n        else: \n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1) == 0:\n        x &= x - 1\n    if x!= 1:\n        return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x & (x-1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Loop through each bit position in the binary representation of x\n    for i in range(32):\n        \n        # Get the bit at position i in binary representation of x\n        bit = x & (1 << i)\n        \n        # If the bit is 1, then there is a difference at position i\n        if bit!= 0:\n            return False\n    \n    # If all bits are 0, then there is no difference at any position\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # if the number is not a power of 2\n    if x & (x - 1)!= 0:\n        return False\n    # if the number is a power of 2\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return True\n    \n    while x & (x-1) == 0:\n        x &= (x-1)\n    \n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the number is a power of 2, False otherwise.\n    '''\n    # Check if the number is a power of 2\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Loop through each word in the words list\n    for word in words:\n        # Check if the length of the word is at least 4\n        if len(word) >= 4:\n            # Add the word to the long_words list\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use the regular expression \\b to match words with a boundary\n    # The re.findall() function returns a list of all matches\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Define a regular expression pattern for matching words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() function to find all words in the input string that match the pattern\n    words = re.findall(pattern, text)\n\n    # Return the list of words that match the pattern\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using whitespace as the delimiter\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    words = [word for word in words if len(word) >= 4]\n    # Return the filtered list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern for finding words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all words in the text that match the pattern\n    words = pattern.findall(text)\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n-1):\n        if str[i:i+2] == str[i+2:i+4]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Initialize an empty string to store the characters of the original string\n    original_str = \"\"\n\n    # Loop through each character in the given string\n    for char in str:\n        # If the character is not in the original string, add it to the original string\n        if char not in original_str:\n            original_str += char\n\n    # Initialize an empty string to store the characters of the reversed string\n    reversed_str = \"\"\n\n    # Loop through each character in the original string and add it to the reversed string\n    for char in original_str:\n        reversed_str += char\n\n    # If the original and reversed strings are equal, return 0 (i.e., no rotation is required)\n    if original_str == reversed_str:\n        return 0\n\n    # Initialize a variable to store the minimum number of rotations required to get the same string\n    min_rotations = 0\n\n    # Loop through each character in the original string and check if it is equal to the corresponding character in the reversed string\n    for i in range(len(original_str)):\n        if original_str[i]!= reversed_str[i]:\n            # If there is a difference, update the minimum number of rotations required to get the same string\n            min_rotations += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check for the edge cases\n    if n <= 1:\n        return 0\n    elif n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    \n    # Find the minimum number of rotations required to get the same string\n    count = 0\n    max_count = 0\n    for i in range(n):\n        # If the element at the current index is the same as the element at the previous index, then count the number of rotations\n        if str[i] == str[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    \n    # If the count is greater than the max count, then add 1 to the count to get the required number of rotations\n    if count > max_count:\n        max_count += 1\n    \n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            min_rotations = min(min_rotations, n-i)\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    \n    # fill in the first row and column\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0] + 1\n        dp[0][i] = dp[0][i-1] + 1\n    \n    # fill in the rest of the table\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if the characters are the same, no rotation required\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            # if the characters are different, we need to rotate\n            else:\n                # rotation required is the minimum of the two rotations required\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n                \n    return dp[n][n]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize the minimum number of rotations required\n    min_rotations = 0\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        # Find the difference between the original string and the rotated string\n        diff = sum(ord(str[j]) - ord(str[i-j]) for j in range(i+1, len(str)+1))\n        # Update the minimum number of rotations required\n        min_rotations = min(min_rotations, diff)\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Check if the length of the string is 1 or 2\n    if n == 1 or n == 2:\n        return 0\n    \n    # Initialize variables for tracking the minimum rotations\n    min_rot = n\n    rotations = 0\n    \n    # Iterate through each character of the string\n    for i in range(n):\n        # Check if the current character is the last character of the string\n        if i == n-1:\n            # If it is, then there is no rotation required\n            rotations += 1\n            continue\n        \n        # Check if the current character is the first character of the string\n        if i == 0:\n            # If it is, then there is no rotation required\n            rotations += 1\n            continue\n        \n        # Swap the characters at the current index and the next character\n        temp = str[i]\n        str[i] = str[i+1]\n        str[i+1] = temp\n        \n        # Check if the string has become equal to its reversed version\n        if str == str[::-1]:\n            return rotations\n        \n        # Decrement the minimum number of rotations and update the current rotation count\n        min_rot -= 1\n        rotations += 1\n        \n        # Reset the string to its original state\n        str[i] = temp\n        \n    # If the string has not been reversed, then there is no rotation required\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    # Check for odd length rotations\n    if n % 2!= 0:\n        min_rotations = min(min_rotations, n // 2)\n        str = str[-n:] + str[:-n]\n    # Check for even length rotations\n    else:\n        min_rotations = min(min_rotations, n // 2)\n        min_rotations = min(min_rotations, n // 4)\n        str = str[-n:] + str[:-n] + str[-n//2:] + str[:-n//2:]\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            s1 = str[j:j+i]\n            s2 = str[j+i:j+i+n-i]\n            if s1 == s2:\n                return i\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # sort the dictionary by frequency and by character (if frequency is the same)\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize the minimum number of rotations\n    min_rotations = 0\n    \n    # iterate through the sorted dictionary\n    for key, value in sorted_freq:\n        # if the character is the first character, no need to rotate\n        if key == str[0]:\n            continue\n        \n        # if the frequency is different from the first character, rotate the string\n        if value!= freq[str[0]]:\n            min_rotations += 1\n            \n            # reverse the first character and the rotated string\n            str = str[1:] + str[0] + str[1:]\n    \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character 'ch'\n    if s.startswith(ch):\n        s = s[1:]\n    # Remove last occurrence of character 'ch'\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and returns the modified string where the first and last occurrence of the given character has been removed.\n    \"\"\"\n    # Convert the string into a list of characters\n    lst = list(s)\n    # Initialize the index of the first occurrence of the character\n    first_occ = None\n    # Initialize the index of the last occurrence of the character\n    last_occ = None\n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # If the current character is equal to the given character\n        if lst[i] == ch:\n            # If the current index is the first occurrence of the character\n            if first_occ is None:\n                first_occ = i\n            # If the current index is the last occurrence of the character\n            elif lst[i] == ch:\n                last_occ = i\n    # If the first occurrence of the character is not found\n    if first_occ is None:\n        # Return the original string\n        return s\n    # If the first occurrence of the character is found\n    else:\n        # Create a new string that excludes the first occurrence of the character\n        new_str = \"\"\n        for i in range(first_occ):\n            new_str += lst[i]\n        # Append the last occurrence of the character to the new string\n        new_str += lst[last_occ]\n        # Loop through the list of characters from the second last occurrence of the character to the end\n        for i in range(last_occ+1, len(lst)):\n            new_str += lst[i]\n        # Return the new string\n        return new_str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '', 1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            if i == 0:\n                del s[i]\n            elif i == len(s)-1:\n                del s[i]\n            else:\n                del s[i-1]\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1: #if string contains only one occurrence of the character, return empty string\n        return \"\"\n    else:\n        return s.replace(ch,\"\")[:s.find(ch)] #replace first occurrence of character with empty string and return the part before the character"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    s = list(s)\n    # Find the index of the first occurrence of the character\n    idx = s.index(ch)\n    # Remove the character from the string\n    del s[idx]\n    # Find the index of the second occurrence of the character\n    idx = s.index(ch)\n    # Remove the second character from the string\n    del s[idx]\n    # Join the list of characters back into a string\n    return ''.join(s)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row_sums in ascending order\n    row_sums.sort()\n    # Initialize the sorted matrix with zeros\n    sorted_matrix = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    # Fill the sorted matrix with the sorted row_sums\n    for i in range(len(M)):\n        sorted_matrix[i] = [row_sums[i]]\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a list of lists to hold the sorted matrix\n    sorted_M = [[0 for j in range(cols)] for i in range(rows)]\n    \n    # Initialize variables to keep track of the current row and column\n    row = 0\n    col = 0\n    \n    # While there are still unsorted elements in the matrix\n    while row < rows and col < cols:\n        # Find the minimum element in the current row\n        min_val = float('inf')\n        min_row = -1\n        min_col = -1\n        for i in range(cols):\n            if M[row][i] < min_val:\n                min_val = M[row][i]\n                min_row = row\n                min_col = i\n        # Move the minimum element to the current column\n        sorted_M[row][col] = min_val\n        # Increment the row and column indices\n        row += 1\n        col = min_col + 1\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sum of rows\n    sum_rows = [sum(row) for row in M]\n    # Sort the matrix based on sum of rows\n    sorted_M = sorted(M, key=lambda x: sum_rows.index(sum(x)))\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n    \n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Initialize a variable to store the current row sum\n    current_sum = 0\n    \n    # Iterate through each row of the matrix\n    for i in range(num_rows):\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        \n        # If the row sum is less than the current minimum sum, update the minimum sum and add the row to the sorted matrix\n        if row_sum < current_sum:\n            sorted_matrix.append(M[i])\n            current_sum = row_sum\n        # If the row sum is equal to the current minimum sum, add the row to the sorted matrix\n        elif row_sum == current_sum:\n            sorted_matrix.append(M[i])\n            # If the current row is already in the sorted matrix, set the current row sum to the next smallest row sum\n            if current_sum in [sum(row) for row in sorted_matrix]:\n                current_sum = min([sum(row) for row in sorted_matrix])\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Convert the matrix to a list of lists\n    rows = [list(row) for row in M]\n\n    # Sort the list of lists by sum of rows\n    rows.sort(key=lambda row: sum(row))\n\n    # Convert the sorted list of lists back to a matrix\n    sorted_matrix = [[row[j] for row in rows] for j in range(len(rows[0]))]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the list in ascending order\n    row_sums.sort()\n    # Create a new matrix with the sorted row sums as the rows\n    sorted_M = [[row_sums[i] for i in range(len(row_sums)) if j == row_sums.index(row_sums[i])] for j in range(len(M))]\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the indices of the maximum values in each row\n    max_indices = [0] * len(M[0])\n\n    # Loop through each row of the matrix and find the index of the maximum value\n    for i in range(len(M)):\n        max_indices[0] = i\n        for j in range(1, len(M[0])):\n            if M[i][j] > M[i][max_indices[j]]:\n                max_indices[j] = j\n        # Reverse the sorted row if its sum is negative\n        if sum(M[i]) < 0:\n            M[i] = M[i][::-1]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # check if input is a list of lists\n    if not all(isinstance(row, list) for row in M):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    # check if all elements in a row are integers\n    for row in M:\n        if not all(isinstance(elem, int) for elem in row):\n            raise ValueError(\"All elements in a row must be integers\")\n    \n    # create a matrix of sums of rows\n    row_sums = [[sum(row)] for row in M]\n    \n    # sort the matrix based on the sums of rows\n    sorted_M = sorted(M, key=lambda x: sum(x))\n    \n    # create a new matrix with the sorted rows\n    sorted_rows = [[row[0]] for row in sorted_M]\n    sorted_matrix = sorted_rows\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1,n):\n            if M[i][j] < M[i][i]+M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compare the sum of current row and next row\n            if sum(M[i]) < sum(M[j]):\n                # Swap the rows if the sum is less than next row sum\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length of each side of a triangular prism as arguments and returns the volume of the prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes in the length, width and height of a triangular prism and returns the volume of the prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism\n    V = 0.5 * l * b * h\n    \n    # Return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h): \n    '''\n    This function takes the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    \n    #calculating volume of prism\n    vol = 1/3 * l * b * h\n    \n    return vol"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5 * l * b * h #formula to calculate volume\n    print(\"The volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # Use the re.search() function to search for the pattern in the input text\n    result = re.search(pattern, text)\n    # If the pattern is found, return True, otherwise return False\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)[a-z](?=\\b_?)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'(?<![a-z])([a-z]+)(?=[a-z])'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_+([a-z]+)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'^[a-z_]+[a-z]+_[a-z]+$', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"(?<=[a-z])[A-Z]\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Use regular expression to match sequences of lowercase letters joined with an underscore\n    underscore_pattern = re.compile(r'([a-z]+_[a-z]+)')\n    # Check if the input string matches the underscore pattern\n    return bool(underscore_pattern.search(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])([a-z]+)_+([a-z]+)\"\n    matches = re.findall(pattern, text)\n    return True if matches else False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z][a-z0-9]*)(_+[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = ''\n    for char in string:\n        if char not in remove_list:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a new string where all the characters present \n    in the second string are removed from the first string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Iterate over the characters in the list\n    for i in range(len(char_list)):\n\n        # If the character is present in the second string, remove it\n        if char_list[i] in string:\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_list = []\n    for char in range(NO_OF_CHARS): \n        char_list.append(chr(char)) \n    first_string = string.lower()\n    second_string = ''.join(sorted(set(second_string)))\n    result_string = ''\n    for char in first_string: \n        if char not in second_string: \n            result_string += char \n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    new_string = \"\"\n    for char in string: \n        if char not in char_set: \n            new_string += char \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    result = ''\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            result += chr(i)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    no_of_chars_in_string = [0] * NO_OF_CHARS\n    char_index = 0\n    for char in string:\n        if char in string:\n            char_index = 0\n        else:\n            char_index += 1\n        no_of_chars_in_string[char_index] += 1\n    for char in string:\n        if char not in string:\n            char_index = 0\n        else:\n            char_index += 1\n        no_of_chars_in_string[char_index] -= 1\n    final_list = [string[i] for i in range(NO_OF_CHARS) if no_of_chars_in_string[i] == 0]\n    return ''.join(final_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    char_list = list(string)\n    char_set = set(string)\n    for char in char_set:\n        if char not in char_list:\n            char_list.remove(char)\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Iterate over each character in the list\n    for i in range(len(char_list)):\n        # Check if the character is present in the second string\n        if char_list[i] in string:\n            # Remove the character from the list\n            char_list.remove(char_list[i])\n    \n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    \n    # Return the resulting string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove the characters from the first string that are present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, \"\")\n\n    # Convert the string into a list\n    string_list = list(string)\n\n    # Pad the list with zeros to have a length of 256\n    string_list.extend([0] * (256 - len(string_list)))\n\n    return string_list"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Check if there are any elements in the dictionary with a frequency greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements in the array\n    element_dict = {}\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in element_dict:\n            return True\n        # Otherwise, add the element to the dictionary\n        else:\n            element_dict[num] = True\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create an empty dictionary to store the count of each element in the array\n    count = {}\n\n    # loop through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # loop through the dictionary and check if any element has a count greater than 1\n    for num, count in count.items():\n        if count > 1:\n            return True\n\n    # if no element has a count greater than 1, the array does not contain any duplicate elements\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            duplicates.append(num)\n    if duplicates:\n        print(f\"The array contains duplicate elements: {duplicates}\")\n    else:\n        print(\"The array does not contain any duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    # Create a dictionary to store the elements and their frequency\n    freq_dict = {}\n\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq_dict:\n            freq_dict[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[num] = 1\n\n    # Check if any number has a frequency greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique values\n    unique_values = set()\n\n    # iterate through the array and add unique values to the set\n    for num in arraynums:\n        if num not in unique_values:\n            unique_values.add(num)\n\n    # if the set is not empty, there is a duplicate in the array\n    if len(unique_values)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique elements\n    unique_nums = set()\n\n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # Check if there are any elements left in the set, which means there were duplicates\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n\n    # If the length of the set is equal to the length of the array, then there are no duplicate elements in the array\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return \"Woodball\"\n    elif x > 1 and x % 2 == 0: \n        return \"Woodball\"\n    elif x % 2 == 1: \n        return \"Not a Woodball\"\n    else: \n        return \"Invalid input\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5: \n        return \"Woodball\"\n    else: \n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the number is a multiple of 11\n    if x % 11 == 0:\n        return True\n    # check if the number is a multiple of 13\n    elif x % 13 == 0:\n        return True\n    # check if the number is a multiple of 17\n    elif x % 17 == 0:\n        return True\n    # check if the number is a multiple of 19\n    elif x % 19 == 0:\n        return True\n    # if none of the above conditions are met, the number is not a multiple of any of the prime factors\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is divisible by 2 and 3\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    # Check if the number is divisible by 5 and 7\n    elif x % 5 == 0 and x % 7 == 0:\n        return True\n    # If none of the conditions are met, return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return not is_woodall((x - 1) // 2)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    if x % 3 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'\n\nprint(is_woodall(5))    # Output: Woodball\nprint(is_woodall(3))    # Output: Not a Woodball"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"It's a woodball\"\n    elif x % 2 == 0:\n        return \"It's a woodball\"\n    else:\n        return \"It's not a woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Convert the number to a string to check the length\n    str_num = str(num)\n    \n    # Check if the length of the string is greater than 1 (to avoid edge cases)\n    if len(str_num) > 1:\n        # Convert the number to a list of digits and reverse it\n        digits = list(str(num)[::-1])\n        \n        # Calculate the sum of the digits\n        total = sum(int(digit) for digit in digits)\n        \n        # Check if the sum is one less than twice the reverse of the digits\n        if total - 1 < total * 2:\n            return True\n        else:\n            return False\n    else:\n        # If the length of the string is 1, the number cannot be reversed\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    # Calculate the reverse of reverse number\n    reverse_reverse_num = 0\n    while reverse_num > 0:\n        reverse_reverse_num = reverse_reverse_num * 10 + reverse_num % 10\n        reverse_num //= 10\n    # Check if the reverse of reverse number is one less than twice the original number\n    if reverse_reverse_num - (2 * reverse_num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number and convert it to a string\n    reversed_num = str(num)[::-1]\n    # Convert the reversed number to an integer and subtract 1\n    reverse_of_reverse = int(reversed_num) - 1\n    # Check if the original number is one less than twice its reverse\n    if num == reverse_of_reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * reverse + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    rev_num = int(reversed_num_str)\n    if num == rev_num + 1:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Calculate the reversed number\n    rev_num = int(num_str)\n    # Calculate the difference between the original number and its reverse\n    diff = num - rev_num\n    # Check if the difference is less than two\n    if diff < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    return num < 2 * rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    # Check if the reversed number is one less than twice its original value\n    if num == rev_num - 1:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    # calculate the reverse of the given number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    # check if the given number is one less than twice its reverse\n    return (rev_num + 1) % (2*rev_num + 1) == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + 1) == 2 * rev(num + 1)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(2**n):\n        temp_num = 0\n        for j in range(n):\n            if i & (1<<j):\n                temp_num += arr[j]\n        if temp_num > max_num:\n            max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # create a string of digits\n    digits = ''.join(map(str, arr))\n\n    # initialize a variable for the result\n    max_num = 0\n\n    # loop through each digit in the string\n    for digit in digits:\n        # convert the digit to an integer\n        num = int(digit)\n\n        # check if the number is greater than the current max_num\n        if num > max_num:\n            max_num = num\n\n    # return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits and returns the largest number that can be formed using those digits.\n    '''\n\n    # Initialize variables to store the sum of digits and the maximum possible value\n    sum_digits = 0\n    max_value = 0\n\n    # Loop through each digit in the list\n    for digit in arr:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_digits += int(digit)\n\n        # Check if the sum of digits is greater than the maximum value so far\n        if sum_digits > max_value:\n            # Update the maximum value\n            max_value = sum_digits\n\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize variables\n    max_num = arr[0]\n    i = 0\n    \n    # Loop through each digit and add it to the max_num\n    while i < len(arr):\n        max_num += arr[i]\n        i += 1\n    \n    # Return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    num = 0\n    \n    for i in arr:\n        num += i\n        if num > max_num:\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    \n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            \n            max_num = max(max_num, arr[i] + arr[j])\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] ** i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        num = 0\n        for j in range(i, -1, -1):\n            num += arr[j]*(10**j)\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    # If one of the numbers is zero and the other is positive, then the result will be negative.\n    # If both are zero, then the result will be zero.\n    if (x == 0 and y > 0) or (x > 0 and y == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if the two integers have the same sign\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if (x * y) < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return 'Both numbers are zero'\n    elif x > 0 and y < 0 or x < 0 and y > 0:\n        return 'Both numbers have opposite signs'\n    else:\n        return 'Both numbers have the same sign'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x >= 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return True \n    elif x < 0 and y < 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    if x>=0 and y>=0:\n        return True\n    elif x<=0 and y<=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is an octagonal number and False otherwise.\n    An octagonal number is a number whose square is equal to the sum of its digits raised to the power of 2.\n    For example, 15 is an octagonal number because 1^2 + 5^2 = 125.\n    '''\n    if n <= 0:\n        return False\n    num_digits = len(str(n))\n    total_sum = 0\n    for i in range(num_digits):\n        digit_power = i + 1\n        digit = n // (10**(num_digits - i - 1))\n        total_sum += digit**digit_power\n    return total_sum**2 == n\n\ndef nth_octagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth octagonal number.\n    '''\n    for i in range(n):\n        if is_octagonal(i):\n            return i\n    return None\n\nprint(nth_octagonal(10))  # Output: 12"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(n): \n        # initialize variables for octagonal number\n        a = b = c = 0\n        \n        # loop from 1 to n/2\n        for j in range(1, n//2+1): \n            # calculate next term of octagonal sequence\n            a = (a**2) + (2*j-1)\n            \n            # check if octagonal number is found\n            if a > n: \n                return a\n        \n        # loop from n/2 to n\n        for j in range(n//2, n): \n            # calculate next term of octagonal sequence\n            b = (b**2) + (2*j-1)\n            \n            # check if octagonal number is found\n            if b > n: \n                return b\n        \n        # loop from n/2+1 to n\n        for j in range(n//2+1, n): \n            # calculate next term of octagonal sequence\n            c = (c**2) + (2*j-1)\n            \n            # check if octagonal number is found\n            if c > n: \n                return c\n        \n        # add two consecutive octagonal numbers\n        n -= (n//2)\n        n += (n//2)\n    \n    # if no octagonal number is found\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    base = 1\n    octagonal_number = 0\n    while octagonal_number <= n:\n        octagonal_number = base * base + base * (base - 1)\n        base += 2\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal(n):\n        return int(n*(3*n-1)**(1/2))\n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return None\n    \n    oct_num = (n*8)**0.5\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n < 10:\n        return is_octagonal(n*10 + 1)\n    elif n == 10:\n        return 21\n    else:\n        return is_octagonal((n//2)*2 - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_valid_octagon(num):\n        return num % 2 == 0 and num % 12 == 0\n    \n    for i in range(n):\n        oct_num = 2 * i * (i + 1)\n        if is_valid_octagon(oct_num):\n            return oct_num\n\nn = 10\noct_num = is_octagonal(n)\nprint(oct_num)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) ** 2 == n ** 3"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n ** 2 == 2 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    \n    while octagonal <= n:\n        if octagonal ** 2 == n:\n            return octagonal\n        octagonal += 1\n    \n    return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if digit_count[s[j]] == len(s):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # If it is, increment the count in the count_dict\n                count_dict[len(s[i:j])] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    substring_count = defaultdict(int)\n\n    for i in range(len(s)):\n        digit_count[sum(int(digit) for digit in s[i:i+1])] += 1\n\n    for length in range(1, len(s)+1):\n        for substring in s[len(s)-length:]:\n            substring_count[sum(int(digit) for digit in substring)] += 1\n\n    return sum(substring_count.values()) - sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of each substring with sum of digits equal to its length\n    count_dict = defaultdict(int)\n    \n    # Loop through each substring and count the number of substrings with sum of digits equal to its length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                count_dict[s[i:j+1]] += 1\n    \n    # Return the count of substrings with sum of digits equal to its length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n\n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count[s[i:j]] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with each length\n    length_dict = defaultdict(int)\n    \n    # Iterate over all the possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                length_dict[j-i] += 1\n                \n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(length_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    def count_substring(s, length):\n        count = 0\n        for i in range(len(s)-length+1):\n            substring = s[i:i+length]\n            if sum(int(d) for d in substring) == length:\n                count += 1\n        return count\n    \n    substrings_count = defaultdict(int)\n    for length in range(1, len(s)+1):\n        substrings_count[length] = count_substring(s, length)\n        \n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits = list(map(int, substring))\n            sum_of_digits = sum(digits)\n            if sum_of_digits == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum([int(digit) for digit in substring]) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the counts of substrings of length n\n    counts = defaultdict(int)\n\n    # loop through the input string and calculate the sum of digits of the substring\n    for i in range(len(s)):\n        substring = s[i:i+len(s)-i]\n        if sum(int(d) for d in substring) == len(substring):\n            counts[substring] += 1\n\n    # return the counts of substrings with sum of digits equal to their length\n    return counts"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n\n    Args:\n    xs (list): A list of numbers.\n\n    Returns:\n    int: The smallest number in the list.\n    \"\"\"\n    # Initialize smallest variable with the first element of the list\n    smallest = xs[0]\n\n    # Iterate over the rest of the elements of the list\n    for x in xs[1:]:\n        # If the current element is smaller than the current smallest, update smallest\n        if x < smallest:\n            smallest = x\n\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest number, update the smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Iterate over the rest of the list\n    for x in xs[1:]:\n        # If the current element is smaller than the smallest so far, update the smallest number\n        if x < smallest:\n            smallest = x\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference as the first element\n    max_diff = test_list[0]\n\n    # Iterate through the list and calculate the difference between each pair\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1] - test_list[i])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    n = len(test_list)\n    max_diff = test_list[n-1] - test_list[0]\n    for i in range(1, n-1):\n        diff = test_list[i+1] - test_list[i]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference variable to 0\n    max_diff = 0\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)-1):\n        # Calculate the difference between the current element and the next element in the list\n        diff = sorted_list[i+1] - sorted_list[i]\n\n        # Update the maximum difference if the current difference is greater than the previous maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = [(x, y) for x in test_list for y in test_list if x!= y]\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            diff = abs(pairs[i][0] - pairs[j][0]) + abs(pairs[i][1] - pairs[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Use the sorted() function to sort the list of tuples based on the second value of each tuple.\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the input list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursive case: sum up the first element of the list and the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list, index=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the index is equal to the length of the list, return the sum of the list elements\n    if index == len(data_list):\n        return sum(data_list)\n\n    # recursive case: add the current element to the sum of the flattened list and recursively call the function\n    return data_list[index] + recursive_list_sum(data_list, index+1)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list += recursive_list_sum(item)\n            else:\n                flattened_list.append(item)\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        result = 0\n        for item in data_list:\n            result += recursive_list_sum(item)\n        return result\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: if the list has only one element, return the element\n    if len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: sum the first two elements and add the rest of the list recursively\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return its value\n    if len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: sum the first element and the sum of the remaining elements\n    else:\n        first_element = data_list[0]\n        remaining_elements = data_list[1:]\n        return first_element + recursive_list_sum(remaining_elements)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list, level=0):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        for item in data_list:\n            recursive_list_sum(item, level + 1)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:], level)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum([item for sublist in data_list for item in sublist])\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a dictionary to store the count of partitions for each bell number\n    partition_count = {}\n    # Set the initial bell number to 1 and its count to 1\n    partition_count[1] = 1\n    \n    # Iterate over all possible bell numbers up to n\n    for b in range(2, n+1):\n        # For each bell number, iterate over all possible partitions up to n-b\n        for p in range(1, b+1):\n            # If the current bell number can be partitioned into p parts, add the count to the dictionary\n            if p*b in partition_count:\n                partition_count[p*b] += partition_count[b]\n    \n    return partition_count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 2 * (n - 1) + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the list of Bell numbers\n    bell_nums = []\n\n    # Add 1 and 2 to the list of Bell numbers\n    bell_nums.append(1)\n    bell_nums.append(2)\n\n    # Iterate through the remaining Bell numbers\n    for i in range(3, n+1):\n\n        # Calculate the current Bell number\n        current_bell = 0\n        for j in range(1, i//2+1):\n            if i%j == 0:\n                current_bell += 1\n\n        # Add the current Bell number to the list of Bell numbers\n        bell_nums.append(current_bell)\n\n    # Return the number of ways to partition the set of Bell numbers\n    return len(bell_nums)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if k == 1:\n            return 1\n        elif n == 0:\n            return 0\n        else:\n            return partition(n-1, k-1) + partition(n-1, k)\n\n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        count += n // i\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Initialize variables\n        ways = [1]*(n+1)\n        ways[0] = 1\n        ways[1] = 1\n        # Calculate the number of ways to partition the set\n        for i in range(2, n+1):\n            for j in range(i):\n                ways[i] += ways[j]*ways[i-j-1]\n        return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n**2 - 1) // (2*n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    # initialize the result matrix\n    result = [[0 for j in range(n+1)] for i in range(n+1)]\n    # initialize the number of ways to partition the set of Bell numbers\n    ways = 1\n\n    # fill the result matrix using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                result[i][j] = 1\n            elif i == 1 or j == 1:\n                result[i][j] = 2\n            else:\n                result[i][j] = result[i-1][j] + result[i][j-1] - result[i-1][j-1]\n\n    # calculate the number of ways to partition the set of Bell numbers\n    for i in range(2, n+1):\n        ways += result[i][i]\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the number of ways to partition the set of Bell numbers\n    ways = [1] * (n+1)\n    # Initialize the first two elements of the list\n    ways[0] = 0\n    ways[1] = 1\n    # Calculate the number of ways to partition the set of Bell numbers by counting the number of pairs of Bell numbers that sum up to each Bell number\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            ways[i] += ways[j-1] * ways[i-j]\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # Initialize the count to 0\n    count = 0\n    # Initialize the set of numbers to partition\n    nums = set(range(n+1))\n    # Loop through each number in the set\n    for num in nums:\n        # Check if the number is a Bell number\n        if num == sum(set(range(1, num+1))):\n            # If so, increment the count\n            count += 1\n    # Return the count of Bell numbers in the set\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    if A[0] < A[-1]:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    is_increasing = A[1] - A[0] <= 0\n    is_decreasing = A[-1] - A[-2] >= 0\n\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1] < A[2]:\n        return True\n    elif A[len(A)-1] < A[len(A)-2] < A[len(A)-3]:\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] and A[i] < A[i+1]:\n                return False\n            elif A[i] < A[i-1] and A[i] > A[i+1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic (increasing or decreasing) and False otherwise.\n\n    The function first compares the first two elements of the array. If they are the same, it means that the array is not monotonic. If they are different, the function checks if the difference between the first element and the second element is positive or negative. If it is positive, the array is increasing and if it is negative, the array is decreasing.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return False\n\n    # Compare the first and second elements of the array\n    if A[0] == A[1]:\n        return False\n    elif A[0] < A[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # Check for the monotonicity in the first half of the array\n    for i in range(n//2):\n        if A[i] > A[i+1]:\n            return False\n    # Check for the monotonicity in the second half of the array\n    for i in range(n//2, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for monotonic increasing sequence\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    # check for monotonic decreasing sequence\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    # check for neither increasing nor decreasing sequence\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or contains only one element\n    if len(A) < 2:\n        return True\n    \n    # Initialize variables for min and max elements in the array\n    min_element = A[0]\n    max_element = A[0]\n    \n    # Traverse through the array from the second element\n    for i in range(1, len(A)):\n        # Check if the current element is less than the minimum element\n        if A[i] < min_element:\n            return False\n        # Check if the current element is greater than the maximum element\n        elif A[i] > max_element:\n            max_element = A[i]\n        # Check if the current element is equal to the minimum or maximum element\n        else:\n            return False\n            \n    # If no errors were found, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic, else False.\n    A monotonic array is an array where the sequence of its elements either increases or decreases monotonically.\n    For example, [1, 2, 3, 4, 5] is monotonic, while [1, 5, 3, 4, 2] is not.\n    '''\n    if len(A) < 2:\n        return False\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array A is monotonic or not.\n    A monotonic array is an array where either all elements are increasing or decreasing or neither.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while j < len(s):\n        if l[i] == s[j]:\n            j += 1\n            i += 1\n            if j == len(s):\n                return True\n        else:\n            i += 1\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list):\n        raise TypeError(\"Input l must be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Input s must be a list\")\n    if len(s) > len(l):\n        raise ValueError(\"Length of s cannot be greater than length of l\")\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists l and s and returns True if s is a sublist of l, else False.\n    '''\n    for i in range(len(l)):\n        if l[i:]:\n            if l[i:].startswith(s):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the list\n    for tup in Input:\n        # Check if the length of the tuple is equal to the length of the first tuple\n        if len(tup)!= len(Input[0]):\n            return False\n    # If no tuple in the list has a different length than the first tuple, then all the tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a variable to store the number of tuples with equal length\n    num_tuples_with_equal_length = 0\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Check if the length of the tuple is equal to the length of the first tuple in the list\n        if len(tup) == len(Input[0]):\n            # Increment the counter if all the tuples have equal length\n            num_tuples_with_equal_length += 1\n        # If any tuple does not have equal length, exit the loop and return the count\n        else:\n            break\n\n    # Return the count of tuples with equal length\n    return num_tuples_with_equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        for j in range(n):\n            if len(Input[i]) == len(Input[j]):\n                return True\n        if n > 1:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == 0:\n            return False\n        else:\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal = True\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                equal = False\n                break\n    return equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set()\n    for tup in Input:\n        lengths.add(len(tup))\n\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    # Check if the input is a list of tuples\n    if type(Input)!= list or type(Input[0])!= tuple:\n        return False\n\n    # Check if all tuples have the same number of elements\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    # If all the conditions are true, then all the tuples have equal length\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the length of the list\n    n = len(nums)\n\n    # initialize the gap to the length of the list\n    gap = n\n\n    # while the gap is greater than 1\n    while gap > 1:\n        # set the gap to the smallest gap between 1 and the gap\n        gap = min(gap, n // 2)\n\n        # iterate over the list from the start\n        for i in range(gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # if it is, swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n\n        for i in range(gap, len(nums)):\n            temp = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > temp:\n                nums[j+gap] = nums[j]\n                j -= gap\n            nums[j+gap] = temp\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        sorted = True\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n        gap = gap // 1.3\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Start with a default gap size of 10\n    gap = 10\n    \n    # While the gap is greater than 1\n    while gap > 1:\n        \n        # Calculate the new gap size\n        gap = int(gap / 1.3)\n        \n        # Sort the list using the modified gap size\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        \n        # Print the sorted list\n        print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    max_iter = n\n    min_num = max(nums)\n    swap = True\n    while swap:\n        swap = False\n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swap = True\n        max_iter = max(max_iter, n)\n        n = int((n + min_num) / 1.3)\n        if max_iter == n:\n            break\n        min_num = max(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # define the parameters of the algorithm\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = max(1, gap // 2)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    # Set a flag to indicate whether the list is sorted or not\n    sorted_flag = False\n\n    # Set a flag to indicate whether the gap should be increased or decreased\n    increasing_flag = True\n\n    # Set the number of iterations\n    iterations = 0\n\n    # Set the maximum gap size\n    max_gap = len(nums) // 2\n\n    # While the list is not sorted and the number of iterations is less than the maximum number of iterations\n    while not sorted_flag and iterations < max_gap:\n        # Set a flag to indicate whether the gap should be increased or decreased\n        new_increasing_flag = True\n\n        # Set the number of swaps\n        swaps = 0\n\n        # Iterate through the list using a for loop\n        for i in range(len(nums) - 1):\n            # Calculate the index of the smallest element in the gap range\n            smallest_index = i\n\n            # Iterate through the elements in the gap range\n            for j in range(i + 1, i + max_gap + 1):\n                # If the current element is smaller than the smallest element in the gap range\n                if nums[j] < nums[smallest_index]:\n                    # Set the index of the smallest element to the current index\n                    smallest_index = j\n\n            # If the smallest element has not been found yet\n            if smallest_index!= i:\n                # Swap the current element with the smallest element\n                nums[i], nums[smallest_index] = nums[smallest_index], nums[i]\n                # Increment the number of swaps\n                swaps += 1\n\n        # If the number of swaps is zero, set the flag to indicate that the list is sorted\n        if swaps == 0:\n            sorted_flag = True\n\n        # If the gap size is not sufficiently small, increase the gap size\n        if new_increasing_flag!= increasing_flag:\n            max_gap = max(max_gap // 2, 1)\n        else:\n            max_gap = min(max_gap * 2, len(nums))\n\n        # Increment the number of iterations\n        iterations += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = n // 10\n\n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        n -= gap\n        swapped = False\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number can be expressed as the difference of two squares\n    if n % 4 == 0:\n        a = int(n/4)\n        b = int(n/a)\n        c = int(n/b)\n        if c == n:\n            print(\"The given number can be represented as the difference of two squares.\")\n        else:\n            print(\"The given number cannot be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Check if the given number is odd or even\n    if n % 2 == 0:\n        # If the given number is even, it can't be represented as the difference of two squares\n        return \"The given number is even and can't be represented as the difference of two squares.\"\n\n    # Check if the given number is less than or equal to 3\n    elif n <= 3:\n        # If the given number is less than or equal to 3, it can't be represented as the difference of two squares\n        return \"The given number is less than or equal to 3 and can't be represented as the difference of two squares.\"\n\n    # Check if the given number is a perfect square\n    elif n**0.5 % 1 == 0:\n        # If the given number is a perfect square, it can be represented as the difference of two squares\n        return \"The given number is a perfect square and can be represented as the difference of two squares.\"\n\n    # Check if the given number is a sum of two squares\n    else:\n        # If the given number is a sum of two squares, it can't be represented as the difference of two squares\n        return \"The given number is a sum of two squares and can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0: # If n is even, n cannot be represented as the difference of two squares.\n        return \"n cannot be represented as the difference of two squares.\"\n    else:\n        square_diff = n**2 - 2*n\n        if square_diff**2 == n**2: # If square_diff is equal to n**2, then n can be represented as the difference of two squares.\n            return \"n can be represented as the difference of two squares.\"\n        else: # Otherwise, n cannot be represented as the difference of two squares.\n            return \"n cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5)+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"The given number can't be negative.\")\n        return\n    # check if the number is a perfect square\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            print(\"The given number can be represented as the difference of two squares.\")\n            return\n        elif n < i * i:\n            break\n        else:\n            i += 1\n    print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer\"\n\n    # check if the input is a power of 2\n    power = 0\n    while n:\n        n = n >> 1\n        power += 1\n    if power & 1:\n        return \"Input must be a power of 2\"\n\n    # check if the difference of the squares is a power of 2\n    # (equivalent to checking if the difference is a power of 2)\n    difference = 0\n    while n:\n        difference += n\n        n = n >> 1\n    power = 0\n    while difference:\n        difference = difference >> 1\n        power += 1\n    if power & 1:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # initialize variables\n    a = 0\n    b = 0\n    flag = False\n    \n    # loop to check if the given number can be represented as the difference of two squares\n    while a*a + b*b <= n:\n        if a*a + b*b == n:\n            flag = True\n            break\n        if a*a + b*b < n:\n            b += 1\n        else:\n            a += 1\n    \n    # return the result\n    return flag"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    This function takes an integer n as input and returns True if it is possible to represent n as the difference of two squares, \n    False otherwise. The function checks if the difference of the squares of the digits of n is equal to n, and returns True \n    if it is, False otherwise.\n    '''\n    def is_square(x):\n        '''\n        This helper function checks if a given number x is a perfect square or not.\n        '''\n        return x == int(x**0.5) ** 2\n    \n    def digits(n):\n        '''\n        This helper function returns the digits of a given integer n.\n        '''\n        return [int(d) for d in str(n)]\n    \n    def sum_of_squares(digits):\n        '''\n        This helper function returns the sum of the squares of the digits of a given integer.\n        '''\n        return sum([int(d)**2 for d in digits])\n    \n    # Get the digits of n\n    digits_n = digits(n)\n    # Calculate the sum of squares of the digits of n\n    sum_n = sum_of_squares(digits_n)\n    # Check if the difference of the squares of the digits of n is equal to n\n    if sum_n - n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_difference_of_squares(n):\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # Compute the square of the number\n    square = n ** 2\n\n    # Check if the square is divisible by 4\n    if square % 4 == 0:\n        return True\n\n    # Check if the difference of the square and the original number is divisible by 4\n    return n - square % 4 == 0"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is a square number\n    if n ** 0.5 ** 2 == n:\n        return True\n\n    # Check if the difference of two squares can be represented as n\n    for i in range(1, int(n ** 0.5) + 1):\n        if i ** 2 + i ** 2 == n:\n            return True\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    count = 0\n    pattern = \"\"\n\n    # Iterate through the colors array\n    for color in colors:\n        # Check if the current color matches the current pattern\n        if color == pattern:\n            count += 1\n        else:\n            # If not, reset the count and update the pattern\n            count = 0\n            pattern = color\n\n    # Check if the count is equal to the length of the patterns array\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the length of colors and patterns are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # create a dictionary to store the count of colors\n    color_count = {}\n\n    # iterate through colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # if the color is not in the dictionary, add it with a count of 1\n        if color not in color_count:\n            color_count[color] = 1\n        # otherwise, increment the count of that color\n        else:\n            color_count[color] += 1\n\n        # check if the pattern is equal to the count of that color in the dictionary\n        if pattern!= color_count[color]:\n            return False\n\n    # if we make it through the loop without returning False, it means all patterns are the same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a set of all possible colors for each pattern\n    pattern_colors = [set(pattern) for pattern in patterns]\n\n    # Check if the number of colors in each pattern is the same as the number of colors in the first pattern\n    if len(set(pattern_colors[0]))!= len(pattern_colors[0]):\n        return False\n\n    # Check if each pattern is a subset of the first pattern\n    for i in range(len(pattern_colors)):\n        if not pattern_colors[0].issubset(pattern_colors[i]):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    prev_pattern = None\n    for color in colors:\n        if color in patterns:\n            if prev_pattern == color:\n                return True\n            prev_pattern = color\n        else:\n            if prev_pattern is not None:\n                return False\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a list to store the pattern count\n    pattern_count = [0] * len(patterns)\n    \n    # Loop through the colors and check if they match the current pattern count\n    for color in colors:\n        index = patterns.index(color)\n        pattern_count[index] += 1\n        \n    # Check if the pattern count is the same for all patterns\n    for count in pattern_count:\n        if count!= patterns[0]:\n            return False\n        \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a set to store unique colors in the patterns array\n    unique_colors = set(patterns)\n\n    # check if all colors in the colors array are also in the patterns array\n    if colors.issubset(unique_colors):\n        # create a set to store the colors in the colors array that are in the patterns array\n        same_colors = set(colors).intersection(unique_colors)\n\n        # check if the patterns array is in the same order as the same_colors set\n        if sorted(patterns) == sorted(same_colors):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize the count of colors in each pattern\n    pattern_counts = [0] * len(patterns)\n\n    # Count the colors in each pattern\n    for color in colors:\n        for pattern_index, pattern in enumerate(patterns):\n            if color == pattern:\n                pattern_counts[pattern_index] += 1\n                break\n\n    # Check if all patterns have the same number of colors\n    for pattern_count in pattern_counts:\n        if pattern_count!= pattern_counts[0]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_dict = {}\n    for pattern in patterns:\n        patterns_dict[pattern] = patterns_dict.get(pattern, 0) + 1\n\n    n = len(colors)\n    same_count = 0\n    for i in range(n-1):\n        if colors[i] == colors[i+1]:\n            if patterns_dict[colors[i]] >= patterns_dict[colors[i+1]]:\n                same_count += patterns_dict[colors[i]] - 1\n            else:\n                same_count += patterns_dict[colors[i+1]] - 1\n\n    return same_count == len(patterns_dict) - 1"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_set = set(colors)\n    for pattern in patterns:\n        if len(colors_set) == 0:\n            return False\n        if set(pattern) not in patterns:\n            return False\n        colors_set.remove(pattern[0])\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Loop through each color in the colors array\n    for color in colors:\n\n        # Check if the color matches the first pattern in the patterns array\n        if color == patterns[0]:\n\n            # If the first pattern matches, check if the remaining patterns match\n            for pattern in patterns[1:]:\n                if pattern!= colors[colors.index(color) + 1]:\n                    return False\n\n            # If all patterns match, return True\n            return True\n\n        # If the color doesn't match the first pattern in the patterns array, return False\n        else:\n            return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = set()\n\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            tuples.add(tup)\n\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in test_list:\n        flag = True\n        for j in i:\n            if j % K!= 0:\n                flag = False\n                break\n        if flag:\n            tuples_list.append(i)\n    return tuples_list\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # Initialize a variable to keep track of the sum of the tuple elements\n        sum_ = 0\n\n        # Loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # Add the current element to the sum\n            sum_ += test_list[i][j]\n\n            # If the sum is greater than K, then we have found a tuple which has all elements divisible by K\n            if sum_ > K:\n                result.append(test_list[i])\n                break\n\n    # Return the list of tuples that have all elements divisible by K\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count = 0\n            for k in range(len(test_list[i])):\n                if test_list[i][k] % K!= 0:\n                    count += 1\n                    if count == len(test_list[i]):\n                        break\n            else:\n                count = 0\n                for k in range(len(test_list[j])):\n                    if test_list[j][k] % K!= 0:\n                        count += 1\n                        if count == len(test_list[j]):\n                            result.append((test_list[i], test_list[j]))\n                            break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            filtered_list.append(tuple)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer k as input,\n    and returns a list of all the tuples that have all elements divisible by k.\n    \"\"\"\n    # Create an empty list to store the tuples that meet the condition\n    result = []\n    # Loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # Check if the sum of the first and second elements is divisible by k\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            # If it is, add the tuple to the result list\n            result.append(test_list[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if len(t) == K and all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(f\"{word} has odd length.\")\n        else:\n            print(f\"{word} has even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Loop through each word and check its length\n    for word in words:\n        # If the length of the word is odd, return True\n        if len(word) % 2 == 1:\n            return True\n    # If no odd length word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    \n    for word in words: # iterate through each word\n        if len(word) % 2 == 0: # check if the length of the word is even\n            return False # if it is, return False\n        else:\n            return True # if it's odd, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n\n    # split the string by spaces and convert it to a list\n    words = s.split()\n\n    # loop through the list of words and check their length\n    for word in words:\n        if len(word) % 2!= 0:\n            return word\n\n    # if no word is found with odd length, return None\n    return None"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # Check if the input is a string\n    if not isinstance(s, str): \n        raise ValueError(\"Input must be a string\")\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Iterate through each word in the list\n    for word in words: \n        # Check if the length of the word is odd or not\n        if len(word) % 2!= 0: \n            return True\n    \n    # If no odd-length words are found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"The length of '{word}' is odd.\")\n        else:\n            print(f\"The length of '{word}' is even.\")\n    return"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word)\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n\n    # iterate over the list of words and check the length of each word\n    for word in words:\n        # if the length of the word is odd, return True\n        if len(word) % 2 == 1:\n            return True\n    \n    # if we get to this point, the length of all words is even\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the sequence of tetrahedral numbers\n    tetrahedral = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 5995, 6216, 6441, 6670, 6903, 7140, 7381, 7626, 7875, 8128, 8385, 8646, 8911, 9180, 9453, 9730, 10011, 10296, 10585, 10878, 11175, 11476, 11781, 12090, 12403, 12720, 13041, 13366, 13695, 14028, 14365, 14706, 15051, 15399, 15751, 16106, 16465, 16828, 17195, 17566, 17941, 18320, 18702, 19088, 19477, 19870, 20266, 20666, 21069, 21476, 21887, 22302, 22721, 23143, 23569, 23998, 24431, 24867, 25307, 25750, 26197, 26647, 27100, 27557, 28017, 28481, 28948, 29419, 29893, 30371, 30852, 31336, 31824, 32315, 32809, 33307, 33808, 34312, 34819, 35330, 35844, 36361, 36882, 37406, 37933, 38463, 38996, 39532, 40071, 40613, 41158, 41705, 42256, 42809, 43365, 43924, 44486, 4505"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2 * a * a\n    c = 3 * a * a * a\n    d = 4 * a * a * a * a\n    t = n + a + b + c + d\n    \n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4*n*n - 2*n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two tetrahedral numbers\n    t1 = 0\n    t2 = 4\n    \n    # Loop through the remaining n-2 tetrahedral numbers\n    for i in range(2, n):\n        # Calculate the next tetrahedral number\n        t = t1 + (t2-t1) // 2\n        \n        # Update the values for the next iteration\n        t1 = t2\n        t2 = t\n        \n    # Return the nth tetrahedral number\n    return t2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return 4 * n * (n - 1) * (n - 2) * (n - 3)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th tetrahedral number is: {tetrahedral_number(n)}\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (4 * n - 3) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n < 1 or n % 2 == 0: \n        return None\n\n    num = 0\n    for i in range(1, 3*n): \n        if i % 2 == 0: \n            num += i * 4 * i - 2 * i * (i + 1)\n\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_num = 0\n    for i in range(1, n+1):\n        tetra_num += 2 * i * (n-i+1)\n    return tetra_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * n * (n - 1)) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(2*n-1)*(2*n-2)*(2*n-3)) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculating the volume of the sphere\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere with radius r.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the sum of ASCII values of characters\n    sum_str = \"\"\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        char_val = ord(char)\n        # Add the ASCII value of the character to the sum\n        sum_str += str(char_val)\n        # Add the ASCII value of 26 to the sum to obtain the sum modulo 26\n        sum_str += \"26\"\n    # Convert the sum string back to an integer\n    sum_int = int(sum_str)\n    # Convert the integer to its character value using the formula char_val = sum_int - (26 * (sum_int // 26))\n    char_val = (sum_int - (26 * (sum_int // 26))) % 26\n    # Convert the character value to a character and return it\n    return chr(char_val + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return None\n    \n    char_sum = sum([ord(c) for c in strr]) % 26\n    \n    if char_sum < 10:\n        return chr(char_sum + ord('a'))\n    else:\n        return chr(char_sum + ord('A') - 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initializing the variable to store the character\n    char = ''\n    \n    # Traversing through each character of the string\n    for char in strr:\n        # Adding the ASCII value of the character to the variable char\n        char = ord(char) + char\n        \n        # Making the character uppercase\n        char = chr(ord(char) - 32)\n        \n        # Adding the uppercase character to the variable char\n        char = char.upper()\n    \n    # Returning the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the sum of ASCII values of characters of the string\n    sum_ascii = 0\n    # iterate over each character of the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_value = ord(char)\n        # add the ASCII value to the sum\n        sum_ascii += ascii_value\n    # return the character made by adding ASCII values of characters modulo 26\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Find the length of the string\n    length = len(strr)\n    # Initialize an empty list to store the ASCII values of each character in the string\n    ascii_values = []\n    # Loop through each character in the string and append its ASCII value to the list\n    for i in range(length):\n        ascii_values.append(ord(strr[i]))\n    # Calculate the sum of the ASCII values modulo 26\n    sum_ascii = sum(ascii_values) % 26\n    # Convert the sum back to a character and return it\n    return chr(sum_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    # Initialize a variable to store the sum of ASCII values of characters\n    sum_ASCII = 0\n\n    # Iterate through each character of the string\n    for char in strr:\n        # Add ASCII value of the character to the sum_ASCII variable\n        sum_ASCII += ord(char)\n\n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum_ASCII % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    return chr(ascii_value % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total_sum = 0\n    for char in strr:\n        ascii_val = ord(char)\n        total_sum += ascii_val\n    mod_sum = total_sum % 26\n    if mod_sum == 0:\n        return chr(65) # A\n    elif mod_sum == 1:\n        return chr(66) # B\n    elif mod_sum == 2:\n        return chr(67) # C\n    elif mod_sum == 3:\n        return chr(68) # D\n    elif mod_sum == 4:\n        return chr(69) # E\n    elif mod_sum == 5:\n        return chr(70) # F\n    elif mod_sum == 6:\n        return chr(71) # G\n    elif mod_sum == 7:\n        return chr(72) # H\n    elif mod_sum == 8:\n        return chr(73) # I\n    elif mod_sum == 9:\n        return chr(74) # J\n    elif mod_sum == 10:\n        return chr(75) # K\n    elif mod_sum == 11:\n        return chr(76) # L\n    elif mod_sum == 12:\n        return chr(77) # M\n    elif mod_sum == 13:\n        return chr(78) # N\n    elif mod_sum == 14:\n        return chr(79) # O\n    elif mod_sum == 15:\n        return chr(80) # P\n    elif mod_sum == 16:\n        return chr(81) # Q\n    elif mod_sum == 17:\n        return chr(82) # R\n    elif mod_sum == 18:\n        return chr(83) # S\n    elif mod_sum == 19:\n        return chr(84) # T\n    elif mod_sum == 20:\n        return chr(85) # U\n    elif mod_sum == 21:\n        return chr(86) # V\n    elif mod_sum == 22:\n        return chr(87) # W\n    elif mod_sum == 23:\n        return chr(88) # X\n    elif mod_sum == 24:\n        return chr(89) # Y\n    elif mod_sum == 25:\n        return chr(90) # Z\n    else:\n        return chr(91) # [ for cases where the sum modulo 26 is greater than 25."
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nThis function will return the nth number in the newman conway sequence by starting with 0 and adding the previous two terms until n reaches 1."
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 1\n\n    while count < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            new_number = sequence[i] + 2\n            if new_number == 10:\n                new_number = 1\n            new_sequence.append(new_number)\n        sequence = new_sequence\n        count += 1\n\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(a, end=' ')\n        a, b = b, a + b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0, 0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if sequence[i-1] % 2!= 0:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        else:\n            sequence.append(3*sequence[i-1] - sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sequence(n//2) + sequence(n//2)\n    else:\n        return 2 * sequence(n//2) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2**sequence(n//2)\n    else:\n        return 3**sequence(n//2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    sequence = [0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence\n\nn = int(input(\"Enter the value of n: \"))\nresult = sequence(n)\nprint(\"The nth number in the newman conway sequence is:\", result[-1])"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Convert radius to radians\n    r_radians = math.radians(r)\n\n    # Calculate surface area using formula for a sphere\n    surface_area = (4.0 / 3.0) * math.pi * r_radians ** 2\n\n    # Return surface area in square units\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius r and returns the surface area of a sphere.\n    '''\n    # Using the formula for the surface area of a sphere:\n    surface_area = (4/3) * math.pi * r ** 3\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the sum and count variables\n    sum_count = 0\n    count = 1\n    \n    # Calculate the first centered hexagonal number\n    centered_hexagonal_number = count * (1.5 ** count - 1.5)\n    \n    # Loop through the numbers and calculate the centered hexagonal number\n    for i in range(1, n + 1):\n        sum_count += centered_hexagonal_number\n        count += 1\n        \n        # Calculate the next centered hexagonal number\n        centered_hexagonal_number += count * (1.5 ** count - 1.5)\n    \n    # Return the sum of the centered hexagonal numbers\n    return sum_count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        n += 1\n    if n <= 0:\n        return 0\n    else:\n        return ((n + 1) * (2*n + 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    '''\n    # Initialize variables to keep track of the current centered hexagonal number and the current row number\n    centered_hex = 0\n    row_num = 1\n    \n    # Loop until we have found the nth centered hexagonal number\n    while centered_hex < n:\n        # Calculate the next centered hexagonal number and the number of steps to the next row\n        centered_hex = 2*centered_hex + 1\n        row_num += 1\n    \n    # Return the centered hexagonal number and the number of steps to the next row\n    return centered_hex, row_num - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((2*n*n - 1)**0.5 + 1)/2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the first centered hexagonal number\n    c = 0.5 * (1 + 3**(0.5) - 1)\n    \n    # Loop through the desired number of centered hexagonal numbers\n    for i in range(n):\n        # Calculate the current centered hexagonal number\n        c += 1.5 * c\n    \n    # Return the centered hexagonal number\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Value of n should be greater than or equal to 1.\")\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n**2) - 6 * n + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = 1\n    for i in range(1, n+1):\n        hex_num = (3*hex_num) - (2*i)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n\n    # Define the centered hexagonal number as the sum of the nearest two centered hexagonal numbers\n    # The nearest two centered hexagonal numbers are the hexagonal numbers that are centered between the nth and (n-1)th centered hexagonal numbers\n\n    # Find the (n-1)th centered hexagonal number\n    hex_n_1 = (n*(3*n-1))//2\n\n    # Find the nth centered hexagonal number\n    hex_n = hex_n_1 + 6\n\n    # Return the nth centered hexagonal number\n    return hex_n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    The function uses a lambda function to create a new dictionary from the keys and values of the input dictionaries.\n    \"\"\"\n    merged_dict = {k: lambda x: x[k] for k in dict1}\n    merged_dict.update({k: lambda x: x[k] for k in dict2})\n    merged_dict.update({k: lambda x: x[k] for k in dict3})\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    for key in dict1:\n        merged_dict[key] = dict1[key]\n        \n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    \n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and merges them into a single dictionary.\n    The keys of the dictionaries are used as the keys of the merged dictionary, and the values \n    are merged based on the type of the value. If both dictionaries have the same key, then the \n    values are merged based on the type of the value. If both dictionaries have the same key \n    and value, then the value from the second dictionary is used.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            if type(merged_dict[key]) == type(value):\n                merged_dict[key] = value\n            else:\n                merged_dict[key] = value\n        else:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key in merged_dict:\n            if type(merged_dict[key]) == type(value):\n                merged_dict[key] = value\n            else:\n                merged_dict[key] = value\n        else:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n            elif key in dict2:\n                merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using a dictionary to count the frequency of each element in the list\n    freq = collections.defaultdict(int)\n    for elem in list1:\n        freq[elem] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    num = N\n    while True:\n        num -= 1\n        if num <= 0:\n            return num + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(1, N+1))\n    smallest = min(num_list)\n    closest_num = min(num_list, key=lambda x: abs(x - N))\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return 1\n    else:\n        smaller_num = int(N/2)\n        if abs(N - smaller_num**2) < abs(N - smaller_num):\n            return smaller_num**2\n        else:\n            return closest_num(smaller_num-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    if N == 0:\n        return 0\n    smaller_num = 1\n    smaller_diff = abs(N - smaller_num)\n    for i in range(2, int(N/2)+1):\n        diff = abs(N - i)\n        if diff < smaller_diff:\n            smaller_diff = diff\n            smaller_num = i\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        lower_bound = 0\n        upper_bound = N\n        closest = lower_bound\n        while upper_bound - lower_bound > 1:\n            mid = (lower_bound + upper_bound) // 2\n            if mid >= N:\n                closest = mid\n                upper_bound = mid\n            else:\n                closest = mid\n                lower_bound = mid\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        closest_num_1 = closest_num(n-1)\n        closest_num_2 = closest_num(n-2)\n        if abs(closest_num_2 - n) < abs(closest_num_1 - n):\n            return closest_num_2\n        else:\n            return closest_num_1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    if N == 1:\n        return 1\n    else:\n        closest = closest_num(N//2)\n        if (N % 2 == 0 and closest >= N//2) or (N % 2!= 0 and closest < N//2):\n            return closest\n        else:\n            return closest_num(N//2) + 1\n\nprint(closest_num(10))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while n > 0:\n        if n % 10 == 0:\n            break\n        n -= 1\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    smallest = N\n    for i in range(1, N):\n        if abs(N - i) < abs(N - smallest):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for i in range(N):\n        if i == 0:\n            min_num = N\n        else:\n            diff = abs(N - i)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = i\n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # Initialize a variable to store the length of the longest word\n    max_len = 0\n    \n    # Loop through each word in the list\n    for word in list1:\n        \n        # Get the length of the current word\n        current_len = len(word)\n        \n        # Update the max_len variable if the current word is longer\n        if current_len > max_len:\n            max_len = current_len\n    \n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(lst):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    \"\"\"\n    longest = 0\n    for word in lst:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Args:\n    list1 (list of strings): A list of strings that contain words.\n\n    Returns:\n    int: The length of the longest word in the list.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    \n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n            \n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Both inputs must be of type list and str\"\n\n    for word in str1:\n        if sub_str in word:\n            return word\n\n    return \"Substring not found\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Converting the list of strings into a set to remove duplicates\n    str_set = set(str1)\n    # Splitting the sub_str into a set to remove duplicates\n    sub_set = set(sub_str.split())\n    # Checking if the sub_str is present in any of the strings in the list\n    for s in str_set:\n        if sub_set.issubset(set(s.split())):\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        raise ValueError(\"Both arguments must be strings.\")\n    if len(str1) < len(sub_str):\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        if n >= 6:\n            return True\n        else:\n            for i in range(1, int(n/2)+1):\n                if n % i == 0:\n                    return False\n            return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables to keep track of the sum of even and odd terms\n    even_sum = 0\n    odd_sum = 0\n    # Iterate through the given number and add the even and odd terms to the sums\n    for i in range(2, n+1, 2):\n        even_sum += i\n    for i in range(1, n, 2):\n        odd_sum += i\n    # Check if the sum of even and odd terms is equal to the original number\n    if even_sum == n and odd_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the given number is odd\n    if n % 2 == 1: \n        # Return True if the number is odd\n        return True\n    else: \n        # Return False if the number is even\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # create a list of all numbers from 1 to n\n    numbers = list(range(1, n+1))\n    # check if any number is odd and greater than 1\n    for num in numbers:\n        if num % 2!= 0 and num > 1:\n            return True\n    # if no odd number greater than 1 is found, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        return \"The number is even and undulating.\"\n    else:\n        return \"The number is odd and undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 2:\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The given number is not undulating.\"\n    else:\n        return \"The given number is undulating.\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments: 'a' and 'b'. It calculates and returns the value of 'a' to the power of 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    # base case\n    if b == 0:\n        return 1\n\n    # recursive case\n    return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    elif a < 0:\n        return 1 / power(-a, b)\n    else:\n        return a ** b"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i, (value, index) in enumerate(test_list):\n        if value < min_value:\n            min_index = i\n            min_value = value\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first value in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n\n    # Sort the list of tuples by second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Extract the first value from the first tuple in the sorted list\n    min_value = sorted_list[0][0]\n\n    return min_value"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, returns the index of the first tuple with the smallest second value.\n    \"\"\"\n    min_index = None\n    min_value = None\n    \n    for i, tup in enumerate(test_list):\n        if min_index is None or tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Initialize the length of the smallest list to infinity\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for sublist in lst:\n        \n        # Calculate the length of the current sublist\n        length = len(sublist)\n        \n        # If the length of the sublist is less than the current minimum, update the minimum length\n        if length < min_length:\n            min_length = length\n    \n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    min_length = 999999999999999\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = None  \n    for sublist in lst:  \n        if min_length is None or len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  \n    \n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the minimum length\n    min_len = None\n\n    # Loop through each list in the list of lists\n    for sublist in lst:\n        # If this list has a length less than the current minimum length, update it\n        if len(sublist) < min_len or min_len is None:\n            min_len = len(sublist)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    \n    for sublist in lst:  # iterate over all sublists in the list\n        sublist_length = len(sublist)  # get the length of the sublist\n        \n        if sublist_length < min_length:  # if the sublist length is less than the current minimum length\n            min_length = sublist_length  # update the minimum length\n    \n    return min_length  # return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return 1 + divisor(n-1)"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Create a dictionary to store frequency\n    freq = {}\n    # Loop through each element in the flat list\n    for item in flat_list:\n        # Check if the element is already in the dictionary\n        if item in freq:\n            # If yes, increment its frequency\n            freq[item] += 1\n        else:\n            # If not, add it to the dictionary with a frequency of 1\n            freq[item] = 1\n    # Return the dictionary of frequency\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through the flattened list of lists\n    for sublist in list1:\n        # loop through the sublist\n        for element in sublist:\n            # if the element is already in the dictionary, increment its frequency by 1\n            if element in freq_dict:\n                freq_dict[element] += 1\n            # if the element is not in the dictionary, add it with frequency 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # loop through each element in the flattened list of lists\n    for item in list1:\n        # check if the item is already in the dictionary\n        if item in frequency_dict:\n            # increment the count of the item in the dictionary by 1\n            frequency_dict[item] += 1\n        # otherwise, add the item to the dictionary with a count of 1\n        else:\n            frequency_dict[item] = 1\n    \n    # return the dictionary of frequency counts\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for elem in list1:\n        for sublist in elem:\n            if sublist not in freq_dict:\n                freq_dict[sublist] = 1\n            else:\n                freq_dict[sublist] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function on that list to find its frequency\n        if isinstance(element, list):\n            freq_dict.update(frequency_lists(element))\n        # if the element is not a list, check if it is already in the dictionary\n        elif element in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element in the flattened list.\n    freq_dict = {}\n\n    # Loop through each element in the flattened list.\n    for elem in list1:\n        # If the element is a list, recursively call the function on the list and add its frequency to the frequency dictionary.\n        if isinstance(elem, list):\n            sub_freq_dict = frequency_lists(elem)\n            for key, value in sub_freq_dict.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n        # If the element is not a list, check if it is already in the dictionary.\n        elif elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # loop through each element in the flattened list of lists\n    for item in list1:\n        # check if the current element is already in the dictionary\n        if item in frequency:\n            # increment the count of the current element\n            frequency[item] += 1\n        # if the current element is not in the dictionary, add it with a count of 1\n        else:\n            frequency[item] = 1\n    \n    # return the dictionary of frequency of each element\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency\n        if element in freq:\n            freq[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[element] = 1\n    # Return the dictionary\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # Divide by the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    # Divide by the length of the list\n    result = total_product / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '-' + decimal_to_binary(-n)\n    else:\n        result = ''\n        while n > 0:\n            remainder = n % 2\n            n //= 2\n            result = str(remainder) + result\n        return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal number to binary using bitwise operations\n    binary = bin(n)[2:]\n    # Remove leading zeros from binary string\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = \"\"\n    while n > 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes a decimal number as an argument and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0: \n        return \"0\"\n    else: \n        binary = \"\"\n        while n > 0: \n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary = ''\n    # loop through each digit of the decimal number\n    while n > 0: \n        # extract the last digit of the decimal number\n        digit = n % 2 \n        # append the binary equivalent of the digit to the string\n        binary = str(digit) + binary \n        # divide the decimal number by 2 and discard the remainder\n        n //= 2 \n    # return the binary equivalent of the decimal number as a string\n    return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome as an integer.\n    \"\"\"\n    # initialize a variable to store the next smallest palindrome\n    next_smallest = 0\n    \n    # loop through all the numbers between 1 and the input number\n    for i in range(1, num + 1):\n        # convert the integer to a string and reverse it\n        reversed_num = str(i)[::-1]\n        # check if the reversed number is a palindrome\n        if int(reversed_num) == int(reversed_num[::-1]):\n            # if it is, update the next_smallest variable\n            next_smallest = i\n            \n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromes = []\n    for i in range(10**num-10, 10**num, -1):\n        if str(i) == str(i)[::-1]:\n            palindromes.append(i)\n    return min(palindromes)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Convert the string back to an integer\n    num_int = int(num_str)\n\n    # Check if the reversed integer is less than the original integer\n    if num_int < num:\n        # The reversed integer is greater than the original integer\n        return num + 1\n    else:\n        # The reversed integer is less than or equal to the original integer\n        return num_int"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to string\n    num_str = str(num)\n    \n    # Initialize two pointers, left and right, pointing to the first and last character respectively of the number string\n    left = 0\n    right = len(num_str)-1\n    \n    # Check if the number is a palindrome\n    while left < right:\n        if num_str[left]!= num_str[right]:\n            return int(num_str[left:right+1])\n        left += 1\n        right -= 1\n    \n    # The number is a palindrome, so return the next smaller palindrome starting from the first character\n    while num_str[left] == '9':\n        left += 1\n    return int(num_str[:left]+num_str[left+1:])"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is palindrome, False otherwise.\n    \"\"\"\n    if num < 0:\n        num = -num\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 0:\n        num = -num\n\n    # Find the next smallest prime number greater than the given number.\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n\n    return next_num\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n\n    # Find the length of the string\n    num_length = len(num_str)\n\n    # Find the first even digit index\n    even_digit_index = 0\n    while even_digit_index < num_length and num_str[even_digit_index] % 2 == 0:\n        even_digit_index += 1\n\n    # Initialize the smallest palindrome string\n    min_palindrome = num_str[:even_digit_index]\n\n    # Check for the smallest palindrome starting from the next even digit index\n    for i in range(even_digit_index + 1, num_length):\n        # Convert the current integer to a string\n        temp_str = num_str[i:] + num_str[:i]\n\n        # Check if the string is a palindrome and is smaller than the current smallest palindrome\n        if temp_str == temp_str[::-1] and len(temp_str) < len(min_palindrome):\n            min_palindrome = temp_str\n\n    # Convert the smallest palindrome string to an integer\n    next_smallest_palindrome = int(min_palindrome)\n\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.reverse()\n    num_str_reversed = ''.join(num_list)\n    for i in range(1, 10):\n        num_str_new = str(i)\n        num_list_new = list(num_str_new)\n        num_list_new.reverse()\n        num_str_new_reversed = ''.join(num_list_new)\n        if num_str_new_reversed <= num_str_reversed:\n            return int(num_str_new_reversed)\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    if num < 1:\n        print(\"Invalid input: integer must be greater than or equal to 1\")\n        sys.exit(1)\n\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    This function checks if a given integer is a palindrome.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    This function finds the next smallest palindrome of a specified integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\nnum = int(sys.argv[1])\nprint(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    digits = [int(d) for d in str(num)]\n\n    # generate all palindromes of each digit from left to right and right to left\n    for i in range(n):\n        left_palindromes = [int(''.join(map(str, reversed(d + [digits[i]] + d)))), int(''.join(map(str, reversed(d + [digits[i]]) + [digits[i]]))))\n        right_palindromes = [int(''.join(map(str, reversed([digits[i]] + d + d[::-1]))))]\n\n        # find the smallest palindrome among all generated palindromes\n        palindromes = [p for p in left_palindromes + right_palindromes if p > digits[i]]\n        if palindromes:\n            num = min(palindromes)\n            break\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    n = str(num)\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if int(n[i:j]) % 10 == 9:\n                next_palindrome = int(n[i:j])\n                if next_palindrome > num:\n                    return next_palindrome\n                else:\n                    break\n            else:\n                next_palindrome = int(n[i:j]) + 10\n                if next_palindrome > num:\n                    return next_palindrome\n                else:\n                    break\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or the index is invalid\n    if len(arr) == 0 or k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    # Find the index of the middle element\n    middle = len(arr) // 2\n    \n    # If the middle element is the kth element, return it\n    if k == middle + 1:\n        return arr[middle]\n    \n    # If the middle element is greater than the kth element, find the kth element in the left half of the array\n    elif k > middle + 1:\n        return kth_element(arr[:middle], k)\n    \n    # If the middle element is less than the kth element, find the kth element in the right half of the array\n    else:\n        return kth_element(arr[middle+1:], k-middle-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return k\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    n = len(arr)\n\n    # Find the index of the median of three\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    # Find the index of the kth smallest element\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Get the length of the array\n    n = len(arr)\n\n    # Check if k is valid\n    if k < 1 or k > n:\n        return None\n    \n    # Calculate the index of the kth element\n    index = k - 1\n\n    # Iterate through the array and find the kth element\n    for i in range(n):\n        if arr[i] == k:\n            return arr[i]\n\n    # If kth element is not found\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the input is valid\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize variables for the first and last elements of the array\n    first = 1\n    last = len(arr)\n    \n    # Iterate until we find the kth element\n    while first <= last:\n        mid = (first + last) // 2\n        \n        # If the kth element is in the first half, set the last element to mid - 1\n        if k == mid:\n            last = mid - 1\n        # If the kth element is in the second half, set the first element to mid + 1\n        elif k < mid:\n            last = mid - 1\n        # If the kth element is in the first half, set the first element to mid + 1\n        else:\n            first = mid + 1\n    \n    # Return the kth element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and the index k (1-based indexing) as inputs.\n    It returns the kth element in the array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char.isupper():\n            result += char\n        else:\n            if result and not result.endswith('_'):\n                result += '_'\n            result += char.lower()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[:i+1].title() + word[i+1:].lower() for i in range(len(word)) if word[i] == '_'])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    camel_case = ''\n    for part in parts:\n        camel_case += part.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.islower():\n            camel_case += char.upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].capitalize()\n        else:\n            camel_case += words[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''.join([words[0]] + [word.title() for word in words[1:]])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    prev_char = \"\"\n    for char in word:\n        if char.isupper():\n            if prev_char.isupper():\n                result += \"_\"\n            else:\n                result += char.lower()\n        else:\n            result += char\n        prev_char = char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = None\n    for char in word:\n        if char.isupper() and prev_char!= \"_\":\n            camel_case += char.lower()\n        elif char!= \"_\":\n            camel_case += char\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Create a list of the prime factors of a(n, m)\n    prime_factors = [p for p in range(2, n + 1) if n % p == 0 and m % p == 0 and is_prime(p)]\n\n    # Sort the prime factors in increasing order\n    prime_factors.sort()\n\n    # Return the smallest prime factor of a(n, m)\n    return prime_factors[0]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize a list to store the paths\n    paths = []\n\n    # Generate all possible paths\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == n or j == m:\n                # If we reach a corner, add it to the list\n                paths.append((i, j))\n\n    # Calculate the number of paths that cross the diagonal\n    cross = sum([1 for i in range(1, n + 1) if i % 2 == 0])\n\n    # Calculate the number of paths that cross the main diagonal\n    main_cross = sum([1 for i in range(1, n + 1) if i % 2!= 0])\n\n    # Calculate the Eulerian number as the sum of the cross paths\n    euler = cross + main_cross\n\n    # Return the Eulerian number\n    return euler"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the value of a(0, m) using the formula a(0, m) = m^2\n    a0 = m**2\n\n    # Calculate the value of a(1, m) using the formula a(1, m) = m(n-1)^2\n    a1 = m*(n-1)**2\n\n    # Initialize an array to store the values of a(i, m) for i = 0, 1, 2,..., n-1\n    am = [a1]\n\n    # Calculate a(i, m) for i = 2, 3, 4,..., n using the formula a(i, m) = a(i-1, m) + 2*(a(i-2, m) + a(i-3, m))\n    for i in range(2, n):\n        am.append(am[i-1] + 2*(am[i-2] + am[i-3]))\n\n    # Return the value of a(n-1, m)\n    return am[n-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return 0\n    if m == 0: \n        return 0\n    if n == 1: \n        return m\n    if m == 1: \n        return n\n    if n % 2 == 0: \n        a = (2 * eulerian_num(n/2, m)) % (n * m)\n        return a\n    else: \n        b = (2 * eulerian_num((n-1)/2, m)) % (n * m)\n        return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 1:\n        return n\n    elif m > 1:\n        return eulerian_num(m, n - 1) + eulerian_num(m - 1, n)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if the given numbers are positive integers\n    if not all(isinstance(i, int) and i > 0 for i in (n, m)):\n        raise ValueError(\"Both n and m should be positive integers.\")\n\n    # Calculate the number of divisors of n\n    divisor_count = sum(1 for i in range(1, n+1) if n % i == 0)\n\n    # Calculate the number of divisors of m\n    divisor_count += sum(1 for i in range(1, m+1) if m % i == 0)\n\n    # Calculate the Eulerian number a(n, m)\n    return divisor_count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of ways to choose m elements from n elements\n    ways = [1] * (m + 1)\n    ways[0] = 0\n    ways[1] = 1\n    for i in range(2, m + 1):\n        for j in range(1, n + 1):\n            ways[i] += ways[j] * ways[m - j]\n    \n    # Calculate the Eulerian number a(n, m) by multiplying the number of ways to choose m elements\n    # from n elements and the number of ways to choose n elements from m elements\n    return ways[m] * ways[n - m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def power_sum(n, m): \n        '''\n        Find the sum of n^i for i from 1 to m.\n        '''\n        total = 0\n        for i in range(1, m+1):\n            total += n**i\n        return total\n    \n    def sum_of_squares(n, m): \n        '''\n        Find the sum of (n^i)^2 for i from 1 to m.\n        '''\n        total = 0\n        for i in range(1, m+1):\n            total += (n**i)**2\n        return total\n    \n    def gcd(a, b): \n        '''\n        Find the greatest common divisor of a and b.\n        '''\n        while b:\n            a, b = b, a % b\n        return a\n    \n    a = power_sum(n, m)\n    b = sum_of_squares(n, m)\n    c = gcd(a, b)\n    \n    return a/c"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n + 1) // 2 * m\n    b = (m + 1) // 2 * n\n    return a, b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a *= (i+j)\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use a nested loop to iterate over each sublist of strings in the input list\n    for sublist in input_list:\n        # Use the sort() method to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_true_booleans(lst):\n    \"\"\"\n    This function takes a list of booleans as input and returns the count of true booleans in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    for item in test_tup:\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + list(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for num in test_list:\n        test_tup = test_tup + (num,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists\n    combined_list = test_list + test_tup\n    \n    # Return the concatenated list\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuples to lists to modify them\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # add the list to the tuple\n    test_tup.extend(test_list)\n\n    # convert the modified tuple back to a tuple and return it\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert all lists to sets to ensure uniqueness\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n    # concatenate the three sets\n    nums = num1.union(num2).union(num3)\n    # convert the set back to a list and sort\n    sorted_nums = sorted(list(nums))\n    return sorted_nums"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n            \n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Use heapify function from heapq module to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n    \n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    # Initialize an empty list to store the merged list\n    merged_list = []\n\n    # Use heapq to merge the three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Iterate over the three lists until one of them is empty\n    while num1 and num2 and num3:\n        # If the smallest element from each list is smaller, append it to the merged list\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n\n    # Append any remaining elements from the non-empty lists to the merged list\n    if num1:\n        while num1:\n            merged_list.append(heapq.heappop(num1))\n    if num2:\n        while num2:\n            merged_list.append(heapq.heappop(num2))\n    if num3:\n        while num3:\n            merged_list.append(heapq.heappop(num3))\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert lists to heaps\n    heap1 = []\n    heapq.heapify(heap1)\n    heap2 = []\n    heapq.heapify(heap2)\n    heap3 = []\n    heapq.heapify(heap3)\n\n    # push elements onto the heaps\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n\n    # merge the heaps into a single sorted list\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap1) > heapq.heappop(heap2):\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap2))\n            heapq.heappop(heap3)\n\n    # append any remaining elements from the heaps\n    result.extend(heap1)\n    result.extend(heap2)\n    result.extend(heap3)\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(heapq.merge(num1, num2), num3)\n    while heapq:\n        merged_list.append(heapq.heappop(heapq))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    # sort the merged list using heapq module\n    heapq.heapify(merged_list)\n    # return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # Convert the sets back to lists\n    num1 = list(num1)\n    num2 = list(num2)\n    num3 = list(num3)\n\n    # Merge the three lists and remove duplicates\n    merged_list = merge_lists(num1, num2, num3)\n    merged_list = list(set(merged_list))\n\n    return merged_list\n\n\ndef merge_lists(list1, list2, list3):\n    '''\n    Merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists and remove duplicates\n    merged_list = list1 + list2 + list3\n    merged_list = list(set(merged_list))\n\n    # Sort the list in ascending order\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(heapq.merge(num1, num2), num3, merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes in three lists and merges them into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n\n    if num1:\n        merged_list += num1\n    elif num2:\n        merged_list += num2\n    elif num3:\n        merged_list += num3\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Check if the given string is a binary string or not\n    if not s.isdigit() and not s.startswith('0b') and not s.startswith('0B'):\n        return \"Invalid input\"\n    \n    # Convert the string to binary string\n    binary = bin(int(s, 2))[2:]\n\n    # Calculate the number of rotations\n    rotations = n % len(binary)\n\n    # Initialize the count variable\n    count = 0\n\n    # Rotate the binary string for each rotation\n    for i in range(rotations):\n        binary = ''.join([binary[i] + binary[j] for j in range(len(binary))])\n\n    # Iterate through the binary string and count the odd numbers\n    for i in range(len(binary)):\n        if int(binary[i]) % 2 == 1:\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Convert the binary string s to a list of characters\n        binary_list = [int(bit) for bit in s]\n        \n        # Initialize a variable to keep track of the index of the last digit in the binary string\n        last_digit = len(binary_list) - 1\n        \n        # Loop through the digits in the binary string\n        while last_digit >= 0:\n            # If the current digit is odd, increment the count variable\n            if binary_list[last_digit] % 2!= 0:\n                count += 1\n            \n            # Rotate the binary string by 1 digit to the left\n            binary_list.insert(0, binary_list.pop(last_digit))\n            \n            # Update the index of the last digit in the binary string\n            last_digit = len(binary_list) - 1\n            \n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Find the length of the binary string\n    length = len(s)\n    # Initialize variables to store the result\n    count = 0\n    # Loop n times\n    for i in range(n):\n        # Initialize a temporary string to store the rotated binary string\n        temp = \"\"\n        # Loop through the length of the binary string\n        for j in range(length):\n            # Convert the current character to an integer and add the carry to the result\n            carry = 0\n            if s[j] == \"0\":\n                carry = 0\n            elif s[j] == \"1\":\n                carry = 1\n            temp += str(carry)\n            # Add the carry from the previous character to the result\n            if j+1 < length and s[j+1] == \"1\":\n                carry = 1\n            # Check if the result is odd\n            if int(temp) % 2!= 0:\n                # Increment the count if it is odd\n                count += 1\n        # Shift the binary string to the right by 1\n        s = s[1:] + \"0\"\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to a list of characters\n    s = list(s)\n    # calculate the length of the binary string\n    m = len(s)\n    # initialize a counter variable\n    count = 0\n    # rotate the binary string n times\n    for i in range(n):\n        # reverse the binary string\n        s.reverse()\n        # count the number of odd numbers in the reversed binary string\n        odd_count = sum(int(c) for c in s if int(c) % 2!= 0)\n        # add the number of odd numbers to the counter variable\n        count += odd_count\n    # return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # check if the binary string is valid\n    if not s.replace(' ', '').replace('0', '').replace('1', '').isdigit():\n        return \"Invalid Binary String\"\n    \n    # initialize the count variable\n    count = 0\n    \n    # get the length of the binary string\n    length = len(s)\n    \n    # loop for n rotations\n    for i in range(n):\n        \n        # get the index of the first 1 in the binary string\n        index = s.find('1')\n        \n        # check if there are no 1's in the binary string\n        if index == -1:\n            return count\n        \n        # rotate the binary string by one position to the left\n        s = s[:index] + '0' + s[index+1:]\n        \n        # increment the count variable\n        count += 1\n    \n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through each character in the string s\n    for i in range(len(s)):\n        # If the character is odd, increment the count variable\n        if int(s[i]) % 2!= 0:\n            count += 1\n            # If the count variable becomes greater than n, exit the loop\n            if count > n:\n                break\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    # convert binary string to a list of binary digits\n    binary_list = [int(digit) for digit in s]\n    \n    # initialize count to 0\n    count = 0\n    \n    # rotate the binary list n times\n    for i in range(n):\n        rotated = binary_list[1:] + [binary_list[0]]\n        binary_list = rotated\n        \n    # count the number of odd digits in the rotated list\n    for digit in binary_list:\n        if digit % 2 == 1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n\n    # rotate the list n times\n    for i in range(n):\n        binary_list = [binary_list[-1]] + binary_list[:-1]\n\n    # count the number of odd integers in the rotated list\n    count = sum(binary_list)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    s = ''.join(map(str, s)) # Convert the binary string to a list of binary digits\n    s = list(s) # Convert the list of binary digits back to a list for manipulation\n    s = s[::-1] # Rotate the binary string the given number of times\n    s = ''.join(map(str, s)) # Convert the rotated list of binary digits back to a binary string\n    s = int(s, 2) # Convert the binary string back to an integer\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[i] == '0' and s[len(s)-1-i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n\n    for sublist in nestedlist:\n        if len(common_elements) == 0:\n            common_elements = sublist\n        else:\n            common_elements = list(set(common_elements).intersection(set(sublist)))\n\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for i in nestedlist:\n        for j in i:\n            if j in common_elements:\n                common_elements.remove(j)\n            else:\n                common_elements.add(j)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common_elements and item not in lst:\n                common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_set = set()\n    for lst in nestedlist:\n        common_set.update(lst)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store the counts of elements\n    count_dict = {}\n\n    # Loop through all the elements in the nested list\n    for element in nestedlist:\n        # Check if the element is already in the dictionary\n        if element in count_dict:\n            # Increment its count by 1\n            count_dict[element] += 1\n        else:\n            # Otherwise, add it with a count of 1\n            count_dict[element] = 1\n\n    # Create a list to store the common elements\n    common_elements = []\n\n    # Loop through all the elements in the nested list again and check if each element is common\n    for element in nestedlist:\n        # If the count of the element is 1, add it to the common_elements list\n        if count_dict[element] == 1:\n            common_elements.append(element)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a list of nested lists as input and returns a list of common elements in the nested lists.\n    \"\"\"\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            intersection = set(nestedlist[i]) & set(nestedlist[j])\n            if intersection:\n                common_elements.append(intersection)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create an empty dictionary to store the counts of common elements\n    common_dict = {}\n\n    # Iterate over the nested lists\n    for sublist in nestedlist:\n        # Iterate over the elements of the sublist\n        for elem in sublist:\n            # If the element is in the dictionary, increment its count\n            if elem in common_dict:\n                common_dict[elem] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                common_dict[elem] = 1\n\n    # Create an empty list to store the common elements\n    common_list = []\n\n    # Iterate over the dictionary to find the common elements\n    for elem, count in common_dict.items():\n        # If the count is greater than 1, append the element to the common list\n        if count > 1:\n            common_list.append(elem)\n\n    # Return the common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Remove all non-numeric characters from the input string\n    numeric_only = ''.join(e for e in text if e.isdigit())\n\n    # Check if the resulting string is empty\n    if len(numeric_only) == 0:\n        return False\n\n    # Convert the resulting string to an integer\n    try:\n        num = int(numeric_only)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(x, dict) for x in list1) and all(len(x) == 0 for x in list1):\n        print(\"All dictionaries in the list are empty.\")\n    else:\n        print(\"At least one dictionary in the list is not empty.\")"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries and returns True if all the dictionaries in the list are empty, otherwise it returns False.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # loop through each dictionary in the list\n    for d in list1:\n        # check if the dictionary is empty\n        if d:\n            return False\n        # if the dictionary is not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for dic in list1:\n            if len(dic)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Initialize variable to store the sum of the integers in the list\n    sum_int = 0\n    # Iterate through the list and add each integer to the sum\n    for num in nums_list:\n        sum_int += num\n    # Return the sum of the integers in the list\n    return sum_int"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the numbers\n    result = 0\n    # Loop through the tuple and add each number to the result variable\n    for num in nums:\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of numbers to a list\n    lst = list(nums)\n    # Convert each number in the list to an integer\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n    # Concatenate the numbers in the list into a single string\n    str_num = ''.join(map(str, lst))\n    # Convert the string to an integer\n    num = int(str_num)\n    # Return the single integer\n    return num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result << 1\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not all(isinstance(x, int) and x > 0 for x in nums):\n        raise ValueError('All elements in the tuple must be positive integers.')\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize an empty string to store the concatenated digits\n    concatenated_digits = ''\n    # Iterate through the list and add the digits to the string\n    for num in nums_list:\n        concatenated_digits += str(num)\n    # Convert the concatenated digits to an integer and return it\n    return int(concatenated_digits)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through the list and add each number to the result\n    for num in nums_list:\n        result += num\n\n    # Return the result\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist[sublist.index(element)] = float(element)\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                row[test_list.index(row)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        if type(item) in [int, float, bool]:\n            float_list.append(item)\n        elif isinstance(item, list):\n            float_list.append(list_to_float(item))\n        else:\n            raise TypeError(\"list_to_float only works with lists and scalars\")\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                raise TypeError(f\"{item} is not convertible to a float\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, sub_list in enumerate(test_list):\n        for j, item in enumerate(sub_list):\n            if isinstance(item, (int, float)):\n                continue\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                print(f\"Error converting {item} to float at index {i}, {j}\")\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, (int, float, str)):\n            new_list.append(item)\n        elif isinstance(item, list):\n            new_list.append(list_to_float(item))\n        else:\n            raise ValueError(\"Non-convertible item in list\")\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    This function takes in a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Initialize an empty list to store the resulting list of strings\n    result_list = []\n    # Loop through each character in the list\n    for char in char_list:\n        # If the character is a space, add the current result_list to the list of results and reset the result_list\n        if char =='':\n            result_list.append(''.join(result_list))\n            result_list = []\n        # Otherwise, add the character to the current result_list\n        else:\n            result_list.append(char)\n    # Add the final result_list to the list of results\n    result_list.append(''.join(result_list))\n    # Return the list of results\n    return result_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a variable to keep track of the count of each element in the array\n    count = [0] * len(arr)\n\n    # Loop through the array and increment the count of each element\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Initialize a variable to keep track of the index of the first occurrence of an element\n    first_occurrence = [None] * len(arr)\n\n    # Loop through the array again and keep track of the index of the first occurrence of an element\n    for i in range(len(arr)):\n        if count[arr[i]] == 1:\n            first_occurrence[arr[i]] = i\n\n    # Find the element that appears only once in the array\n    for i in range(len(arr)):\n        if first_occurrence[i] is not None and count[arr[i]] == 1:\n            return arr[i]\n\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Traverse the array\n    for num in arr:\n        # Check if the current element is already in the dictionary\n        if num in freq:\n            # If it is, increment the frequency of the element by 1\n            freq[num] += 1\n        else:\n            # If it isn't, add it to the dictionary with a frequency of 1\n            freq[num] = 1\n    \n    # Traverse the dictionary to find the element that appears only once\n    for key, value in freq.items():\n        # If the frequency of the current element is 1, return the key\n        if value == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the count of each element\n    count = {}\n\n    # Traverse the array and count the frequency of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Traverse the array again to find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == arr[i]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the count of the elements in the array\n    count = 0\n    \n    # Initialize a variable to store the element that appears only once\n    unique_element = None\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is the same as the previous unique element\n        if arr[i] == unique_element:\n            # If it is, increment the count of the elements\n            count += 1\n        else:\n            # If it is not, update the unique element and the count to 1\n            unique_element = arr[i]\n            count = 1\n    \n    # If the count of the unique element is 1, return the element\n    if count == 1:\n        return unique_element\n    \n    # If the count is not 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \n    :param arr: A sorted array.\n    :return: The element that appears only once.\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a list to store the elements that appear only once in the array\n    unique = []\n\n    # Traverse through the dictionary and add the elements that appear only once to the list\n    for key, value in freq.items():\n        if value == 1:\n            unique.append(key)\n\n    # Return the element that appears only once in the array\n    return unique[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the first element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no such element is found, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            j = i + 1\n            while j < n and arr[j] == arr[i]:\n                j += 1\n            if j == n:\n                return arr[i]\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # create a list of tuples containing the product of all numbers in pairs of tuples\n    product_list = [tuple(product) for pair in list1 for product in itertools.product(pair, repeat=2)]\n\n    # calculate the maximum absolute product\n    max_product = max(abs(product) for product in product_list)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    max_pair = (0, 0)\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][0], list1[j][1])\n                \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -100000\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if j == len(list1)-1:\n                product = abs(list1[i][0] * list1[j][0])\n            else:\n                product = abs(list1[i][0] * list1[j][0] * list1[j+1][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = max(abs(pair[0]), abs(pair[1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n\n    Parameters:\n    lst (list): A list of tuples of numbers.\n\n    Returns:\n    float: The maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n\n    # initialize variables for the maximum absolute product and the maximum product of tuples\n    max_product = float('-inf')\n    max_tuple = None\n\n    # loop through the list of tuples\n    for i in range(len(lst)):\n        # loop through the list of tuples starting from the next index\n        for j in range(i+1, len(lst)):\n            # calculate the absolute difference between the numbers in each pair of tuples\n            diff = abs(lst[i][0] - lst[j][0]) + abs(lst[i][1] - lst[j][1])\n\n            # update the maximum absolute product if the current difference is greater than the previous maximum\n            if diff > max_product:\n                max_product = diff\n                max_tuple = (lst[i][0], lst[i][1])\n\n    # return the maximum absolute product\n    return max_product, max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the maximum absolute product and the indices of the first and last numbers in the tuples\n    max_product = float('-inf')\n    index1, index2 = 0, 0\n\n    # Iterate through the list of tuples\n    for i, tup in enumerate(list1):\n        # Get the first and last numbers in the tuple\n        num1, num2 = tup[0], tup[-1]\n\n        # Calculate the absolute product of the numbers\n        product = abs(num1) * abs(num2)\n\n        # Update the maximum absolute product and the indices if the new product is greater than the current maximum\n        if product > max_product:\n            max_product = product\n            index1, index2 = i, i\n\n    # Return the maximum absolute product and the indices of the first and last numbers in the tuples\n    return max_product, index1, index2"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize two variables to store the sum of amicable numbers\n    sum_amicable = 0\n    sum_sum_of_squares = 0\n    \n    # Loop through the numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the amicable number to the sum of amicable numbers\n            sum_amicable += num\n        # Check if the sum of squares of the number is also amicable\n        if is_amicable(sum_of_squares(num)):\n            # Add the sum of squares of the amicable number to the sum of sum of squares\n            sum_sum_of_squares += sum_of_squares(num)\n    \n    # Return the sum of amicable numbers and the sum of sum of squares\n    return sum_amicable, sum_sum_of_squares"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Returns True if the given number is amicable to any number from 1 to n.\n    \"\"\"\n    if n <= 2:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # check if the limit is even\n    if limit % 2 == 0:\n        limit += 1\n\n    # sum up all pairs of numbers that are both smaller than the limit\n    sum_amicable = 0\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if i + j == limit:\n                sum_amicable += i + j\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function returns the sum of all the amicable numbers from 1 to a specified number.\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Loop through each number from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable by checking if it's divisible by any of the numbers from 1 to num/2\n        for div in range(1, num // 2 + 1):\n            if num % div == 0:\n                break\n        else:\n            # If the number is not divisible by any number from 1 to num/2, add it to the sum\n            total_sum += num\n\n    # Return the total sum of amicable numbers\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 2\n    amicable_sum = 0\n    count = 0\n    # Loop through numbers up to the specified limit\n    while b <= limit:\n        # Check if b is a divisor of a and b\n        if b % a == 0 and b!= a:\n            count += 1\n            # Calculate the sum of a and b\n            amicable_sum += a + b\n        # Update a and b\n        a = b\n        b += 1\n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n\n    Args:\n    limit: int\n        The upper limit of the range to check for amicable numbers.\n\n    Returns:\n    int\n        The sum of all amicable numbers between 1 and `limit`.\n\n    Examples:\n    >>> amicable_numbers_sum(1000)\n    143\n    \"\"\"\n    # Initialize variables for the sum and current number\n    sum_amicable = 0\n    num = 1\n    \n    # Loop through all numbers up to `limit`\n    while num <= limit:\n        # Check if the current number is amicable to the previous number\n        if num > 1 and (num % 2 == 0 or num % 3 == 0) and (num + num // 2 > limit):\n            sum_amicable += num\n        \n        # Move to the next number\n        num += 1\n        \n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        elif i < 10:\n            j = i * 10 + 10\n        else:\n            j = i + 10\n        if i == j:\n            continue\n        elif i < 10:\n            k = i * 10 + 10\n        else:\n            k = i + 10\n        if i == k:\n            continue\n        elif i % 2 == 0 and j % 2 == 0:\n            if i == j:\n                continue\n            elif i > j:\n                continue\n            else:\n                if i % 3 == 0 or j % 3 == 0:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a set to store unique amicable numbers\n    amicable = set()\n    \n    # Iterate through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if the current number is amicable\n        if i!= 1 and is_amicable(i):\n            # Add the amicable number to the set\n            amicable.add(i)\n    \n    # Calculate the sum of the amicable numbers\n    total = sum(amicable)\n    \n    return total\n\ndef is_amicable(num):\n    '''\n    Determine if a given number is amicable to 1.\n    '''\n    # Check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # Find the sum of the squares of the divisors of num\n    divisor_sum = sum(divisor**2 for divisor in range(3, int(num**0.5)+1, 2))\n    \n    # Check if the sum is equal to num\n    return divisor_sum == num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    amicable_sum = 0\n\n    # Loop through numbers 1 to limit\n    for i in range(1, limit + 1):\n        # Check if number is amicable\n        if i == 1:\n            amicable_sum += 1\n            continue\n        # Check if number is divisible by any number between 2 and i-1\n        for j in range(2, int(i/2) + 1):\n            if i % j == 0:\n                break\n        else:\n            # If no divisor found, number is amicable\n            amicable_sum += i\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of an amicable pair\n    amicable_sum_dict = {}\n    \n    # Loop through numbers from 1 to limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num!= 1:\n            # Calculate the sum of the pair\n            sum_pair = num + (1/num)\n            # Check if the sum is an amicable number and not already in the dictionary\n            if sum_pair <= limit and sum_pair % 1 == 0 and sum_pair > 1:\n                # Add the sum to the dictionary if it's not already there\n                if sum_pair not in amicable_sum_dict:\n                    amicable_sum_dict[sum_pair] = num\n    \n    # Calculate the sum of all amicable numbers in the dictionary\n    amicable_sum = sum(amicable_sum_dict.values())\n    \n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(a+b*1j)\n    angle_rad = angle.real\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Taking the modulus of the complex number to get the magnitude of the number\n    magnitude = cmath.sqrt(a*a + b*b)\n\n    # Taking the phase angle of the complex number and converting it to radians\n    phase_angle = cmath.phase(a + b*1j)\n\n    # Converting the phase angle to degrees\n    angle_deg = (180*phase_angle)/cmath.pi\n\n    # Returning the angle in degrees\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a*b.conjugate())\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    # convert the input complex numbers to polar coordinates\n    polar = cmath.polar(a+b)\n    \n    # get the angle in radians\n    angle_rad = polar[1]\n    \n    # convert the angle to degrees\n    angle_deg = cmath.degrees(angle_rad)\n    \n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n            if count == 1:\n                max_diff = 0\n        elif string[i] == '0':\n            count -= 1\n            if count < 0:\n                count = 0\n            if count == 0:\n                max_diff = max(max_diff, i - len(string) + 1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    n = len(string)  # length of the string\n\n    # Initialize two variables to store the count of 0s and 1s in the string\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the string and update the count of 0s and 1s\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n\n    # Find the maximum difference between the count of 0s and 1s in any sub-string\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the count of 0s and 1s in the sub-string\n            count_0_sub = count_0 - max(0, i-j)\n            count_1_sub = count_1 - max(0, j-i)\n\n            # Update the maximum difference if necessary\n            diff = abs(count_0_sub - count_1_sub)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count0 = 0\n        count1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count0 += 1\n            elif string[j] == '1':\n                count1 += 1\n            else:\n                break\n        max_diff = max(max_diff, abs(count0 - count1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i] == '0' and string[j] == '1':\n                diff = j - i\n                max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    substrings = []\n    \n    for i in range(len(string)):\n        temp = string[i:]\n        zeros = 0\n        ones = 0\n        \n        for j in temp:\n            if j == '0':\n                zeros += 1\n            elif j == '1':\n                ones += 1\n                \n        diff = abs(ones - zeros)\n        if diff > max_diff:\n            max_diff = diff\n            \n        substrings.append(temp)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Initialize variables to store the count of 0s and 1s in the string\n    count0 = 0\n    count1 = 0\n    \n    # Initialize variables to store the maximum difference between the count of 0s and 1s\n    max_diff = 0\n    \n    # Iterate through the string using a for loop\n    for i in range(len(string)):\n        # If the current character is 0, increment the count of 0s\n        if string[i] == '0':\n            count0 += 1\n        # If the current character is 1, increment the count of 1s\n        elif string[i] == '1':\n            count1 += 1\n        \n        # Calculate the difference between the counts of 0s and 1s\n        diff = abs(count0 - count1)\n        \n        # Update the maximum difference if the current difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference between the count of 0s and 1s in any sub-string of the string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # initialize count of 0s and 1s in the string\n    count_0 = 0\n    count_1 = 0\n\n    # loop through each character in the string\n    for char in string:\n        # if the character is 0, increment count_0\n        if char == '0':\n            count_0 += 1\n        # if the character is 1, increment count_1\n        else:\n            count_1 += 1\n\n        # find the maximum difference between count_0 and count_1\n        max_diff = max(count_0, count_1)\n\n        # subtract the maximum difference from count_0 and count_1 to get the count of 0s and 1s in the sub-string\n        count_0 -= max_diff\n        count_1 -= max_diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    # Initialize the counts of 0s and 1s\n    zeros = 0\n    ones = 0\n    # Initialize the maximum difference\n    max_diff = 0\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of zeros\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the count of ones\n        else:\n            ones += 1\n        # Calculate the difference between the counts of zeros and ones\n        diff = abs(zeros - ones)\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize variables for counting 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a 0 or a 1\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Calculate the maximum difference between the counts of 0s and 1s\n        length = max(count_0, count_1) - min(count_0, count_1)\n        max_length = max(max_length, length)\n        \n        # Update the counts of 0s and 1s for the next iteration\n        count_0 -= 1\n        count_1 -= 1\n    \n    # Return the maximum difference between the counts of 0s and 1s\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert the given binary string to a list of 0s and 1s\n    binary_list = [int(i) for i in string]\n\n    # Initialize variables for the length of the longest sub-string and the current sub-string\n    max_length = 0\n    current_length = 0\n\n    # Loop through the binary list and calculate the current sub-string length\n    for i in range(1, len(binary_list)):\n        if binary_list[i] == binary_list[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    # Add the last sub-string length to the maximum length\n    max_length = max(max_length, current_length)\n\n    # Return the maximum difference between the number of 0s and number of 1s in the sub-strings\n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors of two numbers\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # find the common divisors of two numbers\n    c = gcd(a, b)\n    d = gcd(b, a)\n\n    # calculate the sum of common divisors\n    result = sum(c) + sum(d)\n\n    # print the result\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of their common divisors.\n    \"\"\"\n    # Calculate the sum of common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    if len(common_divisors) == 0:\n        return \"The two numbers do not have any common divisors.\"\n    else:\n        return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Check if the numbers are positive integers\n    if a <= 0 or b <= 0 or not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be positive integers.\")\n\n    # Calculate the sum of common divisors\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize variables\n    sum_cd = 0\n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a,b)+1):\n        # check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the sum\n            sum_cd += i\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of their common divisors.\n    \"\"\"\n    divisor_set = set()\n    for num in range(1, b + 1):\n        if num % a == 0 and num % b == 0:\n            divisor_set.add(num)\n    \n    result = sum(divisor_set)\n    return result\n\nprint(sum(10, 20)) # Output: 100"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Function to check if two numbers are coprime\n    def is_coprime(a, b):\n        return gcd(a, b) == 1\n\n    # Function to find the gcd of two numbers using the Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Find the gcd of the two numbers\n    gcd_ab = gcd(a, b)\n\n    # Find the divisors of the gcd\n    divisors_gcd = [i for i in range(1, gcd_ab + 1) if gcd_ab % i == 0]\n\n    # Find the common divisors of the two numbers\n    divisors_ab = [i for i in range(1, max(a, b) + 1) if is_coprime(i, a) and is_coprime(i, b)]\n\n    # Find the sum of common divisors\n    sum_common_divisors = sum([i for i in range(1, max(divisors_gcd) + 1) if i in divisors_ab])\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find the common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        common_divisors = []\n        for i in range(1, num1 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                common_divisors.append(i)\n        return common_divisors\n    \n    # Find the common divisors of the two numbers\n    common_divisors_a = find_common_divisors(a, b)\n    common_divisors_b = find_common_divisors(b, a)\n    \n    # Find the sum of the common divisors\n    sum_common_divisors = sum(common_divisors_a) + sum(common_divisors_b)\n    \n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of the common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize variables to store common divisors\n    common_divisors = [0, 1]\n    \n    # Loop through all numbers from 2 to the smaller number\n    for i in range(2, min(a, b) + 1):\n        # Check if i is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # Add i to the list of common divisors if it is not already there\n            if i not in common_divisors:\n                common_divisors.append(i)\n    \n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisors(n1, n2):\n    \"\"\"\n    Return the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, n1+1):\n        if n1 % i == 0 and n2 % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n\ndef sum(lst):\n    \"\"\"\n    Return the sum of a list.\n    \"\"\"\n    return sum(lst)\n\ndef sum(a,b):\n    \"\"\"\n    Return the sum of two numbers.\n    \"\"\"\n    return a + b\n\ndef sum(*args):\n    \"\"\"\n    Return the sum of all the arguments.\n    \"\"\"\n    return sum(args)\n\ndef sum(a,b,*args):\n    \"\"\"\n    Return the sum of a, b, and all the arguments.\n    \"\"\"\n    return a + b + sum(args)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    carry = 0\n    \n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        \n    product = x\n    \n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1: # Check if y is odd\n            result += x\n        x <<= 1 # Shift x left by 1 bit\n        y >>= 1 # Shift y right by 1 bit\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Initialize an empty list to store long words\n    long_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # If it is, append it to the long_words list\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    - n: int - the maximum number of characters a word can have.\n    - words: list - a list of words.\n\n    Returns:\n    - list - a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix is a square\n    if rows!= cols:\n        return \"The matrix is not a square.\"\n\n    # create a list of sums for each row\n    row_sums = []\n    for i in range(rows):\n        row_sum = 0\n        for j in range(cols):\n            row_sum += my_matrix[i][j]\n        row_sums.append(row_sum)\n\n    # create a list of sums for each column\n    col_sums = []\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][j]\n        col_sums.append(col_sum)\n\n    # check if the row and column sums match\n    for i in range(rows):\n        if row_sums[i]!= col_sums[i]:\n            return \"The matrix is not a magic square.\"\n\n    # check for the sum of the diagonal elements\n    diagonal_sum = 0\n    for i in range(rows):\n        diagonal_sum += my_matrix[i][i]\n    if diagonal_sum!= rows * (rows + 1) / 2:\n        return \"The matrix is not a magic square.\"\n\n    return \"The matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n\n        if row_sum!= col_sum or row_sum!= n * (n+1) // 2 or col_sum!= n * (n+1) // 2:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n * n!= sum([sum(row) for row in my_matrix]):\n        return False\n    \n    # Check if the matrix has the numbers 1 to n^2 in any row or any column\n    for i in range(n):\n        if sum(my_matrix[i])!= i+1 or sum(my_matrix[j][i] for j in range(n))!= i+1:\n            return False\n    for j in range(n):\n        if sum(my_matrix[i][j] for i in range(n))!= j+1:\n            return False\n    \n    # Check if the matrix is the magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= i+j+1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of the rows\n    row_sum = [0] * len(my_matrix[0])\n\n    # Initialize the sum of the columns\n    col_sum = [0] * len(my_matrix)\n\n    # Calculate the sum of the rows and columns\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum[j] += my_matrix[i][j]\n            col_sum[i] += my_matrix[j][i]\n\n    # Check if the sum of the rows and columns is equal to the diagonal sum\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= sum(row_sum) or diagonal_sum!= sum(col_sum):\n        return False\n\n    # Check if the sum of the sub-matrices is equal to the main diagonal sum\n    sub_matrix_sum = 0\n    for i in range(len(my_matrix) - 1):\n        for j in range(len(my_matrix[0]) - 1):\n            sub_matrix_sum += my_matrix[i][j]\n            sub_matrix_sum += my_matrix[i][j + 1]\n            sub_matrix_sum += my_matrix[i + 1][j]\n            sub_matrix_sum += my_matrix[i + 1][j + 1]\n\n    if sub_matrix_sum!= my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is square\n    if rows!= cols:\n        return False\n\n    # Check if all elements are unique\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0 and j > 0 and my_matrix[i][j] == my_matrix[i-1][j] or my_matrix[i][j] == my_matrix[i][j-1]:\n                return False\n\n    # Check if the diagonals are equal\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[i][rows-i-1]:\n            return False\n\n    # If the matrix is a magic square, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the given matrix is 3x3\n    if len(my_matrix)!= 3:\n        return \"The given matrix is not a 3x3 matrix.\"\n    \n    # Check if the given matrix is a magic square\n    for i in range(3):\n        row = my_matrix[i]\n        if len(row)!= 3:\n            return \"The given matrix is not a magic square.\"\n        \n        # Check if the row contains all the same numbers\n        if len(set(row))!= 1:\n            return \"The given matrix is not a magic square.\"\n        \n        # Check if the column contains all the same numbers\n        for j in range(3):\n            if row[j]!= my_matrix[j][i]:\n                return \"The given matrix is not a magic square.\"\n    \n    return \"The given matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= col_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(3):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(3)])\n        diagonal_sum = sum([my_matrix[i][j] for j in range(3)])\n        if row_sum!= col_sum or row_sum!= diagonal_sum or col_sum!= diagonal_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # initialize the sum of the diagonals to 0\n    diagonal_sum = 0\n\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix must be square\"\n\n    # check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix) - 1 - i]:\n            return \"Matrix must be symmetric\"\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            if i == j:\n                diagonal_sum += my_matrix[i][j]\n        if row_sum!= col_sum or row_sum!= diagonal_sum or col_sum!= diagonal_sum:\n            return \"Matrix is not a magic square\"\n\n    # if all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        # Check the row\n        row_sum = sum(my_matrix[i])\n        if row_sum!= len(my_matrix) * (len(my_matrix) + 1) // 2:\n            return False\n\n        # Check the column\n        col_sum = 0\n        for j in range(len(my_matrix)):\n            col_sum += my_matrix[j][i]\n        if col_sum!= len(my_matrix) * (len(my_matrix) + 1) // 2:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n\n    # Iterate through the list again and find the item with the maximum frequency\n    for num in nums:\n        if freq[num] == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = [key for key, value in freq.items() if value == max_freq]\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_count:\n            max_count = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each number in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # get the key with the maximum value in the dictionary\n    max_key = max(freq, key=freq.get)\n\n    return max_key"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in str1:\n        if i not in vowels:\n            str2 += i\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    str2 = \"\"\n    for char in str1:\n        if char in vowels_set:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.remove('y')\n    str2 = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    reversed_str = []\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            reversed_str.append(str1[i])\n        else:\n            reversed_str.append(str1[len(str1)-i-1])\n    return ''.join(reversed_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_re = re.compile('[aeiouAEIOU]', re.IGNORECASE)\n    reversed_str = []\n    \n    for char in str1:\n        if not vowels_re.search(char):\n            reversed_str.append(char)\n    \n    return ''.join(reversed_str)[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = list(vowels)\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels_list:\n            result = char + result\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the join() method\n    string = ', '.join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the join method\n    string_tuple = ', '.join(str(x) for x in tup1)\n    return string_tuple"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_rep = \"\"\n    for item in tup1:\n        str_rep += str(item) + \", \"\n    return str_rep[:-2]"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    for i in range(n):\n        print(a)\n        a += b\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) / 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # finding the number of rows needed to cover n hexagons\n    rows = n // 2\n    # finding the number of hexagons in each row\n    hexes = 1 + 2 * rows\n    # finding the sum of the hexagons in each row\n    hexagon_sum = 1 + 2 * rows - 2\n    # finding the number of hexagons in the nth row\n    nth_hexagon = hexagon_sum * (n % 2)\n    # returning the nth hexagonal number\n    return nth_hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(n):\n        hex_num += i*2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 28\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 66\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1) // 2\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return -1\n    else:\n        return 6 * n * (n - 1) + 6 * (n * (n - 1) + 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    ones = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)+1] += 1\n        else:\n            ones[ones.index(num)+1] += 1\n\n    zero_ratio = zeros[0] / (zeros[0] + ones[0])\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))  # Initialize an array of zeros\n    non_zero_count = array('i', [0] * len(nums))  # Initialize an array of non-zeros\n    \n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0)] += 1\n        else:\n            non_zero_count[non_zero_count.index(0)] += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count_ratio = non_zero_count[non_zero_count.index(0)] / zero_count[zero_count.index(0)]\n    \n    # Return the ratio\n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n    non_zero_count = sum(count) - sum(count[1:])\n    zero_count = len(nums) - non_zero_count\n    ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zero_count = 0\n    zero_count = 0\n    for num in arr:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    return non_zero_count / zero_count if non_zero_count!= 0 else None"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create a new array to store the count of non-zero elements\n    counts = array('i', [0] * len(nums))\n    # iterate over the array and count the number of non-zero elements\n    for num in nums:\n        if num!= 0:\n            counts[nums.index(num)] += 1\n    # calculate the ratio of zeroes to non-zeroes\n    zeros = sum(counts)\n    nonzeros = len(nums) - sum(counts)\n    ratio = zeros / nonzeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a list\n    nums_list = list(nums)\n\n    # initialize counters\n    zeros = 0\n    ones = 0\n\n    # loop through the list and count the number of zeros and ones\n    for num in nums_list:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n\n    # calculate the ratio\n    ratio = zeros / ones\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    non_zeroes = 0\n\n    for num in nums:\n        count[num] += 1\n\n    for i in range(len(count)):\n        non_zeroes += count[i]\n\n    zeroes = len(nums) - non_zeroes\n\n    if zeroes > 0:\n        return zeroes / non_zeroes\n    else:\n        return 0"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    def is_power_of_two(num):\n        # Function to check whether the given number is a power of 2 or not\n        if num == 0:\n            return False\n        else:\n            while num % 2 == 0:\n                num = num // 2\n            return num == 1\n\n    # Function to calculate the power of 2\n    def power_of_two(num):\n        # Function to calculate the power of 2 using recursion\n        if num == 1:\n            return 1\n        else:\n            return 2 * power_of_two(num - 1)\n\n    # Find the number of bits required to represent the given number\n    bit_count = 0\n    while n > 0:\n        n = n // 2\n        bit_count += 1\n\n    # Check if the number can be represented as sum of powers of 2\n    if bit_count == 0:\n        return False\n    elif bit_count % 2 == 1:\n        # Check if the given number is a power of 2 or not\n        if is_power_of_two(n):\n            # Check if the number can be represented as sum of powers of 2\n            if power_of_two(bit_count // 2) <= n:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        # Check if the given number is a power of 2 or not\n        if is_power_of_two(n):\n            return False\n        else:\n            # Check if the number can be represented as sum of powers of 2\n            if power_of_two(bit_count // 2) <= n:\n                return True\n            else:\n                return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if is_Sum_Of_Powers_Of_Two(n/i) == True:\n                return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through odd numbers from 3 to n/2\n    for i in range(3, n//2 + 1, 2):\n        # check if the given number is divisible by 2^i\n        if n % (2**i) == 0:\n            # add the power of 2^i to the sum\n            sum += 2**i\n\n    # check if the given number is equal to the sum\n    if n == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize sum variable to 0\n    sum_of_powers = 0\n\n    # Loop through the number\n    for i in range(1, n+1):\n        # If the current number is a power of 2, add it to the sum\n        if n & (1 << i-1):\n            sum_of_powers += 1\n            n -= 1 << i-1\n\n    # If the sum is equal to the original number, then it can be represented as a sum of non-zero powers of 2\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2: \n        return False\n    \n    # Check if the number can be represented as sum of powers of 2\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            count += 1\n            n -= 1\n        if count > 1000:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # check if n is a power of 2\n    if n & (n-1) == 0: \n        # get the sum of powers of 2\n        power_of_two_sum = 0\n        while n > 0:\n            power_of_two_sum += n & 1\n            n >>= 1\n        return power_of_two_sum\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if (n // i) % 2 == 0:\n                if i == 2:\n                    return True\n                else:\n                    return is_Sum_Of_Powers_Of_Two(n - i)\n            else:\n                if i == 2:\n                    return True\n                else:\n                    return is_Sum_Of_Powers_Of_Two(n - i)\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # loop through all possible powers of 2 from 0 to log2(n)\n    for i in range(1, int(n.bit_length() / 1)):\n        # check if n can be represented as sum of i*2^j for j from 0 to log2(n)\n        if n == (i * 2**j for j in range(int(n.bit_length() / 1))):\n            return True\n    # n cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize a variable to keep track of the sum of powers of 2\n    power_sum = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n + 1):\n\n        # Check if i is a power of 2\n        if i == 1:\n            power_sum += 1\n        elif i == 2:\n            power_sum += 2\n        elif i == 4:\n            power_sum += 4\n        elif i == 8:\n            power_sum += 8\n        elif i == 16:\n            power_sum += 16\n        elif i == 32:\n            power_sum += 32\n        elif i == 64:\n            power_sum += 64\n        elif i == 128:\n            power_sum += 128\n        elif i == 256:\n            power_sum += 256\n        elif i == 512:\n            power_sum += 512\n        elif i == 1024:\n            power_sum += 1024\n        elif i == 2048:\n            power_sum += 2048\n        elif i == 4096:\n            power_sum += 4096\n        elif i == 8192:\n            power_sum += 8192\n        elif i == 16384:\n            power_sum += 16384\n        elif i == 32768:\n            power_sum += 32768\n        elif i == 65536:\n            power_sum += 65536\n        elif i == 131072:\n            power_sum += 131072\n        elif i == 262144:\n            power_sum += 262144\n        elif i == 524288:\n            power_sum += 524288\n        elif i == 1048576:\n            power_sum += 1048576\n        elif i == 2097152:\n            power_sum += 2097152\n        elif i == 4194304:\n            power_sum += 4194304\n        elif i == 8388608:\n            power_sum += 8388608\n        elif i == 16777216:\n            power_sum += 16777216\n        elif i == 33554432:\n            power_sum += 33554432\n        elif i == 67108864:\n            power_sum += 67108864\n        elif i == 134217728:\n            power_sum += 134217728\n        elif i == 268435456:\n            power_sum += 268435456\n        elif i == 536870912:\n            power_sum += 536870912\n        elif i == 1073741824:\n            power_sum += 1073741824\n        elif i == 2147483648:\n            power_sum += 2147483648\n        else:\n            # If i is not a power of 2, it will be added to the power sum as is\n            power_sum += i\n\n    # Check if the power sum is equal to n\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for calculating circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r #pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r #formula for finding circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n\n    # Calculate the circumference of the circle using the formula\n    #   C = 2 * \u03c0 * r\n    C = 2 * math.pi * r\n\n    # Return the value of C\n    return C"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        elif type(item) == set:\n            flat_list.extend(extract_singly(list(item)))\n        elif type(item) == int:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result |= set(sublist)\n    return list(result)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the list from i to the maximum index\n        for j in range(i, max_index, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # starting from the last element\n    for i in range(n-1, 0, -1):\n        # swapping the element with its position that is n-i\n        nums[0], nums[i] = nums[i], nums[0]\n        # printing the sorted list\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    This algorithm works by repeatedly selecting a pancake from the list, shifting it towards the end,\n    and repeatedly doing this until the pancakes are in order.\n\n    The time complexity of pancake sort is O(n^2) in the worst case, but it has an average time complexity of O(n^2/2),\n    which is better than bubble sort.\n\n    Args:\n        nums (list): A list of integers to sort.\n\n    Returns:\n        list: The sorted list.\n    '''\n\n    # Calculate the length of the list\n    n = len(nums)\n\n    # Perform the pancake sort algorithm\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the largest element with the element at the end of the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def sort_pancakes(nums):\n        pancakes = [len(nums)] * len(nums)\n        for i in range(len(nums) - 1, 0, -1):\n            max_index = pancakes.index(max(pancakes[:i+1]))\n            pancakes[i], pancakes[max_index] = pancakes[max_index], pancakes[i]\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n        return nums\n    \n    return sort_pancakes(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    Pancake sort is an efficient in-place variation of bubble sort that uses the principle of sorting by \n    first sorting by increasing key value and then decreasing value. The algorithm works as follows:\n\n    1. Start with the largest element of the unsorted list and \"throw it\" to the end of the list.\n    2. Move the next largest element to the end of the list and repeat from step 1.\n    3. Repeat until the entire list is sorted.\n\n    Time Complexity:\n        Best: O(n^2)\n        Average: O(n^2)\n        Worst: O(n^2)\n\n    Space Complexity:\n        O(1)\n\n    '''\n\n    # Swap adjacent elements if they are in the wrong order\n    def bubble_swap(nums, i, j):\n        if nums[i] > nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # Perform bubble sort on the given list\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            bubble_swap(nums, j, j+1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the remaining unsorted part of the array\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # Swap the current element with the largest element found so far\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return\n\n        # Find the maximum element in the current sublist\n        max_idx = start\n        for i in range(start+1, end+1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap the maximum element with the last element\n        nums[max_idx], nums[end] = nums[end], nums[max_idx]\n\n        # Recursively sort the two sublists\n        pancake_sort_helper(nums, start, max_idx-1)\n        pancake_sort_helper(nums, max_idx+1, end)\n\n    # Sort the list using the pancake sort algorithm\n    pancake_sort_helper(nums, 0, len(nums)-1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # create a copy of the original list to avoid modifying it\n    nums_copy = nums.copy()\n\n    # loop through the list and sort it using the pancake sort algorithm\n    for i in range(len(nums_copy)):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums_copy)):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n        # swap the maximum element with the first unsorted element\n        nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Traverse through all array elements\n    for i in range(n-1):\n        # Find the maximum element in the unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the found maximum element with the first element of the unsorted array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the Pancake Sort algorithm.\n    '''\n    # Find the maximum element in the list\n    max_elem = max(nums)\n    \n    # Perform pancake sorting\n    for i in range(len(nums)):\n        # Find the largest i-th pancake\n        for j in range(len(nums)-i-1):\n            if nums[j] < nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n        # Reverse the pancake to its original position\n        k = len(nums) - i - 1\n        while k > 0:\n            nums[k], nums[k-1] = nums[k-1], nums[k]\n            k -= 1\n    \n    # Reverse the list in place to sort it in ascending order\n    nums.reverse()\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize counters\n    count_12 = 0\n    count_23 = 0\n    count_13 = 0\n    \n    # Loop through the lists\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count_12 += 1\n        if list2[i] == list3[i]:\n            count_23 += 1\n        if list1[i] == list3[i]:\n            count_13 += 1\n    \n    # Return the count of identical items in the same position\n    return count_12 + count_23 + count_13"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n    # Loop through the first list\n    for i in range(len(list1)):\n        # Check if the current item is identical to the item in the same position in the second list and the third list\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')  # initialize max difference as negative infinity\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])  # find the absolute difference between the two elements\n            max_diff = max(max_diff, diff)  # update max_diff if the new difference is greater\n    \n    return max_diff  # return the maximum difference found"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # initialize two variables to store the maximum difference and the current element\n    max_diff = 0\n    current_diff = 0\n    # loop through the array\n    for i in range(1, len(arr)):\n        # calculate the difference between current element and next element\n        current_diff = abs(arr[i] - arr[i-1])\n        # update the maximum difference if the current difference is greater than the previous one\n        if current_diff > max_diff:\n            max_diff = current_diff\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n\n    # Initializing the variables max_diff and current_diff\n    max_diff = float('-inf')\n    current_diff = 0\n\n    # Iterating through the array\n    for i in range(1, len(arr)):\n        # Finding the absolute difference between the current element and the next element\n        diff = abs(arr[i] - arr[i-1])\n\n        # Updating the current_diff and max_diff if the current difference is greater than the current max_diff\n        if diff > current_diff:\n            current_diff = diff\n            max_diff = diff\n\n    # Returning the maximum difference between any two elements in the array\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 or b == 0:\n        return None\n\n    # calculate the discriminant\n    d = (b**2) - (4*a*n)\n\n    # if the discriminant is greater than zero, there is a solution\n    if d > 0:\n        root1 = (-b + (d**0.5)) / (2*a)\n        root2 = (-b - (d**0.5)) / (2*a)\n        return (int(root1), int(root2))\n\n    # if the discriminant is equal to zero, there is only one solution\n    elif d == 0:\n        return (int(-b / (2*a)), int(-b / (2*a)))\n\n    # if the discriminant is less than zero, there is no solution\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables to keep track of the solution\n    x = 0\n    y = 0\n\n    # find the square root of n\n    sqrt_n = int(n**(1/2))\n\n    # iterate until x^2 + y^2 is greater than sqrt_n\n    while (x**2 + y**2) <= sqrt_n:\n        # if x^2 + y^2 is equal to sqrt_n, return the values as a tuple\n        if x**2 + y**2 == sqrt_n:\n            return (x, y)\n\n        # if x^2 + y^2 is greater than sqrt_n, then increase x by 1\n        else:\n            x += 1\n\n    # if we reach this point, there is no solution\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # Check if the discriminant is zero, in which case there is only one solution\n    if disc == 0:\n        return (int((-b + disc)/(-2*a)),)\n    \n    # Check if the discriminant is negative, in which case there are no real roots\n    elif disc < 0:\n        return None\n    \n    # Check if the discriminant is positive, in which case there are two solutions\n    else:\n        root1 = (-b + disc**0.5)/(-2*a)\n        root2 = (-b - disc**0.5)/(-2*a)\n        return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y to 0\n    x, y = 0, 0\n\n    # Initialize k to a and b\n    k = a\n    while k!= b:\n        if k < b:\n            x += 1\n        else:\n            y += 1\n        k = (a * x + b * y) // gcd(a, b)\n\n    # Check if the solution satisfies the given equation\n    if k == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n\n    # check if there is a solution\n    if disc < 0:\n        return None\n\n    # calculate the two solutions\n    x1 = (-b + disc**0.5) / (2*a)\n    x2 = (-b - disc**0.5) / (2*a)\n\n    # check if the two solutions satisfy the equation\n    if (a*x1 + b*x2) == n:\n        return (int(x1), int(x2))\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables to keep track of potential solutions\n    x1 = -b // a  # first solution with x1\n    y1 = a * x1  # y1 = a * x1\n    x2 = n // b  # second solution with x2\n    y2 = b * x2  # y2 = b * x2\n    \n    # Check if there are any solutions that satisfy the given equation\n    if y1 + b * x1 == n:\n        return (x1, y1)\n    elif y2 + b * x2 == n:\n        return (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if n is 0 or a is 0\n    if n == 0 or a == 0:\n        return None\n\n    # initialize x and y to 0 and b/a\n    x = 0\n    y = b/a\n\n    # iterate until n is reached\n    while n!= 0:\n        # calculate x and y using the new values of x and y\n        new_x = x - n//a\n        new_y = y - n//b\n\n        # check if the new values of x and y satisfy the equation\n        if new_x*a + new_y*b == n:\n            # if so, return the solution\n            return (new_x, new_y)\n        else:\n            # otherwise, update x and y to the new values\n            x = new_x\n            y = new_y\n\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, y1 = 1, 0\n    x2, y2 = 2, 0\n    \n    while y1!= y2:\n        x3 = (a*x1*x2 + b*y1*y2 - n)/(a*x1 - b*y1)\n        y3 = (a*x1*x2 + b*y1*y2 - n*x3)/(b*y1 - a*x1)\n        \n        x1 = x2\n        y1 = y2\n        x2 = x3\n        y2 = y3\n    \n    if x1 == 0 and y1 == 0:\n        return None\n    else:\n        return (x1, y1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = (-b + n // a) // b\n    y0 = (-a + n // b) // a\n    if x0 * a + y0 * b == n:\n        return (x0, y0)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//b):\n        if a*x*b + n//b*b == n:\n            return (a*x*b, n//b*b)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Use list comprehension to filter out elements in list1 that are present in list2\n    list1_filtered = [num for num in list1 if num not in list2]\n    return list1_filtered"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through list1 and remove elements in list2 from it\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    # return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is present in the second list\n        if element in list2:\n            # If it is, remove it from the list\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    s = 0\n    for i in range(n // 2):\n        s += (n - 2 * i)\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i < n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n//2) + (n - 2 * (n//2))\n    else:\n        return sum_series(n//2) + (n - 2 * (n//2)) + (n - 2 * (n//2) + 1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while i <= n//2:\n        result += (n - 2*i)\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n // 2) * ((n // 2) - 1) * ((2 * n // 3) - 1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while n-2*i > 0:\n        total += (n - 2*i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum of the first n terms of a series.\n    '''\n    result = 0\n    for i in range(n):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-l)**2) / 2 / math.factorial(2*l-1)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculating the area of the polygon\n    area = (s * l) / (4 * tan(pi/l))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * tan(pi/l))**2\n    area = 0.5 * s * area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter (s)\n    a = tan(pi/l)\n    \n    # Calculate the area using Heron's formula\n    area = 0.5 * s * (a**2 + 1)**0.5\n    \n    # Return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n\n    # calculate the area of the polygon\n    area = (perimeter * (perimeter - s) / 2)\n\n    # calculate the semi-perimeter of the polygon\n    semi_perimeter = perimeter / 2\n\n    # calculate the semi-area of the polygon\n    semi_area = (s * (s - semi_perimeter) * tan(pi / l)) ** 2\n\n    # calculate the area of the polygon using Heron's formula\n    area_herons = (semi_perimeter * semi_area) ** 0.5\n\n    return area, area_herons"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area\n\ndef main():\n    num_sides = int(input(\"Enter the number of sides: \"))\n    side_length = float(input(\"Enter the side length: \"))\n    area = area_polygon(side_length, num_sides)\n    print(\"The area of the polygon is:\", area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the length of one side of the polygon\n    perimeter = s * l\n\n    # calculate the area of the polygon\n    area = (perimeter * math.tan(math.pi / l)) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area\n\ndef main():\n    n = int(input(\"Enter the number of sides: \"))\n    s = float(input(\"Enter the side length: \"))\n    l = float(input(\"Enter the length of the polygon: \"))\n    area = area_polygon(s, l)\n    print(\"The area of the polygon is:\", area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    p = (s * l) / 2\n    # Calculate the area of the polygon using the Heron's formula\n    area = (s * l * (s + l)) ** 0.5\n    # Return the calculated area\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_of_divisors(num): \n        '''\n        Calculate the sum of the divisors of a given number.\n        '''\n        return sum(range(1, int(math.sqrt(num))+1))\n    \n    # Calculate the sum of the divisors of n\n    div_sum_n = sum_of_divisors(n)\n    \n    # Calculate the sum of the divisors of n-1\n    div_sum_n1 = sum_of_divisors(n-1)\n    \n    # Compare the two sums\n    if div_sum_n == div_sum_n1:\n        print(\"The sum of the divisors of\", n, \"and\", n-1, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n-1, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        div = 2\n        while div*div <= n:\n            if n % div == 0:\n                return False\n            div += 1\n        return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    \n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    if len(divisors) == 0:\n        return True\n    \n    divisors_sum = sum(divisors)\n    if divisors_sum == n:\n        return True\n    elif divisors_sum < n:\n        return False\n    else:\n        return div_sum(n - divisors_sum)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return divisors\n\nif __name__ == \"__main__\":\n    print(div_sum(12))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    else:\n        div_sum_1 = sum(range(2, int(math.sqrt(n))+1))\n        div_sum_2 = sum(range(int(math.sqrt(n))+1, n+1))\n        if div_sum_1 == div_sum_2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            div_sum += i\n        i += 1\n    return div_sum == sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    Function to generate all the divisors of a given number.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    sum_div = sum(div_list)\n    return sum_div == math.prod(div_list)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # calculate the sum of the divisors of n \n    divs = math.factorial(n) / (math.factorial(math.ceil(math.log2(n))) * math.factorial(math.floor(math.log2(n))))\n    \n    # calculate the sum of the divisors of n-1 \n    divs_1 = math.factorial(n-1) / (math.factorial(math.ceil(math.log2(n-1))) * math.factorial(math.floor(math.log2(n-1))))\n    \n    # check if the sum of the divisors of n and n-1 are the same \n    if divs == divs_1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of divisors of n\n    div_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    # Check if the sum is equal to n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            if n // i == i:\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == chr(65+i).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the character counts\n    char_counts = {}\n\n    # Iterate through the string and count the character counts\n    for char in str1:\n        if char.isalpha():\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n\n    # Initialize the count of characters that occur at the same position in the English alphabet\n    same_position_count = 0\n\n    # Iterate through the character counts and compare the counts at the same position\n    for char in char_counts:\n        if char == chr(ord('a') + same_position_count):\n            same_position_count += 1\n        else:\n            same_position_count = 0\n\n    # Return the count of characters that occur at the same position in the English alphabet\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitive comparison\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character in str1\n    char_count = {}\n\n    # Iterate through the string\n    for i in range(len(str1)):\n        # Get the current character\n        char = str1[i]\n\n        # If the character is in the English alphabet, update its count in the dictionary\n        if 'a' <= char <= 'z':\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Initialize a counter variable to store the total number of occurrences of each character in str1\n    total_count = 0\n\n    # Iterate through the dictionary and count the occurrences of each character\n    for count in char_count.values():\n        total_count += count\n\n    # Return the total count of occurrences of each character in str1\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count_dict = {}\n\n    for char in english_alphabet:\n        count_dict[char] = str1.count(char.lower())\n\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == chr(i+97).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    # convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # initialize variables\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is in the English alphabet\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            # count the number of occurrences of the current character in the English alphabet\n            count += str1.count(str1[i])\n    # return the count of characters at the same position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+ord('a'))] = 0\n        \n    # Iterate through the string and increment the count of characters at each position in the English alphabet\n    for char in str1:\n        char = char.lower()\n        if char in char_count:\n            char_count[char] += 1\n            \n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the position of each character\n    char_position = {}\n\n    # Iterate through the string\n    for i in range(26):\n        # If the current character is not already in the dictionary\n        if not str1[i] in char_position:\n            # Add it to the dictionary with its current position\n            char_position[str1[i]] = i\n\n    # Initialize a variable to store the count of characters that occur at the same position in the string\n    count = 0\n\n    # Iterate through the string\n    for i in range(len(str1)):\n        # If the current character is already in the dictionary\n        if str1[i] in char_position:\n            # Check if the character at the same position in the string is the same as the current character\n            if str1[char_position[str1[i]]] == str1[i]:\n                # Increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all characters in str1 to lowercase and remove spaces\n    str1 = str1.lower().replace(\" \", \"\")\n\n    # Initialize a dictionary to store the count of each character at each position\n    char_count = {}\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Convert the current character to lowercase and remove spaces\n        char = str1[i].lower().replace(\" \", \"\")\n\n        # If the current character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the current character is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a dictionary to store the count of each character in the English alphabet\n    english_count = {}\n\n    # Loop through each character in the English alphabet\n    for i in range(ord(\"a\"), ord(\"z\") + 1):\n        # Convert the current character to a lowercase letter and remove spaces\n        char = chr(i).lower().replace(\" \", \"\")\n\n        # If the current character is already in the dictionary, increment its count\n        if char in english_count:\n            english_count[char] += 1\n        # If the current character is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            english_count[char] = 1\n\n    # Calculate the sum of the counts of each character in the English alphabet and the counts of each character at each position in str1\n    sum_count = 0\n    for i in range(len(str1)):\n        # Convert the current character to a lowercase letter and remove spaces\n        char = str1[i].lower().replace(\" \", \"\")\n\n        # If the current character is also in the English alphabet dictionary, add its count to the sum\n        if char in english_count:\n            sum_count += english_count[char]\n\n    # Return the sum of the counts of each character in the English alphabet and the counts of each character at each position in str1\n    return sum_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char = chr(65 + i)\n        if str1.lower().count(char.lower()) > 0:\n            count += str1.lower().count(char.lower())\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        n -= 1\n        p = 1\n        while n > 0:\n            n >>= 1\n            p <<= 1\n        return p + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    # Find the exponent of 2 that is greater than or equal to n\n    exponent = 0\n    while 2**exponent <= n:\n        exponent += 1\n\n    # Multiply n by 2 to get the next power of 2\n    return 2**(exponent-1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use binary search to find the smallest power of 2 greater than or equal to n.\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize left and right boundaries for binary search\n    left = n\n    right = n*2\n    # Initialize counter for power of 2 count\n    count = 0\n    # While left boundary is less than or equal to right boundary\n    while left <= right:\n        # Calculate middle index of current subarray\n        mid = (left + right) // 2\n        # If current number is a power of 2, return middle index\n        if mid == 1 << count:\n            return mid\n        # If current number is greater than power of 2, increment count and update right boundary\n        elif mid > 1 << count:\n            count += 1\n            right = mid\n        # If current number is less than power of 2, update left boundary\n        else:\n            left = mid + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the next power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is a power of 2 or not\n    if n & (n-1) == 0: \n        return n\n    \n    # loop till n is a power of 2\n    while True:\n        n *= 2\n        if n & (n-1) == 0:\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and count number of set bits\n    count = bin(n).count('1')\n    # Calculate the exponent of 2 that is greater than or equal to 2^count\n    exponent = 1 << (count + 1)\n    # Return the power of 2 that is greater than or equal to n\n    return 2**exponent"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the exponent of 2 that is greater than or equal to n.\n    power = 0\n    while 2**power < n:\n        power += 1\n    return 2**power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters: a list and a number.\n    The function counts the number of occurrences of the given number in the list and returns the count.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n + 1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_range = 0\n    \n    # Iterate through the list from index m to index n (inclusive)\n    for i in range(m, n+1):\n        # Add the current value of the list at index i to the sum_range\n        sum_range += list1[i]\n    \n    # Return the final sum_range value\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return 0\n\n    # check if m and n are valid indices\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid index\"\n\n    # initialize the sum variable\n    sum = 0\n\n    # iterate over the range of indices (m to n)\n    for i in range(m, n + 1):\n        sum += list1[i]\n\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    if m > n:\n        m, n = n, m\n    return sum(lst[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or n > len(list1) or m >= n:\n        return \"Invalid input\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a * math.sin(math.pi/5)\n    return round(p, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a regular pentagon: n(n-1)/2\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the area of the pentagon using Heron's formula\n    s = (3*a**2)/2\n\n    # Use the arccosine to find the angle formed by the base and the triangle base\n    angle = math.acos((a**2 + s**2 - a**2*s**2)/(2*a*s))\n\n    # Calculate the perimeter of the pentagon\n    p = 5*a + 12*angle + 12*a\n\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # find the length of the side\n    c = a * math.sqrt(3)/2\n    \n    # find the area of the pentagon\n    area = (5 * a**2)/2\n    \n    # find the number of sides of the pentagon\n    n = 5\n    \n    # calculate the perimeter of the pentagon\n    perimeter = n * c + 2 * a * c + a\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the side length\n    side_length = 2*a\n\n    # calculate the area of the pentagon using the formula:\n    # area = sqrt(3)/4 * base^2\n    base = side_length/5\n    area = math.sqrt(3)/4 * base**2\n\n    # calculate the perimeter of the pentagon\n    perimeter = 5*side_length + 5*area\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculating the semi-perimeter using the law of cosines\n    s = (a**2 + a**2 + a**2) / 12\n\n    # Calculating the area using Heron's formula\n    area = math.sqrt(5) / 2 * (a**2)\n\n    # Using the Pythagorean theorem to calculate the perimeter\n    perimeter = math.sqrt(s * (s - area) * (s - 2 * area))\n\n    return round(perimeter, 2)"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = 0\n    end_index = 3\n    while end_index < len(s):\n        if s[end_index:end_index+3] =='std':\n            count += 1\n            end_index += 3\n        else:\n            end_index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the tuple is empty\n    if not test_tuple:\n        return False\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        # Check if the element is of different data type than the first element\n        if type(element)!= type(first_element):\n            return False\n    # If we make it through the loop without finding any inconsistencies, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n    else:\n        return isinstance(test_tuple[0], type(test_tuple[1])) and check_type(test_tuple[1:])"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])  # Get the data type of the first element\n    for element in test_tuple:\n        if not isinstance(element, data_type):  # Check if each element is of the same data type as the first element\n            return False\n    return True  # If all the elements are of the same data type, return True\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n\n    # check if all the elements have same data type\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize variables for counting occurrences and the majority element\n    count = 0\n    majority_element = None\n    \n    # Loop through the array and count occurrences of the element x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n            # If the count reaches n/2, then the element x is the majority element\n            if count == n // 2:\n                return x\n    \n    # If the loop completes without finding the element x, then it's not the majority element\n    return None"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # find the count of the element in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # return whether the element is the majority\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables to keep track of the count and position of the majority element\n    count = 0\n    majority_pos = -1\n    \n    # Loop through the array and count the number of occurrences of the element x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Check if the count is greater than n/2\n    if count > n/2:\n        # Initialize a counter to keep track of the number of elements with the majority element\n        num_majority = 1\n        \n        # Loop through the array again and count the number of elements with the majority element\n        for i in range(n):\n            if arr[i] == x:\n                num_majority += 1\n        \n        # Check if the number of elements with the majority element is equal to n/2\n        if num_majority == n/2:\n            return True\n    \n    # If the count is not greater than n/2, the element is not the majority element\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes an integer n as input and returns the number of set bits in it.\n    \"\"\"\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        n &= n - 1  # clear the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # initialize count variable\n    count = 0\n\n    # loop through each bit in binary representation of n\n    for bit in bin(n)[2:]:\n        # check if bit is 1, indicating a set bit\n        if bit == '1':\n            count += 1\n\n    # return count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0: \n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    return \"\".join([chr(ord(c) - 1) if i % 2!= 0 else c for i, c in enumerate(str)])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create a new string to store the characters which have odd index values\n    new_str = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the current character is odd\n        if char.isalnum() and int(char) % 2 == 1:\n            # If the index is odd, add the character to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # convert the string to a list of characters\n    chars = list(str)\n    # create an empty list to store the even indices characters\n    even_chars = []\n    # loop through the characters in the string\n    for i, char in enumerate(chars):\n        # if the index value is odd, append it to the even_chars list\n        if i % 2 == 1:\n            even_chars.append(char)\n    # convert the even_chars list to a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_index_values.append(str[i])\n    return \"\".join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function takes three numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check whether the given range is within the range of the given integer n\n    if l >= n or r >= n:\n        return False\n\n    # Convert the given range to binary string format\n    bin_str = bin(n)[2:]\n\n    # Get the length of the binary string\n    len_bin_str = len(bin_str)\n\n    # Check whether all the bits are unset in the given range or not\n    if l > 0 and r < len_bin_str:\n        return all_Bits_Set_In_The_Given_Range(n, l - 1, r)\n\n    # Check whether all the bits are set in the given range or not\n    if l == 0 and r == len_bin_str:\n        return True\n\n    # If the given range is within the range of the given integer n and l and r are both greater than 0\n    # then return False because all the bits must be set in the given range.\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < 0 or l < 0 or r < 0:\n        return False\n\n    # Find the difference between the maximum value of n and the given range\n    diff = (1 << (l + 1)) - (1 << l)\n\n    # Check if all the bits are unset in the given range\n    if diff > 0:\n        if (1 << n) & diff!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize the mask with 1s to represent all the bits in the given range.\n    mask = (1 << (r - l + 1)) - 1\n    # Using the bitwise XOR operation, find the bits which are unset in the given range.\n    unset_bits = n ^ mask\n    # Check whether all the unset bits are 0 or not.\n    if unset_bits == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters: n - the integer, l - the lower bound of the range, and r - the upper bound of the range.\n    This function checks whether all the bits are unset in the given range or not.\n    If all the bits are set, the function will return True, else it will return False.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('0') < n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): An integer.\n        l (int): The left endpoint of the range.\n        r (int): The right endpoint of the range.\n\n    Returns:\n        bool: True if all bits are set in the range, False otherwise.\n    \"\"\"\n    for bit in range(l, r+1):\n        if n & (1 << bit) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store the result of the function\n    result = True\n    \n    # Iterate over all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the bit is set or not\n        if n & (1 << i) == 0:\n            result = False\n            break\n    \n    # Return the result of the function\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += n & (1<<i)\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while l<=r:  \n        count += n & 1  \n        n >>= 1  \n        l <<= 1  \n    return count == (r-l+1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    count = 0\n    i = l\n    while i <= r:\n        count += n >> i & 1\n        i += 1\n\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return all_Bits_Set_In_The_Given_Range(n-1, l, r) and ((r - l) + 1) % n == 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create a list to store the elements that are negative\n    neg_list = []\n    \n    # Iterate through the array and add the negative elements to the list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n    \n    # Sort the negative elements in ascending order\n    neg_list = sorted(neg_list)\n    \n    # Create a list to store the elements that are positive\n    pos_list = []\n    \n    # Iterate through the array and add the positive elements to the list\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n    \n    # Sort the positive elements in descending order\n    pos_list = sorted(pos_list, reverse=True)\n    \n    # Combine the negative and positive lists\n    combined_list = neg_list + pos_list\n    \n    # Re-arrange the elements of the combined list\n    combined_list = [combined_list[i] for i in range(n) + range(n, len(combined_list), 2)]\n    \n    # Return the re-arranged array\n    return combined_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_index = 0\n    neg_index = n\n    result = []\n    \n    while pos_index < n:\n        if arr[pos_index] >= 0:\n            result.append(arr[pos_index])\n            pos_index += 1\n        else:\n            result.append(arr[neg_index])\n            neg_index += 1\n    \n    while neg_index < len(arr):\n        result.append(arr[neg_index])\n        neg_index += 1\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, i and j, to the first and second elements of the array, respectively\n    i, j = 0, 1\n    \n    # Move the elements of the array in the desired order\n    while j < n:\n        if arr[j] < 0:\n            # Move all negative elements to the beginning of the array\n            arr[i:j+1] = [arr[j]]\n            i += 1\n            j += 1\n        else:\n            # Move all positive elements to the end of the array\n            arr[i:j+1] = [arr[j]]\n            j += 1\n    \n    # Move the remaining elements to the beginning of the array\n    arr[i:] = [arr[j] for j in range(n, len(arr))]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize three empty lists to store negative, positive and zero elements\n    neg = []\n    pos = []\n    zero = []\n    \n    # Iterate over the array and append elements to the respective lists\n    for elem in arr:\n        if elem < 0:\n            neg.append(elem)\n        elif elem > 0:\n            pos.append(elem)\n        else:\n            zero.append(elem)\n    \n    # Initialize two empty lists to store negative and positive elements in their original order\n    neg_reordered = []\n    pos_reordered = []\n    \n    # Iterate over the lists to get the original order of negative and positive elements\n    for elem in neg:\n        neg_reordered.append(elem)\n    for elem in pos:\n        pos_reordered.append(elem)\n    \n    # Concatenate the lists to get the final re-arranged array\n    rearranged_arr = neg_reordered + pos_reordered + zero\n    \n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create a dictionary to store the count of positive and negative numbers\n    count_dict = {}\n    \n    # Iterate through the array and count the number of positive and negative numbers\n    for num in arr:\n        if num > 0:\n            count_dict[num] = count_dict.get(num, 0) + 1\n        elif num < 0:\n            count_dict[-num] = count_dict.get(-num, 0) + 1\n    \n    # Create a list to store the sorted array\n    sorted_arr = []\n    \n    # Iterate through the dictionary and add the negative numbers to the sorted_arr\n    for num in count_dict:\n        for i in range(count_dict[num]):\n            sorted_arr.append(num)\n    \n    # Append the positive numbers to the sorted_arr\n    for num in arr[:n]:\n        sorted_arr.append(num)\n    \n    # Convert the sorted_arr to a list and return it\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # create two empty lists to store positive and negative elements\n    pos_lst = []\n    neg_lst = []\n    \n    # iterate through the given array and append positive and negative elements to respective lists\n    for i in arr:\n        if i < 0:\n            neg_lst.append(i)\n        else:\n            pos_lst.append(i)\n    \n    # combine the positive and negative lists into a single list\n    combined_lst = neg_lst + pos_lst\n    \n    # sort the combined list in descending order\n    combined_lst.sort(reverse=True)\n    \n    # return the first n elements of the combined list\n    return combined_lst[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize three pointers:\n    # 1. positive_index to keep track of the index of the first positive element\n    # 2. negative_index to keep track of the index of the first negative element\n    # 3. last_index to keep track of the last index of the array\n    \n    positive_index = 0\n    negative_index = n\n    last_index = n + n - 1\n    \n    # Swap the first positive element with the first negative element\n    arr[positive_index], arr[negative_index] = arr[negative_index], arr[positive_index]\n    \n    # Swap the first negative element with the last positive element\n    arr[negative_index], arr[last_index] = arr[last_index], arr[negative_index]\n    \n    # Traverse the array from the third element and swap it with the first negative element\n    for i in range(2, n):\n        if arr[i] < 0:\n            # Swap the current element with the first negative element\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            # Move the negative_index to the right\n            negative_index += 1\n            \n        # If the current element is positive, swap it with the last positive element\n        else:\n            # Move the positive_index to the right\n            positive_index += 1\n            # Swap the current element with the last positive element\n            arr[i], arr[last_index] = arr[last_index], arr[i]\n            # Move the last_index to the right\n            last_index -= 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for positive and one for negative elements\n    i = 0\n    j = 0\n\n    # Traverse through the array\n    while i < len(arr):\n\n        # If the current element is positive, move the pointer for positive elements\n        if arr[i] >= 0:\n            i += 1\n\n        # If the current element is negative and the pointer for negative elements is less than n\n        elif j < n:\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n\n        # If the current element is negative and the pointer for negative elements is equal to or greater than n\n        else:\n            i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two empty lists for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # Loop through the array and append negative and positive elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    \n    # Sort the negative elements in ascending order\n    neg_arr.sort()\n    \n    # Sort the positive elements in descending order (from highest to lowest)\n    pos_arr.sort(reverse=True)\n    \n    # Combine the sorted negative and positive elements into a new array and return it\n    result = neg_arr + pos_arr[:n]\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): List of elements.\n        n (int): Integer value of the first n elements.\n\n    Returns:\n        list: The re-arranged array.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the array and add negative and positive elements to the corresponding lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Add the remaining elements to the corresponding list\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Concatenate the negative and positive lists\n    re_arr = neg_list + pos_list\n\n    return re_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Remove all the blank spaces in the string\n    str1 = str1.replace(' ','')\n    # Replace all the blank spaces in the string with the character\n    str1 = str1.replace(' ','{char}'.format(char=char))\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    for _ in range(n):\n        heapq.heappush(max_heap, -heapq.heappushpop(max_heap))\n        \n    # push the remaining elements of the list into the heap\n    for num in list1:\n        heapq.heappush(max_heap, -num)\n        \n    # extract the largest n elements from the heap and return them as a list\n    return [heapq.heappushpop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n to store the largest n numbers\n    max_heap = []\n    for i in range(n):\n        max_heap.append(-heapq.heappop(list1))\n\n    # add remaining elements to the min heap\n    for i in range(n,len(list1)):\n        heapq.heappush(max_heap,-heapq.heappushpop(list1))\n\n    return [num for num in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    heap = []\n    # add the first n elements of the list to the min heap\n    heapq.heapify(heap, list1[:n])\n    # remove the smallest element from the heap and add it to the result list\n    result = [heapq.heappop(heap)]\n    # add the next n-1 elements of the list to the heap\n    heapq.heapify(heap, list1[n:])\n    # repeat the above process until the heap is empty\n    while heap:\n        # remove the smallest element from the heap and add it to the result list\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a min heap from the list\n    min_heap = []\n    for item in list1:\n        heapq.heappush(min_heap, item)\n        \n    # Extract the n largest items from the heap and return them as a list\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # calculate the lateral surface area\n    area = 2*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h * 3.14159265359"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    lateral_surface_area = 2*math.pi*(r**2)+(2*math.pi*r*h)+(2*math.pi*r*h)\n    print(\"The lateral surface area of the cylinder is:\",lateral_surface_area)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*(r+h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * (3.14159 * r**2 + 2 * h * r)\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = (2*r**2 + 2*r*h + h**2) * 3.14159\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculating the lateral surface area\n    lateral_surface_area = 2 * r * h\n\n    # Returning the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * r * (h - r)  # Formula for lateral surface area of a cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2 * r ** 2 * h) + (2 * r * h ** 2) + (2 * h ** 2 * r) + (2 * r ** 2) + (2 * r * h) + (2 * h ** 2)\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n\n        # If the current bit is even, add it to the list of even bits\n        if bit == '1':\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n\n    # Convert the list of even bits to an integer\n    even_bits_int = int(''.join(str(x) for x in even_bits), 2)\n\n    # Return the integer value with all even bits set\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the set bits\n    set_bits = []\n\n    # Iterate through each bit in the binary representation of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append it to the list of set bits\n        if int(bit) == 0:\n            set_bits.append(0)\n        else:\n            set_bits.append(1)\n\n    # Convert the list of set bits to an integer and return it\n    return int(\"\".join(map(str, set_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty string to store the new number\n    new_num = \"\"\n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is an even number, set it to 1\n        if int(bit) % 2 == 0:\n            new_num += \"1\"\n        else:\n            # otherwise, leave it as it is\n            new_num += bit\n    # convert the new_num string to an integer and return it\n    return int(new_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the even bits in the number\n    even_bits = 0\n    # Loop through each bit in the binary representation of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i) == 0:\n            # If it's odd, set the corresponding bit in the even_bits variable\n            even_bits |= 1 << i\n    # Return the number with even bits set\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Loop through the binary representation of n\n    for i in bin(n)[2:]:\n        # If the current bit is even, append it to the even_bits list\n        if int(i) % 2 == 0:\n            even_bits.append(int(i))\n\n    # Convert the even_bits list to an integer and return it\n    return int(''.join(map(str, even_bits)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            result = result << 1\n        else:\n            result = result | (1 << 1)\n            \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, set the corresponding bit in the result\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits set to 1\n    even_bits = 0\n    \n    # Loop through each bit of the number and set the even bit to 1 if it is even\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            even_bits |= (1 << i)\n            \n    # Return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the set bits\n    set_bits = []\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the set_bits list\n        if int(bit) == 0:\n            set_bits.append(0)\n        else:\n            set_bits.append(1)\n    # Convert the set_bits list to an integer and return it\n    return int(''.join(str(bit) for bit in set_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # iterate through each bit in the given number\n    for i in range(32):\n        # if the current bit is even\n        if n & 1 == 0:\n            # set the corresponding bit in the result to 1\n            result |= 1 << i\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each unique tuple\n    counter = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # Create a dictionary to store the results\n    result = {}\n    \n    # Loop through the Counter object and add each unique tuple to the result dictionary\n    for item in counter.elements():\n        if item not in result:\n            result[item] = counter[item]\n    \n    # Return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the occurrence count of each unique tuple\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of occurrence counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    \n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Count the occurrences of each tuple in the list\n    counts = Counter(test_list)\n\n    # Convert the counts dictionary into a list of tuples\n    result = counts.items()\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the list of tuples\n    count = Counter(test_list)\n    # Create a dictionary to store the mapping\n    occurence_dict = {}\n    # Iterate through the Counter object and add each unique tuple as a key in the dictionary with the corresponding count\n    for key, value in count.items():\n        if key not in occurence_dict:\n            occurence_dict[key] = value\n        else:\n            occurence_dict[key] += value\n    return occurence_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use the Counter() function from the Counter module to count the number of occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Iterate through the unique tuples and update the count dictionary\n    for tuple_ in unique_tuples:\n        count_dict[tuple_] = test_list.count(tuple_)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    # Initialize count to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each substring starting from the current index\n        for j in range(i, len(str)+1):\n            # Check if the substring is non-empty\n            if str[j-i]!='':\n                # Increment the count\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings) - len(set(substrings))"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    substrings = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    # Initialize a set to store the unique substrings\n    substrings = set()\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible substring starting from i\n        for j in range(i, len(str)+1):\n            # If the substring is not empty and not already in the set, add it\n            if j-i > 0:\n                substring = str[i:j]\n                if substring and substring not in substrings:\n                    substrings.add(substring)\n    \n    # Return the number of unique substrings\n    return len(substrings)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize a list to store the number of possible sequences for each element of the sequence\n    possible_sequences = [0] * m\n\n    # Initialize the number of sequences to 1\n    total_sequences = 1\n\n    # Loop through the indices of possible_sequences\n    for i in range(m):\n        # Initialize a variable to store the number of sequences for the current element\n        current_sequences = 0\n\n        # Loop through the indices of possible_sequences\n        for j in range(i + 2, min(i + n + 1, m)):\n            # If the current element is greater than or equal to twice the previous element and less than or equal to m, increment the current_sequences variable\n            if i + 1 < j <= m:\n                current_sequences += possible_sequences[j]\n\n        # Update the total_sequences variable\n        total_sequences *= current_sequences\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through the range of numbers from 2 to m\n    for i in range(2, m+1):\n        # Iterate through the range of numbers from 1 to n-1\n        for j in range(1, n):\n            # Check if the current number is between 2 and m-1 and greater than or equal to 2*previous number and less than or equal to n-1\n            if 2*i <= j <= n-1:\n                # If the current number is valid, increment the count\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, m+1):\n        if i >= 2*n and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    current_sequence = [1]\n    previous_element = None\n\n    for i in range(2, n + 1):\n        if current_sequence[-1] % 2 == 0:\n            next_element = current_sequence[-1] + 2\n        else:\n            next_element = 2 * current_sequence[-1]\n\n        if next_element > m:\n            break\n\n        current_sequence.append(next_element)\n\n        if len(current_sequence) == n:\n            total_sequences += 1\n            current_sequence = current_sequence[1:]\n            previous_element = None\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the number of possible sequences to 0\n    num_sequences = 0\n    \n    # Initialize the first element as 2\n    current_element = 2\n    \n    # Loop until the current element is greater than m\n    while current_element <= m:\n        # Loop through all possible sequences of length n starting from the current element\n        for i in range(1, n + 1):\n            # Check if the current sequence is valid\n            if current_element + i <= m:\n                # If the current sequence is valid, increment the number of possible sequences\n                num_sequences += 1\n        \n        # Move on to the next element\n        current_element += 2\n    \n    # Return the final result\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, m + n):\n        if (i >= 2 * i-1) and (i <= m):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(m,n):\n        for j in range(i//2, m):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    count += 1\n            elif j % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to zero\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(m-n+1):\n        # Check if each element is in the range [2*prev_elem, m]\n        for j in range(n):\n            if i+j >= 2*i+1 and i+j <= m:\n                # If it is, increment the count\n                count += 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Step 1: Calculate the number of possible sequences of length n\n    total_sequences = 0\n    current_sequence = [2]\n    for i in range(n):\n        new_sequence = []\n        for j in range(len(current_sequence)):\n            new_value = max(2 * current_sequence[j], m)\n            if new_value <= m:\n                new_sequence.append(new_value)\n        if new_sequence:\n            total_sequences += 1\n            current_sequence = new_sequence\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    previous = 0\n    count = 0\n    \n    for i in range(1, m+1):\n        if i >= 2*previous <= m:\n            count += 1\n            if count == n:\n                return 1\n            total_sequences += get_total_number_of_sequences(m, n-count)\n            count = 0\n        previous = i\n    \n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # check if the two lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # replace the last element of the first list with the elements of the second list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Set the last element of the first list to be the first element of the second list\n    list1[length-1] = list2[0]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Remove the last element of the first list\n    list1.pop()\n\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list2[0]\n        list2.pop(0)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 += list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    # iterate through the first list from the end\n    for i in range(length-1, -1, -1):\n        # if the current element is not a list, append it to the second list\n        if not isinstance(list1[i], list):\n            list2.append(list1[i])\n        # if the current element is a list, recursively call the function with the current element as the first list and the second list as the second list\n        else:\n            replace_list(list1[i], list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the lengths of the two lists are the same\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Replace the last element of the first list with the elements of the second list\n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # find the length of the first list\n    length = len(list1)\n    \n    # loop through the second list and replace the last element of the first list\n    for i in range(len(list2)-1,-1,-1):\n        list1[length-1] = list2[i]\n    \n    # return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    # check if the length of list1 is greater than the length of list2\n    if len(list1) > len(list2):\n        # iterate through list1 and pop the last element\n        for i in range(len(list1)-1, -1, -1):\n            list1.pop()\n        # add all the elements of list2 to list1\n        list1 += list2\n    else:\n        # iterate through list2 and add it to list1\n        for i in range(len(list2)):\n            list1.append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_count = len(str1)\n    return total_count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes an integer N as input and returns the next perfect square number greater than N.\n    \"\"\"\n    while True:\n        N += 1\n        square_root = math.sqrt(N)\n        if int(square_root) * int(square_root) == N:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # If the square root is an integer, increment it by 1 and convert it to an integer\n    if sqrt_N.is_integer():\n        sqrt_N += 1\n\n    # Otherwise, increment the integer part of the square root by 1\n    else:\n        int_part = int(sqrt_N)\n        sqrt_N = int_part + 1\n\n    # Return the square root\n    return int(sqrt_N * sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than the given number N. \n    It uses the Babylonian method to calculate the next perfect square.\n    \"\"\"\n    # calculate square root of N\n    sqrt_N = math.sqrt(N)\n    # calculate difference between sqrt_N and floor(sqrt_N)\n    difference = sqrt_N - math.floor(sqrt_N)\n    # calculate new value of sqrt_N\n    new_sqrt_N = sqrt_N + difference\n    # calculate next perfect square\n    next_perfect_square = int(math.ceil(new_sqrt_N))\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while True:\n        x += 1\n        if math.isqrt(x) * math.isqrt(x) == x:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = math.sqrt(x)\n    while y*y <= x:\n        y += 1\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # Check if N is already a perfect square\n    if N*N == N:\n        return N*N\n    \n    # Find the first perfect square greater than N\n    i = 1\n    while math.isqrt(N*i*i) < N:\n        i += 1\n    \n    # Find the next perfect square greater than N that is also greater than or equal to the previous one\n    j = 1\n    while math.isqrt(N*j*j) >= N:\n        j += 1\n    \n    # Find the smallest perfect square that is greater than the previous one and less than or equal to the next one\n    k = max(i,j)\n    while math.isqrt(N*k*k) < N and math.isqrt(N*k*k) > k:\n        k += 1\n    \n    # Calculate the next perfect square greater than N\n    next_N = N*i*i\n    if math.isqrt(next_N) < j:\n        next_N = N*j*j\n    \n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if is_Perfect_Square(N):\n            return N\n\ndef is_Perfect_Square(N):\n    '''\n    A helper function to check if a number is a perfect square.\n    '''\n    return int(math.sqrt(N))**2 == N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize a variable to store the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Calculate the integer part of the square root\n    int_sqrt = int(sqrt_N)\n\n    # Calculate the integer part of the difference between N and its square root\n    int_diff = int(math.sqrt(N) - sqrt_N)\n\n    # Calculate the next perfect square greater than N\n    next_sqrt = int_sqrt + int_diff\n\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(num):\n        '''\n        A helper function to check if a number is a perfect square or not.\n        '''\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    def next_square(num):\n        '''\n        A helper function to find the next perfect square greater than a given number.\n        '''\n        square = num\n        while not is_perfect_square(square):\n            square += 1\n        return square\n\n    next_num = N + 1\n    while not is_perfect_square(next_num):\n        next_num += 1\n\n    return next_square(next_num)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    # convert N to float\n    N = float(N)\n\n    # find the square root of N\n    sqrtN = math.sqrt(N)\n\n    # convert the square root to an integer\n    sqrtN = int(sqrtN)\n\n    # find the next integer greater than sqrtN\n    i = sqrtN + 1\n\n    # calculate the next perfect square\n    nextPerfectSquare = i*i\n\n    # check if the next perfect square is greater than N\n    if nextPerfectSquare > N:\n        # if it is, return the next perfect square\n        return nextPerfectSquare\n    else:\n        # if it's not, increment i and continue\n        i += 1\n        return next_Perfect_Square(i)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables for sum and max_sum\n    max_sum_inc = float('-inf')\n    max_sum_dec = float('-inf')\n    sum_inc = 0\n    sum_dec = 0\n    current_sum = 0\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for num in arr:\n        if num > arr[0]:\n            current_sum += num\n            sum_inc += num\n        else:\n            current_sum -= num\n            sum_dec += num\n        \n        # Update max_sum_inc and max_sum_dec if necessary\n        if sum_inc > max_sum_inc:\n            max_sum_inc = sum_inc\n        if sum_dec > max_sum_dec:\n            max_sum_dec = sum_dec\n    \n    # Return the maximum sum of a bitonic subsequence\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # If the array is empty or contains only one element, it is not a bitonic subsequence\n    if n <= 1:\n        return 0\n    \n    # Initialize the maximum sum of a bitonic subsequence to the first element\n    max_sum = arr[0]\n    \n    # Initialize two variables to keep track of the maximum sum of increasing and decreasing subsequences\n    max_sum_increasing = max_sum_decreasing = arr[0]\n    \n    # Iterate through the array from the second element to the last element\n    for i in range(1, n-1):\n        \n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            \n            # If the current element is increasing, update the maximum sum of increasing subsequence\n            max_sum_increasing = max(max_sum_increasing + arr[i], max_sum_increasing)\n            \n            # If the current element is decreasing, update the maximum sum of decreasing subsequence\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], max_sum_decreasing)\n            \n        # If the current element is decreasing, update the maximum sum of a bitonic subsequence\n        else:\n            \n            # If the maximum sum of increasing subsequence is greater than the maximum sum of decreasing subsequence, update the maximum sum of a bitonic subsequence\n            if max_sum_increasing > max_sum_decreasing:\n                max_sum = max(max_sum, max_sum_increasing)\n                \n            # If the maximum sum of decreasing subsequence is greater than the maximum sum of increasing subsequence, update the maximum sum of a bitonic subsequence\n            else:\n                max_sum = max(max_sum, max_sum_decreasing)\n                \n            # Update the maximum sum of increasing and decreasing subsequences\n            max_sum_increasing = max_sum_decreasing = arr[i]\n    \n    # If the maximum sum of increasing subsequence is greater than the maximum sum of decreasing subsequence, update the maximum sum of a bitonic subsequence\n    if max_sum_increasing > max_sum_decreasing:\n        max_sum = max(max_sum, max_sum_increasing)\n        \n    # If the maximum sum of decreasing subsequence is greater than the maximum sum of increasing subsequence, update the maximum sum of a bitonic subsequence\n    else:\n        max_sum = max(max_sum, max_sum_decreasing)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n        if i == n - 1:\n            max_sum = max(max_sum, dp[i])\n        elif dp[i] > dp[i + 1]:\n            max_sum = max(max_sum, dp[i] + dp[i + 1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    # Initialize the maximum sum found so far and the current maximum sum at each position\n    max_ending_here = float('-inf')\n    max_so_far = float('-inf')\n\n    # Iterate through the array and calculate the maximum sum at each position\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i - 1]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = arr[i] - arr[i - 1]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3: \n        return 0\n    \n    # Find the first increasing subsequence \n    increasing_subseq = [True] * len(arr)\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i-1]: \n            increasing_subseq[i] = True\n        else: \n            increasing_subseq[i] = False\n    \n    # Find the first decreasing subsequence \n    decreasing_subseq = [True] * len(arr)\n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            decreasing_subseq[i] = True\n        else: \n            decreasing_subseq[i] = False\n    \n    # Initialize the maximum sum \n    max_sum = 0\n    \n    # Iterate over increasing and decreasing subsequences and calculate the maximum sum \n    for i in range(len(increasing_subseq)): \n        for j in range(len(decreasing_subseq)): \n            if increasing_subseq[i] and decreasing_subseq[j]: \n                max_sum = max(max_sum, increasing_subseq[i] + decreasing_subseq[j])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables for the sum of the increasing and decreasing subsequences\n    increasing_sum = 0\n    decreasing_sum = 0\n    \n    # loop through the array and calculate the sum of increasing and decreasing subsequences\n    for num in arr:\n        if num < arr[0]:\n            increasing_sum += num\n        elif num > arr[0]:\n            decreasing_sum += num\n    \n    # check if the sum of the increasing and decreasing subsequences is equal\n    if increasing_sum == decreasing_sum:\n        return increasing_sum\n    else:\n        # if not, check if the sum of the increasing and decreasing subsequences is greater than the sum of the increasing subsequence alone\n        if increasing_sum > decreasing_sum + increasing_sum:\n            return increasing_sum\n        else:\n            return decreasing_sum + increasing_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n > 0 else 0\n    \n    max_sum = arr[0]\n    left_max = arr[0]\n    right_max = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        temp = arr[i]\n        if temp < left_max:\n            temp, left_max = left_max, temp\n        elif temp > right_max:\n            temp, right_max = right_max, temp\n        \n        max_sum = max(max_sum, temp + left_max + right_max)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i] + dp[i-1]\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for i in range(2)]\n    dp[0][0] = arr[0]\n    dp[1][0] = arr[0]\n    dp[1][1] = arr[1]\n    for i in range(2, n):\n        dp[1-i%2][i] = max(dp[1-i%2][i-1]+arr[i], dp[1-i%2][i-2]-arr[i-1])\n        dp[1-i%2][i] = max(dp[1-i%2][i], dp[1-i%2][i-1]+arr[i])\n    return max(dp[1][-1], dp[1][-2])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Calculate the lengths of increasing and decreasing subarrays\n    inc_len = 1\n    dec_len = n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_len += 1\n            dec_len = max(dec_len, inc_len)\n        else:\n            dec_len += 1\n            inc_len = max(inc_len, dec_len)\n    # Calculate the maximum subarray sum\n    max_sum = arr[0]\n    for i in range(n-1):\n        max_sum = max(max_sum, arr[i] + arr[i+1])\n    # Return the maximum sum of a bitonic subarray\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number/guess) / 2\n        else:\n            guess = (guess + number/guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number\n    y = (x + number//x) // 2 # babylonian method initial guess\n    \n    while abs(y*y - x) > 1e-6:\n        x = y\n        y = (x + number//x) // 2\n        \n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = 1\n    previous_guess = 0\n    tolerance = 0.00001\n\n    # iterate until the guess is within the desired tolerance\n    while (guess * guess) - number > 0:\n        previous_guess = guess\n        guess = (guess + (number / guess)) / 2\n\n    # return the rounded guess as the square root\n    return round(guess, 10)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number\n    i = 1\n    y = x/2.0\n    y_old = 0\n    tol = 1e-10\n\n    while abs(y_old - y) > tol:\n        y_old = y\n        y = (x/y + y/2.0) / (1.0 + (x/y + y/2.0)/y)\n        i += 1\n\n    return y, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_0 = 1.0\n    x_1 = number / x_0\n    x_n = 0.5 * (x_0 + x_1)\n    n = 0\n    while abs(x_n - x_0) > 0.00001:\n        x_0 = x_1\n        x_1 = x_n\n        x_n = 0.5 * (x_0 + x_1)\n        n += 1\n    return x_n\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2  # initial guess\n    x1 = x0 - (number / x0) ** 2  # first iteration\n    while abs(x1 - x0) > 1e-6:\n        x0 = x1\n        x1 = x0 - (number / x0) ** 2\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number\n    y = (x + number//x)//2\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (x + number//x)//2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize variables for the method\n    x = number / 2\n    x_prev = 1\n    x_prev_prev = 0\n\n    # Compute the square root using the babylonian method\n    while abs(x - x_prev) > 0.00001:\n        x_prev_prev = x_prev\n        x_prev = x\n        x = (x_prev_prev + x_prev) / 2\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if number is a float or an integer\n    if type(number) in [int, float]:\n        # Initialize variables for iteration\n        i = 0\n        x = 1\n        # Compute square root using babylonian method\n        while abs(x**2 - number) > 0.0001:\n            x = (x + number/x) / 2\n            i += 1\n        return i, x\n    else:\n        # Raise TypeError if input is not a number\n        raise TypeError(\"Input must be a number.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize guess and lower and upper bounds\n    guess = 1\n    lower_bound = 1\n    upper_bound = number\n\n    while True:\n        # compute the square of the guess\n        square = guess * guess\n\n        # check if the square is less than the number\n        if square < number:\n            # update the upper bound\n            upper_bound = guess\n\n            # update the guess to be the average of the lower and upper bounds\n            guess = (lower_bound + upper_bound) / 2\n\n            # update the lower bound\n            lower_bound = guess\n        else:\n            # the square is greater than or equal to the number\n            break\n\n    # return the computed square root\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # create a 2D table to store lengths of LPS for all prefixes \n    lps_table = [[0] * n for i in range(n)] \n  \n    # length of LPS for even length of prefix is the maximum of length of LPS for \n    # odd length prefix and length of LPS for even length of suffix \n    lps_table[0][0] = 0 \n    for i in range(1, n): \n        if str[i] == str[0]: \n            lps_table[i][0] = 1 + lps_table[i-1][0] \n        else: \n            lps_table[i][0] = max(lps_table[i-1][0], lps_table[i-1][1]) \n  \n    # length of LPS for odd length of prefix is the maximum of length of LPS for \n    # even length prefix and length of LPS for odd length of suffix \n    lps_table[0][1] = 0 \n    for i in range(2, n, 2): \n        if str[i] == str[0]: \n            lps_table[i][1] = 1 + lps_table[i-2][0] \n        else: \n            lps_table[i][1] = max(lps_table[i-2][0], lps_table[i-2][1]) \n  \n    # find length of LPS for odd length of suffix \n    for i in range(1, n, 2): \n        if str[i] == str[i-1]: \n            lps_table[i][2] = 1 + lps_table[i-2][2] \n        else: \n            lps_table[i][2] = max(lps_table[i-2][2], lps_table[i-2][1]) \n  \n    # find length of LPS for even length of suffix \n    for i in range(2, n, 2): \n        if str[i] == str[i-2]: \n            lps_table[i][3] = 1 + lps_table[i-3][3] \n        else: \n            lps_table[i][3] = max(lps_table[i-3][3], lps_table[i-3][1]) \n  \n    # maximum length of LPS is the length of LPS for odd length of prefix \n    max_len = lps_table[n-1][1] + lps_table[n-1][2] + lps_table[n-1][3] \n  \n    return max_len \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    lps = [1] * n\n    \n    # calculate LPS for odd length strings\n    for i in range(1, n-1):\n        if s[i] == s[i+1]:\n            lps[i] = 2\n    \n    # calculate LPS for even length strings\n    for i in range(2, n, 2):\n        if s[i] == s[i-1]:\n            lps[i] = lps[i-1] + 2\n            \n    return max(lps)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize table of LPS values\n    lps_table = [[0 for _ in range(n)] for _ in range(n)]\n    # Initialize maximum length of palindrome subsequence as 1\n    max_length = 1\n    # Find length of longest palindromic subsequence for all possible substrings\n    for i in range(1, n):\n        # If current character is same as previous character, then length of palindrome subsequence is 2 + previous length of palindrome subsequence\n        if s[i] == s[i-1]:\n            lps_table[i][i] = lps_table[i-1][i-1] + 2\n            # Update maximum length if current length is greater\n            if lps_table[i][i] > max_length:\n                max_length = lps_table[i][i]\n        else:\n            # If current character is not same as previous character, then length of palindrome subsequence is maximum of previous length of palindrome subsequence or 1\n            lps_table[i][i] = max(lps_table[i-1][j] for j in range(i))\n    # Return maximum length of palindrome subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    # Initialize variables\n    max_len = 1\n    curr_len = 1\n    start_index = 0\n\n    # Iterate through the string\n    for i in range(1, len(str)):\n        # If the characters at the start and end of the substring are the same, check if the substring is a palindrome\n        if str[i-1] == str[i]:\n            curr_len += 2\n            if curr_len > max_len:\n                max_len = curr_len\n                start_index = i - curr_len + 1\n        # If the characters at the start and end of the substring are different, reset the current length to 1\n        else:\n            curr_len = 1\n    \n    # Return the length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s): \n    n = len(s) \n    # create a 2D table to store the length of longest palindromic subsequence of the given string \n    table = [[0] * n for _ in range(n)] \n\n    # fill the table in bottom up manner \n    for i in range(n): \n        table[i][i] = 1 \n        if s[i] == s[i+1]: \n            table[i][i+1] = 1 \n\n    # find the length of longest palindromic subsequence of the given string \n    max_len = 1\n    for i in range(1, n-1): \n        if s[i] == s[i+1]: \n            table[i][i+1] = table[i+1][i-1] + 2\n            max_len = max(max_len, table[i][i+1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize two variables to store the length of the longest palindromic subsequence \n    # in the current subsequence and in the previous subsequence.\n    # Initialize the longest palindromic subsequence length as 1.\n    prev = 1\n    current = 1\n    \n    # Iterate through the string from index 0 to n-1\n    for i in range(1, n):\n        \n        # Check if the characters at the current and previous indices are the same.\n        if str[i] == str[i-1]:\n            \n            # If they are, then the current subsequence and previous subsequence can be combined.\n            # So, update the current subsequence length by adding 1.\n            current = prev + 1\n            \n            # If the current subsequence length is greater than the longest palindromic subsequence \n            # length, update the longest palindromic subsequence length.\n            if current > prev:\n                prev = current\n        \n        # If the characters at the current and previous indices are not the same, \n        # then the longest palindromic subsequence length is the maximum of the current and previous subsequences.\n        else:\n            \n            # Update the longest palindromic subsequence length by taking the maximum of the current and previous subsequences.\n            prev = current\n            \n            # Update the current subsequence length by setting it to 1.\n            current = 1\n            \n    # Return the longest palindromic subsequence length.\n    return prev"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    if len(str) == 0:\n        return 0\n    \n    # Create a 2D table to store the length of LPS for all prefixes of the string\n    table = [[0 for j in range(len(str))] for i in range(len(str)+1)]\n\n    # Initialize the length of LPS for the first character of the string\n    table[0][0] = 0\n\n    # Fill the table in bottom up manner\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    # Initialize two pointers, one starting from the beginning of the string and the other starting from the end of the string\n    start = 0\n    end = len(str)-1\n    \n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_length = 1\n    \n    # Traverse through the string using the two pointers\n    while start < end:\n        # If the characters at the start and end positions are the same, update the maximum length of the subsequence found so far\n        if str[start] == str[end]:\n            max_length += 2\n            start += 1\n            end -= 1\n        # If the characters at the start and end positions are not the same, check if a substring of length 2 can be formed from the substring of length 2 from the start and end positions\n        elif max_length > 2 and str[start+1] == str[end-1]:\n            max_length = 3\n            start += 2\n            end -= 2\n        # If a longer palindromic subsequence of length 3 can be formed, update the maximum length of the subsequence found so far\n        elif max_length > 3 and str[start+2] == str[end-2]:\n            max_length = 4\n            start += 3\n            end -= 3\n    \n    # Return the maximum length of the longest palindromic subsequence found so far\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store the lengths of LPS for all prefixes of the string\n    lps_table = [[0 for j in range(n)] for i in range(n)]\n    # Base case: all characters are same, LPS is 1\n    for i in range(n):\n        lps_table[i][i] = 1\n    \n    # Fill the table using dynamic programming approach\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            lps_table[i][i+1] = 2\n        else:\n            lps_table[i][i+1] = 1\n            # Check for longest palindrome centered at current character\n            for j in range(i, n-1):\n                if str[j] == str[j+1]:\n                    # Check if palindrome centered at current character is longer than the current LPS\n                    if lps_table[i+1][j] + 2 > lps_table[i][j+1]:\n                        lps_table[i][j+1] = lps_table[i+1][j] + 2\n    return lps_table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n\n    Returns:\n    The harmonic sum of n-1.\n    \"\"\"\n    return 1 / (1 / (n-1) + 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1/(2*n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1/n\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Check if the arrays are of the same length\n    if len(array_nums1)!= len(array_nums2):\n        return \"Error: Arrays are not of the same length.\"\n    \n    # Initialize an empty dictionary to store the intersection\n    intersection_dict = {}\n    \n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Check if the element is also in the second array\n        if num1 in array_nums2:\n            # If so, add it to the dictionary\n            if num1 not in intersection_dict:\n                intersection_dict[num1] = 1\n            else:\n                intersection_dict[num1] += 1\n    \n    # Create a new array with the intersection elements\n    intersection_array = []\n    for key in intersection_dict:\n        if intersection_dict[key] == max(intersection_dict.values()):\n            intersection_array.append(key)\n    \n    # Return the intersection array\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): List of integers.\n    array_nums2 (list): List of integers.\n\n    Returns:\n    list: List of integers that are common to both arrays.\n    \"\"\"\n\n    # Create a set of unique elements from array_nums1\n    unique_nums1 = set(array_nums1)\n\n    # Create an empty list to store the common elements\n    common_nums = []\n\n    # Iterate over the unique elements of array_nums2\n    for num2 in array_nums2:\n        # If the number is in the set of unique elements from array_nums1, add it to common_nums\n        if num2 in unique_nums1:\n            common_nums.append(num2)\n\n    # Return the list of common elements\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # create a set to store unique elements of array1\n    unique_nums1 = set(array_nums1)\n\n    # create a set to store elements of array2 that are also in array1\n    intersection_set = set(array_nums2) & unique_nums1\n\n    # convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #creating a set to store the unique elements from array1\n    unique_array1 = set(array_nums1)\n    \n    #creating an empty set to store the intersection of array1 and array2\n    intersection = set()\n    \n    #iterating through array2 and checking if each element is in the set of unique elements from array1\n    for num in array_nums2:\n        if num in unique_array1:\n            intersection.add(num)\n    \n    #converting the set to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n    \n    # Create a dictionary to store the frequency of each element in the second array\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n    \n    # Find the intersection of the two dictionaries\n    intersection = []\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] == freq_dict2[num]:\n            intersection.append(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    - array_nums1: A list of integers\n    - array_nums2: A list of integers\n\n    Returns:\n    - A list of integers containing the intersection of the two arrays.\n    \"\"\"\n\n    # Create two dictionaries to store the frequency of each element in each array\n    freq_dict1 = {}\n    freq_dict2 = {}\n\n    # Iterate over the first array and update the frequency dictionary\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Iterate over the second array and update the frequency dictionary\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n\n    # Find the intersection of the two dictionaries and return it as a list\n    return [key for key in freq_dict1 if key in freq_dict2 and freq_dict1[key] >= freq_dict2[key]]"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the intersection back to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Sort the arrays in ascending order\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Initialize two pointers to keep track of the current positions in the arrays\n    i = j = 0\n\n    # Iterate through the arrays until both pointers meet\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = list(set(array_nums1))\n    array2 = list(set(array_nums2))\n\n    intersect_array = []\n\n    for num in array1:\n        if num in array2 and num not in intersect_array:\n            intersect_array.append(num)\n\n    return intersect_array"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # create a new list to store the modified list\n    modified_list = []\n    # iterate over each element in the original list\n    for i in range(len(list)):\n        # insert the element before each element in the list\n        modified_list.insert(i, element)\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified list\n    new_list = []\n    # Iterate over each element in the original list\n    for item in list:\n        # Insert the element before the item\n        new_list.insert(0, item)\n    # Add the last item to the end of the new list\n    new_list.append(element)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list = []\n    for i in range(len(list)):\n        result_list.append(element)\n        result_list.append(list[i])\n    return result_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    # check if list is empty or not\n    if not list:\n        return [element]\n\n    # initialize the result list\n    result = []\n\n    # insert the element before each element in the list\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n\n    # append the last element of the list\n    result.append(list[-1])\n\n    # return the result list\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list of complex): List of complex numbers to be converted.\n\n    Returns:\n        list of tuples: List of polar coordinates for each complex number in the input list.\n    \"\"\"\n\n    polar_coords = []\n\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        polar_angle = cmath.phase(number)\n        polar_radius = abs(number)\n\n        # Append the polar coordinates to the list\n        polar_coords.append((polar_angle, polar_radius))\n\n    return polar_coords\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n            angle = cmath.phase(num)\n            print(f\"{num} in polar coordinates is ({magnitude}, {angle} degrees)\")\n        else:\n            print(f\"{num} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        print(\"r = {:.2f}, theta = {:.2f}\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers as input and returns a list of the corresponding polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        mag = cmath.sqrt(number.real ** 2 + number.imag ** 2)\n        theta = cmath.phase(number)\n        polar_coords.append((mag, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(\"Real:\", real)\n        print(\"Imaginary:\", imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real**2 + imag**2)**0.5, cmath.phase(num))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        print(\"({0}, {1})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            print(f\"r = {r:.2f}, theta = {theta:.2f}\")\n        elif isinstance(num, str):\n            print(\"Invalid input.\")\n        else:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates = (r, theta)\n        print(polar_coordinates)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list\n    for number in numbers:\n        # Convert the number to a complex number\n        complex_number = complex(number)\n        # Calculate the magnitude of the complex number\n        magnitude = abs(complex_number)\n        # Calculate the angle of the complex number in radians\n        angle = cmath.phase(complex_number)\n        # Print the magnitude and angle of the complex number\n        print(\"Magnitude:\", magnitude)\n        print(\"Angle:\", angle)"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function counts the number of integer elements in a given list.\n\n    Args:\n        list1 (list): A list of elements.\n\n    Returns:\n        int: The number of integer elements in the list.\n\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    combos = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\n    result = []\n    for color in combinations_with_replacement(colors, n):\n        result.append(tuple(color))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number n as input and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, num)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count == 10:\n                break\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize variables\n    count = 0\n    i = 2\n    prime_numbers = []\n    \n    # Iterate through the numbers from 2 to n\n    while i <= n:\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, add it to the list and increment count\n        if is_prime:\n            prime_numbers.append(i)\n            count += 1\n        i += 1\n    \n    # Return the count of prime numbers\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    This function takes in two numbers, a and b, and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = (test_tup1[i], test_tup2[i])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max_num = max(test_tup1[0], test_tup2[0])\n    \n    # Check if the second tuple is greater\n    if test_tup1[1] > test_tup2[1]:\n        # Update the maximum number if the second tuple is greater\n        max_num = max(test_tup1[0], test_tup2[0], test_tup1[1])\n    else:\n        # Update the maximum number if the second tuple is not greater\n        max_num = max(test_tup1[0], test_tup2[0], test_tup2[1])\n        \n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] > test_tup2[i]:\n                return test_tup2\n            else:\n                pass\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize the result tuple with the smallest element\n    result_tup = (min(test_tup1[0], test_tup2[0]), min(test_tup1[1], test_tup2[1]), min(test_tup1[2], test_tup2[2]))\n\n    # If the first tuple is greater than the second tuple, swap the two tuples\n    if test_tup1[0] > test_tup2[0]:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # If the first tuple is greater than the result tuple, update the result tuple\n    if test_tup1[0] > result_tup[0]:\n        result_tup = (test_tup1[0], test_tup1[1], test_tup1[2])\n\n    # If the second tuple is greater than the result tuple, update the result tuple\n    if test_tup2[0] > result_tup[0]:\n        result_tup = (test_tup2[0], test_tup2[1], test_tup2[2])\n\n    # If the third tuple is greater than the result tuple, update the result tuple\n    if test_tup1[2] > result_tup[0]:\n        result_tup = (test_tup1[0], test_tup1[1], test_tup1[2])\n\n    # If the third tuple is greater than the result tuple, update the result tuple\n    if test_tup2[2] > result_tup[0]:\n        result_tup = (test_tup2[0], test_tup2[1], test_tup2[2])\n\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize variables to store the maximum elements in each tuple\n    max1 = max2 = 0\n    \n    # Compare each element of the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        elif test_tup1[i] < min1:\n            min1 = test_tup1[i]\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n        elif test_tup2[i] < min2:\n            min2 = test_tup2[i]\n    \n    # Return a tuple containing the maximum elements in each tuple\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum sum of elements.\n    '''\n    \n    # Calculating the sum of elements in both tuples\n    total_sum = sum(test_tup1) + sum(test_tup2)\n    \n    # Returning the tuple with maximum sum of elements\n    if total_sum == max(sum(test_tup1), sum(test_tup2)):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        elif test_tup1[0] < test_tup2[0]:\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: \n        return \"Invalid input.\"\n    \n    # initialize count and prime list\n    count = 0\n    prime_list = []\n\n    # check the first prime number\n    prime = 2\n    while prime_list[-1] < 1000:\n        if is_prime(prime):\n            prime_list.append(prime)\n        prime += 1\n\n    # iterate through the list and count the primes\n    for i in range(1, n+1):\n        if is_prime(i):\n            count += 1\n        if count == 3:\n            break\n\n    # return the nth prime\n    return prime_list[count-1]\n\ndef is_prime(n): \n    '''\n    Check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n\n    Args:\n    n (int): The nth newman-shanks-williams prime number to find.\n\n    Returns:\n    int: The nth newman-shanks-williams prime number.\n    \"\"\"\n    if n <= 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        s = 2\n        count = 1\n        while count < n:\n            s += 1\n            count = 0\n            i = 2\n            while i * i <= s:\n                if s % i == 0:\n                    count += 1\n                    s += i\n                else:\n                    i += 1\n        return s"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize count and number list\n    count = 0\n    prime_numbers = []\n    # Loop through numbers from 2 to n-1\n    for i in range(2, n+1):\n        # Initialize divisor list and loop through divisors from 2 to sqrt(i)\n        divisors = []\n        for j in range(2, int(i**0.5)+1):\n            # Check if i is divisible by j\n            if i % j == 0:\n                # If so, add j to divisor list\n                divisors.append(j)\n                # Check if j is also a divisor of i\n                if j!= i//j:\n                    divisors.append(i//j)\n        # If no divisors were found, i is a prime number and add it to the list\n        if not divisors:\n            count += 1\n            prime_numbers.append(i)\n            # Check if the count matches the nth prime number\n            if count == n:\n                return i\n    # If no nth prime number was found, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    count = 0\n    while count < n:\n        a += 1\n        is_prime = True\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return a"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        '''\n        A function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    # Initialize a counter and a list to store the primes \n    count = 0 \n    primes = [] \n\n    # Check all the numbers from 2 to n \n    for i in range(2, n+1): \n        # Check if i is a prime number \n        if is_prime(i): \n            # If it is, add it to the list of primes \n            primes.append(i) \n            # Increment the counter \n            count += 1 \n            # If the counter reaches n, return the nth prime \n            if count == n: \n                return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # define a list of primes\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(len(primes)):\n            if primes[j] > i/2:\n                break\n            if i % primes[j] == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    # return the nth prime number in the list\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Set the upper bound for the prime number to 1000\n    upper_bound = 1000\n\n    # Initialize a counter variable to keep track of the number of primes found\n    count = 0\n\n    # Loop through each number from 2 to upper_bound\n    for i in range(2, upper_bound + 1):\n\n        # Check if the number is prime using a helper function\n        if is_prime(i):\n\n            # If the number is prime, check if it is a newman\u2013shanks\u2013williams prime\n            if is_newman_prime(i):\n\n                # If the number is a newman\u2013shanks\u2013williams prime, increment the count\n                count += 1\n\n                # If the count reaches n, return the current number\n                if count == n:\n                    return i\n\n    # If n is greater than the number of primes found, return None\n    return None\n\ndef is_prime(n): \n    '''\n    Helper function to check if a number is prime.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Loop through each number from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If the loop completes without finding a factor, n is prime\n    return True\n\ndef is_newman_prime(n): \n    '''\n    Helper function to check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n\n    # Initialize a counter variable to keep track of the number of consecutive primes found\n    consecutive_count = 0\n\n    # Loop through each number from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n\n            # If the number is divisible by i, check if the next number is also divisible by i\n            if i == int(n / i):\n                return False\n\n            # If the next number is also divisible by i, increment the consecutive count\n            consecutive_count += 1\n\n            # If the consecutive count reaches 2, return False (since there must be at least 2 consecutive primes)\n            if consecutive_count == 2:\n                return False\n\n    # If the loop completes without finding a factor, n is a newman\u2013shanks\u2013williams prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Create a list of odd numbers between 3 and 2^n-1\n    odds = list(range(3, 2**n-1, 2))\n\n    # Initialize a counter for the prime numbers\n    count = 0\n\n    # Loop through the odd numbers and check if they are prime\n    for num in odds:\n        # Check if the number is prime\n        if is_prime(num):\n            # Increment the count if it is\n            count += 1\n            # If we have found the nth prime number, return it\n            if count == n:\n                return num\n\n    # If we reach this point, we have not found the nth prime number\n    return None\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n\n    # Check all odd numbers between 3 and the square root of the number\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 1\n    prime = True\n    while prime and count < n:\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #initialize counter to 0\n    count = 0\n    #initialize prime flag to true\n    prime = True\n    \n    #loop until count reaches n\n    while count < n:\n        #initialize prime flag to true\n        prime = True\n        \n        #loop until prime is found\n        while prime:\n            #initialize value of current number\n            current = 0\n            \n            #loop until current is greater than sqrt(n)\n            while current <= int(n**(1/2)):\n                #if current is divisible by i, prime flag is set to false\n                if current % i == 0:\n                    prime = False\n                    break\n                    \n                #increment current number\n                current += 1\n            \n            #if prime flag is true, increment count\n            if prime:\n                count += 1\n    \n    #return nth newman-shanks-williams prime number\n    return count\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of equal length.\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements\")\n    \n    # Perform element-wise division\n    result_tup = tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both input tuples must have equal lengths.')\n    # Create an empty list to store the result\n    result_list = []\n    # Perform element-wise division operation and append the result to the list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    # Return the list containing the result\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be equal.\")\n        return\n    \n    # Perform element-wise division of the two tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('inf'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the first tuple must be equal to the length of the second tuple.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError(\"Cannot perform division with zero.\")\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i]/test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than or equal to L\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        # Calculate the length of the first part\n        length_first_part = L\n        # Calculate the length of the second part\n        length_second_part = len(list1) - L\n        # Split the list into two parts\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # Return the resulting lists in a tuple\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([], list1[:L])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Step 1: Get the length of the first part of the list\n    length1 = L\n    \n    # Step 2: Get the first part of the list\n    first_part = list1[:length1]\n    \n    # Step 3: Get the second part of the list\n    second_part = list1[length1:]\n    \n    # Step 4: Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on the length of L\n    split_list = list1[:L], list1[L:]\n    # Return the split list in a tuple\n    return split_list"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) % 2 == 1:\n        mid = len(list1) // 2\n    else:\n        mid = len(list1) // 2 - 1\n\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is an integer\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    \n    # Check if L is greater than 0\n    if L <= 0:\n        raise ValueError(\"L must be greater than 0\")\n    \n    # Check if L is less than or equal to the length of the list\n    if L > len(lst):\n        raise ValueError(\"L must be less than or equal to the length of the list\")\n    \n    # Split the list into two parts using slicing\n    part1 = lst[:L]\n    part2 = lst[L:]\n    \n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L must be less than or equal to the length of the list\")\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # Calculate dog's years based on height\n    years = 1/4 * h_age**2 + 20\n    \n    # Return the calculated dog's years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (100 - h_age) * 7\n    print(f\"The dog is {dog_years} years old.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = 7 + (2 * (h_age / 365.25))\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (YYYY-MM-DD): \")\n    today = datetime.datetime.now()\n    age = today.year - int(dob.split('-')[0])\n    if today.month < int(dob.split('-')[1]) or (today.month == int(dob.split('-')[1]) and today.day < int(dob.split('-')[2])):\n        age -= 1\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (mm/dd/yyyy): \")\n    dob_split = dob.split(\"/\")\n    age = 2021 - int(dob_split[2])\n    print(\"Your dog's age in dog's years is:\", age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dob = input(\"Please enter your date of birth in the format: mm/dd/yyyy: \")\n    dob = [int(x) for x in dob.split('/')]\n    today = [int(x) for x in str(datetime.datetime.now().date()).split('/')]\n\n    if dob[1] > today[1]:\n        age = today[0] - dob[0] - ((today[1] - dob[1]) / 12)\n    else:\n        age = today[0] - dob[0]\n\n    if dob[2] > today[2]:\n        age -= 1\n\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(step, int):\n        raise TypeError('Step must be an integer')\n    if step <= 0:\n        raise ValueError('Step must be a positive integer')\n    if len(S) % step!= 0:\n        raise ValueError('Input list must have a length that is divisible by the step')\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer.\")\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    elif step > 1:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [[]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    return [S[i:i + step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while n <= len(S):\n        result.append(S[0:n])\n        S = S[n:]\n        n += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l**2  # calculate the surface area of the cube\n    lateral = 6*l**3  # calculate the lateral surface area of the cube\n    return lateral - surface  # return the lateral surface area of the cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the surface area of the cube using Heron's formula\n    s = (l ** 2) * 6\n    \n    # Return the calculated surface area\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add its square to the sum\n        if i % 2 == 1:\n            sum += i*i\n            \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum_of_squares = 0\n    count = 0\n\n    # iterate over the first n odd natural numbers\n    for i in range(n+1, 2, -2):\n        # calculate the square of the current number\n        square = i ** 2\n        # add the square to the sum of squares\n        sum_of_squares += square\n        # increment the count\n        count += 1\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 1\n    while current_number <= n:\n        sum_of_squares += current_number ** 2\n        current_number += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    while count < n:\n        sum += count ** 2\n        count += 2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2!= 0:\n            sum_of_squares += count**2\n            count += 1\n        else:\n            count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #initialize sum variable to 0\n    sum = 0\n    \n    #loop through odd natural numbers upto n\n    for i in range(1,n+1,2):\n        #add the square of the current odd number to the sum variable\n        sum += i*i\n    \n    #return the sum of squares of odd natural numbers\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number to 1\n    star_num = 1\n\n    # loop through each digit in the input number\n    while n > 0:\n        # multiply the star number by 10\n        star_num *= 10\n        # divide the input number by 10 to remove the last digit\n        n /= 10\n\n    # return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\" + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    count = 0\n    result = 0\n    \n    # Calculate the number of stars\n    for i in range(1, n+1):\n        result += i\n        \n    # Calculate the number of spaces\n    for i in range(1, n+1):\n        count += (n-i) * i\n    \n    # Return the result\n    return result + count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the counter to 1\n    counter = 1\n    # initialize the result to 0\n    result = 0\n    # loop until the counter reaches n\n    while counter <= n:\n        # add the result of counter^2 to the result\n        result += counter**2\n        # increment the counter\n        counter += 1\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables for the start and end of the range\n    start = 1\n    end = 50\n    \n    # calculate the number of stars needed to complete the sequence\n    num_stars = (end - start) * n\n    \n    # calculate the number of full rows needed to complete the sequence\n    num_rows = num_stars // 50\n    \n    # calculate the number of remaining stars to complete the sequence\n    remaining_stars = num_stars % 50\n    \n    # calculate the number of spaces needed to complete the sequence\n    num_spaces = 50 - remaining_stars\n    \n    # print the header row for the sequence\n    print('*' * 50)\n    \n    # print the first row of the sequence\n    print('*' * num_spaces + '*' * remaining_stars)\n    \n    # print the rest of the rows of the sequence\n    for i in range(num_rows - 1):\n        print('*' * 50)\n        \n    # print the final row of the sequence\n    print('*' * num_spaces + '*' * remaining_stars)\n    \n    # print the footer row for the sequence\n    print('*' * 50)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the result to zero\n    result = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n\n        # Add the product of i and n-i to the result\n        result += i*n-i\n\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return '*'\n    elif n == 2: \n        return '**'\n    elif n == 3: \n        return '***'\n    else:\n        return'' * (n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII value of 'k' character is stored in the variable 'ascii'\n    ascii = ord(k)\n    # Return the ascii value of 'k' character\n    return ascii"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert string to list of characters\n    k = list(k)\n    # Calculate the ascii value of each character and sum them up\n    ascii_sum = sum([ord(c) for c in k])\n    return ascii_sum"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                sum_even_index += arr[i]\n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                count += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            count += 1\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    even_numbers_at_even_index = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n            even_numbers_at_even_index.append(arr[i])\n            \n    return sum_even_at_even_index, even_numbers_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n even numbers\n    for i in range(1, n+1, 2):\n        # calculate the nth even number raised to the fifth power\n        nth_power = i ** 5\n        # add the nth even number raised to the fifth power to the sum variable\n        sum += nth_power\n\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        total += i ** 5\n\n    # Return the total sum\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+1):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Find the sum of the first n even natural numbers that are raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i%2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of the first\", n, \"even natural numbers raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n\n    rear_elements = []\n\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # if the second tuple has an element with the same index, subtract it from the first tuple and append the result to the result list\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        # if the second tuple does not have an element with the same index, append the original element from the first tuple to the result list\n        else:\n            result.append(test_tup1[i])\n    # return the result list\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the index is in the second tuple\n        if i < len(test_tup2):\n            # subtract the elements at the same index and assign the result to the tuple\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum and counter variables\n    sum_even_binomial = 0\n    count = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_even_binomial += math.comb(n, i)\n            count += 1\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients up to n.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            binomial_coeff = math.factorial(2*i-1)/(math.factorial(i)*math.factorial(2*i-1))\n            sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable to 0\n    sum_even_coeffs = 0\n    # Loop through each index i from 0 to n\n    for i in range(n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # If i is even, add its binomial coefficient to the sum\n            sum_even_coeffs += math.comb(n, i)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n\n    # Iterate through the even indices of the binomial coefficients\n    for i in range(2, n+1, 2):\n        # Calculate the nth binomial coefficient using the formula: (n+1)! / (i! * (n-i)!)\n        bin_coeff = math.factorial(n+1) / (math.factorial(i) * math.factorial(n-i))\n        # Add the even index binomial coefficient to the sum\n        even_sum += bin_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # Calculate the binomial coefficients using the formula:\n    # C(n, k) = n! / (k! * (n-k)!)\n    sum_even_binomial = 0\n    for i in range(2, n+1, 2):\n        term = math.factorial(n) / (math.factorial(i-1) * math.factorial(n-i+1))\n        sum_even_binomial += term\n\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_index_binomial_coeffs = 0\n    for i in range(1, n+1):\n        num = math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i))\n        if i % 2 == 0:\n            sum_even_index_binomial_coeffs += num\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum variable\n    sum_even_binomial_coeffs = 0\n    \n    # loop through all even indices\n    for i in range(1, n+1, 2):\n        # calculate binomial coefficient\n        binomial_coeff = math.comb(n, i-1)\n        \n        # add even index binomial coefficient to sum\n        sum_even_binomial_coeffs += binomial_coeff\n    \n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_even_coeffs += math.factorial(n//i) // math.factorial(i)\n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3)*pi*(r**3))\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 2 * 3.14159 * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*3.141592653589793*(r**2)*(h)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h # formula for volume of a cylinder\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            i += 1 # Skip the tuple element that matches the first element in the tuple\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (i+1) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 0\n    count = 0\n\n    # Calculate the decagonal number\n    while count < n:\n        decagonal_num += (1 + (4*count))\n        count += 1\n\n    # Return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1 or n % 2 == 0: \n        return False\n    i = 1\n    while i*i <= n: \n        if n % i == 0: \n            return False\n        i += 1\n    return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Base case\n    if n == 1:\n        return 5\n\n    # Recursive case\n    else:\n        return is_num_decagonal(n-1) + 5"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize counter variable\n    count = 0\n    # Initialize base variable\n    base = 1\n    # Loop until the required number of decagonal numbers are found\n    while count < n:\n        # Calculate the decagonal number and increment the counter\n        decagonal = base * (base + 1) // 2\n        count += 1\n        # Check if the decagonal number is equal to the required number\n        if decagonal == n:\n            return decagonal\n        # If not, check if the decagonal number is greater than the required number\n        elif decagonal > n:\n            return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n\n    # Initialize variables\n    decagonal_num = 1\n    num_rows = 1\n    row_length = 1\n\n    # Loop through rows and columns\n    while decagonal_num <= n:\n        for j in range(1, row_length + 1):\n            decagonal_num += row_length * num_rows + 2 * j - 1\n        num_rows += 1\n        row_length += 1\n\n    return decagonal_num == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the number of rows and columns\n    rows = 0\n    columns = 1\n    # Initialize the result variable\n    result = 1\n    # Loop through the number of rows and columns\n    for i in range(1, n+1):\n        # Calculate the value of the nth row\n        row_value = columns * (columns + 1) // 2\n        # Calculate the value of the nth column\n        column_value = rows * (rows + 1) // 2\n        # Update the result variable\n        result += row_value - column_value\n        # Increment the number of rows and columns\n        rows += 1\n        columns += 1\n    # Return the result\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # First, we need to find the value of n from the formula for the first decagonal number\n    first_decagonal = 1\n    second_decagonal = 1\n    for i in range(2, n+1):\n        first_decagonal += i\n        second_decagonal += 2 * i\n        \n    return first_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first two numbers of the sequence to 1\n    num1 = 1\n    num2 = 2\n\n    # Calculate the nth decagonal number by adding the previous two numbers\n    # and subtracting the number of rows (n/2) from num1\n    for i in range(1, n):\n        num = num1 + num2 - (n // 2)\n        num1 = num2\n        num2 = num\n\n    return num2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return n * decagonal_helper(n-1)\n\n    return decagonal_helper(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # loop through the array\n    for i in range(len(dlist)):\n        # if the element is found, return the index and True\n        if dlist[i] == item:\n            return i, True\n        # if the element is not found, continue to the next index\n    # if the element is not found, return -1 and False\n    return -1, False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Check if the array is empty\n    if len(dlist) == 0:\n        return False, -1\n\n    # Loop through the array\n    for index, value in enumerate(dlist):\n        # If the element is found, return True and the index position\n        if value == item:\n            return True, index\n\n    # If the element is not found, return False and -1\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list) # sort the list to ensure uniqueness\n    return all(test_list[i]!= test_list[i+1] for i in range(len(test_list)-1)) # check if all elements are unique\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # using set() to remove duplicates\n    unique_elements = set(test_list)\n    # checking if set is empty or not\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize a variable to store the unique elements\n    unique_elements = []\n\n    # Iterate over each element in the sorted list\n    for element in sorted_list:\n        # Check if the element is already present in the unique_elements list\n        if element not in unique_elements:\n            # If the element is not present, add it to the unique_elements list\n            unique_elements.append(element)\n\n    # Check if the length of unique_elements is equal to the length of the original list\n    if len(unique_elements) == len(test_list):\n        # If the lengths are equal, it means all the elements are unique\n        return True\n    else:\n        # If the lengths are not equal, it means there are duplicates in the list\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two input lists must have the same length.')\n    \n    # Subtract the two lists element-wise and return the result\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    # Subtract each element of the two lists\n    result = [a - b for a, b in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10  # create a list of 10 to store the frequency of each digit\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the list of digits\n        if int(digit) in count:\n            # if it is, increment the count by 1\n            count[int(digit)] += 1\n        else:\n            # if it is not, add it to the list and set its count to 1\n            count.append(1)\n\n    # loop through the count list and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if digit > 1 and digit > n % digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through each digit in the integer again and check if its frequency is greater than or equal to the digit itself\n    for digit in str(n):\n        if freq[digit] < digit:\n            return False\n    \n    # If all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq[digit] = 1\n\n    # loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    # if all the digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and checks if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num_str = str(n)\n    freq = {}\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through the digits of n\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    # loop through the digits of n again\n    for digit in str(n):\n        # check if the frequency of the current digit is greater than the digit itself\n        if freq[digit] > int(digit):\n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    for digit in str(n):\n        count = 0\n        for i in range(10):\n            if digit == str(i):\n                count += 1\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for i in range(10):\n        count[i] = 0\n    for i in str(n):\n        count[int(i)] += 1\n    for i in count:\n        if count[i] > 1:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(10):\n        count = n//10**i % 10\n        if count > n % 10:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > 1 and freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num_str = str(n)\n    # split the string into a list of digits\n    num_list = list(num_str)\n    # count the frequency of each digit in the list\n    freq_dict = {}\n    for digit in num_list:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    # check if the frequency of each digit in the list is less than or equal to the digit itself\n    for digit in num_list:\n        if freq_dict[digit] > digit:\n            return False\n    # all digits have a frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All elements in the list are equal to the given element.\")\n    else:\n        print(\"Not all elements in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    if len(lst) == 0:\n        return False\n\n    for i in range(len(lst)):\n        if lst[i]!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        print(f\"All items in the list are equal to {element}\")\n    else:\n        print(\"Not all items in the list are equal to the given element\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    # Check if all elements in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'\\ba\\w{2,3}b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a{1}b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Define a regular expression pattern to match the 'a' followed by two or three 'b' characters\n    pattern = r'a[bB]{2,3}'\n\n    # Use the re.search() function to search for the pattern in the input text\n    result = re.search(pattern, text)\n\n    # If the pattern is found in the input text, return True, otherwise return False\n    return result is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.+b[23]'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string {text} contains the pattern {pattern}.\")\n    else:\n        print(f\"The string {text} does not contain the pattern {pattern}.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\1*[bB]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b.{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"(?<=a)(?:b{2,3})\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array with the given array repeated k times\n    modified_array = a * k\n    # initialize the maximum sum as the first element in the array\n    max_sum = a[0]\n    # loop through the modified array\n    for i in range(1, len(modified_array)):\n        # add the current element to the maximum sum\n        max_sum = max(max_sum + modified_array[i], modified_array[i])\n        # update the maximum sum if the current sum is greater than the maximum sum\n        max_sum = max(max_sum, a[i])\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        # Check if the current sum exceeds the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Calculate the new current sum by adding the current element and subtracting the previous element\n        current_sum = current_sum + a[i] - a[i - 1]\n\n        # Check if the current sum exceeds the maximum sum after repeating the array k times\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # initialize variables\n    max_sum = float('-inf')\n    max_sum_start = 0\n    max_sum_end = 0\n    current_sum = 0\n\n    # iterate through the array\n    for i in range(n):\n        # add the current element to the current sum\n        current_sum += a[i]\n\n        # check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_start = i\n            max_sum_end = i\n\n        # check if the current sum is greater than the max sum and if it is within the allowed range\n        elif current_sum > max_sum and i <= n - k:\n            max_sum = current_sum\n            max_sum_start = i - k + 1\n            max_sum_end = i\n\n    # return the maximum sum\n    return max_sum, max_sum_start, max_sum_end\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the maximum sum for the original array\n    max_sum = sum(a)\n    \n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Calculate the maximum sum for the modified array\n    max_modified_sum = sum(modified_array)\n    \n    # Return the maximum sum of the modified array\n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array with repeated elements\n    modified_array = [x for x in a] * k\n\n    # initialize variables for storing the maximum sum and its index\n    max_sum = float('-inf')\n    max_index = 0\n\n    # iterate through the modified array and find the maximum sum\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += modified_array[i*k+j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n\n    # return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous subarray of length n\n    max_sum = max(a[:n])\n    \n    # Iterate through the modified array formed by repeating the given array k times\n    for i in range(n, n*k):\n        # Check if the current sum exceeds the maximum sum\n        if max_sum + a[i] > max_sum:\n            max_sum = max_sum + a[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize variables to keep track of the current subarray sum, the maximum subarray sum seen so far, and the maximum sum seen so far overall\n    current_sum = 0\n    max_sum_seen = float('-inf')\n    max_sum = float('-inf')\n    \n    # Loop through the given array and repeat each element k times to form the modified array\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k-1:\n            current_sum -= a[i-k+1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum > max_sum_seen:\n            max_sum_seen = current_sum\n    \n    return max_sum_seen"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables to store the sum of the modified array and the maximum sum\n    modified_sum = 0\n    max_sum = float('-inf')\n\n    # Repeat the given array k times\n    for i in range(k):\n        modified_sum += sum(a)\n\n    # Calculate the maximum sum of the modified array\n    max_sum = max(max_sum, modified_sum)\n\n    # Modify the original array by repeating it k times\n    for i in range(k):\n        a = [a[0]] + a + [a[-1]]\n\n    # Calculate the maximum sum of the modified array\n    modified_sum = 0\n    for i in range(k):\n        modified_sum += sum(a)\n\n    # Update the maximum sum if necessary\n    max_sum = max(max_sum, modified_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(k):\n        temp_sum = sum(a)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        a = a * 2\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the given array k times\n    modified_array = [a[i] * k for i in range(n)]\n    # initialize variables to store the maximum sum and its index\n    max_sum = a[0]\n    max_sum_index = 0\n    # loop through the modified array and find the maximum sum\n    for i in range(1, n):\n        temp_sum = max(max_sum, modified_array[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_index = i\n    # return the maximum sum and its index\n    return max_sum, max_sum_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):  \n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2,n+1,2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_square = 0\n    count = 0\n\n    while count < n:\n        sum_square += (count**2)\n        count += 1\n\n    return sum_square"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length to be the first list in the list of lists\n    max_length_list = list1[0]\n\n    # Loop through each list in the list of lists\n    for i in range(1, len(list1)):\n        # Check if the length of the current list is greater than the current maximum length\n        if len(list1[i]) > len(max_length_list):\n            # Update the maximum length to be the current list\n            max_length_list = list1[i]\n\n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    max_lengths = []\n    \n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n            \n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_length = len(max(list1[i], key=len))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(x) for x in sublist]\n        if len(lengths) > len(max_lengths):\n            max_lengths = lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Create an empty list to store the maximum length\n    max_lengths = []\n    # Iterate through each list in the input list\n    for lst in list1:\n        # Calculate the length of the current list\n        length = len(lst)\n        # If the length is greater than any length in the current list, add it to the max_lengths list\n        if length > max(max_lengths, default=0):\n            max_lengths = [length]\n        # Otherwise, if the length is already in the max_lengths list, do nothing\n        elif length in max_lengths:\n            pass\n        # Otherwise, add the length to the max_lengths list\n        else:\n            max_lengths.append(length)\n    # Return the max_lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if j >= 2:\n                dp[i][j] = dp[i-1][j-2]\n            if j >= 1:\n                dp[i][j] += dp[i-1][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # Base cases\n    if n == 0: \n        return 1\n    if n == 1: \n        return k\n    # Recursive case\n    if k % 2 == 0: \n        return count_no_of_ways(n-1, k/2)\n    else:\n        return count_no_of_ways(n-1, (k-1)//2) + count_no_of_ways(n-1, (k+1)//2)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a list to store the count of ways for each color\n    count_list = [0] * k\n\n    # Initialize a list to store the count of colors for each post\n    color_count = [0] * n\n\n    # Initialize a variable to keep track of the current color\n    current_color = 0\n\n    # Iterate over the posts from 1 to n\n    for i in range(1, n + 1):\n        # For each post, if the current color is not equal to the next color, increment the count for the current color\n        if current_color!= color_count[i]:\n            count_list[current_color] += 1\n\n        # If the current color is equal to the next color, increment the count for the current color and move to the next color\n        else:\n            count_list[current_color] += 1\n            current_color += 1\n\n    # Return the total count of ways\n    return sum(count_list)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    # base case \n    if n == 0 or k == 0: \n        return 0\n\n    # If n is odd and k is even, there can be at most one way to paint the fence \n    if n % 2 == 1 and k % 2 == 0: \n        return 1\n\n    # If n is even and k is odd, there can be at most one way to paint the fence \n    if n % 2 == 0 and k % 2 == 1: \n        return 1\n\n    # If n is even and k is even, there can be two ways to paint the fence \n    if n % 2 == 0 and k % 2 == 0: \n        return 2\n\n    # If n is odd and k is odd, there can be one way to paint the fence \n    if n % 2 == 1 and k % 2 == 1: \n        return 1\n\n    # If none of the above cases are true, there can be at most 3 ways to paint the fence \n    if n > k: \n        return count_no_of_ways(n - k, k)\n    else: \n        return count_no_of_ways(n, k - n)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [1] * (k + 1)  # initialize the array with 1's\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            ways[j] += ways[j - 1]  # count the number of ways to paint the fence with j colors if j > 1 or j = k\n    \n    return ways[-1]  # return the last element of the array which represents the number of ways to paint the fence with k colors\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize the count variable as 0\n    count = 0\n\n    # loop through all possible pairs of colors\n    for i in range(k):\n        for j in range(i+1, k):\n            # check if the color is not equal to the previous color\n            if j!= i:\n                # initialize the count variable as 1\n                c = 1\n\n                # loop through all possible pairs of adjacent posts\n                for k in range(1, n):\n                    # if the color is equal to the color of the current adjacent post, increment the count\n                    if j == fence[k-1]:\n                        c += 1\n\n                # if the count is greater than 2, increment the count\n                if c > 2:\n                    count += c\n\n    # return the count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        dp[i] = (dp[i] + dp[i - 1]) % (10**9 + 7)\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            if i - 1 >= j:\n                dp[j] = (dp[j] + dp[j - 1]) % (10**9 + 7)\n            if i - 2 >= j:\n                dp[j] = (dp[j] + dp[j - 2]) % (10**9 + 7)\n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the memoization table to store the results of subproblems\n    memo = [0] * (n + 1)\n\n    # Base case: If there are less than 2 colors, there is no way to paint the fence\n    if k < 2:\n        return 0\n\n    # Base case: If there are only one color, all the posts can be painted\n    if k == 1:\n        return n\n\n    # Base case: If there are two colors, there is only one way to paint the fence\n    if k == 2:\n        return 1\n\n    # Fill the memoization table using dynamic programming\n    for i in range(n + 1):\n        # If there are less than two colors, there is no way to paint the fence\n        if i < 2:\n            memo[i] = 0\n        else:\n            # If there are only one color, all the posts can be painted\n            if i == 1:\n                memo[i] = 1\n            else:\n                # If there are two colors, there is only one way to paint the fence\n                if i == 2:\n                    memo[i] = 1\n                else:\n                    # If there are more than two colors, there can be either i or i-1 colors on the left and i-1 colors on the right\n                    memo[i] = count_no_of_ways(i - 1, k - 1) + count_no_of_ways(i - 1, k)\n\n    # Return the final result\n    return memo[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if k is 0, there is only one way to paint the fence\n    if k == 0:\n        return 1\n    # base case: if n is 1, there is only one way to paint the fence\n    if n == 1:\n        return n\n    # recursive case: if there are k colors left and n-1 posts left,\n    # there are n ways to paint the fence\n    if n - 1 >= k:\n        return count_no_of_ways(n - 1, k)\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a boolean array of size n, where each element is False\n    fence = [False] * n\n    \n    # For each color, try to paint the fence as the last color\n    for color in range(1, k + 1):\n        # If we can't paint the fence with this color, skip to the next color\n        if fence[0]:\n            break\n        \n        # Try to paint the fence with this color\n        fence[0] = True\n        for i in range(1, n):\n            # If we can paint the fence with this color, mark the current post as this color\n            if fence[i] and not fence[i - 1]:\n                fence[i] = True\n        \n        # If we can paint the fence with this color, skip to the next color\n        if fence[n - 1]:\n            break\n        \n        # Try to paint the fence with this color\n        fence[n - 1] = True\n        for i in range(n - 2, -1, -1):\n            # If we can paint the fence with this color, mark the current post as this color\n            if fence[i] and not fence[i + 1]:\n                fence[i] = True\n        \n        # If we can paint the fence with this color, skip to the next color\n        if fence[0]:\n            break\n    \n    # Count the number of ways to paint the fence\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if fence[i] == fence[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Calculate the quotient of n and m\n    quotient = n // m\n\n    # Return the rounded quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate quotient\n    quotient = n // m\n    # calculate remainder\n    remainder = n % m\n\n    # if remainder is not zero, add 1 to the quotient\n    if remainder!= 0:\n        quotient += 1\n\n    # return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is zero\n    if m == 0:\n        print(\"Cannot divide by zero!\")\n        return\n\n    # check if m is negative\n    if m < 0:\n        # calculate the absolute value of m\n        abs_m = abs(m)\n\n        # divide n by m and find the remainder\n        remainder = n % m\n\n        # calculate the quotient by subtracting the remainder from n\n        quotient = n - remainder\n\n        # check if the quotient is negative\n        if quotient < 0:\n            # add the absolute value of m to the quotient\n            quotient += abs_m\n        else:\n            # add the quotient\n            quotient -= abs_m\n    else:\n        # divide n by m and find the remainder\n        remainder = n % m\n\n        # calculate the quotient by subtracting the remainder from n\n        quotient = n - remainder\n\n        # check if the quotient is negative\n        if quotient < 0:\n            # subtract the absolute value of m from the quotient\n            quotient -= abs_m\n        else:\n            # do nothing\n            pass\n\n    # return the quotient rounded down to the nearest integer\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate the remainder of dividing n by m\n    remainder = n % m\n    \n    # If the remainder is zero, then m is a factor of n\n    if remainder == 0:\n        return m\n    \n    # If the remainder is positive, then n is a factor of m\n    elif remainder > 0:\n        return find(m, remainder)\n    \n    # If the remainder is negative, then n is not a factor of m\n    else:\n        return find(m, -remainder)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Calculate the quotient of n and m\n    quotient = n // m\n\n    # Check if the quotient is a floating-point number\n    if quotient!= int(quotient):\n        # Round the quotient down to the nearest integer\n        quotient -= 1\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # // is the floor division operator in Python 3.5 and above\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the semi-perimeter\n    s = (w + h) / 2\n    \n    # finding the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # finding the length of the third side\n    third_side = math.sqrt(area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w+h)/2\n    c = math.sqrt(s**2-w**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = (w + h) / 2\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    area = math.sqrt(w**2 * h**2)\n    third_side = math.sqrt((w**2 + h**2 - s**2) / area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    c = 2*a\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third = area / math.sin(math.radians(60))\n    \n    return third"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes two arguments, width and height,\n    and returns the third side of a right-angled triangle whose base is w and height is h.\n    \"\"\"\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the square of the semi-perimeter\n    s_squared = s ** 2\n\n    # Calculate the square of the hypotenuse\n    h_squared = w ** 2 + h ** 2\n\n    # Calculate the square of the other hypotenuse\n    o_squared = s_squared - h_squared\n\n    # Calculate the other hypotenuse\n    o = math.sqrt(o_squared)\n\n    # Calculate the third side of the triangle\n    third_side = math.sqrt(o_squared - o_squared / 4)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value to the first element of the list\n    max_value = listval[0]\n    \n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is greater than the max value, update the max value\n        if listval[i] > max_value:\n            max_value = listval[i]\n    \n    # Return the max value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for item in listval:\n        if type(item) == int:\n            if item > max_num:\n                max_num = item\n        elif type(item) == float:\n            if item > max_num:\n                max_num = item\n        elif type(item) == str:\n            if len(item) > len(max_num):\n                max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if max_val < listval[i]:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    elif isinstance(listval[0], list):\n        return max_val(max(listval, key=len))\n    else:\n        print(\"Invalid input. Please provide a list of heterogeneous data types.\")"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # set the initial value to the first element of the list\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n            \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    sum_divisors = 0\n\n    # Iterate through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # Add the current number to the sum of divisors\n            sum_divisors += i\n\n    # Return the sum of divisors\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    sum_div = 0\n    while div <= number:\n        if number % div == 0:\n            sum_div += div\n        div += 1\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base case: If the array has only one or zero elements, there are no inversions\n    if len(arr) <= 1:\n        return 0\n\n    # Divide the array into two halves recursively\n    left_count = get_Inv_Count(arr[:len(arr) // 2])\n    right_count = get_Inv_Count(arr[len(arr) // 2:])\n\n    # Count inversions using three pointers approach\n    left = 0\n    right = len(arr) - 1\n    inv_count = 0\n\n    while left < right:\n        while left < right and arr[left] >= arr[right]:\n            left += 1\n        while left < right and arr[right] >= arr[left]:\n            right -= 1\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            inv_count += right - left + 1\n\n    # Merge the two halves and count the final inversions\n    inv_count += len(arr) // 2\n    merge_count = 0\n    i = 0\n    j = len(arr) // 2\n    k = len(arr) - 1\n\n    while i < len(arr) // 2 and j < len(arr):\n        if arr[i] <= arr[j]:\n            arr[k - merge_count], arr[i] = arr[i], arr[k - merge_count]\n            i += 1\n            k -= 1\n        else:\n            arr[k - merge_count], arr[j] = arr[j], arr[k - merge_count]\n            j += 1\n            k -= 1\n            merge_count += len(arr) // 2 - j\n\n    while i < len(arr) // 2:\n        arr[k - merge_count], arr[i] = arr[i], arr[k - merge_count]\n        i += 1\n        k -= 1\n\n    while j < len(arr):\n        arr[k - merge_count], arr[j] = arr[j], arr[k - merge_count]\n        j += 1\n        k -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Swap elements if they are in the wrong order\n    def swap_elements(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Count inversions in the array\n    def count_inversions(arr, start, end):\n        if start == end:\n            return 0\n        elif start + 1 == end:\n            return 1\n        else:\n            mid = (start + end) // 2\n\n            # Count the number of inversions in the left subarray\n            left_count = count_inversions(arr, start, mid)\n\n            # Count the number of inversions in the right subarray\n            right_count = count_inversions(arr, mid + 1, end)\n\n            # Count the number of inversions in the current subarray\n            current_count = 0\n            i = start\n            j = mid + 1\n            while i <= mid and j <= end:\n                if arr[i] <= arr[j]:\n                    i += 1\n                else:\n                    j += 1\n                    current_count += mid - i + 1\n\n            # Swap elements if they are in the wrong order\n            current_count += (mid - start + 1) - (mid - j + 1)\n            i = start\n            j = mid + 1\n            while i <= mid and j <= end:\n                if arr[i] <= arr[j]:\n                    if i!= j:\n                        swap_elements(arr, i, j)\n                    i += 1\n                else:\n                    if i!= j:\n                        swap_elements(arr, i, j)\n                    j += 1\n\n            # Return the sum of the counts from the left and right subarrays\n            return left_count + right_count + current_count\n\n    return count_inversions(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                count += n-j \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize variables for counting inversions and indices\n    inv_count = 0\n    i = 0\n    j = len(arr) - 1\n\n    # iterate through the array in reverse order\n    while i < j:\n        # find the minimum element in the current range\n        if arr[i] > arr[j]:\n            inv_count += j - i + 1\n            # swap the elements\n            arr[i], arr[j] = arr[j], arr[i]\n            # move the pointers to search in the new range\n            i += 1\n            j -= 1\n\n    # return the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n            elif arr[j] > arr[i]:\n                inv_count += j-i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    # Base case\n    if len(arr) <= 1:\n        return 0\n\n    # Recursive case\n    mid = len(arr) // 2\n    inv_left = get_Inv_Count(arr[:mid])\n    inv_right = get_Inv_Count(arr[mid:])\n\n    # Count inversions between left and mid and right and mid\n    inv_total = inv_left + inv_right\n    inv_count = 0\n    i = j = 0\n\n    while i < len(arr) and j < len(arr):\n        if arr[i] < arr[j]:\n            inv_count += len(arr) - i\n            i += 1\n        else:\n            j += 1\n\n    return inv_total + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize variables for counting inversions\n    inversions = 0\n    left = 0\n    right = n - 1\n\n    # Sort the array\n    while left < right:\n        # Find the partition index\n        pivot_index = partition(arr, left, right)\n\n        # Count inversions in the left subarray\n        inv_count = get_Inv_Count(arr[:pivot_index])\n        inversions += inv_count\n\n        # Count inversions in the right subarray\n        inv_count = get_Inv_Count(arr[pivot_index+1:])\n        inversions += inv_count\n\n        # If the partition index is greater than the left subarray index,\n        # it means we need to swap the pivot element with the first element\n        # of the left subarray\n        if pivot_index > left:\n            arr[pivot_index], arr[left] = arr[left], arr[pivot_index]\n            left += 1\n\n    return inversions\n\n\ndef partition(arr, left, right):\n    '''\n    Sorts the array between the left and right indices.\n    Returns the index of the pivot element.\n    '''\n    # Choose a pivot element as the first element of the right subarray\n    pivot_index = right\n\n    # Traverse the array from left to right-1\n    for i in range(left, right):\n        # If the element is greater than the pivot, swap it with the pivot index\n        if arr[i] > arr[pivot_index]:\n            arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n            # Update the pivot index\n            pivot_index = i\n\n    # Swap the pivot element with the last element of the right subarray\n    arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n\n    return pivot_index"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the maximum aggregate for each month\n    max_aggs = defaultdict(int)\n\n    # iterate over the list of tuples\n    for month, amount in stdata:\n\n        # calculate the maximum aggregate for the current month\n        max_agg = max(max_aggs.values()) + amount\n\n        # update the maximum aggregate for the current month\n        max_aggs[month] = max_agg\n\n    # find the maximum aggregate across all months\n    max_agg = max(max_aggs.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate and its corresponding transactions\n    max_aggs = defaultdict(list)\n\n    for trans in stdata:\n        # calculate the maximum aggregate for each transaction\n        max_agg = max(trans)\n\n        # add the transaction to the list of transactions with the maximum aggregate\n        max_aggs[max_agg].append(trans)\n\n    # find the maximum aggregate among all transactions\n    max_agg = max(max_aggs.keys())\n\n    # return the maximum aggregate and its corresponding transactions\n    return max_agg, max_aggs[max_agg]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for st in stdata:\n        if len(st) > 2:\n            for i in st[2:]:\n                max_aggr[st[1]] += int(i)\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for st in stdata:\n        max_agg[st[0]] += st[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for transaction in stdata:\n        for item, quantity in transaction:\n            max_sum[item] = max(max_sum[item], quantity)\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary to store the count of each item\n    item_counts = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item, count in stdata:\n        # Add the count of the item to the count of the item in the dictionary\n        item_counts[item] += count\n    \n    # Find the maximum aggregate from the dictionary\n    max_agg = 0\n    for count in item_counts.values():\n        max_agg = max(max_agg, count)\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each month\n    max_agg = defaultdict(int)\n    # Iterate through the list of tuples\n    for (month, sales) in stdata:\n        # Update the maximum aggregate for each month\n        max_agg[month] += sales\n    # Find the maximum value in the defaultdict\n    max_value = max(max_agg.values())\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate = 0\n\n    for item in stdata:\n        aggregate_dict[item[0]] += item[1]\n\n    for key in aggregate_dict:\n        max_aggregate = max(max_aggregate, aggregate_dict[key])\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to keep track of the max aggregate for each period\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for year, period, amount in stdata:\n        # Update the max aggregate for the current period\n        max_agg[period] = max(max_agg[period], amount)\n\n    # Find the maximum value in the defaultdict\n    max_amount = max(max_agg.values())\n\n    # Return the maximum aggregate\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, price in stdata:\n        # increase the count of the current item by 1\n        item_count[item] += 1\n\n    # iterate through the item count and find the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg += count * 10\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(2*n)):\n        current_seq = format(i, f'0{2*n}b')\n        first_half = current_seq[:n]\n        last_half = current_seq[-n:]\n        if int(first_half, 2) == int(last_half, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = bin(i)[2:].zfill(n)\n        last = bin(i >> n)[2:].zfill(n)\n        if int(first) == int(last):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # Loop through all possible binary numbers of length 2n\n    for i in range(2**n):\n        # Convert the binary number to a list of digits\n        digits = bin(i)[2:].zfill(n)\n        \n        # Check if the sum of first n bits is same as sum of last n bits\n        if int(digits[:n]) == int(digits[-n:]):\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        # check if sum of first n bits and sum of last n bits are same\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[-2-n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize variables for count and current sequence\n    count = 0\n    current_seq = [0] * 2 * n\n    \n    # Iterate through all possible binary sequences\n    for i in range(2 ** n):\n        # Convert integer to binary string\n        binary_str = bin(i)[2:].zfill(2 * n)\n        \n        # Calculate the sum of first n bits and last n bits\n        first_n_sum = sum(int(bit) for bit in binary_str[:n])\n        last_n_sum = sum(int(bit) for bit in binary_str[-n:])\n        \n        # If the sums are same, increment count and update current sequence\n        if first_n_sum == last_n_sum:\n            count += 1\n            current_seq = [int(bit) for bit in binary_str]\n    \n    # Return the count and current sequence\n    return count, current_seq"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(1, (1 << 2*n)+1):\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(i & (1 << j) for j in range(n)) == sum(i & (1 << (n-1)) for j in range(n-1, -1, -1)):\n\n            # Increment the count\n            count += 1\n\n    # Return the count of all such sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        if (int(num[0:n//2]) + int(num[n//2:])) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(2*n+1)):\n        binary = bin(i)[2:]\n        first_n_sum = sum([int(x) for x in binary[:n]])\n        last_n_sum = sum([int(x) for x in binary[-n:]])\n        if first_n_sum == last_n_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:n+2]\n        last_n_bits = bin(i)[-n:]\n        if int(first_n_bits) == int(last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if binary[n-1] == binary[0]:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [d]\n    while stack:\n        d = stack.pop()\n        depth += 1\n        for key, value in d.items():\n            if isinstance(value, dict):\n                stack.append(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], (list, tuple)):\n            depth = max(depth, len(d[key]))\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            new_depth = dict_depth(d[key])\n            if new_depth > max_depth:\n                max_depth = new_depth\n            current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n    while stack:\n        current_dict = stack.pop()\n        depth += 1\n        for key, value in current_dict.items():\n            if isinstance(value, dict):\n                stack.append(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    stack = [(d, depth)]\n    while stack:\n        item, depth = stack.pop()\n        if isinstance(item, dict):\n            stack.append((item, depth + 1))\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == rotations:\n        return arr[index]\n    else:\n        return find_Element(arr, ranges, rotations, index + 1)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize current element and its count\n    current_element = arr[0]\n    count = 1\n    \n    # loop through all rotations and ranges\n    for i in range(len(rotations)):\n        for j in range(rotations[i]):\n            # rotate the current element\n            current_element = arr[(arr.index(current_element) + index) % len(arr)]\n            # increment the count\n            count += 1\n    \n    # find the element at the given index\n    element_at_index = arr[(arr.index(current_element) + index) % len(arr)]\n    \n    # return the element and its count\n    return (element_at_index, count)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: List of elements.\n    :param ranges: List of ranges for each element in the array.\n    :param rotations: Number of rotations to apply.\n    :param index: Index of the element to find after rotations.\n\n    :return: Element at the given index after rotations.\n    \"\"\"\n    if rotations == 0:\n        return arr[index]\n\n    # Calculate the element at the given index after rotations\n    element_after_rotations = find_Element(arr, ranges, rotations - 1, index)\n\n    # Find the range of the element at the given index after rotations\n    range_after_rotations = find_Range(arr, ranges, rotations - 1, index)\n\n    # Calculate the element at the given index after the range rotation\n    element_after_range_rotation = element_after_rotations - (range_after_rotations // 2)\n\n    # Find the new range after the range rotation\n    new_range_after_range_rotation = find_Range(arr, ranges, rotations - 1, index + range_after_rotations - 1)\n\n    # Calculate the new element at the given index after the range rotation\n    new_element_after_range_rotation = element_after_rotations + new_range_after_range_rotation - 1\n\n    # Rotate the new element to the desired index\n    new_element_after_rotation = (new_element_after_range_rotation + rotations - 1) % len(arr)\n\n    # Find the element at the new index after rotations\n    element_at_new_index = find_Element(arr, ranges, rotations - 1, new_element_after_rotation)\n\n    return element_at_new_index\n\n\ndef find_Range(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find the range of an element after rotations.\n\n    :param arr: List of elements.\n    :param ranges: List of ranges for each element in the array.\n    :param rotations: Number of rotations to apply.\n    :param index: Index of the element to find the range after rotations.\n\n    :return: Range of the element at the given index after rotations.\n    \"\"\"\n    if rotations == 0:\n        return ranges[index]\n\n    # Find the element at the given index after rotations\n    element_after_rotations = find_Element(arr, ranges, rotations - 1, index)\n\n    # Find the range of the element at the given index after rotations\n    range_after_rotations = find_Range(arr, ranges, rotations - 1, index)\n\n    # Calculate the new range after the range rotation\n    new_range_after_range_rotation = element_after_rotations - element_after_rotations % len(arr)\n\n    return new_range_after_range_rotation\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations, and the index of the element we are looking for.\n    It returns the element at the given index after rotations.\n\n    Args:\n        arr (list): The list of elements.\n        ranges (list): The list of ranges.\n        rotations (int): The number of rotations.\n        index (int): The index of the element we are looking for.\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n    # Calculate the index of the first element in the rotated list.\n    rotated_index = (index + rotations) % len(arr)\n\n    # Calculate the range of the first element in the rotated list.\n    first_range = ranges[0][0] - ranges[0][1]\n\n    # Calculate the range of the last element in the rotated list.\n    last_range = ranges[-1][0] - ranges[-1][1]\n\n    # Calculate the first element in the rotated list.\n    first_element = (arr[rotated_index] - first_range) % 26\n\n    # Calculate the last element in the rotated list.\n    last_element = (arr[rotated_index + last_range] - last_range) % 26\n\n    # Calculate the difference between the last and first elements.\n    difference = last_element - first_element\n\n    # Calculate the element at the given index.\n    element_at_index = (first_element + difference) % 26\n\n    # Return the element at the given index after rotations.\n    return arr[(index + rotations) % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    current_index = index\n    current_range = ranges[0]\n    current_rotation = 0\n    \n    # Loop through the rotations and find the element at the given index\n    for i in range(rotations):\n        # If we have reached the end of the current range, rotate to the next range\n        if current_index >= current_range:\n            current_index = 0\n            current_rotation += 1\n            current_range = ranges[current_rotation]\n        \n        # Update the current index and element\n        current_index += arr[current_index]\n        arr[current_index - 1] = arr[current_index]\n    \n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Get the current element\n    element = arr[index]\n\n    # Initialize the sum of rotations\n    total_rotations = 0\n\n    # Initialize the current range\n    current_range = 0\n\n    # Loop through each range\n    for i in range(len(ranges)):\n\n        # Check if the current element is within the range\n        if current_range + ranges[i] - 1 >= index:\n\n            # Check if the element is within the range of the current range\n            if element >= current_range and element <= current_range + ranges[i] - 1:\n\n                # Calculate the number of rotations needed to find the element\n                rotations_needed = element - current_range\n\n                # Update the total rotations\n                total_rotations += rotations_needed\n\n                # Break out of the inner loop\n                break\n\n        # Update the current range\n        current_range += ranges[i]\n\n    # Return the element after the rotations\n    return arr[(index + total_rotations) % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n\n    # Check if the index is within the array range\n    if index < 0 or index >= n:\n        return None\n\n    # Find the element at the given index after the rotations\n    element = None\n    for i in range(rotations):\n        # Calculate the new index after the rotation\n        new_index = (index - ranges[i]) % n\n        # If the new index is within the array range\n        if new_index >= 0 and new_index < n:\n            # Update the element\n            element = arr[new_index]\n            # Update the index\n            index = new_index\n        # If the new index is outside the array range\n        else:\n            # Stop the loop\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    temp_index = index % len(arr)\n    rotation_count = 0\n    rotated_arr = arr\n    \n    # Perform rotations\n    for _ in range(rotations):\n        # Find the maximum element in the rotated array\n        max_elem = max(rotated_arr)\n        # Find the index of the maximum element in the original array\n        max_index = rotated_arr.index(max_elem)\n        \n        # Move the maximum element to the end of the rotated array\n        rotated_arr[max_index], rotated_arr[temp_index] = rotated_arr[temp_index], rotated_arr[max_index]\n        \n        # Update temp_index and rotation_count\n        temp_index = max_index\n        rotation_count += 1\n        \n    # Find the element at the final index after rotations\n    element_at_final_index = rotated_arr[(rotation_count - 1) % len(arr)]\n    \n    return element_at_final_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array of integers, a list of ranges, and a list of rotations, and\n    returns the element at the given index after rotations.\n    '''\n    \n    # Initialize the current element and the element we will return\n    current_element = arr[index]\n    element_to_return = None\n    \n    # Loop through the ranges and rotations lists\n    for i in range(len(ranges)):\n        # Find the index of the range that contains the current element\n        range_start_index = ranges[i][0]\n        range_end_index = ranges[i][1]\n        \n        # If the current element is within this range, find the element that will be returned\n        if index >= range_start_index and index <= range_end_index:\n            element_to_return = arr[index]\n            break\n        \n        # If the current element is after the range, find the element that will be returned after rotations\n        elif index > range_end_index and rotations[i] > 0:\n            element_to_return = arr[(index - range_end_index + rotations[i]) % (range_end_index - range_start_index + 1) + range_start_index]\n            break\n        \n        # If the current element is before the range, find the element that will be returned after rotations\n        elif index < range_start_index and rotations[i] < 0:\n            element_to_return = arr[(index - range_start_index + rotations[i]) % (range_end_index - range_start_index + 1) + range_start_index]\n            break\n    \n    # Return the element that was found or None if we didn't find one\n    return element_to_return"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables to keep track of the index and number of rotations\n    current_index = index\n    current_rotations = 0\n    \n    # Loop through the array and rotate it by rotations\n    for i in range(rotations):\n        temp = arr[current_index]\n        for j in range(current_index):\n            arr[j] = arr[j+1]\n        arr[current_index] = temp\n        current_index = (current_index - 1 + len(arr)) % len(arr)\n        \n        # Update current index and rotations for the next iteration\n        current_rotations += 1\n        current_index = (current_index + len(ranges)) % len(arr)\n    \n    # Return the element at the final index after rotations\n    return arr[current_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*' # regex pattern to match words starting with letter 'p'\n    matches = re.findall(pattern, words) # find all matches in the list of words\n    if len(matches) < 2: # if no matches are found, return None\n        return None\n    else: # if matches are found, return the two words\n        return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    match = pattern.search(words)\n\n    if match:\n        return [word.strip().lower() for word in match.groups()]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n        if len(result) == 2:\n            break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-zA-Z]*'\n    for i in range(len(words)-1):\n        if re.search(pattern, words[i]) is not None:\n            if re.search(pattern, words[i+1]) is not None:\n                return words[i], words[i+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = r'^p.*'\n\n    # Use regular expression to find all the words starting with 'p'\n    result = re.findall(pattern, words)\n\n    # If there are no words starting with 'p' return None\n    if not result:\n        return None\n\n    # Sort the words in alphabetical order\n    result.sort()\n\n    # Return the first two words starting with 'p'\n    return result[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p[a-z]+')\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n    if len(result) == 2:\n        return result[0], result[1]\n    elif len(result) == 1:\n        return result[0], None\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w{2,}')\n    for word in words:\n        if pattern.match(word):\n            return [word, pattern.sub('', word)]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regular expression to match words starting with 'p'\n    pattern = r'\\bp\\w+'\n    # use the re.findall() function to find all words in the list that match the pattern\n    result = re.findall(pattern, words)\n    # return the first two words in the list that match the pattern\n    return result[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    # Initialize a dictionary to store the maximum sum of increasing subsequence ending at each index\n    max_ending_here = {0: a[0]}\n    current_sum = 0\n    \n    for i in range(1, n):\n        # If the current element is greater than the kth element, add the current element to the sum and update the maximum sum ending at the next index\n        if a[i] > k:\n            current_sum += a[i]\n            max_ending_here[i+1] = max(max_ending_here[i], current_sum)\n        # If the current element is less than or equal to the kth element, add the maximum sum ending at the next index to the current sum and update the maximum sum ending at the next index\n        else:\n            current_sum = max_ending_here[i] + a[i]\n            max_ending_here[i+1] = max(max_ending_here[i], current_sum)\n    \n    # Return the maximum sum ending at the last index\n    return max_ending_here[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and sum of subsequences\n    max_sum = float('-inf')\n    subseq_sum = 0\n    \n    # Iterate over the array\n    for i in range(index, n):\n        # If the current element is less than or equal to the kth element\n        if a[i] <= a[k]:\n            # Update the maximum sum and sum of subsequences\n            subseq_sum += a[i]\n            max_sum = max(max_sum, subseq_sum)\n        # If the current element is greater than the kth element\n        else:\n            # Update the sum of subsequences\n            subseq_sum -= a[i-1]\n            # If the maximum sum so far is less than the sum of subsequences, update the maximum sum\n            if max_sum < subseq_sum:\n                max_sum = subseq_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return 0\n    if n == index:\n        return a[index]\n\n    max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k),\n                 max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    prefix_sum = [0] * n\n    prefix_sum[index] = a[index]\n\n    for i in range(index, -1, -1):\n        if i > k:\n            break\n        prefix_sum[i] += prefix_sum[i + 1]\n        if i == 0 or prefix_sum[i] > prefix_sum[i - 1]:\n            prefix_sum[i] = prefix_sum[i - 1]\n\n    return prefix_sum[0]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, k + 1):\n        dp[i][0] = 0\n        \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if a[i] <= a[j]:\n                dp[j][i] = dp[j - 1][i - 1] + a[j]\n            else:\n                dp[j][i] = dp[j][i - 1]\n        \n    max_sum = 0\n    \n    for i in range(1, n + 1):\n        if i <= index:\n            max_sum = max(max_sum, dp[k][i])\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    # Loop through prefix from 0 to i-1\n    for i in range(index):\n        # Add the current element to temp_sum\n        temp_sum += a[i]\n        # If the current element is greater than k, add it to temp_sum\n        if temp_sum > k:\n            temp_sum -= a[i-1]\n        # Update max_sum if temp_sum is greater than max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize the maximum sum as 0 and the current sum as 0\n    max_sum = 0\n    current_sum = 0\n    \n    # traverse the list from index to n-1\n    for i in range(index, n):\n        # if the current element is greater than or equal to k, then add it to the current sum and update the maximum sum\n        if a[i] >= k:\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n        else:\n            # if the current element is less than k, then remove the element from the current sum\n            current_sum -= a[i-1]\n            \n    # if the last element is greater than or equal to k, then add it to the current sum and update the maximum sum\n    if a[n-1] >= k:\n        current_sum += a[n-1]\n        max_sum = max(max_sum, current_sum)\n    \n    # return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k <= index:\n        return 0\n\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = dp[0]\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and j < k:\n                dp[i] = max(dp[i], dp[j] + a[i])\n                max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    # Initialize the current sum to 0\n    curr_sum = 0\n    # Initialize a list to store the indices of elements in increasing order\n    increasing_indices = []\n    # Initialize a list to store the maximum sum for each prefix\n    prefix_sum = [0] * n\n    # Initialize the maximum sum for the given prefix\n    prefix_max_sum = 0\n    # Traverse through the array from 0 to n-1\n    for i in range(n):\n        # If the current element is greater than the kth element\n        if i < k:\n            # Initialize the maximum sum for the given prefix\n            prefix_max_sum = prefix_sum[i] = 0\n        # If the current element is equal to the kth element\n        else:\n            # If the current element is less than or equal to the previous element\n            if i > 0 and a[i] >= a[i-1]:\n                # Set the maximum sum for the given prefix as the maximum of the current sum and the previous maximum sum for the same prefix\n                prefix_max_sum = prefix_sum[i] = max(prefix_sum[i], prefix_sum[i-1] + a[i])\n            else:\n                # Set the maximum sum for the given prefix as the current sum\n                prefix_max_sum = prefix_sum[i] = curr_sum = curr_sum + a[i]\n        # If the maximum sum for the current prefix is greater than the maximum sum seen so far\n        if prefix_max_sum > max_sum:\n            # Update the maximum sum for the entire array\n            max_sum = prefix_max_sum\n            # Update the list of increasing indices\n            increasing_indices = [i]\n        # If the maximum sum for the current prefix is greater than the maximum sum for the current prefix and the previous index\n        elif prefix_max_sum == max_sum and i < index:\n            # Update the list of increasing indices\n            increasing_indices.append(i)\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    # Initialize the current sum to 0\n    curr_sum = 0\n    # Initialize a list to store the indices of elements in decreasing order\n    decreasing_indices = []\n    # Initialize a list to store the maximum sum for each prefix\n    prefix_sum = [0] * n\n    # Initialize the maximum sum for the given prefix\n    prefix_max_sum = 0\n    # Traverse through the array from 0 to n-1 in reverse order\n    for i in range(n-1, -1, -1):\n        # If the current element is greater than the kth element\n        if i >= k:\n            # Initialize the maximum sum for the given prefix\n            prefix_max_sum = prefix_sum[i] = 0\n        # If the current element is equal to the kth element\n        else:\n            # If the current element is greater than or equal to the previous element\n            if i < n-1 and a[i] >= a[i+1]:\n                # Set the maximum sum for the given prefix as the maximum of the current sum and the previous maximum sum for the same prefix\n                prefix_max_sum = prefix_sum[i] = max(prefix_sum[i], prefix_sum[i+1] + a[i])\n            else:\n                # Set the maximum sum for the given prefix as the current sum\n                prefix_max_sum = prefix_sum[i] = curr_sum = curr_sum + a[i]\n        # If the maximum sum for the current prefix is greater than the maximum sum seen so far\n        if prefix_max_sum > max_sum:\n            # Update the maximum sum for the entire array\n            max_sum = prefix_max_sum\n            # Update the list of decreasing indices\n            decreasing_indices = [i]\n        # If the maximum sum for the current prefix is greater than the maximum sum for the current prefix and the previous index\n        elif prefix_max_sum == max_sum and i > index:\n            # Update the list of decreasing indices\n            decreasing_indices.append(i)\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    # Initialize the current sum to 0\n    curr_sum = 0\n    # Initialize a list to store the indices of elements in decreasing order\n    decreasing_indices = []\n    # Initialize a list to store the maximum sum for each prefix\n    prefix_sum = [0] * n\n    # Initialize the maximum sum for the"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if a[index] > a[index + 1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n    # Use list comprehension to create a list of m copies of the first n elements of the tuple\n    colon = [tuplex_copy[i:i+n] for i in range(0, len(tuplex_copy), n)]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    for i in range(m):\n        row[i] = i\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the tuple so we don't modify it\n    tuplex_copy = deepcopy(tuplex)\n    # initialize a list to hold the colon\n    colon = []\n    # loop through the tuple\n    for i in range(len(tuplex_copy)):\n        # if we've reached the end of the tuple, break out of the loop\n        if i == len(tuplex_copy)-1:\n            break\n        # if we've reached the middle of the colon, append a colon\n        if i % m == 0:\n            colon.append(':')\n        # if we've reached the end of the middle of the colon, append a comma\n        if i % n == 0:\n            colon.append(',')\n        # add the value to the colon list\n        colon.append(tuplex_copy[i])\n    # join the colon list into a string and return it\n    return ''.join(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deepcopy the tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n    # get the size of the tuple\n    size = len(tuplex_copy)\n    # get the list of indices of the colon\n    indices = [i for i in range(size) if (i + m) % n == 0]\n    # create the colon\n    colon = [tuplex_copy[i] for i in indices]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    for i in range(m):\n        row[i] = n\n    return row"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Get the length of the tuple\n    length = len(tuplex)\n    \n    # Check if the length of the colon is equal to m\n    if length == m:\n        return tuplex\n    \n    # Check if the length of the colon is greater than m\n    elif length > m:\n        # Create a new tuple with m elements\n        new_tuplex = deepcopy(tuplex)\n        \n        # Remove the last element from the tuple\n        new_tuplex = new_tuplex[:-1]\n        \n        # Recursively get the colon of the new tuple\n        colon = colon_tuplex(new_tuplex, m, n)\n        \n        # Append the last element of the original tuple to the colon\n        colon = (tuplex[-1],) + colon\n        \n        return colon\n    \n    # Check if the length of the colon is less than m\n    else:\n        # Create a new tuple with n elements\n        new_tuplex = deepcopy(tuplex)\n        \n        # Remove the first element from the tuple\n        new_tuplex = new_tuplex[1:]\n        \n        # Recursively get the colon of the new tuple\n        colon = colon_tuplex(new_tuplex, m, n)\n        \n        # Append the first element of the original tuple to the colon\n        colon = (tuplex[0],) + colon\n        \n        return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deepcopy the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(new_tuplex)\n\n    # Check if the requested row exists\n    if m < 1 or m > length:\n        raise ValueError(\"m must be between 1 and the length of the tuple.\")\n\n    # Check if the requested column exists\n    if n < 1 or n > length:\n        raise ValueError(\"n must be between 1 and the length of the tuple.\")\n\n    # Set the values of the requested row and column\n    for i in range(length):\n        if i == m-1:\n            new_tuplex[i] = (new_tuplex[i][0], new_tuplex[i][1])\n        elif i == n-1:\n            new_tuplex[i] = (new_tuplex[i][0], new_tuplex[i][1])\n        else:\n            new_tuplex[i] = new_tuplex[i]\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    This function takes a tuple of lists (tuplex) and returns a new tuple of lists where each list contains a colon of the input tuple.\n    '''\n\n    # Find the length of each list in the input tuple\n    lengths = [len(x) for x in tuplex]\n\n    # Calculate the number of colon rows required\n    num_cols = len(tuplex[0])\n\n    # Calculate the total number of elements in the input tuple\n    total_elements = sum(lengths)\n\n    # Initialize a new list to store the colon tuples\n    colon_tuples = []\n\n    # Initialize the variables used to keep track of the position in the input tuple\n    current_position = 0\n    current_row = 0\n\n    # Iterate through the input tuple\n    while current_position < total_elements:\n        # Initialize an empty list to store the colon row\n        colon_row = []\n\n        # Iterate through the input tuple to fill the colon row\n        while current_position < total_elements and current_row < num_cols:\n            # If the current position is within the bounds of the current list, add the element to the colon row\n            if current_position < lengths[current_row]:\n                colon_row.append(tuplex[current_row][current_position])\n\n            # Move to the next position in the input tuple\n            current_position += 1\n\n        # Check if the colon row is empty\n        if len(colon_row) > 0:\n            # Add the colon row to the colon tuples list\n            colon_tuples.append(colon_row)\n\n        # Move to the next row in the input tuple\n        current_row += 1\n\n    # Return the colon tuples list\n    return colon_tuples"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a new list to store the colon\n    colon = []\n\n    # Loop over each index of the tuple\n    for i in range(len(tuplex)):\n        # Create a copy of the current tuple\n        tuplex_copy = deepcopy(tuplex)\n\n        # Replace the i-th element with m\n        tuplex_copy[i] = m\n\n        # Replace the j-th element with n\n        for j in range(len(tuplex_copy)):\n            if j!= i:\n                tuplex_copy[j] = n\n\n        # Add the new tuple to the colon list\n        colon.append(tuplex_copy)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Copy the input tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the input tuple\n    length = len(tuplex_copy)\n\n    # Check if the input tuple has enough elements\n    if length < m * n:\n        raise ValueError(\"The input tuple has not enough elements to form a colon.\")\n\n    # Calculate the index of the first element in the colon\n    colon_start_index = m * (length // n)\n\n    # Get the colon\n    colon = tuplex_copy[colon_start_index:colon_start_index+m]\n\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product and its indices\n    max_product = 0\n    max_product_indices = [0, 0]\n    \n    # Loop through the possible combinations of indices\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # Calculate the product of the selected factors\n            product = nums1[i]*nums2[j-1]\n            # Check if the product is larger than the current maximum\n            if product > max_product:\n                max_product = product\n                max_product_indices = [i, j-1]\n    \n    # Return the indices of the selected factors\n    return max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables to store the largest products\n    largest_product1 = float('-inf')\n    largest_product2 = float('-inf')\n\n    # Iterate through each pair of factors and compute their largest product\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > largest_product1:\n                largest_product1 = product\n                largest_product2 = nums1[i] * nums2[j]\n            elif product > largest_product2:\n                largest_product2 = product\n                largest_product1 = nums1[i] * nums2[j]\n\n    # Return the specified number of largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum products to 0\n    max_product1 = max_product2 = 0\n\n    # Initialize the counter for the number of products found so far\n    count = 0\n\n    # Loop through the given lists\n    for i in range(len(nums1)):\n        # Calculate the product of the current factor of nums1 with the remaining factors of nums2\n        current_product = nums1[i] * nums2[0]\n\n        # Check if the product is greater than the current maximum product\n        if current_product > max_product1:\n            # Update the maximum products\n            max_product1 = current_product\n            # Update the counter\n            count += 1\n\n        # Check if the number of products found so far is equal to N\n        if count == N:\n            return max_product1, max_product2\n\n    # If the counter is less than N, it means that the number of products found is less than N, so return the maximum products found so far\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # For each position in the result list, compute the maximum product using the two selected factors\n    for i in range(N):\n        # Find the maximum product of the two selected factors\n        if i % 2 == 0:\n            max_product = nums1[i] * nums2[i]\n        else:\n            max_product = nums1[i] * nums2[i-1]\n\n        # Add the maximum product to the result list\n        result[i] = max_product\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize variables\n    max_product = -float('inf')\n    max_product_indices = []\n\n    # Iterate through each list\n    for i in range(len(nums1)):\n\n        # Find the maximum product for the current factor in the first list\n        product_1 = nums1[i] * nums2[i]\n\n        # Iterate through the rest of the lists\n        for j in range(len(nums1)):\n\n            # Ignore current index and check if it's less than the current maximum product\n            if i!= j:\n                if product_1 > nums1[j] * nums2[j]:\n                    product_2 = nums1[j] * nums2[j]\n                else:\n                    product_2 = nums1[i] * nums2[i]\n\n                # Calculate the product of the current factor in the second list with all the other factors in the first list\n                total_product = product_2\n                for k in range(len(nums1)):\n                    if k!= i:\n                        total_product *= nums1[k]\n\n                # If the total product is larger than the current maximum, update the maximum and add the indices of both factors\n                if total_product > max_product:\n                    max_product = total_product\n                    max_product_indices = [i, j]\n\n    # Return the indices of the maximum products\n    return max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes three lists of numbers and a number N and returns a list of the largest N products\n    selected from the two lists. The two lists are selected one factor from each other.\n    \"\"\"\n    max_products = []\n    num1 = nums1[0]\n    num2 = nums2[0]\n    for i in range(1, N):\n        if nums1[i] > num1:\n            num1 = nums1[i]\n        if nums2[i] > num2:\n            num2 = nums2[i]\n    max_product1 = num1 * num1\n    max_product2 = num2 * num2\n    max_products.append(max_product1)\n    max_products.append(max_product2)\n    for i in range(1, len(nums1)):\n        product1 = max_product1\n        product2 = max_product2\n        for j in range(1, len(nums2)):\n            if nums1[i] > nums1[j]:\n                product1 = product1 * nums1[i]\n            else:\n                product1 = product1 * nums1[j]\n            if nums2[j] > nums2[i]:\n                product2 = product2 * nums2[j]\n            else:\n                product2 = product2 * nums2[i]\n        if product1 > max_product1:\n            max_product1 = product1\n        if product2 > max_product2:\n            max_product2 = product2\n        max_products.append(max_product1)\n        max_products.append(max_product2)\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum and minimum products found so far\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Loop over the specified number of elements\n    for i in range(N):\n        # Calculate the current product\n        current_product = nums1[i] * nums2[i]\n        \n        # Update the maximum and minimum products found so far\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n    \n    # Return the maximum and minimum products found so far\n    return max_product, min_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Convert lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Find the maximum value in the set of unique values\n    max_value = max(nums1 | nums2)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Initialize variables for finding largest products\n    i = 0  # Index for nums1\n    j = 0  # Index for nums2\n    current_product = 0  # Current product being considered\n\n    while i < len(nums1) and j < len(nums2):\n        # Calculate the current product\n        current_product = nums1[i] * nums2[j]\n\n        # Check if it's the largest product found so far\n        if current_product > result[N - 1]:\n            # Update the result list\n            result[N - 1] = current_product\n\n        # Move one of the lists\n        if current_product > max_value:\n            j += 1\n        else:\n            i += 1\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product to 0\n    max_product = 0\n\n    # Traverse through each element of the list\n    for i in range(N):\n        # Calculate the product of the largest element of nums1 and the smallest element of nums2\n        product1 = nums1[i] * nums2[0]\n\n        # Calculate the product of the largest element of nums2 and the smallest element of nums1\n        product2 = nums2[i] * nums1[0]\n\n        # Update the maximum product if the current product is greater\n        if product1 > max_product:\n            max_product = product1\n\n        if product2 > max_product:\n            max_product = product2\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the maximum product and its indices\n    max_product = nums1[0] * nums2[0]\n    max_product_index1 = 0\n    max_product_index2 = 0\n\n    # Loop through the indices of the two lists and select the smallest factor from each list\n    for i in range(N):\n        if max_product_index1 < N and nums1[max_product_index1] * nums2[i] > max_product:\n            max_product = nums1[max_product_index1] * nums2[i]\n            max_product_index1 = i\n\n        if max_product_index2 < N and nums1[i] * nums2[max_product_index2] > max_product:\n            max_product = nums1[i] * nums2[max_product_index2]\n            max_product_index2 = i\n\n    # Return the maximum product and the indices of the two largest factors\n    return max_product, max_product_index1, max_product_index2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:  \n        return a  \n    else:  \n        return b  "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of these numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(a, \"is the maximum number.\")\n    else:\n        print(b, \"is the maximum number.\")"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    # return tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    tup = ()\n    \n    # loop through each character in the string\n    for char in str1:\n        # append the character to the tuple\n        tup += (char,)\n    \n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    Args:\n        str1 (str): A string to be converted to a tuple.\n\n    Returns:\n        tuple: A tuple of characters in the given string.\n    \"\"\"\n\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list of characters to a tuple of characters\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize an index variable to keep track of the position of the unset bit\n    index = 32\n\n    # Iterate through all the bits in the integer n\n    while index > 0:\n        # Check if the current bit is set to 1\n        if n & (1 << index):\n            # If the bit is set, set it to 0 and return the updated value\n            n = n & ~(1 << index)\n            return n\n\n        # Decrement the index to check the next bit\n        index -= 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the leftmost unset bit to -1\n    leftmost_unset_bit = -1\n    \n    # Initialize a bitmask to keep track of unset bits\n    bitmask = 1\n    \n    # Iterate over all possible bits in the binary representation of n\n    for bit in bin(n)[2:]:\n        # Check if the bit is unset\n        if bit == '0':\n            # Set the leftmost unset bit to the current bit\n            leftmost_unset_bit = bitmask\n        \n        # Shift the bitmask to the left by one bit\n        bitmask <<= 1\n    \n    # Set the leftmost unset bit in the original number\n    n &= ~(1 << leftmost_unset_bit)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a binary number.\n    '''\n    # convert binary number to integer\n    num = int(n, 2)\n    # set the leftmost unset bit to 1\n    num |= 1 << 0\n    # convert the integer back to binary\n    return bin(num)[2:]"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Iterate through the bits of the input number\n    for i in range(32):\n        # Check if the current bit is set to 1\n        if n & (1 << i):\n            # If it is, set the bit to 0 and return the result\n            n &= ~(1 << i)\n            return n\n    # If no bits are unset, the input number is already 0\n    return 0"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Use a loop to iterate through the bits of n in reverse order\n    for i in range(31, -1, -1):\n        if (n & (1 << i)) == 0:\n            # If the bit is not set, set it\n            n |= 1 << i\n            return n\n    # If the loop completes without finding an unset bit, return n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the leftmost unset bit \n    i = 0\n    while n & (1 << i) == 0: \n        i += 1\n\n    # Set the leftmost unset bit to 1 \n    n |= (1 << i)\n\n    # Return the modified number \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # if the number is already even, move to the next bit\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variable to store the leftmost unset bit\n    unset_bit = 0\n    \n    # Loop through each bit in the number until we find the leftmost unset bit\n    for i in range(31, -1, -1):\n        if n & (1 << i) == 0:\n            unset_bit = i\n            break\n    \n    # Set the leftmost unset bit in the number\n    n = n | (1 << unset_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the count of unset bits\n    count = 0\n\n    # Loop through the binary representation of the number\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            count += 1\n\n    # Return the left most unset bit\n    return (1 << count) - 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the bit mask of 0s\n    bit_mask = 0\n    # Loop through each bit from right to left\n    for i in range(32, -1, -1):\n        # If the rightmost bit is 0, set the leftmost bit to 1 and break out of the loop\n        if n & (1 << i) == 0:\n            n |= 1 << i\n            break\n    # Return the modified number\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs, and returns the volume of the cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 # calculate the area of the cone using the formula pi*r^2\n    volume = area * h # calculate the volume using the formula area*height\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    max_power = 0\n    power = 1\n    \n    # loop through numbers until max power found\n    while power <= n:\n        if power == 2**(int(math.log2(power))+1):\n            max_power = power\n        power *= 2\n        \n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest = 0\n    while n > 1:\n        highest += 1\n        n >>= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to hold the highest power of 2\n    highest = 1\n    \n    # Loop until we find the highest power of 2\n    while highest <= n:\n        # Check if the current power of 2 is greater than n\n        if highest * 2 > n:\n            # If it is, exit the loop\n            break\n        # If it is less than or equal to n, update the highest variable\n        else:\n            highest *= 2\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    power = 0\n    current_number = 2\n\n    # Loop until current_number is greater than n\n    while current_number <= n:\n        power += 1\n        current_number *= 2\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    while n > highest:\n        highest = 2**highest\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n <= 0: \n        return None\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n        if n == 0:\n            return 1 << (n + 1) - 1\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found to be 1\n    max_power = 1\n    \n    # Loop through each power of 2 from 2 to n\n    for i in range(2, n+1):\n        # Check if the current power of 2 is greater than max_power\n        if i > max_power:\n            # If it is, update max_power to the current power of 2\n            max_power = i\n    \n    return max_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]  # initialize the list with the first two numbers in the sequence\n    for i in range(2, n+1):  # loop for n-1 iterations\n        lucas.append(lucas[i-1] + lucas[i-2])  # add the sum of the previous two numbers to the list\n    return lucas[n]  # return the nth number in the sequence"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Use a dictionary comprehension to convert the lists into nested dictionaries.\n    nested_dict = {key: value for key, value in zip(l1, l2)}\n    \n    # Add the third list as a value to the nested dictionary.\n    nested_dict.update({l3[0]: l3[1]})\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # loop through each list in the input list\n    for i in range(len(l1)):\n        # add the values of the list to the corresponding key in the nested dictionary\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for l in lists:\n        for i in range(len(l)):\n            if isinstance(l[i], list):\n                if l[i] not in result:\n                    result[l[i]] = []\n                result[l[i]].append(i)\n            else:\n                result[l[i]] = i\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # initialize an empty dictionary to store the results\n    result = {}\n    \n    # iterate over each list and append the elements to the appropriate key in the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = [l2[i], l3[i]]\n        \n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to dictionary\n    d = {i:l1[i] for i in range(len(l1))}\n    \n    # Convert the second list to nested dictionary\n    for i in range(len(l2)):\n        d2 = {}\n        for j in range(len(l2[i])):\n            d2[l2[i][j]] = l2[i][j+1]\n        d[i+1] = d2\n    \n    # Convert the third list to nested dictionary\n    for i in range(len(l3)):\n        d3 = {}\n        for j in range(len(l3[i])):\n            d3[l3[i][j]] = l3[i][j+1]\n        d[i+2] = d3\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create a dictionary to store the converted data\n    converted_data = {}\n    # Iterate through each list and convert it to a nested dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            # If the item is a list, recursively call the function\n            if isinstance(item, list):\n                item = convert_list_dictionary(*item)\n            # Convert the item to a key-value pair in the dictionary\n            key = \"item_\" + str(i) + \"_\" + str(lst.index(item))\n            converted_data[key] = item\n    # Return the converted data as a nested dictionary\n    return converted_data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize empty dictionary to store the nested dictionary\n    result = {}\n    # loop through the first list\n    for i in range(len(l1)):\n        # loop through the second list\n        for j in range(len(l2)):\n            # loop through the third list\n            for k in range(len(l3)):\n                # create a dictionary with keys as the values from the second list and values as the values from the third list\n                nested_dict = {l2[j]: l3[k]}\n                # add the first list value as key and the nested dictionary as value in the outer dictionary\n                result[l1[i]] = nested_dict\n    # return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of floats.\n\n    Returns:\n        dict: Nested dictionary where the keys are the lists and the values are their corresponding values from the input lists.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate([l1, l2, l3]):\n        if i == 0:\n            result[\"list1\"] = lst\n        elif i == 1:\n            result[\"list2\"] = lst\n        else:\n            result[\"list3\"] = lst\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the converted data\n    data = {}\n    \n    # loop through the first list\n    for i in range(len(l1)):\n        # loop through the second list\n        for j in range(len(l2)):\n            # loop through the third list\n            for k in range(len(l3)):\n                # add the current values to the dictionary\n                if l1[i] in data:\n                    data[l1[i]][l2[j]][l3[k]] = l1[i]\n                else:\n                    data[l1[i]] = {l2[j]: {l3[k]: l1[i]}}\n    \n    # return the converted dictionary\n    return data"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    # Base case: if n is 1, the maximum sum is 1\n    if n == 2:\n        return 2\n    \n    # Recursive case:\n    # Calculate the maximum sum using the given equation\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    left_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    right_sum = get_max_sum(n-1)\n    \n    # Return the maximum of the two sums\n    return max(left_sum, right_sum)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n\n    elif n == 2:\n        return 3\n\n    else:\n        max_sum = 0\n        for i in range(1, n+1):\n            max_sum = max(max_sum, i*get_max_sum(n-i))\n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    \n    # base case: n = 1 or 2\n    if n == 1 or n == 2:\n        return n\n    \n    # recursive case: n > 2\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        # base case\n        if n % 5 == 0:\n            return n\n        else:\n            # recursive case\n            sum1 = get_max_sum(n//5) + n//5 + n//5**2 + n//5**3 + n//5**4\n            sum2 = get_max_sum(n//5) + n//5 + n//5**2 + n//5**3 + n//5**4 + n\n            if sum1 > sum2:\n                return sum1\n            else:\n                return sum2"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 24\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as an input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for item in input_list[1:]:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_length = 0\n    \n    # Iterate over each element in the list\n    for i in range(len(input_list)):\n        # If the current length of the list is greater than the current maximum, update the maximum length\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    \n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_index = 0\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n    \n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with the maximum length.\n\n    Args:\n        input_list (list): A list of items to consider.\n\n    Returns:\n        list: The list with the maximum length.\n    \"\"\"\n    max_len = len(input_list[0])\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # initialize max_length with the first element of the list\n    max_length = len(input_list[0])\n\n    # iterate through the rest of the elements of the list\n    for i in range(1, len(input_list)):\n        # calculate the length of the current element\n        length = len(input_list[i])\n        # update max_length if the current element is longer than max_length\n        if length > max_length:\n            max_length = length\n\n    # return the list with the maximum length\n    return input_list[max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    max_length = max(lengths)\n    index_max_length = lengths.index(max_length)\n    return input_list[index_max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique values in the tuple\n    unique_vals = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_vals) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements in test_tup\n    unique_set = set(test_tup)\n    # check if len(unique_set) == len(test_tup) (which means no duplicates were found)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count_dict = {}\n    for char in str1:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    \n    for char in str1:\n        if count_dict[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(s):\n    seen = {}\n    for c in s:\n        if c in seen:\n            del seen[c]\n        else:\n            seen[c] = True\n    return next(iter(seen)) if seen else None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there are no non-repeating characters in the string, it returns None.\n    '''\n    # Create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    \n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through the dictionary and find the first non-repeating character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    char: The first non-repeated character in the string.\n\n    Example:\n    >>> first_non_repeating_character(\"aabccde\")\n    'a'\n    >>> first_non_repeating_character(\"leetcode\")\n    'e'\n    >>> first_non_repeating_character(\"aabbccddeeffg\")\n    'e'\n    '''\n\n    # Create a dictionary to store the frequency of characters in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first non-repeated character in the dictionary\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n\n    # If all characters have frequency 1, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # Loop through the dictionary to find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string.\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the frequency dictionary and find the first non-repeated character.\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeated character is found, return None.\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(r'^[a-z]$|^([a-z]).*\\1$', string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string or len(string) > 1:\n        return False\n    return re.match(regex, string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    This function checks whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle = len(numbers) // 2\n\n    # If the middle number is odd, return the middle number\n    if len(numbers) % 2 == 1:\n        return numbers[middle]\n    # If the middle number is even, return the average of the two middle numbers\n    else:\n        return (numbers[middle-1] + numbers[middle]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median based on the length of the list\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the list is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the length of the list is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[middle_index]\n\n    # If the length of the list is even, the median is the average of the middle two numbers\n    else:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    # Calculate the middle number\n    mid = len(sorted_list) // 2\n\n    # Check if the middle number is odd or even\n    if len(sorted_list) % 2 == 0:\n        # If the middle number is even, return the average of the two middle numbers\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        # If the middle number is odd, return the middle number itself\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Find the middle index of the sorted list\n    mid = len(sorted_list) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_list) % 2 == 1:\n        median = sorted_list[mid]\n\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        mid1 = mid - 1\n        mid2 = mid\n        median = (sorted_list[mid1] + sorted_list[mid2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted numbers\n    mid_index = len(numbers) // 2\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid_index - 1] + numbers[mid_index]) / 2\n    else:\n        median = numbers[mid_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, we sort the three numbers in ascending order\n    a_sorted = sorted([a,b,c])\n    \n    # Then, we find the indices of the middle number and the two neighboring numbers\n    mid_index = len(a_sorted)//2\n    if len(a_sorted)%2 == 0:\n        # If there are even numbers in the list, we take the average of the two middle numbers\n        median = (a_sorted[mid_index-1] + a_sorted[mid_index]) / 2\n    else:\n        # If there are odd numbers in the list, we take the middle number\n        median = a_sorted[mid_index]\n    \n    # Finally, we return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index and the sum of the middle two numbers\n    middle_index = len(sorted_numbers) // 2\n    middle_sum = sum(sorted_numbers[middle_index - 1:middle_index + 2])\n\n    # Calculate the median of the three numbers by comparing the middle sum to the sum of the sorted numbers\n    if middle_sum < sum(sorted_numbers):\n        return sorted_numbers[middle_index]\n    else:\n        return sorted_numbers[middle_index - 1]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    a = float(a)\n    b = float(b)\n    c = float(c)\n\n    if a > b and a > c:\n        if b > c:\n            return (a + c) / 2\n        else:\n            return (a + b) / 2\n    elif b > a and b > c:\n        if a > c:\n            return (b + c) / 2\n        else:\n            return (b + a) / 2\n    else:\n        if a > b:\n            return (c + b) / 2\n        else:\n            return (c + a) / 2\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Define a function to compute the sum of digits of a number\n    def sum_of_digits_of_num(num):\n        return sum(int(digit) for digit in str(num))\n    \n    # Compute the sum of digits of each number in the given list\n    total = 0\n    for num in nums:\n        total += sum_of_digits_of_num(num)\n    \n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Iterate through each digit in the list and add it to the total sum\n        for digit in digits:\n            total_sum += digit\n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = list(str(num))\n        total = 0\n        for digit in digits:\n            total += int(digit)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        num_str = str(num)  # convert the number to a string\n        digit_sum = 0\n        for digit in num_str:\n            digit_sum += int(digit)  # convert the digit to an integer and add to the sum\n        total_sum += digit_sum  # add the digit sum to the total sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize sum of digits to zero\n    sum_of_digits = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        \n        # loop through each digit in the string\n        for digit in num_str:\n            # convert the digit to an integer and add it to the sum of digits\n            sum_of_digits += int(digit)\n            \n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digits_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digits = [int(d) for d in num_str]\n        digits_sum += sum(digits)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables\n    result = ()\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # bitwise xor the current element with the corresponding element in the second tuple\n        result = result + ((test_tup1[i] ^ test_tup2[i]),)\n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # create a new tuple to hold the result of the bitwise xor operation\n    result_tup = ()\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation between the corresponding elements of the tuples\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # return the result of the bitwise xor operation\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1), len(test_tup2)):\n            result_tup += (test_tup2[i],)\n    elif len(test_tup2) > len(test_tup1):\n        for i in range(len(test_tup2), len(test_tup1)):\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # iterate through each element in the tuple\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the elements\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    \n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # perform bitwise xor operation between the corresponding elements of the tuples\n        bitwise_xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # append the bitwise xor result to the result tuple\n        result_tup += (bitwise_xor_result,)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n\n    # initialize a variable to store the result\n    result = []\n\n    # loop through each element in the tuples\n    for elem1, elem2 in zip(tup1, tup2):\n        # perform the bitwise xor operation\n        xor_result = elem1 ^ elem2\n\n        # add the result to the result list\n        result.append(xor_result)\n\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # Create a dictionary to store the count of each tuple in the list\n    freq_dict = {}\n    # Iterate over each element in the list\n    for elem in test_list:\n        # If the current element is a tuple, add it to the dictionary with a count of 1\n        if isinstance(elem, tuple):\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) not in count_dict:\n                count_dict[(test_list[i], test_list[j])] = 1\n            else:\n                count_dict[(test_list[i], test_list[j])] += 1\n    return len(count_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store the unique tuples\n    unique_tuples = set()\n    # Iterate over the list and add each tuple to the set\n    for i in test_list:\n        unique_tuples.add(tuple(i))\n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if (item,) in freq:\n            freq[(item,)]['count'] += 1\n        else:\n            freq[(item,)] = {'count': 1}\n    return sum(freq.values(), [])"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples should have the same length.\"\n\n    # Initialize the result tuple\n    result_tup = []\n\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the tuples and store the result in the result tuple\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # base case: if both tuples are empty, return empty tuple\n    if not test_tup1 and not test_tup2:\n        return ()\n    \n    # recursive case: add first element of first tuple to first element of second tuple, then call the same function recursively for remaining elements in both tuples\n    else:\n        return (test_tup1[0] + test_tup2[0],) + add_nested_tuples(test_tup1[1:], test_tup2[1:])"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('Both inputs must be tuples.')\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements.')\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            raise TypeError('Both elements in the tuple must be tuples.')\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            raise ValueError('All elements in each tuple must have the same number of elements.')\n        for j in range(len(test_tup1[i])):\n            result_tup += ((test_tup1[i][j] + test_tup2[i][j],),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    # Initialize a new tuple with the same length as the input tuples\n    new_tup = (0,) * len(test_tup1)\n    # Loop through each element of both input tuples and add the corresponding elements\n    for i in range(len(test_tup1)):\n        new_tup[i] = test_tup1[i] + test_tup2[i]\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty result list\n    result = []\n    # loop through each tuple in the input tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # check if the length of the tuple is same, if not raise an error\n        if len(tup1)!= len(tup2):\n            raise ValueError(\"Both tuples should have same length\")\n        # initialize an empty sub result list\n        sub_result = []\n        # loop through each element in each tuple\n        for i in range(len(tup1)):\n            # add the two elements and append to the sub result list\n            sub_result.append(tup1[i] + tup2[i])\n        # append the sub result list to the result list\n        result.append(sub_result)\n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(temp)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result_list = []\n\n    # Iterate through each tuple element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two input tuples\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Convert the result list into a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new list to store the result\n    result = []\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a new list to store the current element's addition\n        current_sum = []\n\n        # Loop through each element of the current tuple\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements and add it to the current_sum list\n            current_sum.append(test_tup1[i][j] + test_tup2[i][j])\n\n        # Append the current_sum list to the result list\n        result.append(current_sum)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Args:\n        a (int): the first number\n        b (int): the second number\n\n    Returns:\n        int: the minimum of a and b\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments a and b and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} found in {tuple1}\")\n            return True\n    print(f\"{element} not found in {tuple1}\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists in {tuplex}\")\n    else:\n        print(f\"{tuple1} does not exist in {tuplex}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in tuple1\")\n    else:\n        print(f\"{tuplex} does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"The element\", tuplex, \"exists in the tuple\") \n    else: \n        print(\"The element\", tuplex, \"does not exist in the tuple\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # calculate the parity using the modulo operator\n    parity = x % 2\n    \n    # check if the parity is odd or even\n    if parity == 1:\n        # if it's odd, return True\n        return True\n    else:\n        # if it's even, return False\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        print(\"The parity of\",x,\"is even\") \n    else: \n        print(\"The parity of\",x,\"is odd\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(f'{x} is even.')\n    else:\n        print(f'{x} is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0:\n        parity += x % 2\n        x = x // 2\n    if parity % 2 == 1:\n        return \"The parity of {} is odd\".format(x)\n    else:\n        return \"The parity of {} is even\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num = str(n)\n    # Find the length of the number\n    length = len(num)\n    # Initialize an empty list to store the digits\n    digits = []\n    # Iterate through the digits of the number\n    for digit in num:\n        # Append the digit to the list if it's bigger than the previous digit\n        if len(digits) > 0 and int(digit) > int(digits[-1]):\n            digits.append(digit)\n        # If the digit is the same as the previous digit, ignore it\n    while digits and len(digits) < length:\n        digits.pop()\n    # Convert the list of digits back to a string\n    next_num = ''.join(digits)\n    # Return the next bigger number\n    return int(next_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize a list to store the digits of the given number\n    digits = [int(d) for d in str(n)]\n    # reverse the digits of the number\n    digits.reverse()\n    # convert the digits to a string\n    digits = ''.join(str(d) for d in digits)\n    # initialize a variable to store the next bigger number\n    next_bigger = 0\n    # loop through the digits of the number\n    for digit in digits:\n        # convert the digit to an integer\n        digit = int(digit)\n        # add the digit to the next bigger number\n        next_bigger += digit * 10**(len(digits)-digits.index(digit))\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Reverse the list of digits\n    digits.reverse()\n    \n    # Find the length of the digits list\n    length = len(digits)\n    \n    # If the length of the digits list is 1, the next bigger number is 10\n    if length == 1:\n        return 10\n    \n    # Initialize variables to keep track of the digits of the new number and the carry value\n    new_digits = []\n    carry = 0\n    \n    # Loop through the digits list from right to left\n    for digit in digits:\n        # If the current digit is 9, add a carry and reset the digit to 0\n        if digit == 9:\n            new_digits.append(carry)\n            carry = 1\n        else:\n            # Add the current digit to the new_digits list\n            new_digits.append(digit)\n    \n    # If there is a carry left over, append it to the new_digits list\n    if carry:\n        new_digits.append(carry)\n    \n    # Reverse the new_digits list to get the final result\n    result = int(''.join(map(str, new_digits[::-1])))\n    \n    # If the new number is greater than or equal to 10, increment it by 1 and return it\n    while result >= 10:\n        result -= 10\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the next bigger number to None\n    next_bigger = None\n\n    # loop through each digit of the given number\n    for digit in str(n):\n        # create a new number with the digit rearranged and compare it to the current next bigger number\n        new_num = int(str(digit)[::-1])\n        if new_num > n:\n            # if the new number is greater than the current next bigger number, update the next bigger number\n            next_bigger = new_num\n\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Define a list of digits from 0 to 9\n    digits = list(range(10))\n    # Define a variable to hold the reversed digits\n    reversed_digits = []\n    # Iterate through the digits of the given number\n    for digit in str(n):\n        # Append the digit to the reversed_digits list\n        reversed_digits.append(digits.index(int(digit)))\n    # Reverse the reversed_digits list\n    reversed_digits.reverse()\n    # Create a string from the reversed_digits list\n    result = ''.join(str(digit) for digit in reversed_digits)\n    # Convert the result string to an integer\n    result = int(result)\n    # Add 1 to the result to create the next bigger number\n    result += 1\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    biggest = max(digits)\n    # Find the index of the largest digit\n    index = digits.index(biggest)\n    # Reverse the digits to create the next bigger number\n    digits[index] *= -1\n    # Reverse the list of digits\n    digits.reverse()\n    # Convert the list of digits back to a string\n    result = ''.join([str(d) for d in digits])\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    s = str(n)\n    \n    # find the index of the first digit that is smaller than its neighbors\n    index = 0\n    while index < len(s) - 1 and s[index] >= s[index+1]:\n        index += 1\n        \n    # create a new string by swapping the digits at the given index and the first neighbor\n    if index == 0:\n        new_s = s[:index] + s[index+1:] + s[:index]\n    else:\n        new_s = s[:index] + s[index+1:index+2] + s[index] + s[index+2:]\n        \n    # convert the new string back to an integer\n    new_n = int(new_s)\n    \n    # return the new number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    digits.remove(max_digit)\n    \n    for i in range(len(digits)):\n        if digits[i] < max_digit:\n            digits[i], digits[max_digit - 1] = digits[max_digit - 1], digits[i]\n            break\n    \n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize an empty string to store the new number\n    new_num_str = \"\"\n\n    # Iterate over each digit in the original number\n    for digit in num_str:\n        # If the digit is a 0, add a 9 to the new number\n        if int(digit) == 0:\n            new_num_str += \"9\"\n        # If the digit is a 1, add a 0 to the new number\n        elif int(digit) == 1:\n            new_num_str += \"0\"\n        # If the digit is a 2, add a 2 to the new number\n        elif int(digit) == 2:\n            new_num_str += \"2\"\n        # If the digit is a 3, add a 3 to the new number\n        elif int(digit) == 3:\n            new_num_str += \"3\"\n        # If the digit is a 4, add a 4 to the new number\n        elif int(digit) == 4:\n            new_num_str += \"4\"\n        # If the digit is a 5, add a 5 to the new number\n        elif int(digit) == 5:\n            new_num_str += \"5\"\n        # If the digit is a 6, add a 6 to the new number\n        elif int(digit) == 6:\n            new_num_str += \"6\"\n        # If the digit is a 7, add a 7 to the new number\n        elif int(digit) == 7:\n            new_num_str += \"7\"\n        # If the digit is a 8, add a 8 to the new number\n        elif int(digit) == 8:\n            new_num_str += \"8\"\n\n    # Convert the new number string back to an integer\n    new_num = int(new_num_str)\n\n    # Add 1 to the new number to get the next bigger number\n    return new_num + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # get the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # reverse the order of the digits\n    digits.reverse()\n\n    # reverse the order of the digits again if the result is not the same as the original number\n    while digits!= str(n):\n        digits.reverse()\n\n    # convert the reversed digits back to a number\n    result = int(''.join(str(digit) for digit in digits))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of smallest elements\n    min_heap = []\n\n    # Create a dictionary to store the indices of the elements in the arrays\n    indices = {}\n\n    # Add the first element from the first array to the min heap\n    heapq.heappush(min_heap, (0, 0, nums1[0]))\n\n    # Add the first element from the second array to the indices dictionary\n    indices[nums1[0]] = 0\n\n    # Iterate through the remaining elements in the arrays\n    for i in range(1, len(nums1)):\n        # Find the pair of smallest elements with the current element from the first array\n        while min_heap and nums1[i] > min_heap[0][2]:\n            # Pop the smallest pair from the heap\n            pair = heapq.heappop(min_heap)\n            # Add the pair to the result if the result size is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, pair)\n\n        # Add the current element from the second array to the indices dictionary\n        indices[nums1[i]] = i\n\n        # Add the pair (current element, smallest element from the current array) to the min heap\n        heapq.heappush(min_heap, (i, nums1[i], nums1[i]))\n\n    # Iterate through the remaining elements in the min heap\n    result = []\n    while min_heap and len(result) < k:\n        # Pop the smallest pair from the heap\n        pair = heapq.heappop(min_heap)\n        # Add the pair to the result\n        result.append(pair)\n\n    # Extract the smallest k pairs from the result\n    pairs = [(nums2[indices[pair[0]]], pair[2]) for pair in result]\n\n    # Return the smallest k pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # initialize min_heap\n    min_heap = []\n\n    # loop through each element from nums1\n    for num1 in nums1:\n\n        # loop through each element from nums2\n        for num2 in nums2:\n\n            # add a tuple (num1, num2) to min_heap\n            heapq.heappush(min_heap, (min(num1, num2), num1, num2))\n\n            # if the size of min_heap is greater than k, remove the smallest element and continue\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # initialize result\n    result = []\n\n    # loop through min_heap and extract the pairs\n    while min_heap:\n        _, num1, num2 = heapq.heappop(min_heap)\n        result.append((num1, num2))\n\n    # return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap1 = []\n    heap2 = []\n    pairs = []\n    count = 0\n    \n    # add elements to heap1 and heap2\n    for num1 in nums1:\n        heapq.heappush(heap1, -num1)\n    for num2 in nums2:\n        heapq.heappush(heap2, -num2)\n    \n    # find k smallest pairs\n    while count < k:\n        if len(heap1) > 0 and len(heap2) > 0:\n            pair = (heapq.heappop(heap1), heapq.heappop(heap2))\n            pairs.append(pair)\n            count += 1\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through both arrays and insert each element into the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    # Initialize variables for minimum sum and indices of minimum sum\n    min_sum = float('inf')\n    min_indices = None\n\n    # Iterate through the heap until k pairs have been found\n    while k > 0:\n        # Get the smallest element from the heap\n        current_sum, current_indices = heapq.heappop(min_heap)\n\n        # If the current sum is less than the minimum sum, update the minimum sum and indices\n        if current_sum < min_sum:\n            min_sum = current_sum\n            min_indices = current_indices\n            k -= 1\n\n    # Return the indices of the minimum sum\n    if min_indices:\n        return min_indices\n    else:\n        return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    \n    # Create a min heap of the second array\n    min_heap2 = []\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through k pairs and add them to the result list\n    while k > 0:\n        # Get the minimum element from the two heaps\n        if len(min_heap) > len(min_heap2):\n            result.append(heapq.heappop(min_heap))\n        else:\n            result.append(heapq.heappop(min_heap2))\n        \n        # Decrement k by 1\n        k -= 1\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    heap = []\n    \n    for num1 in nums1:\n        heapq.heappush(heap, (-num1, None))\n        \n    for num2 in nums2:\n        if heap:\n            curr_diff = -heapq.heappop(heap)[0]\n        else:\n            curr_diff = None\n        \n        if curr_diff is None or curr_diff > num2:\n            heapq.heappush(heap, (-num2, num1))\n            \n        if len(pairs) < k:\n            pairs.append((heapq.heappop(heap)[1], num2))\n            \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heappush(pq, (num1 + num2, (num1, num2)))\n            if len(pq) > k:\n                heappop(pq)\n    return [heappop(pq) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Loop through the first array\n    for num1 in nums1:\n        # If the min heap has less than k elements, add the current element to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        # If the min heap has more than or equal to k elements, compare the current element with the smallest element in the heap\n        else:\n            if num1 < heapq.heappop(min_heap):\n                heapq.heappush(min_heap, num1)\n                \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Loop through the second array\n    for num2 in nums2:\n        # If the min heap has less than k elements, add the current element to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num2)\n        # If the min heap has more than or equal to k elements, compare the current element with the smallest element in the heap\n        else:\n            if num2 < heapq.heappop(min_heap):\n                heapq.heappush(min_heap, num2)\n                \n    # Create a list to store the k smallest pairs\n    result = []\n    \n    # Loop through the first array again\n    for num1 in nums1:\n        # Loop through the second array again\n        for num2 in nums2:\n            # If the sum of the current element and the smallest element in the min heap is equal to the target, add the pair to the result list\n            if num1 + num2 == min_heap[0]:\n                result.append((num1, num2))\n                # If the min heap has less than k elements, add the current element to the heap\n                if len(min_heap) < k:\n                    heapq.heappush(min_heap, num1)\n                # If the min heap has more than or equal to k elements, compare the current element with the smallest element in the heap\n                else:\n                    if num1 < heapq.heappop(min_heap):\n                        heapq.heappush(min_heap, num1)\n                    \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # create a min heap to store the pairs\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], (i, j)))\n\n    # sort the pairs in non-decreasing order of values\n    pairs.sort()\n\n    # extract the k smallest pairs\n    result = []\n    for _ in range(k):\n        value, pair = pairs.pop()\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a priority queue to store the minimum element of the first and second arrays\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n\n    # Create another priority queue to store the maximum element of the second array\n    max_heap = []\n    for num in nums2:\n        heapq.heappush(max_heap, num)\n\n    # Initialize the answer list\n    ans = []\n\n    # Iterate over k elements\n    for _ in range(k):\n        # Find the minimum element of the first array and the maximum element of the second array\n        min_val = -heapq.heappop(min_heap)\n        max_val = heapq.heappop(max_heap)\n\n        # Add the minimum element and the maximum element of the second array to the answer list\n        ans.append([min_val, max_val])\n\n        # Update the minimum element of the first array to be the maximum of the minimum element of the first array and the current minimum element\n        heapq.heappush(min_heap, -max(min_val, -heapq.heappop(min_heap)))\n\n    return ans"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[1]) # sort the list by the second element of each tuple\n    result = 1 # initialize the minimum product to 1\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] # compute the product of the first elements of each tuple\n            if product < result: # update the minimum product if the product is smaller\n                result = product\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize minimum product and counter to 0\n    min_product = 0\n    count = 0\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Initialize current product and counter to 0\n        current_product = 1\n        current_count = 1\n        \n        # Iterate through each tuple in the list starting from the next index\n        for j in range(i+1, len(list1)):\n            # Calculate the current product and increment the counter\n            current_product *= list1[j]\n            current_count += 1\n            \n            # If the current product is less than the minimum product, update the minimum product and counter\n            if current_product < min_product:\n                min_product = current_product\n                count = current_count\n    \n    # Return the minimum product and counter\n    return min_product, count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input,\n    and returns the minimum product of any two tuples in the list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('The list must have at least two tuples.')\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of all pairs of tuples in the list.\n    '''\n    \n    # initialize variables\n    min_product = float('inf')\n    product = 1\n    \n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            # calculate the product of the current tuple and its neighboring tuple\n            temp_product = list1[i][0] * list1[j][1]\n            \n            # check if the current product is smaller than the minimum product so far\n            if temp_product < min_product:\n                min_product = temp_product\n                product = temp_product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    list1.sort(key=lambda x: (x[1], x[0]))\n\n    # Initialize variables to keep track of minimum and maximum products\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Loop through the sorted list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0]\n            # Update the minimum and maximum products if necessary\n            min_product = min(min_product, product)\n            max_product = max(max_product, product)\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples based on the second element in each tuple\n    sorted_list = sorted(list1, key=lambda x: x[1])\n    \n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n    \n    # Iterate through the sorted list and calculate the minimum product\n    for i in range(len(sorted_list)):\n        product = sorted_list[i][0] * sorted_list[i+1][0]\n        min_product = min(min_product, product)\n        \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(list1)\n    \n    # Initialize variables for the minimum and maximum products\n    min_product = sorted_list[0][0] * sorted_list[0][1]\n    max_product = sorted_list[0][0] * sorted_list[0][1]\n    \n    # Loop through the sorted list\n    for i in range(1, len(sorted_list)):\n        # Calculate the minimum product between the first and second tuple\n        min_product = min(min_product, sorted_list[i][0] * sorted_list[i][1])\n        \n        # Calculate the maximum product between the first and second tuple\n        max_product = max(max_product, sorted_list[i][0] * sorted_list[i][1])\n        \n        # If the maximum product is less than the minimum product, then the minimum product is the maximum product\n        if max_product < min_product:\n            min_product = max_product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return \"Error: Empty list.\"\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    if isinstance(listval[0], (int, float)):\n        return min(listval)\n    else:\n        return min_val(listval[0])"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to be the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the list and compare each value to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_num = listval[0]  # assuming the first element is the minimum\n    \n    for i in range(len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n            \n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:  # check if list is empty\n        return None\n    min_val = listval[0]  # initialize minimum value to first element\n    for i in range(1, len(listval)):  # iterate over list and compare elements\n        if min_val > listval[i]:\n            min_val = listval[i]  # update minimum value if current element is smaller\n    return min_val  # return minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    pattern = r'(?<!^)(?=[A-Z])'\n    return re.sub(pattern, lambda match: '_' + match.group(0).lower(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += '_' + letter.lower()\n    return camel_case.lstrip('_')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n\n    Args:\n        word: The snake case string to convert to camel case.\n\n    Returns:\n        The camel case string.\n    '''\n    # Split the word into words using a regular expression\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Capitalize the first letter of each word and join them back together\n    return ''.join([word[0].upper() + word[1:] for word in words])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscores as delimiters\n    words = word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Combine the words with camel case\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\w+', word)\n    # Convert the first letter of each word to uppercase and join them with an underscore\n    camel_case = '_'.join([word.capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n\n    # Convert the first letter to uppercase\n    words[0] = words[0].upper()\n\n    # Convert the rest of the words to lowercase\n    for i in range(1, len(words)):\n        words[i] = words[i].lower()\n\n    # Join the words with underscores\n    return '_'.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.)', re.IGNORECASE)\n    return pattern.sub(lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    # join the words back together\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'[A-Z]'\n    words = re.findall(pattern, word)\n    camel_words = []\n    for word in words:\n        camel_words.append(word.lower())\n        camel_words.append(word.upper())\n    camel_word = ''.join(camel_words)\n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return lst[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return list1[0]\n    else:\n        return extract_nth_element(list1[1:], n - 1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        if n > len(list1) or n < 1:\n            raise ValueError(\"n must be between 1 and the length of the list\")\n        return list1[n-1]\n    except IndexError:\n        print(\"IndexError: n is greater than the length of the list\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n and returns the nth element from the list.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input\n    and returns the nth element of the list as a tuple.\n    '''\n    if len(list1) == 0 or n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        return list1[n][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences (lists) as input and returns True if there is any value in the first list that exists in the second list or False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in a list1 exists in list2 or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n    # convert the input lists to sets to avoid duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if any value in the first set exists in the second set\n    if any(value in set2 for value in set1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    # Create a set of all values in list1\n    unique_list1 = set(list1)\n    # Iterate through list2 and check if any value exists in list1\n    for value in list2:\n        if value in unique_list1:\n            print(value, \"exists in both lists\")\n            return\n    print(\"No values found in both lists\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Create a set of the values in list2 to eliminate duplicates and ensure O(1) complexity\n    set2 = set(list2)\n\n    # Loop through list1 to check if any value exists in set2\n    for value in list1:\n        if value in set2:\n            return True\n\n    # If no values in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:  \n        if i in list2:  \n            print(\"Value exists in both lists\")  \n            return  \n        else:  \n            print(\"Value does not exist in both lists\")  \n            continue  \n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n    if max1 == float('-inf'):\n        return None\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf') # initialize max product to negative infinity\n    max_pair = (-1, -1) # initialize max pair to (-1, -1)\n\n    # loop through each element in the array\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            # calculate the product of the current pair and the next element in the array\n            product = arr[i] * arr[j]\n\n            # if the product is greater than max_product, update both max_product and max_pair\n            if product > max_product: \n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    # return the max product and max pair\n    return max_product, max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize variables\n    max_pair = (float('-inf'), float('-inf')) # initialize max_pair as negative infinity\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the product of two elements is greater than max_pair\n            if arr[i] * arr[j] > max_pair[0]:\n                max_pair = (arr[i] * arr[j], arr[i]) # update max_pair if product is greater\n    \n    # Return the maximum product pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize maximum and minimum values\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    # Loop through the array and update maximum and minimum values\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Return the pair with the highest product\n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0] * arr[1]\n    min1 = arr[0]\n    min2 = arr[0] * arr[1]\n    for i in range(1, len(arr)):\n        temp = max1\n        max1 = max(max1*arr[i], max2*arr[i], min1*arr[i], min2*arr[i])\n        max2 = temp\n        \n        temp = min1\n        min1 = min(max1*arr[i], max2*arr[i], min1*arr[i], min2*arr[i])\n        min2 = temp\n        \n    if max1 > max2:\n        return (max1, max2)\n    else:\n        return (max2, max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables for max product and current product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Traverse through the array and update max product and current product\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n        if curr_product < 0:\n            curr_product = 1\n\n    # Return the pair with highest product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1, max2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return (max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.append(tup[0])\n    return common_elements\n\nInput = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (5, 6, 7)]\nprint(group_tuples(Input))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for item in Input:\n        common_element = [i for i in common_element if i!= item[0]] + [item[0]]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n\n        # If the first element of the tuple is in the dictionary, increment the count for that element\n        if tup[0] in common_dict:\n            common_dict[tup[0]] += 1\n\n        # Otherwise, add the first element to the dictionary with a count of 1\n        else:\n            common_dict[tup[0]] = 1\n\n    # Initialize an empty list to store the common elements\n    common_list = []\n\n    # Loop through each key in the dictionary\n    for key in common_dict:\n\n        # If the count for the key is greater than 1, add the key to the list\n        if common_dict[key] > 1:\n            common_list.append(key)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = None\n    for tuple in Input:\n        if common_elem is None:\n            common_elem = tuple[0]\n        else:\n            if tuple[0] == common_elem:\n                pass\n            elif tuple[0] < common_elem:\n                common_elem = tuple[0]\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append((Input[i][0], [Input[i], Input[j]]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_element = []\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                Common_element.append((Input[i][0], Input[i][1], Input[j][1]))\n    return Common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the count of elements in each tuple\n    count_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        \n        # If the element is already in the dictionary, increment its count\n        if first_elem in count_dict:\n            count_dict[first_elem] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count_dict[first_elem] = 1\n    \n    # Create an empty list to store the common elements\n    common_elems = []\n    \n    # Iterate through the dictionary and find the common elements\n    for key, value in count_dict.items():\n        # If the count is greater than 1, add the element to the common elements list\n        if value > 1:\n            common_elems.append(key)\n    \n    # Return the common elements list\n    return common_elems"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    group_dict = {}\n    for i in range(len(Input)):\n        if Input[i][0] not in group_dict:\n            group_dict[Input[i][0]] = 1\n        else:\n            group_dict[Input[i][0]] += 1\n    common_elem = None\n    for key, value in group_dict.items():\n        if value > 1 and (common_elem is None or common_elem[0] < key):\n            common_elem = (key, value)\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if Input[i][0] not in common_element:\n                    common_element.append(Input[i][0])\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element whose length is the maximum.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element that has the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    \n    for elem in lst:\n        length = len(elem)\n        if length > max_length:\n            max_length = length\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_val = i\n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(map(round, list1))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Calculate the total sum of the numbers in the list\n    total_sum = sum(list1)\n\n    # Loop through each number in the list and round it\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Multiply the total sum by the length of the list and print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize variables for sum and length\n    total_sum = 0\n    length = len(list1)\n    \n    # Loop through the list and round each number\n    for i in range(length):\n        list1[i] = round(list1[i])\n    \n    # Loop through the list again and add up all rounded numbers\n    for num in list1:\n        total_sum += num\n        \n    # Print the total sum multiplied by the length of the list\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing the sum variable\n    cube_sum = 0\n\n    # Looping through the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        cube_sum += i*i*i\n\n    # Returning the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n        count += 1\n    print(\"Cube sum of first\", n, \"even natural numbers:\", cube_sum)\n    print(\"Number of even natural numbers:\", count)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**3\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(2, n+1, 2):\n        sum_cube += i*i*i\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables\n    total = 0\n    num = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current even natural number\n        num = i**3\n        \n        # Add the cube to the total sum\n        total += num\n        \n    return total"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): The tuple to concatenate.\n    delimiter (str): The delimiter to use between elements.\n\n    Returns:\n    str: The concatenated string of elements.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return tuple(delimiter.join(str(x) for x in tup) for tup in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='' # replace this with your desired delimiter\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)] # remove trailing delimiter"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i < len(test_tup)-1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join([str(x) for x in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return \", \".join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    result = result[:-2]\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    average = total/n  \n    return average  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    avg_of_cubes = sum_of_cubes/n  \n    return avg_of_cubes  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0  \n    for i in range(n):  \n        cube_sum += i**3  \n    return cube_sum/n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i*i*i\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count\n\nprint(find_Average_Of_Cube(10)) # Output: 2742.3086419753087"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cube = sum_cubes/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1,n+1):\n        total += i**3\n        count += 1\n        \n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current natural number\n        cube = i**3\n        # add the cube to the sum and increment the count\n        sum += cube\n        count += 1\n    # calculate and return the average of the cubes\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum_of_cubes += cube\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        rear_index.append(item[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str) and i == len(test_tuple)-1:\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n        else:\n            rear_list.append(None)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in range(len(lst)):\n        if x in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    # initialize an empty list to store the odd numbers\n    odd_numbers = []\n\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is odd, add it to the odd_numbers list\n            odd_numbers.append(num)\n\n    # return the filtered list of odd numbers\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing only the odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.search(r'\\d{4}-\\d{2}-\\d{2}', dt).group()\n    mm_dd_yyyy = yyyy_mm_dd.replace('-', '/')\n    return mm_dd_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    This function takes a date in the format yyyy-mm-dd and returns the date in the format dd-mm-yyyy.\n\n    Args:\n        dt (str): A string representing a date in the format yyyy-mm-dd.\n\n    Returns:\n        str: A string representing the date in the format dd-mm-yyyy.\n    \"\"\"\n    # Define regular expression pattern to match year, month and day of the date\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the year, month and day of the date in the string\n    match = re.search(pattern, dt)\n\n    # Check if year, month and day of the date are matched\n    if match:\n        # Extract year, month and day of the date\n        year, month, day = match.groups()\n\n        # Format the date in the desired format\n        new_date = f\"{day}-{month}-{year}\"\n\n        # Return the formatted date\n        return new_date\n    else:\n        # If year, month and day of the date are not matched, return the original date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match the date format in the given string\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all the occurrences of the pattern in the given string\n    matches = re.findall(pattern, dt)\n    # Loop through all the matches and change the date format from yyyy-mm-dd to dd-mm-yyyy\n    for match in matches:\n        # Split the date string into individual date components\n        year, month, day = match.split('-')\n        # Reconstruct the date string in dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n        # Replace the old date string with the new one\n        dt = re.sub(match, new_date, dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # convert date string to datetime object\n    dt_obj = datetime.strptime(dt, '%Y-%m-%d')\n    \n    # convert datetime object to string in desired format\n    dt_str = dt_obj.strftime('%d-%m-%Y')\n    \n    # return formatted date string\n    return dt_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(regex, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern for a valid date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.match() method to match the pattern to the input date\n    match = re.match(pattern, dt)\n    # if the input date matches the pattern, use the datetime module to convert it to dd-mm-yyyy format\n    if match:\n        from datetime import datetime\n        # convert the input date to a datetime object using the fromisoformat() method\n        dt_obj = datetime.fromisoformat(dt)\n        # use the strftime() method to format the datetime object as dd-mm-yyyy\n        formatted_dt = dt_obj.strftime('%d-%m-%Y')\n        return formatted_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the date string\n    match = re.match(pattern, dt)\n    \n    # Check if the pattern matches\n    if match:\n        # Extract the matched groups and reverse them\n        year, month, day = match.groups()\n        day, month, year = day[::-1], month[::-1], year[::-1]\n        \n        # Return the formatted date in dd-mm-yyyy format\n        return day + '-' + month + '-' + year\n    else:\n        # Return the original date string if the pattern doesn't match\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Convert the date to a datetime object and extract the day, month and year\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    day = date_obj.day\n    month = date_obj.month\n    year = date_obj.year\n\n    # Use string formatting to convert the date in the desired format\n    formatted_date = f'{day}-{month}-{year}'\n\n    # Return the formatted date\n    return formatted_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to half of the previous gap\n        gap = gap // 2\n\n        # Sort elements in the gap-sorted region\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            # Shift elements larger than temp into position\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # Insert temp into its correct position in the gap-sorted region\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        # Move the gap one position to the right\n        for i in range(gap, n):\n            # Insert the current element\n            key = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are greater than key,\n            # to one position ahead of their current position\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        # Reduce the gap\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_list.append((test_tup1[i], test_tup2[i]))\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Check if the two input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have equal lengths.\")\n\n    # Extract the elementwise and tuples from the input tuples\n    result_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n    # Initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Calculate the elementwise and of the current elements in the tuples\n        and_val = test_tup1[i] & test_tup2[i]\n        # Append the elementwise and of the current elements to the list\n        and_tuples_list.append(and_val)\n    # Return the list of elementwise and tuples\n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] & test_tup2[i]!= 0:\n                print(\"The element at index\", i, \"is\", test_tup1[i] & test_tup2[i])\n            else:\n                print(\"The element at index\", i, \"is zero\")"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # If both tuples are empty, return an empty tuple\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return ()\n    \n    # Check if one of the tuples is empty\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return ()\n    \n    # Extract the elementwise and tuples\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    # create a new tuple to store the elementwise and of the two tuples\n    result_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[tuple(a) for a in zip(test_tup1, test_tup2)]))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a*a + b*b == c*c:\n        return -b/2*a\n    else:\n        return \"Not a parabola\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return (-b - discriminant**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    denominator = (b**2) - (4*a*c)\n    if denominator == 0:\n        return None\n    else:\n        directrix = (-b + ((b**2) - (4*a*c))**0.5)/2/a\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        root1 = (-b + discriminant**(1/2))/(2*a)\n        root2 = (-b - discriminant**(1/2))/(2*a)\n\n        # Print the roots\n        print(\"The directrix is:\", root1)\n        print(\"The directrix is:\", root2)\n    else:\n        # Otherwise, the parabola has no real roots\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the coefficients of the parabola\n    d = b**2 - 4*a*c\n    \n    # Check if the parabola has a real or complex root\n    if d > 0:\n        # Find the two real roots of the parabola\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        \n        # Return the directrix as the average of the two roots\n        return (x1 + x2) / 2\n        \n    elif d == 0:\n        # The parabola has a single real root\n        return -b / (2*a)\n        \n    else:\n        # The parabola has no real roots\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta > 0:\n        directrix = (-b - (b**2 - 4*a*c)**0.5)/2/a\n    elif delta == 0:\n        directrix = -b/(2*a)\n    else:\n        directrix = None\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a, b, c: coefficients of the parabola in the form ax^2 + bx + c = 0.\n\n    Returns:\n    The directrix of the parabola.\n\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        return (-b + discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The equation does not have a real root\"\n    elif delta == 0:\n        return \"The directrix is a line\"\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return \"The directrix is x = %.2f and x = %.2f\" % (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    print(\"The directrix of the parabola is:\", x1)\n    if x2 < 0:\n        print(\"The parabola has no real roots.\")\n    else:\n        print(\"The parabola has two real roots:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    denominator = b**2 - 4*a*c\n    if denominator == 0:\n        return None\n    directrix = (-b + denominator**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2 and element not in set(list1):\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Check if the two lists are of the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Loop through the lists and compare each element\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n\n    # If the loops complete without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = False\n    for i in list1:\n        if i in list2:\n            common_element = True\n    return common_element"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n\n    # Calculate the length of the trapezium\n    length = 2 * area / perimeter\n\n    # Sort the lengths and find the median\n    lengths = sorted([area, base1, base2, height, length])\n    midpoint = len(lengths) // 2\n    median_area = lengths[midpoint - 1]\n    median_base1 = lengths[midpoint]\n    median_base2 = lengths[midpoint + 1]\n    median_height = lengths[midpoint + 2]\n    median_length = lengths[midpoint + 3]\n\n    return median_area, median_base1, median_base2, median_height, median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n\n    # Sort the lengths of the sides of the trapezium in ascending order\n    sorted_sides = sorted([side1, side2])\n\n    # Calculate the length of the trapezium side with the larger length\n    trapezium_side = sorted_sides[1]\n\n    # Calculate the length of the trapezium base\n    trapezium_base = 0.5 * trapezium_side\n\n    # Calculate the length of the two trapezium bases in ascending order\n    sorted_bases = sorted([trapezium_base, base1, base2])\n\n    # Calculate the median of the two trapezium bases\n    median_base = 0.5 * sorted_bases[1]\n\n    # Calculate the median of the two trapezium sides\n    median_side = 0.5 * (sorted_sides[0] + sorted_sides[1])\n\n    # Calculate the median of the two trapezium sides\n    median_height = 0.5 * height\n\n    # Calculate the median of the area of the trapezium\n    median_area = 0.5 * (sorted_bases[1] * median_height + sorted_bases[0] * median_height)\n\n    # Calculate the difference between the two medians\n    median_difference = abs(median_base - median_side)\n\n    # Calculate the error in the estimate of the median length\n    error = abs(median_area - median_difference)\n\n    # Return the estimate of the median length and the error\n    return median_area, error"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    if area < height:\n        print(\"The trapezium is too high for the given dimensions.\")\n    else:\n        area = area + height\n        trapezium_length = 0.5 * (area - height)\n        print(\"The median length of the trapezium is\", trapezium_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Finding the lengths of both sides of the trapezium\n    side1 = base1 + base2\n    side2 = height\n    \n    # Sorting the sides in ascending order\n    sides = sorted([side1, side2])\n    \n    # Finding the length of the trapezium\n    trapezium_length = sides[0] + sides[1]\n    \n    # Finding the area of the trapezium using Heron's formula\n    area = (trapezium_length / 2) * sides[1]\n    \n    # Calculating the area of the half-trapeziums\n    half_area1 = (trapezium_length / 2) * sides[0]\n    half_area2 = (trapezium_length / 2) * sides[1]\n    \n    # Finding the area of each half-trapezium\n    half_trapezium1 = area - half_area1\n    half_trapezium2 = area - half_area2\n    \n    # Finding the median of the lengths of the half-trapeziums\n    median1 = (side1 + side2) / 2\n    median2 = (half_trapezium1 + half_trapezium2) / 2\n    \n    # Returning the median of the lengths of the half-trapeziums\n    return median1, median2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n    \n    # Calculate the sum of the sides of the trapezium\n    trapezium_sides = base1 + base2 + height\n    \n    # Calculate the median length\n    median_length = trapezium_sides / area\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the lengths of each half of the trapezium\n    half1 = 0.5 * (base1 + base2)\n    half2 = 0.5 * (base1 + base2)\n\n    # Calculate the area of each half of the trapezium\n    area1 = half1 * height\n    area2 = half2 * height\n\n    # Calculate the area of the entire trapezium\n    area_trapezium = 0.5 * (half1 + half2) * (height + half1 + half2)\n\n    # Calculate the area of the two halves of the trapezium\n    area_halves = 0.5 * (half1 + half2) * (height + half1 + half2)\n\n    # Find the median length of the trapezium by taking the square root of the area of the trapezium\n    median_length = 0.5 * (half1 + half2) * (height + half1 + half2) ** 0.5\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    # Calculate the length of the triangle that is the base of the trapezium\n    base_triangle_length = (base1 + base2) / 2\n    # Calculate the length of the triangle that is the base of the trapezium\n    top_triangle_length = 0.5 * height\n    # Calculate the length of the trapezium base\n    trapezium_base_length = 2 * (base_triangle_length + top_triangle_length)\n    # Calculate the length of the trapezium\n    trapezium_length = trapezium_base_length + (area / trapezium_base_length)\n    # Calculate the length of the median\n    median_length = 0.5 * (base_triangle_length + trapezium_length)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the height of the trapezium\n    height_trapezium = base1 + base2 + height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n\n    # Calculate the area of the half of the trapezium\n    area_half = area / 2\n\n    # Calculate the length of the half of the trapezium\n    length_half = perimeter / 2\n\n    # Calculate the area of the lower half of the trapezium\n    area_lower_half = height_trapezium / 2\n\n    # Calculate the length of the lower half of the trapezium\n    length_lower_half = area_lower_half / 2\n\n    # Calculate the area of the upper half of the trapezium\n    area_upper_half = (height - height_trapezium) / 2\n\n    # Calculate the length of the upper half of the trapezium\n    length_upper_half = area_upper_half / 2\n\n    # Calculate the area of the trapezium with the length of the lower half\n    area_lower_half_trapezium = area_half * length_lower_half\n\n    # Calculate the area of the trapezium with the length of the upper half\n    area_upper_half_trapezium = area_half * length_upper_half\n\n    # Find the area of the intersection of the two half trapeziums\n    area_intersection = area_lower_half_trapezium + area_upper_half_trapezium\n\n    # Find the length of the intersection of the two half trapeziums\n    length_intersection = length_lower_half + length_upper_half\n\n    # Calculate the length of the trapezium with the intersection\n    length_trapezium = (area_intersection / area) ** 0.5\n\n    # Return the length of the trapezium with the intersection\n    return length_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = (base1 + base2) / 2\n    median = (base1 + base2 + height) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    # Calculate the area of the base of each half of the trapezium\n    area1 = base1 * height / 2\n    area2 = base2 * height / 2\n    # Find the length of the shorter base\n    shorter_base = min(base1, base2)\n    # Calculate the length of the longer base\n    longer_base = max(base1, base2)\n    # Calculate the length of the shorter base that is half of the area of the longer base\n    shorter_base_length = longer_base / 2\n    # Calculate the area of the longer base that is half of the area of the shorter base\n    longer_base_length = shorter_base / 2\n    # Calculate the length of the longer base that is half the area of the trapezium\n    longer_base_length_half_trapezium = longer_base / 2\n    # Calculate the length of the shorter base that is half the area of the trapezium\n    shorter_base_length_half_trapezium = shorter_base / 2\n    # Calculate the distance between the centers of the two half-trapeziums\n    distance = longer_base_length + shorter_base_length\n    # Calculate the area of the shorter half-trapezium\n    area_shorter_half = (shorter_base_length_half_trapezium + shorter_base_length_half_trapezium) * (longer_base_length_half_trapezium + shorter_base_length_half_trapezium) / 2\n    # Calculate the area of the longer half-trapezium\n    area_longer_half = (longer_base_length_half_trapezium + shorter_base_length_half_trapezium) * (longer_base_length_half_trapezium + shorter_base_length_half_trapezium) / 2\n    # Calculate the ratio of the areas of the two half-trapeziums\n    ratio = area_shorter_half / area_longer_half\n    # Calculate the area of the trapezium with the shorter base as the base\n    area_trapezium = area1 + area2 + area_shorter_half - area_longer_half\n    # Calculate the area of the shorter half-trapezium with the shorter base as the base\n    area_shorter_half_trapezium = area_shorter_half\n    # Calculate the area of the longer half-trapezium with the shorter base as the base\n    area_longer_half_trapezium = area_longer_half\n    # Calculate the length of the shorter half-trapezium with the shorter base as the base\n    shorter_half_length_trapezium = (area_shorter_half_trapezium / area_trapezium) * distance\n    # Calculate the length of the longer half-trapezium with the shorter base as the base\n    longer_half_length_trapezium = (area_longer_half_trapezium / area_trapezium) * distance\n    # Calculate the length of the shorter base in the shorter half-trapezium\n    shorter_half_base_length = shorter_half_length_trapezium / 2\n    # Calculate the length of the longer base in the shorter half-trapezium\n    shorter_half_longer_base_length = (longer_half_length_trapezium / 2) + (shorter_half_length_trapezium / 2)\n    # Calculate the length of the shorter base in the longer half-trapezium\n    longer_half_shorter_base_length = longer_half_length_trapezium / 2\n    # Calculate the length of the longer base in the longer half-trapezium\n    longer_half_longer_base_length = (longer_half_length_trapezium /"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(\"The number is greater than the element in the array.\")\n            return\n    print(\"The number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in an array and a number as input and checks whether the number is greater than the elements of the array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{i} is greater than {number}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    \n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(?i)a+b+\")\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Using string slicing to get the last digit\n    last_digit = str(n)[-1]\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of the number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Get the last character of the string\n    last_char = num_str[-1]\n    \n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers in the original list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd (i.e. if the remainder of the division by 2 is 1)\n        if char % 2!= 0:\n            # If it is, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_list = []\n    for char in str1:\n        if char.isdigit():\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_characters = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_characters += char\n    return odd_characters"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isupper():\n                new_str += char.upper()\n            elif char.islower():\n                new_str += char.lower()\n            else:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1:] or (test_list[j][0], test_list[i][0]) in test_list[i][1:]:\n                bidirectional_count += 1\n                \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples and counts the number of bidirectional tuple pairs.\n\n    Args:\n        test_list (list): A list of tuples.\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the input list.\n\n    \"\"\"\n    # Create an empty dictionary to store the count of bidirectional tuple pairs\n    bidirectional_count = {}\n\n    # Loop through the input list\n    for i in test_list:\n        # Convert the tuple to a string and sort it\n        sorted_str = str(sorted(i))\n\n        # Check if the sorted string is already in the dictionary\n        if sorted_str in bidirectional_count:\n            # Increment the count of the bidirectional tuple pair\n            bidirectional_count[sorted_str] += 1\n        else:\n            # Add the sorted string to the dictionary with a count of 1\n            bidirectional_count[sorted_str] = 1\n\n    # Return the total count of bidirectional tuple pairs\n    return sum(bidirectional_count.values())"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = {}\n    for pair in test_list:\n        if pair in bidirectional_count:\n            bidirectional_count[pair] += 1\n        else:\n            bidirectional_count[pair] = 1\n    \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] or test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j+1:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        single = multiple_to_single(L[1:])\n        return L[0] + single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over the list of integers\n    for num in L:\n        # Append the current integer to the result\n        result += str(num)\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        if num % 10 == 0:\n            total += num // 10\n        else:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty string to hold the result\n    result = \"\"\n    # loop over each element in the list\n    for element in L:\n        # check if the element is a multiple of 2\n        if element % 2 == 0:\n            # add the element to the result string\n            result += str(element)\n    # convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the single integer\n    result = 0\n    # loop through the list of integers\n    for num in L:\n        # check if the integer is a multiple of 2\n        if num % 2 == 0:\n            # add the integer to the result variable\n            result += num\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the list\n    total = 0\n    # Loop through each integer in the list and add it to the total\n    for num in L:\n        total += num\n    # Return the total as the single integer\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = r'\\b(a|an|the) (adverb)\\b'\n\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Extract the adverb and its position from the matches list\n    adverb, position = matches[0]\n\n    # Return a list containing the adverb and its position\n    return [(position, adverb)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:adj|adv|adv_mod|adv_xmpl|adv_infl|adv_part|adv_cond|adv_impr|adv_inf)s?\\b'\n    # Find all adverbs in the sentence using the pattern\n    adverbs = re.findall(pattern, text)\n    # Find the position of the first adverb in the list\n    adverb_position = text.find(adverbs[0])\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs and their positions in the sentence\n    adverbs = re.findall(r'\\b[A-Z][a-z]*\\b', text)\n    adverb_positions = {}\n\n    # For each adverb, find its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i + 1\n\n    # Return the adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b\\w*[a-z]*[A-Z]*\\w*[a-z]*\\b'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store adverb positions\n    adverb_positions = []\n\n    # Loop through all the matches and store their positions in the adverb_positions list\n    for i, match in enumerate(matches):\n        if match.lower() =='very':\n            adverb_positions.append((i, i+5))\n        elif match.lower() == 'kindly':\n            adverb_positions.append((i, i+6))\n        elif match.lower() == 'often':\n            adverb_positions.append((i, i+6))\n        elif match.lower() =='seriously':\n            adverb_positions.append((i, i+7))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs in the given sentence\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    # Sort the adverbs based on their positions in the sentence\n    adverbs.sort(key=lambda x: text.find(x))\n    # Return the first adverb and its position\n    return adverbs[0], text.find(adverbs[0])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match adverbs\n    pattern = r'\\b(adverb)\\b'\n\n    # Use regular expression to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its position in the sentence\n    return [(a, text.index(a)) for a in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\W+)(\\"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize variables to keep track of adverbs and their positions\n    adverbs = []\n    adverb_positions = []\n    \n    # Iterate over each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word in ['very','really', 'just', 'quite','much', 'little', 'little','seriously', 'deeply']:\n            # Add the adverb and its position to the list of adverbs and their positions\n            adverbs.append(word)\n            adverb_positions.append(i)\n    \n    # If no adverbs were found, return an empty list\n    if len(adverbs) == 0:\n        return []\n    \n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: adverb_positions.index(adverb_positions.index(x)))\n    \n    # Return the adverbs and their positions as a list of tuples\n    return [(adverb, adverb_positions.index(adverb_positions.index(adverb))) for adverb in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the adverbs in the sentence\n    pattern = r\"\\b(\\w+)ing\\b\"\n    adverbs = re.findall(pattern, text)\n\n    # Find the position of each adverb in the sentence\n    positions = [match.start() for match in re.finditer(r\"\\b(\\w+)ing\\b\", text)]\n\n    # Print the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb} - {positions[i]}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will take a string as input and return a list containing the \n    first adverb found in the input and their positions in the sentence. \n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(\\w+ly)\\b'\n    # Use re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # Loop through all matches and add them to the adverbs list\n    for match in matches:\n        # Split the matched string into adverb and position\n        parts = match.split('ly')\n        # Add the adverb to the list of adverbs\n        adverbs.append(parts[0])\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * (l**2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Cube surface area formula\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the list to an array of integers\n    arr = array('i', nums)\n    # count the number of positive integers in the array\n    count = sum([1 for i in arr if i > 0])\n    # calculate the ration of positive integers\n    ration = count/len(arr)\n    # print the result\n    print(ration)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of type 'int'\n    nums = array('i', nums)\n\n    # Initialize two variables to keep track of the number of positive and negative numbers in the array\n    positive_count = 0\n    negative_count = 0\n\n    # Loop through the array\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n\n    # Calculate the ratio of positive numbers to all the numbers in the array\n    ratio = positive_count / len(nums)\n\n    # Print the ratio of positive numbers to all the numbers in the array\n    print(\"The ration of positive numbers to all the numbers in the array is:\", ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Count the number of positive integers in the array\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n\n    # Calculate the ration of positive integers\n    if count == 0:\n        ration = 0\n    else:\n        ration = count / len(nums)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0]) # create a new integer array to store positive counts\n    \n    for num in nums:\n        if num > 0:\n            pos_count.append(pos_count[-1] + 1) # increment the count for positive numbers\n    \n    if pos_count[-1] > 0: # if there are positive numbers, calculate the ration\n        pos_ratio = pos_count[-1] / len(nums)\n        return pos_ratio\n    else:\n        return 0 # if there are no positive numbers, return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    \"\"\"\n    num_arr = array('i', nums)\n    count = 0\n    for i in num_arr:\n        if i > 0:\n            count += 1\n    return count / len(num_arr) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_arr = array('i')\n    neg_arr = array('i')\n    \n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n    \n    pos_count = len(pos_arr)\n    neg_count = len(neg_arr)\n    \n    if pos_count == 0 and neg_count == 0:\n        print(\"All numbers are zero\")\n    elif pos_count == 0:\n        print(\"All numbers are negative\")\n    elif neg_count == 0:\n        print(\"All numbers are positive\")\n    else:\n        print(\"Positive numbers count: {:.2f}\".format(pos_count / (pos_count + neg_count)))\n        print(\"Negative numbers count: {:.2f}\".format(neg_count / (pos_count + neg_count)))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums) # Convert the array to an array of integers\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in a given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0: \n            largest = max(largest, num)\n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            largest = num if largest < num else largest\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize largest negative number to be the first element of the list\n    largest = list1[0]\n    # loop through the list and compare each element with the current largest negative number\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            # if the current element is negative and larger than the current largest negative number, update the largest negative number\n            largest = list1[i]\n        # if the current element is not negative, no need to update the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest = -float('inf') # initialize the largest negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > largest: # if the number is negative and greater than the current largest number\n            largest = num # update the largest number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    max_neg = -1\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num \n    return max_neg "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    '''\n    # initialize a variable to store the largest negative number\n    largest = float('-inf')\n    # loop through each number in the list\n    for num in list1:\n        # if the current number is negative and larger than the current largest negative number, update the variable\n        if num < 0 and num > largest:\n            largest = num\n    # return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            max_neg = max(max_neg, list1[i])\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0] # Initialize max_neg as the first element of the list\n    for num in list1: # Iterate through the list\n        if num < 0 and num > max_neg: # Check if the number is negative and greater than max_neg\n            max_neg = num # Update max_neg if the current number is larger\n    return max_neg # Return the maximum negative number"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # trim each tuple by k\n        trimmed_tup = (tup[0], tup[1][:K], tup[2][-K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K])\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i] = test_list[i][:j] + (None,) + test_list[i][j+1:]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K+1:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K], test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication = []\n    for i in range(len(test_tup1)):\n        multiplication.append(test_tup1[i] * test_tup2[i])\n    return multiplication"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict.update({x: count_dict[x] + lst.count(x) for x in set(lst) - set(tup)})\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Define a dictionary to count the occurrence of each element in the list\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    # Count the occurrence of each element in the tuple\n    count_tup = Counter(tup)\n\n    # Find the intersection of the two dictionaries\n    intersect = count_tup.intersection(counts)\n\n    # Return the counts of each element in the intersection\n    return {k: intersect.get(k, 0) for k in intersect}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {} # create an empty dictionary to store the count of each element in the list\n\n    # iterate over each element in the list and count its occurrence in the tuple\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n\n    # print the count of each element in the list\n    for elem, count in count_dict.items():\n        print(f\"{elem}: {count}\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set and then to a list to remove duplicates\n    list_tup = list(tup)\n    list_lst = list(set(lst))\n    # Sort the lists\n    list_lst.sort()\n    list_tup.sort()\n    # Iterate over the lists and count the occurence of each element\n    count_dict = Counter(list_lst)\n    for elem in list_tup:\n        if elem in count_dict:\n            count_dict[elem] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = [count_dict[i] for i in lst]\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element in the list.\n    '''\n\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate over each element in the list and update the count of each element in the dictionary\n    for i in lst:\n        count_dict[i] = tup.count(i)\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # using Counter function to count the occurrence of each element in the tuple\n    count = Counter(tup)\n    count_lst = []\n    for item in lst:\n        if item in count:\n            count_lst.append((item, count[item]))\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i * (i + 1) / 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize a list to store the perrin numbers\n    perrin_list = []\n    # Calculate the sum of the first n perrin numbers\n    perrin_sum = sum([i**n for i in range(1, n+1)])\n    # Append the sum to the list\n    perrin_list.append(perrin_sum)\n    # Calculate the sum of the next n-1 perrin numbers and append them to the list\n    for i in range(1, n):\n        perrin_sum = sum([j**i for j in range(1, n-i+1)])\n        perrin_list.append(perrin_sum)\n    # Return the list of perrin numbers\n    return perrin_list"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_perrin += i\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum to zero\n    sum = 0 \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1): \n        # calculate the perrin number and add it to the sum\n        sum += (4*i**2 - 1)/(2*i) \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = []\n    for i in range(1, n+1):\n        perrin_nums.append(i**3 + 1)\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum_p = 0\n    while p <= n:\n        sum_p += p\n        p += 1\n    return sum_p\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 2 == 0:\n            p += i\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n\n    Parameters:\n    n (int): upper limit of the sum\n\n    Returns:\n    int: sum of Perrin numbers up to n\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # if the number is a Perrin number, add it to the sum\n        if is_perrin(i):\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and an integer as input. It returns a new list containing the\n    first l strings from the input list.\n    '''\n    return str_list[:l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and the desired size of each extracted string.\n    It returns a list of extracted string values.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), l):\n        extracted_list.append(' '.join(str_list[i:i+l]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) > size:\n            extracted_str_list.append(str_list[i][:size])\n        else:\n            extracted_str_list.append(str_list[i])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create an empty list to store the extracted string\n    extracted_str_list = []\n\n    # Loop through the list of strings and extract the required size of strings\n    for i in range(len(l)):\n        # Extract the string from the list\n        current_str = l[i]\n        # If the length of the extracted string is equal to the required size, append it to the list\n        if len(current_str) == l[i][l[i].index(\" \"):]:\n            extracted_str_list.append(current_str)\n\n    # Return the extracted string list\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(l[i][l[i].find(str):l[i].find(str)+l[i].index(str)+len(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all whitespaces with a single space\n    text1 = re.sub('\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text1 = text1.strip()\n    # return the cleaned string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function will remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern for matching whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to remove all whitespaces from the string\n    text2 = pattern.sub('', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    \n    # Use the re.sub() function to remove all occurrences of whitespace from the string\n    text = re.sub(pattern, '', text)\n    \n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it using regular expressions.\n    \"\"\"\n    # Using regular expression to remove all whitespaces from the string\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return sale_amount - actual_cost \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost: \n        return 0 \n    else: \n        loss_amount = sale_amount - actual_cost\n        return loss_amount "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0: \n        return 0 \n    else: \n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount <= 0:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_per_unit = 0.005 # assume 0.5% loss per unit\n    loss_percentage = sale_amount * loss_per_unit\n    if loss_percentage < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd numbers from 3 to n/2 (inclusive)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if the number is evenly divisible by i\n        if n % i == 0:\n            # if it is, add it to the sum\n            sum += i\n    \n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sum_of_even_factors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum_of_evens = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_evens += i\n            sum_of_evens += n // i\n    return sum_of_evens\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n\n    # Calculate the sum of even factors using the formula for the sum of arithmetic series\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n\n    # Add the last factor if it is even\n    if n > 2 and n % 2 == 0:\n        sum_even_factors += n\n\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize a variable to store the sum of even factors\n    evenSum = 0\n\n    # Loop through each number from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1):\n        # If the input number is divisible by the current number, add it to the sum\n        if n % i == 0:\n            if i % 2 == 0:\n                evenSum += i\n\n    # Return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize the sum of even factors as 0\n    sum_even_factors = 0\n\n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n\n        # Check if i is even and is a factor of n\n        if i*i <= n and n % i == 0 and i % 2 == 0:\n\n            # Add i to the sum of even factors\n            sum_even_factors += i\n\n    # Return the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    \n    # Use the re.findall() function to find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expressions to match words containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define the regex pattern to match a word containing 'z'\n    pattern = r'\\b\\w+\\s*z\\b'\n    # use re.findall() to find all non-overlapping matches in the text\n    matches = re.findall(pattern, text)\n    # return the list of matches found\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bwordz\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define a regular expression pattern to match words containing 'z'\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    \n    # use the search() method of the regular expression object to match the pattern in the given text\n    matches = pattern.search(text)\n    \n    # if a match is found, return the matched word, otherwise return an empty string\n    if matches:\n        return matches.group()\n    else:\n        return ''"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check whether the given month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n\n    # check whether the given month number has 31 days or not\n    if monthnum2 in (4, 6, 9, 11):\n        return True\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            days[2] = 29\n        return days[monthnum2 - 1]\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 1, 29]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2: # February\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0): # leap year\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11: # March, May, September, November\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12: # January, March, May, July, August, October, December\n        return False\n    else: # invalid month number\n        return \"Invalid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days, otherwise False.\n    \"\"\"\n    # Check if the month number is valid\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    \n    # Check if the month number contains 31 days\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            days[1] = 29\n        return days[monthnum2-1]\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 2 == 0:\n        if monthnum2 % 100 == 0:\n            if monthnum2 % 400 == 0:\n                if monthnum2 % 4 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            if monthnum2 % 4 == 0:\n                return True\n            else:\n                return False\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum <= 2:\n        return 31\n    elif monthnum <= 6:\n        return 30\n    elif monthnum <= 9:\n        return 31\n    elif monthnum <= 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop over the list of strings\n    for i in range(len(stringlist)):\n        # reverse the current string using slicing\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf') \n    min_sublist = [] \n    for i in range(len(lst)): \n        for j in range(i+1,len(lst)): \n            sub_list = lst[i:j+1] \n            if len(sub_list) < min_len: \n                min_len = len(sub_list) \n                min_sublist = sub_list \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist_with_min_len = []\n    min_len = float('inf')\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                sublist_with_min_len = sublist\n    \n    return sublist_with_min_len"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the given list\n    n = len(lst)\n    \n    # Initialize minimum length to infinity\n    min_len = float('inf')\n    \n    # Initialize minimum sublist to empty list\n    min_sublist = []\n    \n    # Iterate through the list\n    for i in range(n):\n        # Initialize current sublist to the given list\n        sublist = lst[:i+1]\n        \n        # Find the length of the current sublist\n        length = len(sublist)\n        \n        # If the current sublist has a smaller length and is a valid sublist, update minimum length and minimum sublist\n        if length < min_len and all(x >= 0 for x in sublist):\n            min_len = length\n            min_sublist = sublist\n            \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Given a list of sublists, this function finds the sublist with the minimum length.\n    \n    Parameters:\n    -----------\n    lst : list of lists\n        A list of sublists, where each sublist contains elements.\n        \n    Returns:\n    --------\n    min_sublist : list of elements\n        The minimum sublist found.\n        \n    \"\"\"\n    \n    # Initialize variables\n    min_length = float('inf') # initialize to infinity\n    min_sublist = None\n    \n    # Iterate over each sublist in the list\n    for sublist in lst:\n        \n        # Check if the length of the current sublist is less than the current minimum length\n        if len(sublist) < min_length:\n            \n            # Update the minimum length and the minimum sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    # Initialize variables\n    min_len = float('inf')\n    min_sublist = []\n    \n    # Loop through the list\n    for sublist in lst:\n        # Calculate the length of the sublist\n        sublist_len = len(sublist)\n        \n        # If the sublist is shorter than the current minimum, update variables\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_sublist = sublist\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_length = j-i+1\n            if current_length < min_length:\n                min_length = current_length\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Check if the list is empty\n    if len(lst) == 0:\n        return None\n    \n    # Initialize minimum length and minimum sublist\n    min_len = float('inf')\n    min_sublist = None\n    \n    # Loop through the list\n    for sublist in lst:\n        \n        # Calculate the length of the sublist\n        sublist_len = len(sublist)\n        \n        # Check if the sublist has a shorter length\n        if sublist_len < min_len:\n            \n            # Update the minimum length and sublist\n            min_len = sublist_len\n            min_sublist = sublist\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    uppercase_pattern = re.compile('[A-Z]+')\n    \n    # split the input string into a list of words\n    words = str1.split()\n    \n    # loop over the words and remove any that match the pattern\n    for i, word in enumerate(words):\n        if uppercase_pattern.match(word):\n            words[i] = ''\n    \n    # join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings in the string\n    pattern = r'([A-Z][a-z]+|[a-z]+)'\n    matches = re.findall(pattern, str1)\n    \n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[A-Z]\\w+\\b')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    # Use the re.findall() function to find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(pattern, str1)\n    # Loop through the uppercase substrings and replace them with empty strings\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to find all uppercase substrings\n    uppercase_pattern = re.compile('[A-Z]+')\n    uppercase_matches = uppercase_pattern.findall(str1)\n    \n    # Loop through the matches and remove them from the string\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove all uppercase substrings from the string\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # create a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # loop through all non-uppercase substrings in the string\n    result = []\n    for substring in pattern.split(string):\n        # if the substring is not empty, add it to the result list\n        if substring:\n            result.append(substring)\n\n    # return the final result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_list = []\n    for sublist in lst:\n        sublist_list.append(sublist[0])\n    return sublist_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list with the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Count the number of upper case characters in a given string.\n\n    Parameters:\n    str (str): The string to count the upper case characters in.\n\n    Returns:\n    int: The number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in it.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(list1[j:j+i])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    comb_lst = []\n    # sort the list to avoid duplicates\n    lst.sort()\n    # start with an empty combination and add the first element to it\n    comb_lst.append([lst[0]])\n    # loop through all the remaining elements\n    for i in range(1, len(lst)):\n        # loop through all the combinations of the previous elements\n        for comb in comb_lst:\n            # add the next element to the combination\n            comb.append(lst[i])\n            # add the combination to the list of combinations\n            comb_lst.append(comb)\n    return comb_lst"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i):\n            combo = list1[j:j+i]\n            if combo not in result:\n                result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Find the length of the list\n    n = len(list1)\n\n    # Initialize a list to store the combinations\n    combinations = []\n\n    # Loop through all possible combinations of length 1\n    for i in range(n):\n        combinations.append([list1[i]])\n\n    # Loop through all possible combinations of length 2\n    for i in range(n):\n        for j in range(i+1, n):\n            combinations.append([list1[i], list1[j]])\n\n    # Loop through all possible combinations of length 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                combinations.append([list1[i], list1[j], list1[k]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n    # Initialize an empty list to store the combinations\n    comb_list = []\n    # Find all possible combinations of the elements in the list\n    for i in range(n):\n        # Get the remaining elements in the list after the current element\n        remaining = list1[:i] + list1[i+1:]\n        # Find all possible combinations of the remaining elements\n        for j in range(1, len(remaining)+1):\n            # Add the current element to the combination and append to the result list\n            comb = [list1[i]] * j + remaining\n            comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            list2.append(list1[i:j])\n    return list2"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            combination = list1[j:j+i]\n            print(combination)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n\n    # Using itertools.combinations() method to generate all possible combinations\n    all_combinations = list(combinations(list1, len(list1)))\n\n    # Converting the generator object to a list\n    all_combinations_list = list(all_combinations)\n\n    return all_combinations_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0], 1\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        elif min_ending_here < max_so_far:\n            max_so_far = min_ending_here\n\n    return max_so_far, max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    \n    for end in range(len(arr)):\n        current_product *= arr[end]\n        \n        if current_product > max_product:\n            max_product = current_product\n            start = 0\n        elif current_product < 0:\n            current_product = 1\n            start = end\n            \n    return arr[start:end+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], max_ending_here * arr[0])\n    min_ending_here = arr[0]\n    max_ending_here = min(arr[0], max_ending_here * arr[0])\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n    previous_product = 1\n\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n        elif i == len(arr) - 1:\n            current_product = max(current_product, arr[i])\n        else:\n            current_product = max(arr[i], current_product * arr[i])\n\n        previous_product = max(previous_product, current_product)\n        max_product = max(max_product, previous_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n        if current_product < 0:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif n > len(values):\n        return False\n    else:\n        return values[0] == values[1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 1:\n        return False\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Initialize a variable to store the count of values\n    count = 0\n    \n    # Loop through all the values in the dictionary\n    for value in dict.values():\n        # Increment the count if the value is not None\n        if value is not None:\n            count += 1\n        \n        # If the count is equal to n, return True\n        if count == n:\n            return True\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0 or len(dict)!= n:\n        return False\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a set of values in the dictionary\n    values = set(dict.values())\n    # check if the number of values in the set is equal to n\n    if len(values) == n:\n        # return True if all values are same\n        return True\n    else:\n        # return False if not\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 1:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[next(iter(dict))]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return all(values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    if len(values) == n and all(i == values[0] for i in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Check if dictionary is not empty\n    if not dict:\n        return False\n\n    # Get first value from dictionary\n    first_value = next(iter(dict.values()))\n\n    # Check if all values in dictionary are same as the first value\n    if all(value == first_value for value in dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n\n    Parameters:\n    -----------\n    dict1: dictionary\n\n    Returns:\n    --------\n    dictionary\n\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary with only non-empty items\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is greater than the current product, update the product\n        if num > current_product:\n            current_product = num\n        \n        # Update the maximum product if the current product is greater than the maximum product\n        max_product = max(max_product, current_product)\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1] * arr[i], dp[i-2] * arr[i])\n    return dp[n]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if len(arr) < 3:\n        return 0\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n    return max_so_far * min_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # initialize variables\n    max_product = float('-inf')  # initialize max product to negative infinity\n    current_product = 1  # initialize current product to 1\n    prev_num = arr[0]  # initialize previous number to first number in the array\n\n    for i in range(1, len(arr)):\n        if arr[i] > prev_num:\n            current_product *= arr[i]  # if current number is greater than previous, multiply current product with current number\n        else:\n            max_product = max(max_product, current_product)  # if current number is less than or equal to previous, update max product\n            current_product = 1  # reset current product to 1\n        prev_num = arr[i]  # update previous number to current number\n\n    max_product = max(max_product, current_product)  # if loop completes without finding any negative numbers, update max product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n\n    # Initialize variables to store maximum product and current maximum product\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    # Loop through the array and calculate the maximum product ending here and the maximum product of the subsequence till the end\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            max_product_ending_here *= arr[i]\n            if max_product_ending_here > max_product_so_far:\n                max_product_so_far = max_product_ending_here\n        else:\n            max_product_ending_here = 1\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [[1] * n for i in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = max(dp[i][j], arr[i] * arr[j]) * (j - i + 1)\n            else:\n                dp[i][j] = max(dp[i][j], arr[j] * arr[i]) * (j - i + 1)\n\n    return dp[n - 1][0]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    # initialize max_product and min_product to 1\n    max_product = 1\n    min_product = 1\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n        # update max_product and min_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n    # return max_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    prev_num = arr[0]\n    # Loop through the array\n    for num in arr:\n        if num > prev_num:\n            current_product *= num\n        else:\n            current_product = num\n        max_product = max(max_product, current_product)\n        prev_num = num\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Create a boolean array 'is_increasing' to check if a number is in the increasing subsequence or not\n    is_increasing = [True] * n\n\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Traverse through the array and check if each number is in the increasing subsequence\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            is_increasing[i] = True\n        else:\n            is_increasing[i] = False\n\n    # Traverse through the array again and calculate the current product and maximum product\n    for i in range(n):\n        if is_increasing[i]:\n            current_product *= arr[i]\n            if current_product > max_product:\n                max_product = current_product\n        else:\n            if current_product > 1:\n                max_product = max(max_product, current_product)\n            current_product = 1\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a list to store the pairwise additions\n    pairwise_sum = []\n    \n    # iterate over the tuple elements\n    for i in range(len(test_tup)-1):\n        # find the neighboring elements and add them to the pairwise_sum list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    \n    # return the pairwise_sum list\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = 0\n        for i in range(1, len(test_tup)):\n            result += test_tup[i]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    n = len(test_tup)\n    for i in range(n):\n        result += test_tup[i]\n        if i < n-1:\n            result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define a function that adds the neighboring elements of the given tuple\n    def add_neighboring(tup):\n        # Use slicing to access the second and third elements of the tuple\n        return tup[1] + tup[2]\n    \n    # Call the add_neighboring function for each element of the tuple\n    for i in range(len(test_tup)):\n        test_tup[i] = add_neighboring(test_tup)\n    \n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    n = len(test_tup)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the tuple using a for loop\n    for i in range(1, n-1):\n        # Add the pairwise elements and store the sum in the sum variable\n        sum += test_tup[i] + test_tup[i-1]\n    # Return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        else:\n            result += test_tup[i] - test_tup[i-1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through each element in the tuple and add the neighboring elements together\n    for i in range(len(test_tup)-1):\n        total_sum += test_tup[i] + test_tup[i+1]\n    \n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    for i in range(len(test_tup) - 1):\n        test_tup[i] += test_tup[i+1]\n    \n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return add_pairwise(test_tup[1:]) + (test_tup[0] + test_tup[1])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n as inputs and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n\n    def multiply(a, b):\n        return sum([a[i]*b[i] for i in range(len(a))])\n\n    def power(a, b, mod=n):\n        if b == 1:\n            return a\n        elif b % 2 == 0:\n            half_power = power(a, b // 2, mod)\n            return multiply(half_power, half_power, mod)\n        else:\n            return multiply(a, power(a, b - 1, mod), mod)\n\n    product = power(arr, len(arr) - 1)\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array\n    multiplied modulo n.\n    '''\n\n    # Calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr: list of integers\n    n: integer\n    '''\n\n    #initialize product variable to 1\n    product = 1\n\n    #loop through each element in the array\n    for num in arr: \n        #multiply current element with product\n        product = (product * num) % n\n\n    #return product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n \n    return product "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    # Check if the list is empty\n    if not l:\n        return False\n    \n    # Initialize variables to keep track of the current consecutive number and the current index\n    current_consecutive = 1\n    current_index = 0\n    \n    # Iterate over the list and update the current consecutive number and the current index\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] == 1:\n            current_consecutive += 1\n        else:\n            current_consecutive = 1\n            current_index = i\n            \n    # If the last number in the list is the first consecutive number, then it is consecutive\n    if l[-1] - l[0] == 1:\n        return True\n    \n    # If we get here, then the list is not consecutive\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check if the list is empty\n    if not l:\n        return \"The list is empty!\"\n\n    # check if the first element of the list is 1\n    if l[0] == 1:\n        return \"The first element of the list is 1!\"\n\n    # check if the list only contains consecutive numbers\n    for i in range(1, len(l)):\n        if l[i] == l[i-1] + 1:\n            continue\n        else:\n            return \"The list does not contain consecutive numbers.\"\n\n    # if all checks pass, the list contains consecutive numbers\n    return \"The list contains consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif l[0] == l[1]:\n        return check_Consecutive(l[1:])\n    else:\n        for i in range(n-1):\n            if l[i] == l[i+1] + 1:\n                return True\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if not l:\n        return \"The list is empty.\"\n    # check if the list has only one element\n    if len(l) == 1:\n        return \"The list contains only one element.\"\n    # check if the list contains only consecutive numbers\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return \"The list does not contain consecutive numbers.\"\n    # if none of the above conditions are met, the list contains consecutive numbers\n    return \"The list contains consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_list = []\n    for item in test_list1:\n        if all(item == tup for tup in test_list2):\n            intersection_list.append(item)\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the intersection of elements\n    intersection_dict = {}\n    \n    # Loop through the first tuple list\n    for tuple1 in test_list1:\n        # Loop through the second tuple list\n        for tuple2 in test_list2:\n            # Check if the elements of both tuples are equal\n            if tuple1 == tuple2:\n                # Check if the intersection of the two tuples already exists in the dictionary\n                if tuple1 in intersection_dict:\n                    # Increment the value of the existing key\n                    intersection_dict[tuple1] += 1\n                else:\n                    # Add the intersection of the two tuples to the dictionary with a value of 1\n                    intersection_dict[tuple1] = 1\n    \n    # Create a new list to store the intersection tuples\n    intersection_list = []\n    \n    # Loop through the dictionary and add the tuples to the new list\n    for key, value in intersection_dict.items():\n        intersection_list.append(key)\n    \n    # Return the new list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty dictionary to store the intersection\n    intersection_dict = {}\n    # Loop through each tuple in the first list\n    for item in test_list1:\n        # Check if the tuple is already in the dictionary\n        if item in intersection_dict:\n            # Increment the count of the tuple in the dictionary\n            intersection_dict[item] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            intersection_dict[item] = 1\n    # Loop through each tuple in the second list\n    for item in test_list2:\n        # Check if the tuple is already in the intersection dictionary\n        if item in intersection_dict:\n            # Decrement the count of the tuple in the dictionary\n            intersection_dict[item] -= 1\n            # If the count becomes 0, remove the tuple from the dictionary\n            if intersection_dict[item] == 0:\n                del intersection_dict[item]\n    # Create a new list with only the tuples from the intersection dictionary\n    intersection_list = list(intersection_dict.keys())\n    # Sort the list in ascending order of the tuples\n    intersection_list.sort()\n    # Return the sorted intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a dictionary to store the elements in test_list2 and their frequency\n    freq_dict = {}\n    for elem in test_list2:\n        freq_dict[elem] = test_list2.count(elem)\n\n    # Create a new list to store the intersection of elements from test_list1 and test_list2\n    intersection_list = []\n\n    # Iterate through each element in test_list1\n    for elem in test_list1:\n        # If the element exists in test_list2 and its frequency is greater than zero, add it to the intersection list\n        if elem in freq_dict and freq_dict[elem] > 0:\n            intersection_list.append(elem)\n            # Decrease the frequency of the element in test_list2 by 1\n            freq_dict[elem] -= 1\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty dictionary to store the elements of both lists\n    intersection = {}\n    # Loop through the first list\n    for element1 in test_list1:\n        # Check if the element exists in the second list\n        if element1 in test_list2:\n            # If the element exists, add it to the dictionary with its count as 1\n            intersection[element1] = 1\n    # Loop through the second list and subtract the count of each element from the count of the corresponding element in the first list\n    for element2 in test_list2:\n        if element2 in intersection:\n            intersection[element2] -= 1\n    # Create a new list to store the common elements\n    common_elements = []\n    # Loop through the dictionary and add the elements that have count of 1 to the new list\n    for element, count in intersection.items():\n        if count == 1:\n            common_elements.append(element)\n    # Return the new list of common elements\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        smaller_list = test_list2\n        larger_list = test_list1\n    else:\n        smaller_list = test_list1\n        larger_list = test_list2\n    \n    result = set()\n    for tuple1 in smaller_list:\n        if tuple1 in larger_list:\n            result.add(tuple1)\n    \n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #Create a set of elements from both lists and then convert it back to a tuple\n    common_elements = set(test_list1).intersection(set(test_list2))\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements in test_list1 and test_list2\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    inter_set = set1.intersection(set2)\n    \n    # Convert the intersection set to a list and return it\n    return list(inter_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n    \n    # Loop through each element in the first list\n    for elem in test_list1:\n        # Check if the element is in the second list\n        if elem in test_list2:\n            # If it is, add it to the dictionary\n            common_dict[elem] = True\n    \n    # Create a new list with only the common elements\n    common_list = []\n    for elem in common_dict:\n        common_list.append(elem)\n    \n    # Return the new list\n    return common_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): A string.\n    ch (str): A string representing the character to be replaced.\n    newch (str): A string representing the new character to replace the old character.\n\n    Returns:\n    str: A new string with all occurrences of the old character replaced with the new character.\n    '''\n\n    # Create a new string that is a copy of the original string\n    newstr = str1.copy()\n\n    # Loop through the new string and replace all occurrences of the old character with the new character\n    for i in range(len(newstr)):\n        if newstr[i] == ch:\n            newstr = newstr[:i] + newch + newstr[i+len(ch):]\n\n    return newstr"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = {}\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert dictionary to list of tuples\n    items = list(dict1.items())\n    # Sort list of tuples by value in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n    # Convert list of tuples back to dictionary\n    sorted_dict = dict(items)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Counter object to store the count of each element in the dictionary\n    counter = Counter(dict1)\n    # Sort the elements of the dictionary by value\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a list of tuples with the key-value pairs\n    items = dict1.items()\n    # sort the list of tuples based on the value\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # create a dictionary from the sorted list of tuples\n    sorted_dict = dict(sorted_items)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object to count the frequency of values in the dictionary\n    counter = Counter(dict1)\n\n    # create a list of tuples containing the value and its frequency\n    sorted_list = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # create a new dictionary with the sorted items\n    sorted_dict = {key: value for key, value in sorted_list}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function sorts a dictionary by value using Counter function from the collections module.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    This function takes a list of numbers as input and returns a tuple containing the sum of the largest and smallest value in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the smallest value\n    smallest = nums[0]\n    \n    # Find the largest value\n    largest = nums[-1]\n    \n    # Calculate the sum of the two values\n    sum = smallest + largest\n    \n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to check if the given string is all lowercase.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    new_string = string.lower()\n    # Return the converted string\n    return new_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-zA-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into substrings\n    substrings = re.findall(r'([a-zA-Z]+)', str1)\n    # Create a new string with only uppercase substrings\n    new_str = ''.join(substrings)\n    # Return the new string\n    return new_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # create a regular expression pattern to match all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # use re.sub() to remove all matches of the pattern from the string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile the regular expression to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Use the search() method to search for lowercase substrings\n    result = pattern.search(str1)\n    # If a match is found, remove the substring from the string\n    while result:\n        # Use the replace() method to remove the substring from the string\n        str1 = str1.replace(result.group(0), '')\n        # Search for the next match in the string\n        result = pattern.search(str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # split the string into words\n    words = str1.split()\n    # create a list to store the words with lowercase substrings removed\n    words_without_lowercase = []\n    # loop through the words\n    for word in words:\n        # check if the word contains lowercase substrings\n        if re.search(r'[a-z]', word):\n            # if it does, add it to the list of words without lowercase substrings\n            words_without_lowercase.append(word)\n    # join the words without lowercase substrings into a string and return it\n    return''.join(words_without_lowercase)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    matches = re.findall(r'[a-z]+', str1.lower())\n    # Remove each matching substring from the original string\n    for match in matches:\n        str1 = str1.replace(match, '', 1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b')\n    \n    # Use the findall() method to find all the lowercase substrings in the string\n    lowercase_substrings = pattern.findall(str1)\n    \n    # Remove the lowercase substrings from the original string using replace() method\n    for substr in lowercase_substrings:\n        str1 = str1.replace(substr, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Find all lowercase substrings in the string\n    lower_substrings = re.findall(r'[a-z]+', str1)\n    # Remove the lowercase substrings from the string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    str_num = str(n)\n    # find the first character of the string\n    first_char = str_num[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Find the first digit of the string\n    first_digit = num_str[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as an input and returns the first digit of the number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Get the first digit of the number by taking the remainder of the number divided by 10\n    first_digit = n % 10\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns the odd integers in the list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_numbers = []\n    # Loop through each number in the input list\n    for num in list:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, append it to the odd_numbers list\n            odd_numbers.append(num)\n    # Return the odd_numbers list\n    return odd_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_cubes(n):\n        \"\"\"\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return (n * (n+1) * (2*n+1)) / 6\n\n    def sum_natural_numbers(n):\n        \"\"\"\n        Write a python function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        return n * (n+1) / 2\n\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    natural_numbers_sum = sum_natural_numbers(n)\n\n    # Calculate the difference between the two sums\n    difference = cubes_sum - natural_numbers_sum\n\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Find the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n_sum = sum(range(1, n+1))\n    first_n_sum_cubed = sum([i**3 for i in range(1, n+1)])\n    difference = first_n_sum_cubed - first_n_sum\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        \n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n        \n    # find the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum(x**3 for x in range(1,n+1))\n\n    # Function to find the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return sum(range(1,n+1))\n\n    # Find the difference between the two sums\n    return abs(sum_cubes(n) - sum_natural_numbers(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    '''\n    # Initialize variables to store the sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers and store it in the variable `sum_cubes`\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        \n    # Calculate the sum of the first n natural numbers and store it in the variable `sum_natural`\n    for i in range(1, n+1):\n        sum_natural += i\n        \n    # Calculate the difference between the sum of cubes and sum of natural numbers and store it in the variable `diff`\n    diff = abs(sum_cubes - sum_natural)\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    sum_natural = sum(range(n+1))\n    difference = abs(sum_cubes - sum_natural)\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function counts the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_val = 0\n    for i in range(N):\n        xor_val ^= A[i]\n        if xor_val % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    odd_pairs = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    # XOR all the elements of the array to get the sum of the array\n    xor_sum = sum(A)\n\n    # Initialize two variables to keep track of the number of pairs\n    pair_count = 0\n    odd_count = 0\n\n    # Loop through all pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR the current pair to get the xor sum\n            xor_pair = A[i] ^ A[j]\n\n            # If the xor sum is odd, increment the pair count and reset the odd count\n            if xor_pair % 2!= 0:\n                pair_count += 1\n                odd_count = 0\n            else:\n                odd_count += 1\n\n    # Return the total number of pairs with odd xor values\n    return pair_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    count = 0\n    num1, num2 = 1, 1\n    # Iterate until the xor value is odd\n    while num1 <= N and num2 <= N:\n        xor_val = num1 ^ num2\n        if xor_val % 2!= 0:\n            count += 1\n        # Increment the number\n        if num1 == num2:\n            num1 += 1\n        else:\n            num1 += 1\n            num2 += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i] in string.upper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i] in string.lower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Convert the string back to uppercase\n    string = string.upper()\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n\n    # loop through each character in the input string\n    for char in string:\n        # if the character is lowercase, convert it to uppercase\n        if char.islower():\n            result += char.upper()\n        # if the character is uppercase, convert it to lowercase\n        elif char.isupper():\n            result += char.lower()\n        # if the character is neither lowercase nor uppercase, leave it unchanged\n        else:\n            result += char\n\n    # return the result string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_of_diff = 0\n    while diff > 0:\n        sum_of_diff += diff % 10\n        diff //= 10\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the distance between the two digits\n    digit_diff_list = []\n    for digit1, digit2 in zip(num1_digits, num2_digits):\n        digit_diff_list.append(abs(digit1 - digit2))\n\n    # Calculate the sum of the distance between the digits\n    digit_diff_sum = sum(digit_diff_list)\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Calculate the difference between the digits\n        diff = abs(n1 % 10 - n2 % 10)\n        \n        # Add the difference to the sum variable\n        sum += diff\n        \n        # Divide the integers by 10 to get the next digit\n        n1 //= 10\n        n2 //= 10\n    \n    # Return the sum of the differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # get the digits of the two numbers\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # calculate the sum of the per-digit difference\n    sum_diff = 0\n    for i in range(max(len(digits1), len(digits2))):\n        diff = digits1[i] - digits2[i]\n        sum_diff += diff * (i + 1)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize variables to store the sum of per-digit differences\n    digit_sum = 0\n\n    # Loop through each digit of n1 and n2\n    for i in range(len(str(n1))):\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        d1 = int(str(n1)[i])\n        d2 = int(str(n2)[i])\n        diff = abs(d1 - d2)\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize a variable to store the sum of per-digit differences\n    distance = 0\n\n    # Loop through each digit in the two integers and calculate the per-digit difference\n    for i in range(len(str(n1))):\n        diff = abs(n1 % 10 - n2 % 10)\n        distance += diff\n        n1 //= 10\n        n2 //= 10\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize variables\n    sum_diff = 0\n\n    # Loop through the digits of s1 and s2\n    for i in range(len(s1)):\n        # Subtract the corresponding digits of s1 and s2\n        diff = int(s1[i]) - int(s2[i])\n\n        # Add the difference to the sum of per-digit differences\n        sum_diff += diff ** 2\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    temp1 = n1\n    temp2 = n2\n    \n    while temp1!= 0 and temp2!= 0:\n        sum += abs(temp1 % 10 - temp2 % 10)\n        temp1 //= 10\n        temp2 //= 10\n        \n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to get their individual digits\n    digit_sum = 0\n    for i in range(len(str(n1))):\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum and the window size is at least as large as the current index\n        if current_sum > max_sum and i >= size:\n            # Update the maximum sum\n            max_sum = current_sum\n\n            # Reset the current sum\n            current_sum = a[start]\n            start += 1\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list `a` and an integer `size` as input, and returns the sum of the largest contiguous sublist in the list.\n\n    The function iterates over the list `a` and keeps track of the maximum subarray sum that ends at each position. The largest subarray sum is then returned as the final result.\n\n    Time Complexity: O(n)\n    '''\n\n    if size > len(a):\n        return max(a)\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset the sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n    :param a: A list of integers\n    :param size: The size of the subarray to be considered\n    :return: The sum of the largest contiguous sublist\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list\n    for i in range(size):\n        # Add the next element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is less than 0, set it to 0\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n            \n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the current subarray sum and its index\n    current_sum = 0\n    current_start = 0\n\n    # Initialize variables to keep track of the maximum subarray sum and its index\n    max_sum = float('-inf')\n    max_start = 0\n\n    # Iterate through the list\n    for i in range(size):\n        # If the current element is negative, reset the current sum and start at the next element\n        if a[i] < 0:\n            current_sum = 0\n            current_start = i + 1\n\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and start index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = current_start\n\n    # Return the sum of the maximum subarray\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Iterate through the list\n    for i in range(len(a) - size + 1):\n        # Add the elements of the current subarray to the current sum\n        current_sum += a[i:i+size]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero and move the window start index\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n\n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set to store the elements of the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set to store the elements of the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the union of the sets\n    union_set = set1.union(set2)\n    \n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store unique elements of both tuples\n    unique_elements = set()\n    \n    # add all elements of the first tuple to the set\n    unique_elements.update(test_tup1)\n    \n    # add all elements of the second tuple to the set\n    unique_elements.update(test_tup2)\n    \n    # convert the set to a list and sort the list\n    sorted_list = sorted(list(unique_elements))\n    \n    # print the sorted list\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    # Sorting the union in ascending order\n    sorted_union = sorted(union)\n    # Printing the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from both tuples\n    union_set = test_tup1 | test_tup2\n    # Convert set to list and sort\n    union_list = sorted(list(union_set))\n    # Print the sorted union\n    print(\"Union of elements: \", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # concatenate the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # sort the union tuple in ascending order\n    union_tup.sort()\n    \n    # print the union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set from the first tuple and then add the elements from the second tuple\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    # convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    \n    # Output the sorted union list\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicates and convert back to a list\n    unique_combined_tup = sorted(list(set(combined_tup)))\n    \n    # Output the unique elements in the sorted order\n    print(unique_combined_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1 + test_tup2)\n    \n    # Sort the union\n    sorted_union = sorted(union)\n    \n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n        else:\n            curr_len += 1\n    max_len = max(max_len, curr_len)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n    \n    for num in lst:\n        curr_length += 1\n        if curr_length > max_length:\n            max_length = curr_length\n        if num == max_length:\n            curr_length = 0\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            curr_len = j-i+1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    temp_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j >= len(lst):\n                break\n            temp_len = 0\n            for k in range(i, j):\n                if k < i:\n                    continue\n                temp_len += 1\n            if temp_len > max_len:\n                max_len = temp_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 1\n    current_length = 1\n\n    # loop through the list\n    for i in range(1, len(lst)):\n        # if the current element is the same as the next element, increase the length of the sublist\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        # otherwise, update the maximum length if the current length is greater\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            # reset the current length to 1\n            current_length = 1\n\n    # update the maximum length if the last sublist has a longer length\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            max_len = max(max_len, len(sublist))\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n\n    Args:\n    text (str): The string from which values should be extracted.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = r'(?<=\")\\w+\\b(?=\\\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"[^\"]*\"'\n    # Use the pattern to search for matches in the text\n    matches = re.findall(pattern, text)\n    # Return a list of the matched values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    Args:\n        text (str): The string from which values need to be extracted.\n\n    Returns:\n        list: A list of extracted values.\n    '''\n    pattern = r\"\\\"(.+?)\\\"|\"\n    matches = re.findall(pattern, text, re.DOTALL)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([^\\\"]*)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'  # match any sequence of one or more characters between double quotes\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function uses regular expressions to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?P<value>.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # use regex to match quotation marks and values between them\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    \n    # convert list of matches to a dictionary\n    values = {}\n    for match in matches:\n        key, value = match.split(':', 1)\n        values[key.strip()] = value.strip()\n        \n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    # Initialize a count variable to store the number of pairs\n    count = 0\n    # Iterate through the array and check for pairs\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # If the elements are not equal, increment the count\n            if arr[i]!= arr[j]:\n                count += 1\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # create a set to store unique elements\n    unique_elements = set(arr)\n\n    # initialize a counter variable to store the number of pairs\n    count = 0\n\n    # loop through the unique elements\n    for i in unique_elements:\n        # loop through the remaining elements\n        for j in range(i+1, n+1):\n            # check if both elements are unequal\n            if i!= j:\n                # increment the counter variable\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    # Count the number of pairs of unequal elements in the array\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    chars = []\n    # iterate through each character in the word\n    for char in word:\n        # append each character to the list\n        chars.append(char)\n    # return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n\n    # Split the string into a list of characters\n    char_list = list(word)\n\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input to an integer\n    n = int(n)\n    # Initialize a variable to store the sum\n    sum_digits = 0\n    # Loop over each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add the digit to the sum\n        sum_digits += digit\n        # Remove the last digit from the number\n        n = n // 10\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10  # extract last digit\n        sum += digit  # add it to the sum\n        n //= 10  # remove last digit from the number\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # add the current digit to the sum of digits\n        sum_of_digits += n % 10\n        \n        # remove the current digit from the number\n        n = n // 10\n        \n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n\n        # Add the digit to the sum\n        total += digit\n\n        # Remove the last digit from the number\n        n //= 10\n\n    # Return the sum\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if the specified list is sorted or not.\n\n    Args:\n        lst (list): List to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[1] < list1[0]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use a nested loop to iterate through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in list1\n    for sublist in list1:\n        # Sort the sublist using the built-in sorted() function\n        sorted_sublist = sorted(sublist)\n        # Assign the sorted sublist back to the same sublist in list1\n        list1[list1.index(sublist)] = sorted_sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if x not in seen and not seen.add(x)]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        num_set.add(num)\n    return list(num_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set of all unique elements in the first list\n    unique_set1 = set(nums[0])\n    \n    # Create an empty set to store the unique elements in the remaining lists\n    unique_set = set()\n    \n    # Loop through each list in the original list of lists\n    for i in range(1, len(nums)):\n        # Remove duplicates from the current list using the set difference operation\n        new_set = unique_set1.difference(set(nums[i]))\n        \n        # Add the new set to the set of unique elements\n        unique_set = unique_set.union(new_set)\n    \n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Combine all the lists into a single list\n    combined_list = [num for sublist in nums for num in sublist]\n    \n    # Remove duplicate numbers from the combined list\n    unique_list = list(set(combined_list))\n    \n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given list of numbers.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))  # remove duplicates and convert to list\n    unique_list.sort()  # sort list in ascending order\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # create a set to store unique numbers from the list\n    unique_num_prod = 1 # initialize the product to 1\n    \n    for num in unique_nums:\n        unique_num_prod *= num # multiply the current unique number with the product\n    \n    return unique_num_prod # return the product of all unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Use a set to remove duplicate elements from the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n    list_data (list): A list of numbers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_set = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    return 1 if not unique_list else unique_list[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # S = 2*pi*r^2 + 2*pi*r*h + 2*pi*h^2\n    # where r is the radius, h is the height, and pi is the mathematical constant.\n    pi = math.pi\n    surface_area = 2 * pi * r ** 2 + 2 * pi * r * h + 2 * pi * h ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h  # formula for surface area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n    '''\n    surface_area = 2 * (3.14159 * r ** 2 + 2 * 3.14159 * r * h + 3.14159 * h ** 2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    surface_area = pi * r**2 + pi * r * h + pi * h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of cylinder\n    surface_area = 2*3.14159*(r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    import math\n    # Calculate the surface area of a cylinder using the formula:\n    # A = \u03c0r\u00b2 + 2\u03c0rh\n    surface_area = math.pi * r ** 2 + 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and the height of the cylinder as inputs.\n    It calculates and returns the surface area of the cylinder.\n    '''\n    area = 2*3.14159*r**2 + 2*3.14159*h*r\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        return True\n    if not A:\n        return False\n    for i in range(len(B)):\n        if A[0] == B[i]:\n            if i == len(B) - 1:\n                return True\n            else:\n                A = A[1:]\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function will check whether a list is a sublist of another or not.\n    '''\n    if not B:\n        return True\n    if len(A) > len(B):\n        return is_Sub_Array(A[len(B):], B)\n    for i in range(len(A)):\n        if A[i] in B:\n            return is_Sub_Array(A[i+1:], B)\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is sublist of A\n    if len(A) <= len(B):\n        return all(B[i] in A for i in range(len(A)))\n    else:\n        return all(B[i] in A for i in range(len(A)-len(B)+1))"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B): \n        for i in range(len(A)-len(B)+1): \n            if A[i:i+len(B)] == B: \n                return True \n        return False \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] not in A:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the list A is sublist of list B\n    if A in B:\n        return True\n    # If not, check if the list B is sublist of list A\n    elif B in A:\n        return True\n    # If not, return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B): \n        return False \n    elif len(A) < len(B): \n        return False \n    else: \n        for i in range(len(B)): \n            if A[i] not in B: \n                return False \n        return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Extract the last digit of the factorial\n    last_digit = int(factorial/10**(len(str(factorial))-1))\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    n_str = str(n)\n    # Get the length of the string\n    length = len(n_str)\n    # Calculate the last digit of the factorial\n    last_digit_factorial = n_str[0] * n_str[length-1]\n    # Return the last digit of the factorial\n    return int(last_digit_factorial)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number into a string\n    n = str(n)\n    # Take the last character of the string and convert it to an integer\n    last_digit = int(n[-1])\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    # Return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Use the built-in math module to find the factorial of n\n    fact = math.factorial(n)\n    # Extract the last digit from the factorial as an integer\n    last_digit = int(str(fact)[-1])\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    This function finds the last digit in the factorial of a given number.\n    \"\"\"\n    # initialize the last_digit variable with an empty string\n    last_digit = \"\"\n    # convert the input number to string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # loop through each digit of the string\n    for i in range(length-1):\n        # multiply the current digit with the factorial of the previous digit\n        factorial = 1\n        for j in range(i+1):\n            factorial *= (int(str_n[j]))\n        # append the last digit of the factorial to the last_digit variable\n        last_digit += str(factorial % 10)\n    # convert the last_digit variable to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # first check if the number is negative or not \n    if n < 0: \n        print(\"Factorial of negative number is not defined.\") \n    else: \n        # convert the number to string and then to list to make it digits \n        digits = list(str(n)) \n        # find the last digit of the factorial \n        factorial = 1 \n        for i in range(len(digits)-1, -1, -1): \n            factorial *= int(digits[i]) \n        # find the last digit of the factorial \n        last_digit = factorial % 10 \n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert n to a string\n    str_n = str(n)\n    \n    # Find the last digit of the factorial\n    last_digit = int(str_n[-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize a variable to store the last digit of factorial\n    last_digit = 0\n\n    # loop through each digit of the factorial\n    while n > 0:\n        # extract the last digit of the current factorial\n        last_digit = n % 10\n\n        # divide the factorial by 10 to remove the last digit\n        n //= 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single list that contains all the elements of the three input lists interleaved in a single list.\n    \"\"\"\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate over each element in each input list\n    for i in range(len(list1)):\n        # Add the i-th element from the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the i-th element from the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the i-th element from the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single flat list\n    that interleaves all the lists in order.\n\n    Args:\n    list1: a list of integers\n    list2: a list of integers\n    list3: a list of integers\n\n    Returns:\n    A single flat list containing all the integers in list1, list2, and list3.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize the result list\n    result = []\n    \n    # Iterate over the lists\n    for i in range(len(list1)):\n        # Add the first element of each list to the result list\n        result.append(list1[i])\n        # Add the second element of each list to the result list\n        result.append(list2[i])\n        # Add the third element of each list to the result list\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    :param list1: A list of integers.\n    :param list2: A list of integers.\n    :param list3: A list of integers.\n    :return: A list of interleaved integers from all three input lists.\n    \"\"\"\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Append the corresponding element from each of the input lists to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists and returns a single flat list containing all the elements of the input lists.\n    \"\"\"\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n    # Initialize three pointers to the beginning of each list\n    i, j, k = 0, 0, 0\n    \n    # Loop through each element in the input lists\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        # Add the elements from the three lists to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[j])\n        interleaved_list.append(list3[k])\n        \n        # Increment the pointers to move on to the next element\n        i += 1\n        j += 1\n        k += 1\n    \n    # If there are any remaining elements in the input lists, add them to the end of the interleaved list\n    while i < len(list1):\n        interleaved_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        interleaved_list.append(list2[j])\n        j += 1\n    while k < len(list3):\n        interleaved_list.append(list3[k])\n        k += 1\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # If the element in the first tuple is not equal to the element in the second tuple,\n        # add it to the dissimilar_set\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n\n    # Return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_tup = tuple(set(test_tup1) ^ set(test_tup2))\n    return diff_tup"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return list(set(test_tup1) - set(common_elements)) + list(set(test_tup2) - set(common_elements))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in common_elements:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of all elements in the two tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # create a set of all unique elements in the first tuple\n    unique_elements1 = set(test_tup1)\n    # create a set of all unique elements in the second tuple\n    unique_elements2 = set(test_tup2)\n    # find the dissimilar elements by subtracting the two sets\n    dissimilar_elements = all_elements - (unique_elements1 | unique_elements2)\n    # return the list of dissimilar elements\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            result.append(even_ele(i, even_fnc)) \n        else: \n            result.append(even_fnc(i)) \n    return result \n\n\ndef even_int(num): \n    return num % 2 == 0 \n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tup in test_tuple:\n        if len(tup) == 2:\n            even_list.append(even_fnc(tup[0]))\n        elif len(tup) == 3:\n            even_list.append(even_fnc(tup[0]))\n            even_list.append(even_fnc(tup[1]))\n    return tuple(even_list)\n\ndef odd_fnc(num):\n    return num\n\ntest_tuple = ((1, 2, 3, 4), (2, 3, 4, 5, 6), (3, 4, 5), (4, 5, 6, 7, 8))\nprint(even_ele(test_tuple, odd_fnc))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_list in test_tuple:\n        new_sub_list = []\n        for element in sub_list:\n            if even_fnc(element):\n                new_sub_list.append(element)\n        result.append(new_sub_list)\n    return result\n\ndef is_even(x):\n    return x % 2 == 0\n\ntest_tuple = [(1, 2, 3, 4, 5), (6, 'odd', 'even', 'odd', 8), ('seven', 9, 10, 11, 12)]\nresult = even_ele(test_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n    test_tuple: The tuple to be checked for even elements.\n    even_fnc: A function that takes one argument and returns True if the argument is even and False otherwise.\n\n    Returns:\n    A new tuple with only the even elements of the original tuple.\n    \"\"\"\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n        test_tuple: Nested mixed tuple containing elements of any data type.\n        even_fnc: Function to check if an element is even or not. \n\n    Returns:\n        New tuple containing only the even elements from the original tuple.\n\n    \"\"\"\n    even_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_tuple.append(elem)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            result.append(even_ele(i, even_fnc))\n        elif isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = (1, (2, 3, 4, (5, 6, 7), 8), 9, (10, 11, 12, (13, 14, 15), 16), 17)\n\nresult = even_ele(test_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # create an empty list to store even elements\n    even_list = []\n    \n    # loop through each element in the test tuple\n    for element in test_tuple:\n        \n        # check if the element is even using the even_fnc function\n        if even_fnc(element):\n            \n            # if the element is even, add it to the even_list\n            even_list.append(element)\n    \n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_tuple.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Remove elements that are not even using the specified even_fnc\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments, base_edge and height, which represent the base edge and height of the square pyramid, respectively.\n    The function then calculates the surface area of the pyramid using the formula:\n    surface area = 1/2 * base_edge * height\n    The function then returns the surface area as a floating-point number.\n    '''\n    surface_area = 0.5 * base_edge * height\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base area and height\n    base_area = 2 * b * b\n    height = s\n\n    # Calculate the surface area of the base\n    base_surface_area = 2 * b * b\n\n    # Calculate the surface area of the pyramid\n    pyramid_surface_area = 2 * (b * b + height * height)\n\n    # Calculate the total surface area of the pyramid\n    total_surface_area = base_surface_area + pyramid_surface_area\n\n    # Return the total surface area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (s * s) + (s * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s + b * s + s * s + b * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = b*s\n    perimeter = 4*b + 4*s\n\n    return area, perimeter"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s) + b*s + (b*s*s) - 2*(b*s*s*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with the given base edge and height.\n    \"\"\"\n\n    # Calculate the perimeter of the square pyramid\n    perimeter = 4 * b\n\n    # Calculate the area of each side of the pyramid\n    side1 = b\n    side2 = b * (s / 2)\n    side3 = b\n\n    # Calculate the surface area of the pyramid by adding the areas of each side\n    surface_area = 2 * (side1 * side2 + side1 * side3 + side2 * side3)\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    #calculating the area of each triangle of the pyramid\n    area_1 = (b**2)*0.5\n    area_2 = (s**2)*0.5\n    area_3 = (s**2)*0.5\n\n    #calculating the surface area of the pyramid\n    surface_area = (area_1 + area_2 + area_3)\n\n    #returning the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) + (b * b) + (2 * s * b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * b * b"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth catalan number using dynamic programming.\n    '''\n    # Initialize the base cases for the recursion\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n\n    # Initialize the catalan number list and calculate it using dynamic programming\n    catalan = [1]\n    for i in range(2, n + 1):\n        catalan.append(2 * catalan[i-1] - catalan[i-2])\n\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan_numbers = [1]\n    for i in range(2, n+1):\n        catalan_numbers.append(i * (catalan_numbers[i-1] + catalan_numbers[i-2]))\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        n = num + 1\n        catalan = 1\n        for i in range(n):\n            catalan = catalan * (2 * i + 1) // (i + 1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    r = 0\n    catalan_num = 1\n    \n    for i in range(1, n+1):\n        catalan_num *= (2*r-1)\n        r += 1\n    \n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, n+1):\n            catalan += (i * (2*i - 1))\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = (2*i-1) * catalan / i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula:\n    C(n, k) = (n+1)C(n, k-1) - kC(n-1, k-1)\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (n+1) // (k*(k-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Check if the input number is positive\n    if num <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Initialize the first two catalan numbers\n    catalan_0 = 1\n    catalan_1 = 1\n\n    # Compute the remaining catalan numbers using the formula\n    for i in range(2, num+1):\n        catalan_i = catalan_0 + (catalan_1 * catalan_0)\n        catalan_0 = catalan_1\n        catalan_1 = catalan_i\n\n    return catalan_1"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n\n    The Catalan number Cn is defined as the sum of the binomial coefficients CnC1, CnC2,..., CnC(n-1), where n is the positive integer.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n = n - 1  # we want the (n-1)th Catalan number\n        catalan = 0\n        for i in range(n + 1):\n            catalan += (2 * i + 1) * catalan_number(i)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        num = [0] * (n + 1)\n        num[0] = 1\n        num[1] = 1\n        for i in range(2, n + 1):\n            num[i] = (2 * i - 1) * num[i - 1] / i\n            num[i] += (2 * i - 1) * num[i - 2] / (i - 1)\n        return num[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate through the matches and append the adverb and its position to the adverbs list\n    for match in matches:\n        adverb = text[match.start():match.end()]\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"The first adverb ending with 'ly' is:\", matches[0][0])\n        print(\"It starts at position\", matches[0][1])\n    else:\n        print(\"No adverb ending with 'ly' found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with \"ly\" in a given string and returns the adverb and its position in the string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]*ly\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern to match the adverb ending with 'ly'\n    pattern = r'\\bly\\b'\n    # search for the pattern in the text and return the positions\n    positions = re.findall(pattern, text)\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*[aeiouy]\\w*ly\\w*\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        pos = text.find(match)\n        print(f\"Adverb found at position {pos}: {match}\")\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        result.append((start, end, adverb))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[A-Za-z]+ly\\b'\n    \n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize a list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Loop through all the matches and append their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n    \n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expressions to find all adverbs ending with \"ly\"\n    matches = re.findall(r'\\bly\\b', text, re.IGNORECASE)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # Use regular expressions to find the positions of the matches in the string\n    positions = [match.start() for match in re.finditer(r'\\bly\\b', text, re.IGNORECASE)]\n\n    # Find the first adverb ending with \"ly\" and its position in the string\n    first_match = matches[0]\n    first_position = positions[0]\n\n    return first_match, first_position"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expressions to find all occurrences of \"ly\" at the end of a word\n    matches = re.findall(r'\\b\\w+ly\\b', text)\n    # List comprehension to extract the positions of the matches\n    positions = [match.start() for match in matches]\n    # Sorting the positions in ascending order\n    positions.sort()\n    # Printing the matches and their positions\n    print(\"Adverbs ending with 'ly' and their positions:\")\n    for i, pos in enumerate(positions, start=1):\n        print(f\"{i}. {pos}: {matches[i-1]}\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset and update the min heap\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Extract the n most expensive items from the min heap and return them\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items: A list of tuples containing item prices and item descriptions.\n    - n: The number of most expensive items to find.\n\n    Returns:\n    - A list of the n most expensive items.\n    '''\n    # Use a heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        price, description = item\n        # Add the item to the heap if its price is greater than or equal to the minimum price in the heap\n        if not heap or price >= heap[0][0]:\n            heapq.heappush(heap, (price, description))\n        # If the heap has exceeded the desired size, remove the lowest price item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Extract the n most expensive items from the heap and return them in reverse order\n    result = []\n    while heap:\n        item = heapq.heappop(heap)\n        result.append(item)\n    result.reverse()\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of tuples, where each tuple contains an item and its price.\n    n (int): The number of items to be returned.\n\n    Returns:\n    list: A list of tuples, where each tuple contains an item and its price.\n    \"\"\"\n\n    # Use a min heap to store the top n items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the top n items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_heap = []\n    \n    # Create a max heap from the first n items in the dataset\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n        max_heap.append(item)\n        \n    # Push all the remaining items in the dataset onto the max heap\n    for item in items[n:]:\n        if item > max_heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n            max_heap[0] = item\n            \n    # Pop and return the n most expensive items from the max heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap (priority queue) to store the n most expensive items\n    min_heap = []\n    heapq.heapify(min_heap)\n    # Iterate through the items and add them to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # Remove the least expensive item from the min-heap if its index is greater than n-1\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the min-heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset based on the price\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # Remove the first n elements (in descending order of price) from the sorted dataset\n    top_n = sorted_items[:n]\n    # Return the prices of the top n items\n    return [item[1] for item in top_n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns\n    a list of the n most expensive items in the dataset.\n    \"\"\"\n    # Sort the items in descending order based on their price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Extract the top n items from the sorted list and return them\n    return [item[0] for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap to store the n largest items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n largest items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n smallest items\n    return heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return [l[n:], l[:n]]\n    else:\n        return [l[n], split_Arr(l, n-1)[1]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return []\n    elif n >= len(l):\n        return [l[-1]] + l[:-1]\n    else:\n        return [l[n-1]] + split_Arr(l[:n-1], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l.pop(0))\n    new_list.append(l)\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    elif n == len(l):\n        return l\n    else:\n        return [l[n]] + split_Arr(l, n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # split the list at the nth eelment\n    l1, l2 = l[:n], l[n:]\n\n    # add the first part to the end of the list\n    l2.extend(l1)\n\n    # return the final list\n    return l2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The length of the list is less than the specified index.\")\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # creating a new list to store the first n elements of the original list\n    first_n_elems = l[:n]\n    \n    # concatenating the first n elements with the rest of the original list\n    new_list = first_n_elems + l[n:]\n    \n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and finds the difference between the largest and smallest values in the list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Find the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize largest and smallest values as first element of the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # iterate over the list and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Get the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    # Calculate the difference between largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest value\n    diff = largest - smallest\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # loop through all numbers from a to b\n    for i in range(a, b+1):\n        # check if the square is a perfect square\n        square = i ** 2\n        # check if the square is between a and b\n        if square > a and square < b:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(int(math.sqrt(a))+1, int(math.sqrt(b))+1):\n        if math.sqrt(a)*math.sqrt(i) == a and math.sqrt(b)*math.sqrt(i) == b:\n            print(a, b, i, math.sqrt(a)*math.sqrt(i), math.sqrt(b)*math.sqrt(i))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # loop through the range of a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a:\n            squares.append(i)\n        elif i**2 == b:\n            squares.append(i)\n        else:\n            for j in range(1, int(i**0.5)+1):\n                if i**2 == j**2 + i:\n                    squares.append(j**2)\n                    squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            perfect_squares.append(i**2)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i*i, b+1, i):\n            print(i, j)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i*i, b+1, i*i):\n            print(j)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize empty list to store perfect squares\n    perfect_squares_list = []\n    \n    # Iterate over range of numbers from a to b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i**2 == i:\n            # If i is a perfect square, append it to the list of perfect squares\n            perfect_squares_list.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares_list\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    \n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            # if it is, add it to the list\n            perfect_squares_list.append(i**2)\n            \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the polar coordinate system.\n    theta (float): The angle of the polar coordinate system, in radians.\n    \n    Returns:\n    x (float): The x-coordinate of the rectangular coordinate system.\n    y (float): The y-coordinate of the rectangular coordinate system.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two parameters, r and theta, which are the polar coordinates of the point.\n    It returns the corresponding rectangular coordinates of the point.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    if r > 0:\n        return r * cmath.cos(theta), r * cmath.sin(theta)\n    else:\n        return 0, 0"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): The magnitude of the polar coordinate.\n    theta (float): The angle of the polar coordinate, in radians.\n\n    Returns:\n    (x, y) (tuple): The rectangular coordinates (x, y) of the point.\n\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(r)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates\n    '''\n    # Convert radius to complex number\n    z = cmath.rect(r)\n    \n    # Convert angle to radians\n    theta = cmath.radians(theta)\n    \n    # Calculate x and y components of rectangular coordinates\n    x = z * cmath.cos(theta)\n    y = z * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    if theta < 0:\n        theta += 2*cmath.pi\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        print(\"List must have at least 2 elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        print(\"List must have at least two elements\")\n        return\n    \n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2: \n        return newList\n    \n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Interchange the first and last elements\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty or has less than two elements\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the length of the list is less than 2\n    if length < 2:\n        return newList\n    # swap the first and last elements of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #if the length of the list is less than 2, return the list as is\n    if len(newList) < 2:\n        return newList\n    \n    #swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List must have at least two elements to swap.\")\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) < 2: # if the list has less than 2 elements, return the same list\n        return newList\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # swap the first and last elements of the list\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n\n    if n == k or k == 0:\n        return 1\n\n    # Initialize the sum to 0\n    sum_coeff = 0\n\n    # Initialize the counter\n    count = 0\n\n    # Calculate the first coefficient\n    if n > 0:\n        sum_coeff += 1\n\n    # Calculate the second coefficient\n    if n > 1:\n        sum_coeff += 1\n\n    # Calculate the product of consecutive coefficients\n    for i in range(2, n + 1):\n        count += 1\n\n        # Check if the current coefficient should be added to the sum\n        if count == k:\n            sum_coeff += 1\n\n            # Reset the counter to 0\n            count = 0\n\n    return sum_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0 \n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif k == 0 or k == n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Using binomial formula to find binomial coefficient\n    C = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n    return C"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Initialize two variables to 1\n    a = 1\n    b = 1\n\n    # Calculate the number of terms to calculate\n    num_terms = (n + 1) // 2\n\n    # Iterate over the number of terms to calculate\n    for i in range(num_terms):\n\n        # Calculate the binomial coefficient using the formula\n        # C(n,k) = n! / (k! * (n-k)!)\n        coefficient = (n - i) * a // (i + 1)\n\n        # Add the binomial coefficient to the sum variable\n        sum += coefficient\n\n        # Update the variables for the next iteration\n        a = a * (n - i) // i\n        b = b * i // (i + 1)\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(1,k+1):\n        sum *= (n-i+1) // i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Check if the inputs are valid\n    if n < k or k < 0 or k > n:\n        print(\"Invalid inputs. Please enter valid inputs.\")\n        return\n    \n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n    \n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        sum_product += (n-k+i)/(i*(n-i))\n    \n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the binomial coefficient using formula C(n,k) = n! / (k! * (n-k)!)\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    for i in range(1, k+1):\n        factorial //= i\n    for i in range(1, n-k+1):\n        factorial //= i\n\n    return factorial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [1]\n    for i in range(2,n+1):\n        coeff.append(coeff[i-1]*(i-k))\n    sum_coeff = sum(coeff)\n    return sum_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = []\n    for i in ip_list:\n        if i.isdigit():\n            if int(i)!= 0:\n                new_ip.append(i)\n    return '.'.join(new_ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'\\d+', ip)\n    ip_list.reverse()\n    new_ip = ''\n    for num in ip_list:\n        new_ip += str(int(num))\n    return new_ip[::-1]"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0+\\.0+\\.0+','',ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([0-9]+\\.){3}[0-9]+$'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as a string and removes leading zeroes.\n    '''\n    # Find all the IP addresses in the string\n    ip_list = re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', ip)\n    # Remove the leading zeroes from each IP address\n    ip_list = [re.sub(r'^0+', '', ip) for ip in ip_list]\n    # Join the IP addresses back into a string\n    ip_str = '.'.join(ip_list)\n    # Return the final IP address\n    return ip_str"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Match leading zeroes\n    pattern = r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$'\n    # Remove leading zeroes from each part of the ip address\n    ip_parts = ip.split('.')\n    ip_parts = [re.sub(r'^0+', '', x) for x in ip_parts]\n    # Join the parts back together and return the result\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d{1,3}\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+','',ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        diff = abs(even_num - odd_num)\n    else:\n        diff = abs(odd_num - even_num)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        even = int(even)\n    else:\n        even = int(even) - 1\n    if odd % 2 == 0:\n        odd = int(odd)\n    else:\n        odd = int(odd) - 1\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    # Find the first even number\n    i = 0\n    while i < len(list1) and list1[i] % 2 == 0:\n        i += 1\n    if i == len(list1):\n        return None\n\n    # Find the first odd number\n    j = 0\n    while j < len(list1) and list1[j] % 2!= 0:\n        j += 1\n    if j == len(list1):\n        return None\n\n    # Find the difference between the first even and first odd numbers\n    diff = list1[j] - list1[i]\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference between the first even and first odd number of the list.\n    '''\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0 and odd % 2 == 0:\n        return even - odd\n    elif even % 2!= 0 and odd % 2!= 0:\n        return even - odd\n    else:\n        return \"The list should contain at least two even and one odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the difference of the first even and first odd number of the list.\n    If the list is empty, it will return None.\n    \"\"\"\n    if not lst:\n        return None\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n    if first_even is None or first_odd is None:\n        return None\n    return abs(first_even - first_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if list1 is empty\n    if not list1:\n        print(\"List is empty!\")\n        return\n    \n    # check if list1 contains only one element\n    if len(list1) == 1:\n        print(\"List has only one element!\")\n        return\n    \n    # initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # iterate over the elements of the list\n    for num in list1:\n        # check if the current number is even\n        if num % 2 == 0:\n            # if it is even, check if it is the first even number seen so far\n            if even_num is None:\n                even_num = num\n            # if it is not the first even number, find the difference between the even number and the current number\n            else:\n                diff = even_num - num\n                print(\"The difference of the even and odd numbers is:\", diff)\n                return\n        # check if the current number is odd\n        elif num % 2!= 0:\n            # if it is odd, check if it is the first odd number seen so far\n            if odd_num is None:\n                odd_num = num\n            # if it is not the first odd number, find the difference between the odd number and the current number\n            else:\n                diff = odd_num - num\n                print(\"The difference of the even and odd numbers is:\", diff)\n                return\n    \n    # if no even and odd numbers are found, print a message indicating this\n    print(\"No even and odd numbers found in the list!\")\n    return"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            if count == 0:\n                count += 1\n                first_even = i\n            else:\n                break\n        elif i % 2 == 1:\n            if count == 0:\n                count += 1\n                first_odd = i\n            else:\n                break\n    if count == 0:\n        return \"No even or odd numbers found in the list.\"\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            even_num = num\n        # check if the number is odd\n        else:\n            odd_num = num\n    \n    # calculate the difference between even and odd numbers\n    diff = even_num - odd_num\n    \n    # return the difference\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # convert input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables to store number of swaps and the number of bits to swap\n    num_swaps = 0\n    num_bits_to_swap = 0\n\n    # loop over all possible bit positions\n    while num_bits_to_swap < 32:\n        # check if the number of bits to swap is at most the remaining bits in the input numbers\n        if (num1 & (1 << num_bits_to_swap))!= (num2 & (1 << num_bits_to_swap)):\n            # if not, swap the bits\n            num1 = num1 ^ (1 << num_bits_to_swap)\n            num2 = num2 ^ (1 << num_bits_to_swap)\n            num_swaps += 1\n        # increment the number of bits to swap\n        num_bits_to_swap += 1\n\n    # return the minimum number of swaps\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # converting the strings to binary numbers\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # initializing the variables to store the number of swaps and the minimum number of swaps\n    num_swaps = 0\n    min_swaps = float('inf')\n\n    # comparing the length of the two binary strings\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            # incrementing the number of swaps and finding the minimum number of swaps\n            num_swaps += abs(bin1.index(bin1[i]) - bin2.index(bin2[i]))\n            if num_swaps < min_swaps:\n                min_swaps = num_swaps\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Initialize an empty dictionary to store the number of swaps required for each binary number\n    count_dict = {}\n    # Convert both binary numbers to integers and store the count of swaps required for each integer\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        count_dict[int(binary)] = 0\n    # Calculate the minimum number of swaps required for each binary number\n    for i in range(2**n):\n        for j in range(2**n):\n            count_dict[i] += str1.count(bin(i)[2:].zfill(n)) - str2.count(bin(j)[2:].zfill(n))\n    # Return the minimum number of swaps required for any binary number\n    return min(count_dict.values())"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize the length of the strings\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # Initialize a dictionary to store the difference between characters in two strings\n    diff_dict = {}\n    \n    # Iterate through both strings and calculate the difference between characters in each string\n    for i in range(n1):\n        diff = abs(ord(str1[i]) - ord(str2[i]))\n        diff_dict[diff] = diff_dict.get(diff, 0) + 1\n    \n    # Initialize a list to store the frequency of each difference between characters in the first string\n    freq_list = [diff_dict.get(x, 0) for x in range(-n1+1, n1)]\n    \n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = n1 + n2\n    \n    # Iterate through the frequency list and find the minimum number of swaps required\n    for i in range(1, n1+n2):\n        min_swaps = min(min_swaps, abs(freq_list[i] - freq_list[i-1]))\n    \n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1) # length of both binary strings\n    if n!=len(str2) : # strings are not same length\n        print(\"Strings are not same length\")\n        return\n    diff = 0 # to store the difference between binary strings\n    count = 0 # to store the count of swaps required\n\n    # calculating difference between binary strings\n    for i in range(n) : \n        if str1[i]!= str2[i] : # difference found\n            diff += 1\n            count += diff # adding difference to count of swaps required\n\n    return count # returning count of swaps required"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize count of swaps\n    count = 0\n    \n    # Initialize two pointers for each string\n    i = 0\n    j = 0\n    \n    # Traverse both strings simultaneously\n    while i < len(str1) and j < len(str2):\n        # If both characters are equal, move both pointers forward\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        # If str1[i] is smaller, move str1 pointer forward\n        elif str1[i] < str2[j]:\n            i += 1\n        # If str2[j] is smaller, move str2 pointer forward\n        else:\n            j += 1\n            \n            # Increment the count of swaps\n            count += 1\n    \n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one binary number to another.\n\n    Args:\n        str1 (str): A binary number represented as a string.\n        str2 (str): Another binary number represented as a string.\n\n    Returns:\n        int: The minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n\n    # Initialize the variables to store the lengths of the two binary numbers\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # Initialize the variables to store the lengths of the two binary numbers, with leading zeros removed\n    len1_without_leading_zeros = len1\n    len2_without_leading_zeros = len2\n\n    # Remove leading zeros from len1 and len2\n    while len1_without_leading_zeros > 0 and str1[len1_without_leading_zeros - 1] == '0':\n        len1_without_leading_zeros -= 1\n    while len2_without_leading_zeros > 0 and str2[len2_without_leading_zeros - 1] == '0':\n        len2_without_leading_zeros -= 1\n\n    # Initialize the variables to store the binary numbers without leading zeros\n    num1 = str1[:len1_without_leading_zeros]\n    num2 = str2[:len2_without_leading_zeros]\n\n    # Initialize the variables to store the resultant binary numbers\n    result1 = ''\n    result2 = ''\n\n    # Initialize the variables to store the number of swaps required\n    swaps = 0\n\n    # Iterate through the binary numbers without leading zeros\n    i = 0\n    j = 0\n    while i < len1_without_leading_zeros and j < len2_without_leading_zeros:\n        # If the binary numbers are not equal, swap the digits\n        if num1[i]!= num2[j]:\n            result1 += str1[i]\n            result2 += str2[j]\n            swaps += 1\n        # If the binary numbers are equal, add the digits\n        else:\n            result1 += str1[i]\n            result2 += str2[j]\n            i += 1\n            j += 1\n\n    # Check if the resultant binary numbers are equal\n    if result1 == result2:\n        return swaps\n\n    # If the resultant binary numbers are not equal, calculate the number of swaps required to convert one binary number to another\n    else:\n        # Initialize the variables to store the number of swaps required for each digit in the resultant binary numbers\n        swap_count = [0] * 10\n\n        # Iterate through the binary numbers without leading zeros\n        i = 0\n        j = 0\n        while i < len1_without_leading_zeros and j < len2_without_leading_zeros:\n            # If the binary numbers are not equal, increment the swap count for the digit in the first number that is not equal to the digit in the second number\n            if num1[i]!= num2[j]:\n                digit = int(num1[i])\n                swap_count[digit] += 1\n                i += 1\n            # If the binary numbers are equal, add the digits and increment the swap count for each digit in the resultant binary numbers\n            else:\n                result1 += str1[i]\n                result2 += str2[j]\n                i += 1\n                j += 1\n\n        # Calculate the minimum number of swaps required for each digit in the resultant binary numbers\n        for i in range(10):\n            swap_count[i] += swap_count[i + 1]\n\n        # Iterate through the resultant binary numbers and update the swap count for each digit\n        for i in range(len1_without_leading_zeros - 1, -1, -1):\n            digit = int(result1[i])\n            if digit > 0:\n                swap_count[digit] -= 1\n\n        # Find the minimum number of swaps required for each digit in the resultant binary numbers\n        min_swap_count = swap_count[0]\n        for i in range(1, 10):\n            if min_swap_count > swap_count[i]:\n                min_swap_count = swap_count[i]\n\n        # Return the minimum number of swaps required to convert one binary number to another\n        return min_swap_count + swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        raise ValueError(\"Both input strings must have the same length.\")\n\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                swaps += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                swaps += 1\n            else:\n                raise ValueError(\"Both input strings must be in the form of binary numbers.\")\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables\n    n = max(len(str1), len(str2))\n    swaps = 0\n\n    # iterate through the digits of the larger number and swap adjacent digits\n    while num1 > 0 or num2 > 0:\n        # get the last digit of num1 and num2\n        d1, d2 = num1 % 10, num2 % 10\n\n        # if the digits are not the same, swap them and increment swaps\n        if d1!= d2:\n            num1, num2 = num2, num1\n            swaps += 1\n\n        # divide the larger number by 2 and remove the last digit\n        num1 //= 2\n        num2 //= 2\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Find the number of set bits in each number\n    num1_set_bits = bin(num1).count('1')\n    num2_set_bits = bin(num2).count('1')\n    # Calculate the minimum number of swaps required\n    swaps_required = abs(num1_set_bits - num2_set_bits)\n    return swaps_required"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k:\n        return find_kth(arr2, arr1, k - len(arr1))\n    else:\n        i = 0\n        j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] == arr2[j]:\n                i += 1\n                j += 1\n            elif arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i == len(arr1):\n            return arr2[j]\n        else:\n            return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = k = 0\n    n1, n2 = len(arr1), len(arr2)\n    while i < n1 and j < n2 and k < n1+n2:\n        if arr1[i] == arr2[j]:\n            k += 1\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if k == n1+n2:\n        return arr1[n1-1]\n    elif k == n1:\n        return arr2[j-1]\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three parameters:\n    arr1: A sorted array\n    arr2: A sorted array\n    k: The index of the kth element in the sorted array\n    \n    This function finds the kth element from the two sorted arrays and returns it.\n    If the arrays have different lengths, the function returns None.\n    '''\n\n    # find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # if the arrays have different lengths, return None\n    if n1!= n2:\n        return None\n\n    # use two pointers to traverse both arrays simultaneously\n    i = j = 0\n\n    while i < n1 and j < n2:\n        # if we find the kth element, return it\n        if i == k - 1:\n            return arr1[i]\n        elif j == k - 1:\n            return arr2[j]\n        # if we haven't found the kth element yet, increment both pointers\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # if we haven't found the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # merge the two sorted arrays\n    merged = merge(arr1, arr2)\n    # find the kth element\n    return merged[k-1]\n\ndef merge(arr1, arr2):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    # initialize two pointers\n    i = j = 0\n    # initialize an empty merged array\n    merged = []\n    # loop through both arrays\n    while i < len(arr1) and j < len(arr2):\n        # compare the elements at the current pointers\n        if arr1[i] <= arr2[j]:\n            # if arr1[i] is less than or equal to arr2[j], add it to the merged array\n            merged.append(arr1[i])\n            # increment the pointer for arr1\n            i += 1\n        else:\n            # if arr1[i] is greater than arr2[j], add it to the merged array\n            merged.append(arr2[j])\n            # increment the pointer for arr2\n            j += 1\n    # add any remaining elements of arr1 to the merged array\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    # add any remaining elements of arr2 to the merged array\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    # return the merged array\n    return merged"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    # Helper function to merge two sorted arrays\n    def merge(arr1, arr2):\n        result = []\n        i = j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                result.append(arr1[i])\n                i += 1\n            else:\n                result.append(arr2[j])\n                j += 1\n        result += arr1[i:]\n        result += arr2[j:]\n        return result\n\n    # Merge the two sorted arrays\n    merged = merge(arr1, arr2)\n\n    # Find the kth element (k-1) times\n    for _ in range(k-1):\n        i = 0\n        j = 0\n        while i < len(merged) and j < len(merged):\n            if merged[i] < merged[j]:\n                i += 1\n            else:\n                j += 1\n        merged = merged[i:]\n\n    # Return the last element of the merged array\n    return merged[-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            k -= 2\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k == 2:\n                return arr1[i]\n            k -= 2\n            j += 1\n    if k == 1:\n        return arr1[i]\n    elif k == 2:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    if k == 1:\n        return min(arr1[i:], arr2[j:])\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == k:\n        return arr1[i-1]\n    elif j == k:\n        return arr2[j-1]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a value k and returns the kth smallest element from the two arrays.\n    \"\"\"\n    # Check if the two arrays are empty\n    if not arr1 or not arr2:\n        return None\n    \n    # Initialize pointers to the first element of the arrays\n    i = j = 0\n    \n    # Initialize kth element as None\n    kth = None\n    \n    # Traverse both arrays while k elements have not been found\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # If the current element of arr1 is smaller than the current element of arr2, increment i and k\n        if arr1[i] < arr2[j]:\n            i += 1\n            k -= 1\n        # If the current element of arr1 is greater than the current element of arr2, increment j and k\n        elif arr1[i] > arr2[j]:\n            j += 1\n            k -= 1\n        # If the current element of arr1 is equal to the current element of arr2, increment both i and j and decrement k\n        else:\n            i += 1\n            j += 1\n            k -= 1\n            \n    # If k elements have not been found, return None\n    if k > 0:\n        return None\n    \n    # If kth element has been found, return its value\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    \n    temp = number\n    temp_sum = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        temp_sum += digit ** 3\n        temp //= 10\n        \n    return number == temp_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number or False otherwise.\n    \"\"\"\n    if n < 10:\n        return False\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return n == s"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the number to a string to get individual digits\n    digits = str(number)\n\n    # initializing variables to store the sum of cubes of individual digits\n    sum_of_cubes = 0\n    power = len(digits)\n\n    # iterating over each digit and adding its cube to the sum of cubes\n    for digit in digits:\n        sum_of_cubes += int(digit)**power\n\n    # comparing the sum of cubes with the original number\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Taking input from the user\n    num = int(input(\"Enter a number: \"))\n    \n    # Initializing variables to store the digits, sum of digits and the length of the number\n    digits = 0\n    sum_digits = 0\n    num_length = len(str(num))\n    \n    # Taking the digits of the number\n    while num > 0:\n        digits += num % 10\n        num //= 10\n    \n    # Computing the sum of digits of the number\n    while num_length > 0:\n        sum_digits += num % 10 ** num_length\n        num //= 10 ** num_length\n        num_length -= 1\n    \n    # Comparing the sum of digits with the original number\n    if digits == sum_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    str_number = str(number)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Convert the string to a list of characters\n    char_list = list(str_number)\n\n    # Loop through each character in the list\n    for char in char_list:\n        # Convert each character to an integer\n        digit = int(char)\n\n        # Calculate the power of the digit\n        power = len(str_number) - str_number.index(str(digit)) + 1\n\n        # Add the digit to the sum multiplied by the power\n        sum += digit ** power\n\n    # Return True if the sum is equal to the original number, else return False\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum_of_digits = 0\n    temp_num = number\n    \n    while temp_num > 0:\n        last_digit = temp_num % 10\n        sum_of_digits += last_digit**3\n        temp_num //= 10\n    \n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Find the sum of the cubes of the digits\n    sum_of_cubes = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n\n    # Check if the sum of cubes equals the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n\n    num_str = str(number)\n    length = len(num_str)\n\n    arm_sum = 0\n    for digit in num_str:\n        arm_sum += int(digit) ** length\n\n    if arm_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an armstrong number, else False.\n    \"\"\"\n    total = 0\n    num = n\n    while num > 0:\n        digit = num % 10\n        total += digit ** 3\n        num //= 10\n    return total == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(n):\n    '''\n    This function checks whether a given number is an Armstrong number or not.\n    '''\n    # Take the number of digits in the number\n    num_digits = len(str(n))\n    # Initialize sum to 0\n    sum = 0\n    # Initialize base to 10\n    base = 10\n    # Calculate the sum of the digits of the number\n    while n > 0:\n        digit = n % 10\n        sum += digit ** num_digits\n        n //= 10\n    # Check if the sum of the digits is equal to the original number\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"The sum of first {} natural numbers is {}.\".format(number, total))\n    print(\"The average of first {} natural numbers is {}.\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # Calculate the average of the first n natural numbers\n    average = sum/count\n\n    # Return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    # initialize sum and average variables\n    sum = 0\n    average = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add the natural number to the sum\n        sum += i\n        # calculate the average by dividing the sum by n\n        average = sum / n\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop through the first n numbers\n    for i in range(1, number+1):\n        # add the current number to the sum and increment count\n        sum += i\n        count += 1\n        \n    # calculate the average and return a tuple of the sum and average\n    return (sum, sum/count)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Number should be a positive integer.\")\n\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and sum of squares to zero\n    sum_n = 0\n    sum_sq_n = 0\n\n    # iterate through the first n numbers and calculate sum and sum of squares\n    for i in range(number):\n        sum_n += i\n        sum_sq_n += i*i\n\n    # calculate the average\n    average = sum_n/number\n\n    # print the sum and average\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum_n)\n    print(\"Sum of squares of the first\", number, \"natural numbers is:\", sum_sq_n)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the number to the sum\n        sum += i\n        \n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum / count\n    \n    # return the result as a tuple\n    return (sum, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check if the number is even or not\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number is even\")\n    else:\n        print(\"The given number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        str1 (str): The string to search for repeated characters.\n\n    Returns:\n        str: The first repeated character found in the string, or an empty string if no repeated character is found.\n    \"\"\"\n    # Create a dictionary to store the characters in the string\n    char_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the first character\n        if char in char_dict:\n            return char\n\n        # If the character is not in the dictionary, add it with its count of 1\n        else:\n            char_dict[char] = 1\n\n    # If no repeated character is found, return an empty string\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Initialize variables for the current character and its count\n    current_char = str1[0]\n    count = 1\n    \n    # Iterate through the string\n    for i in range(1, len(str1)):\n        # If the current character is the same as the previous character, increment the count\n        if current_char == str1[i]:\n            count += 1\n        else:\n            # If the count is greater than 1, return the current character as the first repeated character\n            if count > 1:\n                return current_char\n            # Otherwise, reset the count and move on to the next character\n            count = 1\n            current_char = str1[i]\n            \n    # If the loop completes without finding a repeated character, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store character counts\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # if we reach this point, no character was repeated\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables\n    first_char = None\n    count = 0\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the current character has already been counted\n        if char in str1:\n            # increment the count for the current character\n            count += 1\n            # if the count is greater than 1, and the current character is the first repeated character, update the first_char variable\n            if count > 1 and (first_char is None or char < first_char):\n                first_char = char\n    \n    # return the first repeated character, or None if no repeated characters were found\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}  # create an empty dictionary to store character counts\n    for char in str1:\n        if char in char_count:  # check if the character is already in the dictionary\n            return char  # return the character if it is already in the dictionary\n        else:\n            char_count[char] = 1  # add the character to the dictionary with a count of 1\n    return \"No repeated character found.\"  # return a message if no repeated character is found"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {} # create an empty dictionary to store the frequency of each character\n    \n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = 1 # increment the frequency count for the character\n    \n    return None # if no repeated character found, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    char_set = set(str1)\n    # Convert the set back to a list and sort it\n    char_list = sorted(list(char_set))\n    # Check each character in the list for a match with the first character of the original string\n    for char in char_list:\n        if char == str1[0]:\n            return char\n    # If no match is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character and return its index\n    for index, count in enumerate(char_count.values()):\n        if count > 1:\n            return index"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character if it exists in the string.\n    If the string does not have a repeated character, it returns None.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_list.append(i)\n        i += 1\n    return lucid_list\n\n\ndef is_lucid(n):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludics.append(i)\n    return ludics\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a number is a lucid number or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit) == i for digit in str(i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    while lucid <= n:\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            if i % 5 == 0:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store lucid numbers\n    ludic_list = []\n\n    # Loop from 2 to n-1\n    for i in range(2, n+1):\n\n        # Check if i is a lucid number\n        if i == sum([int(d) for d in str(i)]):\n            ludic_list.append(i)\n\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == sum(int(digit) for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i*i*i >= n:\n            break\n        if i*i*i*i == n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i > 1 and i % 2 == 0:\n            for j in range(1, i//2+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words using split() method\n    words.reverse() # reverse the order of the words\n    return''.join(words) # join the words back into a string using join() method and space as the separator"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # split the string into words\n    words = s.split()\n    \n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # join the reversed words back into a string\n    reversed_s =''.join(words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them together with spaces\n    return''.join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # join the reversed words back into a string\n    result = \" \".join(words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as the separator\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words together with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list and join them back into a string with spaces\n    return''.join([word[::-1] for word in words])[::-1]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string by spaces and reverse the list\n    words = s.split()\n    words = words[::-1]\n    # join the words back together with spaces\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string with spaces in between\n    reversed_s =''.join(words)\n\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # initialize a boolean variable to true\n    is_prime = True\n\n    # check if the number is less than 2\n    if num < 2:\n        is_prime = False\n\n    # check if the number is divisible by any number from 2 to its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # return the boolean value of is_prime\n    return is_prime"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Check if a number is prime and return True if so, False otherwise.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Returns True if the given integer is a prime number, otherwise False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) # Output: True\nprint(is_prime(10)) # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Check if the given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi / 180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search the text for the pattern\n    matches = re.finditer(pattern, text)\n    \n    # Loop through the matches and get the first match\n    for match in matches:\n        return match.group(0), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"Found literal '{literal}' at index {start} to {end}\")\n    return literal\n\ntext = \"I love Python! It is the best programming language.\"\npattern = r'\\bPython\\b'\nfind_literals(text, pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = text[match.start():match.end()]\n        print(f\"Match found: '{literal}' with start index {match.start()} and end index {match.end()}\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        first_match = matches[0]\n        start_index = text.find(first_match)\n        end_index = start_index + len(first_match)\n        return first_match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a pattern in a given string and returns the matching substring, a start index, and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        literal = text[start_index:end_index]\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the list of bell numbers\n    bell = [0]\n\n    # Add the first two bell numbers\n    bell.append(bell[-1] + bell[-2])\n\n    # Loop through the remaining bell numbers\n    for i in range(2, n):\n        # Add the current bell number and the previous bell number\n        bell.append(bell[-1] + bell[-2])\n\n    # Return the nth bell number\n    return bell[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * (2*i - 1) // i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_Number(n//2)\n    else:\n        return 2 * bell_Number(n//2) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number using the Sieve of Eratosthenes algorithm.\n    '''\n    # Initialize a list of boolean values to represent prime numbers\n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    \n    # Iterate over all numbers up to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # If a number is prime, mark all its multiples as composite\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    # The nth bell number is the first prime number that is composite\n    for i in range(n+1):\n        if is_prime[i]:\n            return i"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initial values\n    a = 1\n    b = 1\n    \n    # loop for nth term\n    for i in range(1, n+1):\n        # calculate new values\n        c = a + b\n        a = b\n        b = c\n        \n        # print the result\n        print(c, end=' ')"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initializing variable bell\n    bell = 1\n    \n    # loop for n-1 times\n    for i in range(n-1):\n        # multiplying bell by 2\n        bell *= 2\n        \n        # adding 1 to each term\n        for j in range(2):\n            bell += 1\n    \n    # returning bell\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1,n+1): \n        bell.append(bell[-1]+bell[-2])\n    return bell[-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # base case\n    if n == 0:\n        return 0\n\n    # recursive case\n    else:\n        return (2*bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            continue\n        list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a new list with the kth element removed.\n    \"\"\"\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list(set(list1) - set([list1[L-1]]*L))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from a list, given by its index.\n\n    Parameters:\n    lst (list): the list to remove the kth element from\n    k (int): the index of the element to remove\n\n    Returns:\n    list: a new list with the same elements, but the kth element removed\n    \"\"\"\n\n    # create a copy of the list to avoid modifying the original\n    new_lst = lst.copy()\n\n    # remove the kth element\n    del new_lst[k-1]\n\n    return new_lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a list to store the elements of the list\n    new_list = []\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        # If the current element is not equal to the k'th element\n        if i!= L - 1:\n            # Add the element to the new list\n            new_list.append(list1[i])\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element from the list using list slicing\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # Index of the k'th element to be removed\n    list1.pop(k) # Remove the k'th element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1 # k = L - 1 since python indexing starts from 0\n    for i in range(len(list1)-1, -1, -1):\n        if i == k:\n            del list1[i]\n        else:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = test_list[i][N-1]\n            continue\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n_columns = len(test_list[0])\n    for i in range(n_columns):\n        col_max = max(test_list, key=lambda x: x[i])\n        print(col_max[i])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the length of the matrix\n    m = len(test_list)\n    # Initialize the maximum value to be a very large number\n    max_val = 0\n    # Loop through each row in the matrix\n    for i in range(m):\n        # Check if the current row has at least N columns\n        if len(test_list[i]) >= N:\n            # Calculate the nth column value and compare it with the current maximum value\n            nth_col_val = test_list[i][N-1]\n            if nth_col_val > max_val:\n                max_val = nth_col_val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, this function returns the maximum value of then'th column.\n    \"\"\"\n    max_value = float('-inf')\n    max_index = -1\n    for i in range(len(test_list)):\n        if i == N:\n            max_index = i\n        elif test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be the first element in the list\n    max_val = test_list[0][N-1]\n    \n    # Loop through the list of lists and update the maximum value if a larger value is found in the nth column\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be a very small number\n    max_val = float('-inf')\n    # Iterate over each row in the matrix\n    for row in test_list:\n        # If the current row has the nth column with a value greater than the current maximum value, update the maximum value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, test_list[i][N-1])\n        else:\n            max_value = max(max_value, test_list[i][i])\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []  \n    for i in range(len(lst)):  \n        merged_list.append([lst[i][0], lst[i][1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    merged_list = []  \n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # iterate over the tuple list\n    for tup in test_list:\n        # add each value to the cumulative sum\n        cum_sum += tup\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to keep track of the cumulative sum\n    cumulative_sum = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Get the current tuple element\n        current_element = test_list[i]\n\n        # Check if the current element is a number\n        if isinstance(current_element, (int, float)):\n            # Add the current element to the cumulative sum\n            cumulative_sum += current_element\n        else:\n            # If the current element is not a number, skip it and move on to the next one\n            continue\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            cumulative_sum += test_list[i][j]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0  # initialize cumulative sum to zero\n    for tup in test_list:  # loop through each tuple in the list\n        for val in tup:  # loop through each value in each tuple\n            cum_sum += val  # add value to cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for num in test_list:\n        cumsum += num\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average value to the averages list\n        averages.append(avg)\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # initialize an empty list to hold the averages\n    avg_list = []\n\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize a variable to hold the sum of the values in the tuple\n        total = 0\n\n        # loop through each value in the tuple and add it to the total\n        for val in tup:\n            total += val\n\n        # divide the total by the length of the tuple to get the average\n        avg = total / len(tup)\n\n        # add the average to the average_list\n        avg_list.append(avg)\n\n    # return the average_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        averages.append(sum / len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_nums = []\n    for num_list in nums:\n        total_nums.append(sum(num_list)/len(num_list))\n    return total_nums"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_list = []\n    for i in range(len(nums)):\n        averaged_list.append(sum(nums[i])/len(nums[i]))\n    return averaged_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_lists = [tuple(x) for x in nums]\n    avg_list = []\n    for num_tuple in num_lists:\n        avg_list.append(sum(num_tuple) / len(num_tuple))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple)/len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of both tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return None\n\n    # Perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    # Perform element-wise modulo operation\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples must be equal.\")\n        return\n    \n    # perform element wise modulo\n    result_tup = tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    \n    print(\"Result:\", result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should be of the same length!\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    current = 0\n    next_node = (d, 0)\n\n    # Check for the first node\n    if (d, 0) == (steps, 0):\n        count += 1\n\n    # Traverse the list of nodes\n    for i in range(1, len(steps)):\n        current = next_node\n        next_node = (steps[i], 0)\n\n        # Check for the node\n        if (next_node[0], next_node[1]) == (0, 0):\n            count += 1\n\n        # Check for the end node\n        if (next_node[0], next_node[1]) == (steps[-1], 0):\n            return count\n\n    # Return the count\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    start_x, start_y = 0, 0  # starting point in the form (x,y)\n    end_x, end_y = d, 0  # destination point in the form (x,y)\n    path = [(start_x, start_y)]  # path of visited points in the form [(x,y),...]\n    \n    # Initialize variables for binary search\n    left, right = 0, steps  # left and right endpoints of the binary search\n    min_jumps = steps  # minimum number of jumps required\n    \n    # Perform binary search to find the number of jumps required\n    while left <= right:\n        mid = (left + right) // 2\n        jumps = 0\n        for i in range(mid):\n            if path[-1][0] == end_x:\n                return jumps + 1\n            x, y = path[-1]\n            if y == 0:\n                return steps  # we can't jump higher than 0 steps\n            \n            if y > 0 and path[-1][1] == 0:\n                path.append((x, y - 1))\n                jumps += 1\n            elif y > 0:\n                path.append((x, y - 1))\n            elif y < 0 and path[-1][1] == 0:\n                path.append((x, y + 1))\n                jumps += 1\n            elif y < 0:\n                path.append((x, y + 1))\n        \n        if jumps < min_jumps:\n            min_jumps = jumps\n        if path[-1][0] == end_x:\n            return min_jumps\n        \n        if path[-1][0] < start_x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    steps_taken = 0\n    max_steps = 0\n    \n    # loop through each step\n    while steps_taken < steps:\n        # calculate the number of steps we can take in the next step\n        steps_left = steps - steps_taken\n        jump_length = min(steps_left, d)\n        \n        # update the number of steps taken and max_steps\n        steps_taken += jump_length\n        max_steps = max(max_steps, steps_taken)\n        \n        # update the distance we can move\n        d = max(0, d - jump_length)\n        \n    return max_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    if d > steps:\n        return 0\n    \n    jumps = 1\n    rest = steps - d\n    \n    while rest > 0:\n        if rest % 2 == 0:\n            rest = rest // 2\n            jumps += 1\n        else:\n            rest = (3*rest) + 1\n            jumps += 2\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Create a 2D array to store whether a jump is possible or not.\n    # The first element of the array will be the row of the initial position and the second element will be the column.\n    # The element will be True if a jump can be made from that position.\n    is_possible = [[True for j in range(steps+1)] for i in range(steps+1)]\n    \n    # Initialize the starting position.\n    row, col = 0, d\n    \n    # Check for the number of jumps required.\n    count = 0\n    while is_possible[row][col]:\n        count += 1\n        \n        # Update the position of the next jump.\n        new_row = row - 1\n        new_col = col\n        if new_row < 0:\n            new_row = 0\n        elif new_row >= steps:\n            new_row = steps-1\n        \n        if new_col < 0:\n            new_col = 0\n        elif new_col >= steps:\n            new_col = steps-1\n        \n        # Mark the next position as not possible.\n        is_possible[new_row][new_col] = False\n        \n        # Update the row and column of the next position.\n        row = new_row\n        col = new_col\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = steps\n    d = d\n    total_steps = 0\n    current_position = (0, 0)\n\n    # Loop until we reach the desired point\n    while (current_position[1]!= d):\n        # Move to the left by one step\n        current_position = (current_position[0] - 1, current_position[1])\n        total_steps += 1\n\n        # Check if we have reached the origin\n        if (current_position[0] == -1):\n            return -1\n\n    # If we reach the desired point, return the number of steps taken\n    return total_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    current = 0\n    next_pos = 0\n    visited = []\n\n    # Traverse through the steps\n    for step in range(steps):\n\n        # If the next position is already visited, then the next jump will be same as the current jump\n        if next_pos in visited:\n            jumps += 1\n            current = next_pos\n            next_pos = current\n\n        # If the next position is not visited, then move to the next position\n        else:\n            current = next_pos\n            visited.append(next_pos)\n            next_pos += d\n\n    # If the last position is not (0, 0), then the next jump will be same as the current jump\n    if next_pos!= (0, 0):\n        jumps += 1\n\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    distance = 0\n    jumps = 0\n\n    # Loop until the distance is greater than d\n    while distance <= d: \n        # Update the distance and check for a jump\n        distance += steps \n        if distance > d: \n            jumps += 1\n\n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    x, y = 0, 0\n    \n    for i in range(steps):\n        if x == d:\n            jumps += 1\n            x, y = 0, 0\n        else:\n            x += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Calculate the number of jumps required for each step\n    jumps = [0] * steps\n\n    # Starting from the first step, calculate the number of jumps required\n    for i in range(1, steps): \n        jumps[i] = jumps[i-1] + 1\n        # If the point of form (d, 0) is reached, exit the loop\n        if i == steps - 1 and d == 0: \n            break\n        # If the distance from (0, 0) to the point of form (d, 0) is greater than d, increment the jumps for the next step\n        elif abs(d) > abs(i-steps + 1): \n            jumps[i] += 1\n\n    # Return the minimum number of jumps required\n    return min(jumps)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of equal length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n        nums1 (list): List of numbers to be divided.\n        nums2 (list): List of numbers to divide by.\n\n    Returns:\n        list: List of results of division between corresponding elements of nums1 and nums2.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have equal length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length\")\n        return\n    \n    # Divide each element of the lists and append the result in a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: division by zero\")\n            return None\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists should have the same length.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Divide each element of the first list by the corresponding element of the second list\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    for i in range(len(nums)):\n        test_str = test_str.replace(nums[i], '')\n    return test_str + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    # define a list to store the numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the list\n        if char.isdigit():\n            num_list.append(char)\n    # reverse the list to move the numbers to the end\n    num_list.reverse()\n    # join the list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store numbers\n    num_list = []\n\n    # Loop through each character in the given string\n    for char in test_str:\n        # If the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # If the character is not a number, add it to the end of the string\n        else:\n            # Remove the last character from the string\n            test_str = test_str[:-1]\n\n    # Join the list of numbers into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Define a regular expression pattern to match numbers in the string\n    num_pattern = r'\\d+'\n\n    # Find all the numbers in the string using the regular expression pattern\n    nums = re.findall(num_pattern, test_str)\n\n    # Reverse the order of the numbers in the list\n    nums.reverse()\n\n    # Join the numbers back into a string\n    result = ''.join(nums)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing a list to store the numbers\n    num_list = []\n\n    # iterating over each character of the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n\n    # joining the characters of the string with the numbers in reverse order\n    result = ''.join(reversed(num_list))\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize the index of the last number found\n    last_num_index = -1\n\n    # Iterate through the list of characters\n    for index, char in enumerate(char_list):\n\n        # If the character is a number, move it to the end of the list\n        if char.isdigit():\n            last_num_index = index\n            char_list.pop(index)\n            char_list.append(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a variable to store the characters of the input string\n    chars = []\n\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the list of characters\n        if char.isdigit():\n            chars.append(char)\n        # Otherwise, add the character to the beginning of the list of characters\n        else:\n            chars.insert(0, char)\n\n    # Join the characters in the list into a single string\n    result = ''.join(chars)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    nums_str = ''\n\n    # loop through the string and check if each character is a number\n    for char in test_str:\n        if char.isdigit():\n            # if it is a number, add it to the nums_str\n            nums_str += char\n\n    # loop through the original string and check if each character is a number\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            # if it is a number, check if it is the last character in the string\n            if i == len(test_str) - 1:\n                # if it is the last character, append it to the nums_str\n                nums_str += char\n            # if it is not the last character, move it to the end of the string\n            else:\n                # use slicing to extract the characters from the current index up to the end of the string\n                num_str = test_str[i:]\n                # concatenate the num_str with the nums_str to move the number to the end of the string\n                nums_str += num_str\n\n    # return the modified string\n    return nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    letters = []\n\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n\n    return ''.join(letters) + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    new_str = \"\".join(num_list)\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize the result to zero\n    result = 0\n    \n    # sort the list in ascending order\n    a.sort()\n    \n    # iterate over the list\n    for i in range(len(a)):\n        # check if the next number is divisible by the current number\n        if a[i+1] % a[i] == 0:\n            # if so, increase the result\n            result += 1\n            \n    # return the result\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the given list in ascending order\n    a.sort()\n\n    # Initialize variables\n    max_size = 1\n    current_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the difference between the current element and the next element is divisible by 3, increase the size of the subset\n        if (a[i] - a[i-1]) % 3 == 0:\n            current_size += 1\n        else:\n            # If the size of the subset is greater than the maximum size, update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n\n            # Reset the size of the subset\n            current_size = 1\n\n    # If the size of the subset is greater than the maximum size, update the maximum size\n    if current_size > max_size:\n        max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(arr):\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize the max size of the subset to zero\n    max_size = 0\n\n    # initialize the current size of the subset to zero\n    curr_size = 0\n\n    # iterate through the array\n    for num in arr:\n        # if the current number is divisible by the previous number,\n        # increment the size of the subset\n        if num % arr[curr_size] == 0:\n            curr_size += 1\n\n        # if the size of the subset is greater than the max size,\n        # update the max size\n        if curr_size > max_size:\n            max_size = curr_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize a set to store the largest subsets\n    subsets = set()\n\n    # Iterate over all possible subsets\n    for i in range(1, len(a) + 1):\n        subset = []\n        for j in range(i):\n            # If the element is divisible by the j-th element, add it to the subset\n            if a[j] % a[i - 1] == 0:\n                subset.append(a[j])\n        # Add the subset to the set of largest subsets\n        subsets.add(tuple(subset))\n\n    # Find the largest subset in the set\n    max_size = 0\n    for subset in subsets:\n        subset_size = len(subset)\n        if subset_size > max_size:\n            max_size = subset_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create an empty list to store the subsets\n    subsets = []\n\n    # Find the maximum value in the list\n    max_val = max(a)\n\n    # Iterate through the list of values\n    for i in range(1, max_val + 1):\n        # Create an empty set to store the numbers in the subset\n        subset = set()\n\n        # Iterate through the list of values again\n        for j in range(max_val, 0, -1):\n            # If the current number is divisible by i, add it to the subset\n            if j % i == 0:\n                subset.add(j)\n\n            # If the subset has all the required numbers, add it to the subsets list\n            if len(subset) == i:\n                subsets.append(subset)\n\n    # Find the size of the largest subset\n    largest_size = len(subsets[0])\n\n    # Return the size of the largest subset\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the input list in descending order\n    a.sort(reverse=True)\n\n    # initialize variables to keep track of the largest subset size and the last element of the subset\n    max_size = 0\n    last_element = 0\n\n    # loop through the list\n    for i in range(len(a)):\n\n        # if the current element is not divisible by the last element, add the current element to the subset\n        if a[i] % last_element!= 0:\n\n            # increment the largest subset size and update the last element of the subset\n            max_size += 1\n            last_element = a[i]\n\n        # if the current element is divisible by the last element, update the last element of the subset\n        else:\n            last_element = a[i]\n\n        # if the largest subset size is greater than the current maximum, update the maximum\n        if max_size > max_size:\n            max_size = max_size\n\n    # return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize variables to keep track of the size and largest subset\n    size = 0\n    largest_set = []\n    # loop through the list\n    for i in range(len(a)):\n        # check if i is divisible by each number in a[i:]\n        for j in range(i+1, len(a)):\n            # if a[j] is divisible by a[i], add 1 to size and append a[i] to largest_set\n            if a[j] % a[i] == 0:\n                size += 1\n                largest_set.append(a[i])\n                break\n        # if we've found a divisible pair, break out of the inner loop\n        if size >= len(largest_set) // 2:\n            break\n    # return the size and largest subset\n    return size, largest_set"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize the maximum size to be 0 and the current size to be 0\n    max_size = 0\n    curr_size = 0\n    # Iterate through the list of numbers\n    for num in a:\n        # If the current number is divisible by the next number, update the current size\n        if num % a[curr_size] == 0:\n            curr_size += 1\n        # If the current size is greater than the maximum size, update the maximum size\n        if curr_size > max_size:\n            max_size = curr_size\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    # Create a list to store the size of the largest subset for each possible subset size\n    subsets = [0] * (len(a) + 1)\n    \n    # Initialize the maximum size as 0\n    max_size = 0\n    \n    # Initialize the maximum subset as an empty list\n    max_subset = []\n    \n    # Loop through all possible subset sizes from 1 to the length of the input list\n    for i in range(1, len(a) + 1):\n        # Loop through all possible starting indices for the current subset\n        for j in range(len(a) - i + 1):\n            # Check if the sum of the current subset is divisible by 2\n            if sum(a[j:j+i]) % 2 == 0:\n                # If it is, check if the subset size is greater than the current maximum\n                if subsets[i] > max_size:\n                    # If it is, update the maximum size and maximum subset\n                    max_size = subsets[i]\n                    max_subset = a[j:j+i]\n    \n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    # Sort the input list in non-increasing order\n    a.sort(reverse=True)\n\n    # Initialize two pointers: i and j\n    i = 0\n    j = 1\n\n    # Initialize the largest subset size to be 1\n    max_size = 1\n\n    # Iterate over the input list\n    while j < len(a):\n        # If the difference between the jth and (j+1)th elements is divisible by 2, increase the largest subset size\n        if a[j] - a[j-1] % 2 == 0:\n            max_size += 1\n\n        # Move the pointer to the right\n        j += 1\n\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 1:\n        return find_median(arr1, arr2, n)\n    else:\n        return find_median(arr1, arr2, n//2)\n\ndef find_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        if arr1[0] < arr2[0]:\n            return arr1[0]\n        else:\n            return arr2[0]\n    else:\n        mid1 = n//2\n        mid2 = n - mid1\n        if arr1[mid1-1] < arr2[mid2-1]:\n            return find_median(arr1[:mid1], arr2[mid2:], n-mid2)\n        else:\n            return find_median(arr1[mid1:], arr2[:mid2], n-mid1)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Find the middle index of both arrays\n    mid1 = n // 2\n    mid2 = n // 2 + n % 2\n\n    # Calculate the median of both arrays\n    if n % 2 == 0:\n        median = (arr1[mid1 - 1] + arr1[mid1]) / 2\n    else:\n        median = arr1[mid1]\n\n    # Compare the median with the middle element of each array\n    if arr1[mid1] < median < arr2[mid2]:\n        return arr1[mid1]\n    else:\n        return arr2[mid2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median based on the length of the list\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two arrays\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort both lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the length of the lists\n    m = len(arr1)\n\n    # If length of arr1 is odd, median is in arr1[n/2]\n    if m % 2 == 1:\n        return arr1[n//2]\n    # If length of arr1 is even, median is average of arr1[n/2] and arr1[n/2-1]\n    else:\n        return (arr1[n//2] + arr1[n//2-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the minimum value in the first list\n    min_val = min(arr1[0], arr2[0])\n    # Initialize the pointers for the first and second arrays\n    i, j = 0, 0\n    # Initialize the median variable\n    median = None\n    # Loop until we have checked all elements in both arrays\n    while i < n and j < n:\n        if arr1[i] < min_val:\n            # Swap the values and increment the pointer for the first array\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            i += 1\n        elif arr2[j] < min_val:\n            # Swap the values and increment the pointer for the second array\n            arr2[i], arr2[j] = arr2[j], arr2[i]\n            j += 1\n        else:\n            # We have found the minimum value in both arrays\n            if median is None:\n                # This is the first time we have found a value\n                median = arr1[i]\n            # Update the median value if we have found both values\n            if median is not None and arr1[i] < median:\n                median = arr1[i]\n            if median is not None and arr2[j] < median:\n                median = arr2[j]\n            # Increment both pointers for the next iteration\n            i += 1\n            j += 1\n    # Return the median value\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    merged_list = arr1 + arr2\n    \n    # sort the merged list\n    merged_list.sort()\n    \n    # find the median\n    mid = len(merged_list) // 2\n    if len(merged_list) % 2 == 0:\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    arr1: a sorted list of integers\n    arr2: a sorted list of integers\n    n: the size of both arrays\n    \n    This function returns the median of the two arrays using a modified version of the quickselect algorithm.\n    \n    The algorithm works by recursively dividing the array into two halves until the median is found. The median is the middle element of the two halves.\n    \n    The time complexity of this algorithm is O(n log n) in the worst case, where n is the size of the array.\n    \"\"\"\n    \n    # Find the midpoint of both arrays\n    mid1 = n//2\n    mid2 = n - mid1\n    \n    # Check if the middle elements of the two arrays are equal\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n    \n    # If the first array has a smaller median, divide it into two halves\n    if arr1[mid1] < arr2[mid2]:\n        # If the first array has an even number of elements, choose the right half as the first half\n        if n % 2 == 0:\n            return get_median(arr1[mid1+1:], arr2, mid1)\n        # If the first array has an odd number of elements, choose the median as the first half\n        else:\n            return get_median(arr1[mid1+1:], arr2, mid1)\n    # If the second array has a smaller median, divide it into two halves\n    else:\n        # If the second array has an even number of elements, choose the left half as the second half\n        if n % 2 == 0:\n            return get_median(arr1, arr2[mid2:], mid2)\n        # If the second array has an odd number of elements, choose the median as the second half\n        else:\n            return get_median(arr1, arr2[mid2:], mid2+1)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the middle elements of the two sorted arrays\n    mid1 = arr1[n//2]\n    mid2 = arr2[n//2]\n    \n    # If the length of the two arrays is even, return the average of the middle two elements\n    if n%2 == 0:\n        return (mid1 + mid2) / 2\n    \n    # If the length of the two arrays is odd, return the middle element\n    else:\n        return mid1"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the nth power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The exponent.\n\n    Returns:\n    A list of numbers, where each number is the nth power of the corresponding\n    number in the input list.\n    '''\n\n    return [x ** n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Create a list to store the n-th power of each number\n    powers = []\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the n-th power of the number and append it to the powers list\n        powers.append(num**n)\n    # Return the powers list\n    return powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    power = []\n    for num in nums:\n        power.append(num ** n)\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        print(string.upper())\n    else:\n        print(string)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # checking if the list is empty\n    if len(newList) == 0: \n        print(\"The list is empty\") \n        return \n\n    # swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0] \n\n    print(\"The modified list is:\", newList) "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if the length of the list is less than 2, return the same list\n    if len(newList) < 2:\n        return newList\n    \n    # else, swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is greater than 1\n    if length > 1:\n        \n        # Check if the list is empty\n        if length == 0:\n            return []\n        \n        # Get the last element index\n        lastIndex = length - 1\n        \n        # Interchange the first and last elements\n        newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n        \n        # Return the modified list\n        return newList\n    else:\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    else:\n        print(\"The given list should contain at least 2 elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # print(newList)\n    # print(\"Length of list: \", len(newList))\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        # print(\"After swapping: \", newList)\n        return newList\n    else:\n        print(\"List should have at least 2 elements.\")\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1:\n        print(\"List must have at least two elements.\")\n    else:\n        # swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"New List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    s = 2 * r * math.sin(pi / 3)\n    area = (4 / 3) * math.pi * r * r * math.sin(pi / 3)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        a = r * math.sin(math.pi / 3)\n        b = r * math.sin((2 * i) * math.pi / 3)\n        c = r * math.sin((i + 1) * math.pi / 3)\n        s = (a + b + c) / 2\n        area = max(area, math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2*r*r - r**2\n    a = 2*r\n    b = 2*r*r + r**2\n    c = 2*r*r - r**2\n    area = max(s, a, b, c) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with side length 2r and an angle of 90 degrees\n    area = 0.5 * r ** 2\n    # Calculate the area of a triangle with side length r and an angle of 60 degrees\n    second_area = math.sqrt(3) / 2 * r ** 2\n    # Calculate the area of a semicircle with radius r\n    semicircle_area = math.pi * r ** 2\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_triangle_area = max(area, second_area, semicircle_area)\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle's area\n    semi_area = 2 * r ** 2 * (1 - (2 * r) / (2 * r + 1))\n    \n    # calculate the triangle's area using Heron's formula\n    area = 0.5 * r ** 2 * (semi_area ** 2 - semi_area) ** 0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the semi-circle radius\n    semi_r = r / 2\n\n    # calculate the area of the largest possible triangle\n    area = 0.5 * (semi_r ** 2)\n\n    # calculate the area of the smallest possible triangle\n    area_min = 0.5 * (semi_r ** 2) * (semi_r / 2)\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_max = area\n\n    # return the largest area\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Compute the semi-diameter of the semicircle\n    semi_d = 2 * r\n\n    # Compute the circumference of the smallest triangle\n    a = math.sqrt(semi_d**2 - 2 * semi_d)\n    c = 2 * math.sqrt(semi_d)\n\n    # Compute the area of the smallest triangle\n    s = (math.sqrt(3) / 4) * a**2\n\n    # Compute the area of the largest triangle\n    largest_area = math.sqrt(2 * r * c)\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # define the semi-circle\n    x = r * math.cos(math.pi/3)\n    y = r * math.sin(math.pi/3)\n\n    # define the three vertices of the triangle\n    A = (0, 0)\n    B = (x, 0)\n    C = (0, y)\n\n    # calculate the area of the triangle using Heron's formula\n    s = 0.5 * math.sqrt(A[0]*(A[0] + B[0] + C[0]) + A[1]*(A[1] + B[1] + C[1]))\n    area = math.sqrt(s*(s-A[0])*(s-B[0])*(s-C[0]))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (3 * r ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculating the area of a triangle using Heron's formula\n    def heron_formula(s):\n        return (s * (s - 1) * (s - 2)) ** 0.5\n\n    # Calculate the semi-perimeter of the circle\n    s = 2 * r\n\n    # Finding the area of the largest triangle that can be inscribed in the circle\n    area = max(heron_formula(s), heron_formula(2 * r - 1))\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    - array: a sorted list of natural numbers\n    - start: the starting index of the array (default: 0)\n    - end: the ending index of the array (default: None, i.e., find the smallest missing number from the beginning of the array)\n\n    Returns:\n    - the smallest missing number, or None if the array is empty or contains duplicates\n    \"\"\"\n    if not array:\n        return None\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n\n    # Find the last index of the missing number\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    # Check if the array contains duplicates\n    for i in range(start, end):\n        if i + start not in array:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= 0 and array[i] - i == array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = max(array)\n\n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif i < array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n\n    Keyword Args:\n    start (int): The starting index for the search. Default is 0.\n    end (int): The ending index for the search. If None, the search continues until the end of the array. Default is None.\n\n    Returns:\n    int: The smallest missing number.\n    \"\"\"\n    if not array:\n        return None\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif i < array[i]:\n            return i\n        else:\n            return i - 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # If the end index is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Iterate through the array from the start index to the end index (excluding the end index)\n    for i in range(start,end):\n        # Check if the current index is equal to the sum of the next index and the end index\n        if array[i] == i+start:\n            # If it is, then there is no missing number in the array, so return the current index as the answer\n            return i+start\n\n    # If the loop completes without finding a missing number, return None as the answer\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return None\n\n    # if start or end is not provided, set it to the minimum or maximum value of the array respectively\n    if start is None:\n        start = min(array)\n    if end is None:\n        end = max(array)\n\n    # loop through the range of array indices from start to end\n    for i in range(start, end + 1):\n        # if the current index is not present in the array, return it\n        if i not in array:\n            return i\n\n    # if all indices in the range have been used, return None as the smallest missing number\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is not sorted, the function will sort the list first.\n    \"\"\"\n    # check if the list is sorted\n    if array!= sorted(array):\n        array.sort()\n    # find the missing number\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if adj not in sub:\n        sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+i, y+j) for i in [-1,0,1] for j in [-1,0,1] if (x+i, y+j) not in sub] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the coordinates of the given element\n    x, y = ele\n    \n    # Calculate the adjacent coordinates\n    if x > 0:\n        if y > 0:\n            sub.append((x-1, y-1))\n        sub.append((x-1, y))\n        if y < 10:\n            sub.append((x-1, y+1))\n    if y > 0:\n        sub.append((x, y-1))\n    if x < 10:\n        if y > 0:\n            sub.append((x+1, y-1))\n        sub.append((x+1, y))\n        if y < 10:\n            sub.append((x+1, y+1))\n    if y < 10:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(coord):\n    x, y = coord\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj_coords = []\n\n    # adding adjacent coordinates to the list\n    if x > 0 and y > 0:\n        adj_coords.append((x - 1, y - 1))\n    if x > 0 and y < len(sub)-1:\n        adj_coords.append((x - 1, y + 1))\n    if x < len(sub)-1 and y > 0:\n        adj_coords.append((x + 1, y - 1))\n    if x < len(sub)-1 and y < len(sub)-1:\n        adj_coords.append((x + 1, y + 1))\n    if x > 0:\n        adj_coords.append((x - 1, y))\n    if x < len(sub)-1:\n        adj_coords.append((x + 1, y))\n    if y > 0:\n        adj_coords.append((x, y - 1))\n    if y < len(sub)-1:\n        adj_coords.append((x, y + 1))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        for i in range(len(ele)):\n            sub.append(ele[i])\n            adjac((ele[i][0], ele[i][1]-1), sub)\n            adjac((ele[i][0], ele[i][1]+1), sub)\n            adjac((ele[i][0]-1, ele[i][1]), sub)\n            adjac((ele[i][0]+1, ele[i][1]), sub)\n            sub.pop()\n        return sub\n    elif isinstance(ele, list):\n        for i in range(len(ele)):\n            sub.append(ele[i])\n            adjac(ele[i], sub)\n            sub.pop()\n        return sub\n    else:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # get the x and y coordinates of the element\n    x, y = ele\n    \n    # loop over all possible adjacent coordinates\n    adjacents = [(x+dx, y+dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]]\n    \n    # filter out those that are already in the sublist\n    adj_sub = [adj for adj in adjacents if adj not in sub]\n    \n    # return the combined list of adjacents and the original sublist\n    return adj_sub + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    # list of adjacent coordinates\n    adj = []\n    # get the tuple of the element\n    t = tuple(ele)\n    # iterate through the elements of the tuple\n    for i in range(len(t)):\n        # get the adjacent element\n        adj_ele = t[i]\n        # check if the adjacent element is not in the sublist\n        if adj_ele not in sub:\n            # add the adjacent element to the sublist\n            sub.append(adj_ele)\n            # add the adjacent element to the list of adjacent coordinates\n            adj.append(adj_ele)\n            # recursively call the function with the adjacent element\n            adj += adjac(adj_ele, sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            new_x = x + i\n            new_y = y + j\n            if 0 <= new_x < 10 and 0 <= new_y < 10:\n                adj.append((new_x, new_y))\n    adj.append((x, y))\n    for coord in adj:\n        sub.append(coord)\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = [' ', '\\t', '\\n']\n    for space in spaces:\n        text = text.replace(space, '_')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Initialize an empty list to store the modified words\n    modified_words = []\n    # Loop through each word in the string\n    for word in text.split():\n        # Check if the word contains a space\n        if'' in word:\n            # Split the word into two parts\n            parts = word.split()\n            # Loop through each part of the word and replace spaces with underscores\n            for i in range(len(parts)):\n                parts[i] = parts[i].replace(' ', '_')\n            # Join the parts back together to form a new word\n            new_word =''.join(parts)\n            # Add the modified word to the list of modified words\n            modified_words.append(new_word)\n        else:\n            # Add the original word to the list of modified words\n            modified_words.append(word)\n    # Join the modified words back together to form the modified string\n    modified_text =''.join(modified_words)\n    # Return the modified string\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Removing whitespaces from the beginning and end of the string\n    text = text.strip()\n\n    # Looping through each character of the string\n    for i in range(len(text)):\n        # Checking if the current character is a space\n        if text[i] =='':\n            # Adding underscore to the current position in the string\n            text = text[:i] + '_' + text[i+1:]\n        # Checking if the current character is an underscore\n        elif text[i] == '_':\n            # Adding space to the current position in the string\n            text = text[:i] +'' + text[i+1:]\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_count] = num_list[zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new empty list to store non-zero values\n    non_zero_list = []\n    # Loop through each element of the input list\n    for num in num_list:\n        # If the element is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Copy the non_zero_list to the beginning of the input list\n    num_list[:0] = non_zero_list\n    # Return the modified input list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Traverse through the list from the beginning\n    for i in range(len(num_list)):\n\n        # If the current element is zero, swap it with the last non-zero element\n        if num_list[i] == 0:\n            j = len(num_list) - 1\n            while j >= 0 and num_list[j]!= 0:\n                j -= 1\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for i in range(len(num_list) - 1, zero_index - 1, -1):\n        num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        for i in range(len(num_list)-1, zero_index, -1):\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1 # Initialize the index of the zeroes to be -1\n    for i in range(len(num_list)): # Iterate over the elements of the list\n        if num_list[i] == 0: # If the element is zero\n            zero_index = i # Update the index of the zeroes\n    if zero_index!= -1: # If there is at least one zero\n        for j in range(len(num_list)-1, zero_index-1, -1): # Iterate over the elements of the list from the last to the zeroes\n            num_list[j+1] = num_list[j] # Move the zeroes to the next position\n    return num_list # Return the updated list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n        else:\n            if count > 0:\n                num_list[i-count], num_list[i] = num_list[i], num_list[i-count]\n            count = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            zero_count += 1\n        else:\n            break\n    if zero_count > 0:\n        print(f'Moved {zero_count} zero(s) to the end of the list.')\n    else:\n        print('The list is already zero-free.')\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # Traverse the list until i is greater than j\n    while i < j:\n        # If the element at i is not zero\n        if num_list[i]!= 0:\n            # Move the element at i to the next position\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Decrement j\n            j -= 1\n        else:\n            # Increment i\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n        i += 1"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR the first and last elements to get the middle element\n    middle = arr[0] ^ arr[n-1]\n\n    # XOR the middle element with all other elements to get the xor sum\n    xor_sum = middle ^ sum(arr[1:n-1])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over the list from index 0 to n-1\n    for i in range(n):\n        # iterate over the list from index i+1 to n-1\n        for j in range(i+1, n):\n            # calculate the xor of the elements at indices i and j\n            xor = arr[i] ^ arr[j]\n            # add the xor to the sum variable\n            sum += xor\n    # return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize variables for the sum and XOR sum\n    xor_sum = 0\n    pair_sum = 0\n\n    # Iterate over all possible pairs of indices\n    for i in range(n):\n        for j in range(i + 1, n):\n            # XOR the pair of numbers\n            xor_sum ^= arr[i] ^ arr[j]\n            # Add the pair of numbers to the pair sum\n            pair_sum += arr[i] + arr[j]\n\n    # Return the XOR sum and the pair sum\n    return xor_sum, pair_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a number n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes an array and its length n and returns the sum of xor of all pairs of numbers in the array.\n    \"\"\"\n    # XOR operation is used to find the xor of two numbers.\n    xor = 0\n    # Loop through all possible pairs of numbers from 0 to n-1.\n    for i in range(n):\n        for j in range(i+1,n):\n            # XOR the current pair of numbers and add it to the sum.\n            xor ^= arr[i] ^ arr[j]\n    # Return the final sum of xor of all pairs of numbers in the array.\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    xor = 0\n\n    for i in range(0,n):\n        xor ^= arr[i]\n\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize variables for the sum and xor sum\n    xor_sum = 0\n    sum_arr = [0] * n\n\n    # Iterate through the list\n    for i in range(n):\n        # Update the xor sum and sum array\n        xor_sum ^= arr[i]\n        sum_arr[i] = xor_sum\n\n    # Find the sum of the sum array\n    sum_of_sum = sum(sum_arr)\n\n    # Return the xor sum and sum of the sum array\n    return xor_sum, sum_of_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while hq.heapify(iterable):\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a list\n    arr = list(iterable)\n    # Create a max heap from the list\n    hq.heapify(arr)\n    # Extract the maximum element from the max heap and append it to the sorted list\n    sorted_arr = [hq.heappop(arr)]\n    # Repeatedly extract the maximum element from the max heap and append it to the sorted list\n    while arr:\n        sorted_arr.append(hq.heappop(arr))\n    return sorted_arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = [None] * len(iterable)\n    hq.heapify(heap)\n    for item in iterable:\n        if item > heap[0]:\n            hq.heappushpop(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    heap = iterable[:]\n    hq.heapify(heap)\n    for i in range(len(heap)-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, heapq.heappop(heap))\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    # create a min heap from the given iterable\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    \n    # extract the smallest element from the min heap and append it to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    # create a max heap from the given iterable\n    heap = hq.heapify(iterable)\n    # remove elements from the max heap and return them in sorted order\n    return [hq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    hq.heapify(iterable)  # Build max heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    # Extract elements from heap\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(iterable, iterable[0])\n        heapify(iterable, i, 0)\n\ndef heapify(iterable, n, i):\n    '''\n    Helper function to build max heap from the given list.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and iterable[left] > iterable[largest]:\n        largest = left\n    if right < n and iterable[right] > iterable[largest]:\n        largest = right\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"No Profit and No Loss\"\n    elif sale_amount > 0:\n        return \"Only Loss\"\n    else:\n        return \"Only Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return False\n    \n    # Check if the actual cost is equal to the sale amount\n    elif actual_cost == sale_amount:\n        return True\n    \n    # If the actual cost is less than the sale amount, it means there is a loss\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost - sale_amount == 0:\n        return True\n    elif actual_cost - sale_amount > 0:\n        return False\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return False\n\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit is positive and the loss is positive\n    if profit > 0 and loss > 0:\n        return True\n\n    # If the profit is negative or the loss is negative, then the amount has no profit and no loss\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Returns:\n        True if no profit and no loss, False otherwise\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"There is no profit and no loss.\")\n    else:\n        print(\"There is a profit and no loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = sale_amount - actual_cost\n\n    if profit > 0 and actual_cost > 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit <= 0 and actual_cost <= 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit > 0:\n        print(\"The given amount has a loss but not a profit\")\n    else:\n        print(\"The given amount has a profit but not a loss\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    #Calculate the wind chill temperature in Celsius\n    c = (13.12 + 0.6215*t - 11.37*math.log(t) + 0.3965*v**0.16)\n    \n    #Round the wind chill temperature to the nearest integer\n    ci = math.ceil(c)\n    \n    return ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    float: The wind chill index rounded to the next integer.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index using the formula:\n    # WCI = 42.9 + (21.3 - 0.704 * v) * t_f + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24.97 * v + 11.3 * (t_f - 23.12) * (t_f - 23.12)\n    # WCI = 42.9 + 24"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    wind_chill_c = round(35.74 + 0.6215*t - 35.75*math.exp(11.34*t/(t+237.3)))\n    wind_chill_f = round(((wind_chill_c * 9/5) + 32), 1)\n    \n    return wind_chill_f"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Converting temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculating the wind chill index using the formula from the WMO Manual\n    wc = 13.12 + 0.6215 * k - 35.75 * math.log(k) + 0.4275 * v**0.16 + 0.5725 * v - 0.00986 * k**1.5\n\n    # Rounding the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * math.pow(v, 0.16) - 0.5778 * math.pow(v, 0.16) * math.log(t)\n    wind_chill_index = int(round(c))\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # Calculate wind chill index\n    if v >= 10:\n        wc = 13.12 + 0.6215 * t_f - 11.37 * math.log(t_f) + 0.3965 * v\n    elif v < 10:\n        wc = 11.37 + 0.4475 * t_f - 0.12 * math.log(t_f) + 0.0068 * v\n\n    # Round to nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): wind velocity in km/h\n    t (float): temperature in celsius\n\n    Returns:\n    int: wind chill index rounded to the next integer\n\n    \"\"\"\n    c = 13.12 + (0.6215 * t) + (11.37 * math.log10(v)) - (0.3965 * t * math.log10(v)) + (0.5688 * math.log10(v) * math.log10(v)) - (0.0013 * t * t * math.log10(v))\n    w = c + 273.15\n    return round(w)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 0.621371192237334 # Convert from km/h to m/s\n    T = t + 273.15 # Convert from celsius to Kelvin\n    # Calculate the dew point temperature\n    dp = 243.04 * (1 - math.exp(-(17.625 * T) / (T + 243.04)))\n    # Calculate the wind chill index\n    wci = 25.4 * dp / (math.log((wind_speed / 10) + 0.16) * math.exp((dp - 273.15) / 10))\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in celsius\n    \n    Returns:\n    int: Wind chill index rounded to the next integer\n    '''\n    \n    # Calculate the dewpoint temperature\n    dewpoint = math.fsum([((10 ** (-6)) / (273.15 - t)) * (10 ** (6) / (10 ** (6) - 10 ** (-6) / (273.15 - t))), 0, 0])\n    \n    # Calculate the heat index\n    heat_index = math.fsum([((10 ** (6)) / (t + (10 ** (-6)) / (273.15 - t)))), 0, 0])\n    \n    # Calculate the wind chill index\n    wind_chill_index = math.floor((v / dewpoint) + (13.12 * ((heat_index - 32) ** 0.16)))\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the dew point temperature\n    dp = t - (0.0621 * v ** 0.16) + ((v / 10) * 0.0183)\n\n    # Calculate the heat index\n    h = 0.5 * dp + ((t - dp) * (13 - 0.621 * t + 10.37 * t ** 2 - 0.388 * t ** 3))\n\n    # Calculate the wind chill index\n    wc = math.ceil(23.79 + (0.621 * v ** 0.16) - (11.37 * dp ** 0.225) + (0.3965 * t ** 0.5) - ((2.538 * v ** 0.16) * dp ** 0.225))\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    start_with_lower = []\n\n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if the name starts with a lowercase letter, append it to the start_with_lower list\n            start_with_lower.append(name)\n\n    # sum the length of the names in the start_with_lower list\n    sum_length = sum([len(name) for name in start_with_lower])\n\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper(): # if the first letter is uppercase, skip the name\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Define a list to store the non-lowercase names\n    non_lowercase = []\n\n    # Loop through the sample_names list and append names that start with a lowercase letter to the non_lowercase list\n    for name in sample_names:\n        if name[0].islower():\n            non_lowercase.append(name)\n\n    # Initialize a variable to store the sum of the lengths of the non-lowercase names\n    total_length = 0\n\n    # Loop through the non_lowercase list and add the length of each name to the total_length variable\n    for name in non_lowercase:\n        total_length += len(name)\n\n    # Return the total_length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize a variable to store the sum of the lengths of names that pass the filter\n    total = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and move on to the next name\n            continue\n        \n        # otherwise, add the length of the name to the running total\n        total += len(name)\n    \n    # return the total sum of the lengths of names\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to keep track of the sum of the lengths of the names after removing the lowercase names\n    sum_of_lengths = 0\n\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, remove the name from the list and continue\n            sample_names.remove(name)\n            continue\n        # If the name does not start with a lowercase letter, add the length of the name to the sum_of_lengths variable\n        sum_of_lengths += len(name)\n\n    # Return the sum_of_lengths variable\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of names lengths\n    sum_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name\n            continue\n        # Otherwise, add the length of the name to the sum\n        else:\n            sum_length += len(name)\n    \n    # Return the sum of names lengths\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name.startswith(name[0].lower())]\n    sum_length = sum([len(name) for name in filtered_names])\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub(r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis and what is inbetween them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)') # regular expression to match parenthesis\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    cleaned_items = pattern.sub('', items)\n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Define a regular expression pattern to match parentheses\n    pattern = r'\\([^)]*\\)'\n\n    # Use the re.sub() function to replace all occurrences of parentheses with an empty string\n    result = re.sub(pattern, '', items)\n\n    # Return the cleaned string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match parenthesis and what's between them\n    pattern = re.compile(r'\\([^()]+\\)')\n    # Use the pattern to find all the parenthesis and what's between them in the string\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return is_nonagonal(n - 1) + n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first row of the matrix\n    row = [1]\n\n    # Initialize the second row of the matrix\n    row2 = [1, 1]\n\n    # Initialize the nth nonagonal number\n    nonagonal = 0\n\n    # Calculate the number of rows in the matrix\n    num_rows = n // 2\n\n    # Loop through the rows of the matrix\n    for i in range(1, num_rows + 1):\n\n        # Append the product of the previous row and the next row to the nonagonal number\n        nonagonal += row[i] * row2[i]\n\n        # Swap the rows of the matrix and reset the next row\n        row[i], row2[i] = row2[i], row[i]\n\n    # Return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-2) + 2*is_nonagonal(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the sum of squares of numbers\n    sum_of_squares = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the square of the number to the sum of squares\n        sum_of_squares += i ** 2\n\n    # Return the n-th nonagonal number\n    return n * (n - 1) - sum_of_squares"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer greater than 0.\"\n    elif n == 1:\n        return 1\n    else:\n        nonagonal_numbers = [i for i in range(1, n+1)]\n        return sum(nonagonal_numbers[1:-1])"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    \n    nonagonal_number = 1\n    counter = 1\n    \n    while counter <= n:\n        nonagonal_number += 1\n        counter += 1\n    \n    return nonagonal_number - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # check if the input is valid\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # calculate the nth nonagonal number\n    nonagonal_num = n * (n + 1) // 2\n\n    # return the nth nonagonal number\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = (n*(n+1))//2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    \n    # Compute the number of sides of a regular n-gon\n    num_sides = 2 * n - 1\n    \n    # Compute the sum of the squares of the first n-1 nonagonal numbers\n    squares_sum = (n * (n + 1) * 0.5) ** 2\n    \n    # Return the sum of the squares of the first n-1 nonagonal numbers\n    return squares_sum"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[^z]*z[^z]*\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a pattern for matching 'z'\n    pattern = r'\\b[Zz]\\w*\\b'\n    # Use regex search function to find all occurrences of 'z' in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and check if they are at the start or end of a word\n    for match in matches:\n        if match.startswith('z'):\n            if not match.endswith('z'):\n                print(f'{match} found at the start of the word')\n        elif match.endswith('z'):\n            if not match.startswith('z'):\n                print(f'{match} found at the end of the word')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-z])[zZ]\\b' # match 'z' except at the start of the word\n    return bool(re.search(pattern, text)) # return True if a match is found, False otherwise"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('(?<![A-Za-z])[zZ](?![A-Za-z])')\n    return pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]+\\b'  # Match words with a lowercase letter\n    matches = re.findall(pattern, text)  # Find all matches\n\n    for match in matches:\n        if match[0] == 'z' or match[-1] == 'z':\n            return True\n\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)(?!.*\\1)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n):\n        if i <= k:\n            j = n-i-1\n            input[i], input[j] = input[j], input[i]\n    return input[:k] + input[k:] + input[k+1:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the start to the k-th element\n    input = input[::-1][:k]\n    # Reverse the array from the k-th element to the end\n    input = input[::-1][k:]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k < 1 or k > n: \n        return \"Invalid input\"\n    elif k == 1: \n        return input[::-1]\n    else: \n        start = 0\n        end = k - 1\n        while start < end: \n            input[start], input[end] = input[end], input[start] \n            start += 1 \n            end -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Check if the given position is valid or not.\n    if k > len(input) or k < 1:\n        print(\"Invalid position!\")\n        return\n\n    # Reverse the array upto the given position.\n    input[:k] = input[:k][::-1]\n\n    # Print the reversed array.\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # create a copy of the input array\n    reversed_array = input[:]\n\n    # reverse the subarray from 0 to k-1\n    reversed_array[:k] = reversed_array[:k][::-1]\n\n    # reverse the rest of the array\n    reversed_array[k:] = reversed_array[k:][::-1]\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[0], input[n-i-1] = input[n-i-1], input[0]\n    # Reverse the remaining elements of the array\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the entire array\n    for i in range(n//2, n):\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the length of the array is greater than or equal to k\n    if len(input) < k:\n        return \"The length of the array is less than k.\"\n\n    # Create two pointers, one for the starting index and one for the ending index\n    start_index = 0\n    end_index = k - 1\n\n    # Swap the elements upto k-1 and then kth element\n    while start_index < end_index:\n        input[start_index], input[end_index] = input[end_index], input[start_index]\n        start_index += 1\n        end_index -= 1\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)//2):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Reverse the array from the kth position to the end\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k: \n        return input\n    else:\n        return reverse_Array_Upto_K(input[:k][::-1] + input[k:], k)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array 'input' and a position 'k' as input and returns the reversed array upto the given position.\n    \"\"\"\n    n = len(input)\n    for i in range(n//2):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp\n    return input[:k] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Merge the two dictionaries\n    merged_dict = {**test_dict, **test_tup[1]}\n    # Create a new tuple with the merged dictionary and the original tuple\n    new_tuple = (test_tup[0], merged_dict)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = (test_tup, key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    # convert the dictionary to a tuple of key-value pairs\n    new_tup = tuple(test_dict.items())\n    # concatenate the tuple and the original tuple to form the new tuple\n    new_tup_plus = new_tup + test_tup\n    return new_tup_plus"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to store the key-value pairs of the dictionary\n    new_dict = {}\n    # Iterate through the key-value pairs of the dictionary\n    for key, value in test_dict.items():\n        # Add the key-value pair to the new dictionary\n        new_dict[key] = value\n    # Concatenate the tuple and the new dictionary into a new tuple\n    result_tup = (test_tup, new_dict)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup) + tuple(test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the tuple to a list to be able to modify it in place\n    test_tup = list(test_tup)\n    # add the dictionary to the tuple\n    test_tup.extend(test_dict.items())\n    # convert the list back to a tuple\n    result = tuple(test_tup)\n    return result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the tuple with the dictionary using the update() method\n    combined_dict = test_dict.copy()\n    combined_dict.update(test_tup)\n    # Convert the combined dictionary to a tuple using the tuple() function\n    final_tup = tuple(combined_dict.items())\n    return final_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path = [0] * N\n    max_avg = float('-inf')\n    prev_path = []\n    \n    for i in range(N):\n        max_path[i] = [0] * N\n    \n    for i in range(N):\n        for j in range(N):\n            if j == N-1:\n                if i == N-1:\n                    max_path[i][j] = cost[i][j]\n                else:\n                    max_path[i][j] = max(max_path[i][j], max_path[i+1][j])\n            elif i == N-1:\n                max_path[i][j] = max(max_path[i][j], max_path[i][j+1])\n            else:\n                max_path[i][j] = max(max_path[i][j], max_path[i+1][j], max_path[i][j+1])\n    \n    for i in range(N):\n        for j in range(N):\n            if max_path[i][j] > max_avg:\n                max_avg = max_path[i][j]\n                prev_path = [[i,j]]\n    \n    path = []\n    for i in range(len(prev_path)-1):\n        path.append([prev_path[i][0], prev_path[i][1]])\n        path.append([prev_path[i+1][0], prev_path[i+1][1]])\n    \n    for i in range(len(path)):\n        path[i][0] = path[i][0]-1\n        path[i][1] = path[i][1]-1\n    \n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = float('-inf')\n    total_cost = 0\n    cells_visited = 0\n    path = []\n\n    # Traverse the matrix in a depth-first manner\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if current cell is a valid start for a path\n            if i == 0 and j == 0:\n                path.append((i, j))\n            elif i > 0 and j == 0:\n                path.append((i, j))\n                if cells_visited > 0:\n                    # Compute the average of the visited cells\n                    current_avg = total_cost / cells_visited\n                    # Update the maximum average found so far\n                    if current_avg > max_avg:\n                        max_avg = current_avg\n                # Update the variables for the next iteration\n                path.pop()\n                cells_visited -= 1\n                total_cost -= cost[i][j]\n            elif i == 0 and j > 0:\n                path.append((i, j))\n                if cells_visited > 0:\n                    # Compute the average of the visited cells\n                    current_avg = total_cost / cells_visited\n                    # Update the maximum average found so far\n                    if current_avg > max_avg:\n                        max_avg = current_avg\n                # Update the variables for the next iteration\n                path.pop()\n                cells_visited -= 1\n                total_cost -= cost[i][j]\n            elif i > 0 and j > 0:\n                path.append((i, j))\n                if i == len(cost)-1 and j == len(cost[0])-1:\n                    # Check if the current path is valid\n                    if len(path) > 2 and path[0] == (0, 0) and path[1] == (0, 1) and path[-1] == (len(cost)-1, len(cost[0])-1):\n                        # Compute the average of the visited cells\n                        current_avg = total_cost / cells_visited\n                        # Update the maximum average found so far\n                        if current_avg > max_avg:\n                            max_avg = current_avg\n                # Update the variables for the next iteration\n                path.pop()\n                cells_visited -= 1\n                total_cost -= cost[i][j]\n\n    # Return the maximum average found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def backtrack(i, j, path_sum, path_count):\n        if i == N - 1 and j == N - 1:\n            path_avg = path_sum / path_count\n            max_avg = max(max_avg, path_avg)\n            return\n\n        if i < N and j < N:\n            backtrack(i + 1, j, path_sum + cost[i][j], path_count + 1)\n            backtrack(i, j + 1, path_sum + cost[i][j], path_count + 1)\n\n    N = len(cost)\n    max_avg = float('-inf')\n\n    for i in range(N):\n        backtrack(i, 0, 0, 1)\n        backtrack(0, i, 0, 1)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the number of rows and columns in the matrix\n    N = len(cost)\n    \n    # Initialize the maximum average and current path with the first cell\n    max_avg = cost[0][0]\n    current_path = [(0, 0)]\n    \n    # Iterate through each cell in the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Check if the cell can be reached from the current path\n            if j < N-1 or (j == N-1 and i < N-1):\n                # Compute the cost of moving right and down from the current cell\n                right_cost = cost[i][j] + cost[i][j+1]\n                down_cost = cost[i+1][j] + cost[i+1][j+1]\n                \n                # Check if the current cell provides a better path than the previous best path\n                if right_cost > current_path[-1][0]:\n                    current_path.append((right_cost, j+1))\n                elif down_cost > current_path[-1][0]:\n                    current_path.append((down_cost, j+1))\n            \n            # Update the maximum average if the current path provides a better average\n            avg = sum(cost[i][j] for x, y in current_path) / len(current_path)\n            if avg > max_avg:\n                max_avg = avg\n                \n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the maximum sum path for each cell\n    dp = [[0 for j in range(len(cost[0]))] for i in range(len(cost))]\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_sum = 0\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if i == len(dp)-1 and j == len(dp[0])-1:\n                if dp[i][j] > max_sum:\n                    max_sum = dp[i][j]\n    return max_sum/((len(dp)*len(dp[0]))//2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the number of cells in the matrix\n    N = len(cost)\n\n    # Initialize the maximum average and the current average as 0\n    max_avg = 0\n    curr_avg = 0\n\n    # Traverse the matrix and compute the average for each path\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                curr_avg += cost[i][j]\n            elif i == 0:\n                curr_avg += cost[i][j]\n                curr_avg += cost[i][j+1]\n            elif j == 0:\n                curr_avg += cost[i][j]\n                curr_avg += cost[i+1][j]\n            elif i == N-1 and j == N-1:\n                curr_avg += cost[i][j]\n            else:\n                curr_avg += cost[i][j]\n                curr_avg += cost[i][j+1]\n                curr_avg += cost[i+1][j]\n                curr_avg += cost[i+1][j+1]\n\n    # Compute the maximum average over all paths\n    max_avg = curr_avg / (N*N)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def getMaxAverage(matrix, visited, start, end):\n        if visited == len(matrix) * len(matrix[0]):\n            return matrix[start[0]][start[1]]\n\n        if visited in visited_set:\n            return visited_set[visited]\n\n        visited_set.add(visited)\n\n        max_cost = float('-inf')\n\n        if start[0] < end[0]:\n            max_cost = max(max_cost, matrix[start[0]][start[1]] + getMaxAverage(matrix, visited + 1, (start[0] + 1, start[1]), end))\n        if start[1] < end[1]:\n            max_cost = max(max_cost, matrix[start[0]][start[1]] + getMaxAverage(matrix, visited + 1, (start[0], start[1] + 1), end))\n\n        visited_set.remove(visited)\n\n        return max_cost\n\n    visited_set = set()\n    max_avg = float('-inf')\n\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited = (i, j)\n            max_avg = max(max_avg, matrix[i][j] + getMaxAverage(cost, visited, (0, 0), (len(cost) - 1, len(cost[0]) - 1)))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum sum of a path\n    def maxSum(x, y, path):\n        if x == N - 1 and y == N - 1:\n            return cost[x][y]\n        if x > 0 and path[x - 1][y] == 0:\n            path[x][y] = path[x - 1][y] + cost[x][y]\n            if maxSum(x - 1, y, path) > maxSum(x, y, path):\n                return maxSum(x - 1, y, path)\n            path[x][y] = 0\n        if y > 0 and path[x][y - 1] == 0:\n            path[x][y] = path[x][y - 1] + cost[x][y]\n            if maxSum(x, y - 1, path) > maxSum(x, y, path):\n                return maxSum(x, y - 1, path)\n            path[x][y] = 0\n        return path[x][y]\n\n    # Find the maximum average of all paths\n    def findMaxAverage(matrix):\n        max_sum = -float('inf')\n        for i in range(N):\n            for j in range(N):\n                path = [[0] * N for _ in range(N)]\n                path[0][0] = cost[i][j]\n                if max_sum < maxSum(i, j, path):\n                    max_sum = maxSum(i, j, path)\n        return max_sum / (N * N)\n\n    # Initialize the matrix and find the maximum average\n    N = len(cost)\n    max_average = findMaxAverage(cost)\n\n    # Return the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Function to check if a path exists from i to j in a matrix\n    def pathExists(i, j, visited):\n        if i >= 0 and i < len(cost) and j >= 0 and j < len(cost[0]) and cost[i][j] == 0 and (i, j) not in visited:\n            visited.add((i, j))\n            return True\n        return False\n    \n    # Function to find the maximum average of a path starting from i,j\n    def findMaxAverage(i, j, visited):\n        if i == len(cost)-1 and j == len(cost[0])-1:\n            return 0\n        elif not pathExists(i, j, visited):\n            return float('-inf')\n        else:\n            visited.add((i, j))\n            left = findMaxAverage(i, j+1, visited)\n            right = findMaxAverage(i+1, j, visited)\n            up = findMaxAverage(i, j, visited)\n            down = findMaxAverage(i, j, visited)\n            if left == float('-inf'):\n                left = 0\n            if right == float('-inf'):\n                right = 0\n            if up == float('-inf'):\n                up = 0\n            if down == float('-inf'):\n                down = 0\n            visited.remove((i, j))\n            return max(left, right, up, down) + cost[i][j]\n    \n    # Function to find all paths with maximum average\n    maxAvg = float('-inf')\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited = set()\n            currentAvg = findMaxAverage(i, j, visited)\n            if currentAvg > maxAvg:\n                maxAvg = currentAvg\n    return maxAvg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the total number of cells in the matrix\n    N = len(cost)\n    total_cells = N * N\n\n    # Initialize a variable to keep track of the maximum average\n    max_avg = float('-inf')\n\n    # Loop through all possible paths\n    for i in range(N):\n        for j in range(i, N):\n            # Calculate the total cost of the path\n            path_cost = 0\n            for k in range(i, j):\n                path_cost += cost[i][k] + cost[k][j]\n\n            # Calculate the average cost of the path\n            avg_cost = path_cost / (j - i + 1)\n\n            # Update the maximum average if necessary\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the students that meet the criteria\n    filtered_students = []\n\n    # Loop through each student\n    for name, data in students.items():\n        # Extract the height and weight of the student\n        height, weight = data\n\n        # Check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered_students list\n            filtered_students.append(name)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            result[student] = (height, weight)\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the first list\n    freq = {}\n    for num in nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Count the indices where the frequency of each element in the second list matches the frequency in the first list\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in freq and freq[nums2[i]] > 0:\n            freq[nums2[i]] -= 1\n            if freq[nums2[i]] == 0:\n                del freq[nums2[i]]\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize a dictionary to store the count of each value in each list\n    value_counts = {}\n\n    # Iterate through each element in the first list\n    for num1 in nums1:\n        # If the element is already in the dictionary, increment its count by 1\n        if num1 in value_counts:\n            value_counts[num1] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            value_counts[num1] = 1\n\n    # Iterate through each element in the second list\n    for num2 in nums2:\n        # If the element is already in the dictionary, increment its count by 1\n        if num2 in value_counts:\n            value_counts[num2] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            value_counts[num2] = 1\n\n    # Initialize an empty list to store the indices where the lists have the same values\n    same_indices = []\n\n    # Iterate through each key in the dictionary\n    for key in value_counts.keys():\n        # If the count of the key in the dictionary is 1, append its index to the same_indices list\n        if value_counts[key] == 1:\n            same_indices.append(nums1.index(key))\n\n    # Return the same_indices list\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string and convert all characters to integers\n    base_str = str(base)\n    base_int = [int(i) for i in base_str]\n\n    # Calculate the sum of digits to the specified power\n    sum_digits = sum(base_int ** power)\n\n    # Convert the sum of digits back to a string and return the result\n    return str(sum_digits)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(str(base)[i])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base[-i-1])\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # calculate the sum of digits\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit)\n\n    # calculate the result\n    result = sum_of_digits ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        power //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string to iterate over its digits\n    base_str = str(base)\n    # initialize the sum to zero\n    total = 0\n    # iterate over all digits of the base string up to the specified power\n    for i in range(len(base_str) - 1, -1, -1):\n        # calculate the sum of the current digit raised to the specified power\n        digit_sum = sum([int(digit) ** power for digit in base_str[i:i+1]])\n        # add the sum to the total sum\n        total += digit_sum\n    # return the final sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_of_digits = 0\n\n    for digit in base_str:\n        sum_of_digits += int(digit)\n\n    result = sum_of_digits ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum to 0\n    total = 0\n\n    # iterate through each digit of the base\n    while base > 0:\n        # extract the last digit of the base\n        digit = base % 10\n\n        # add the digit to the sum\n        total += digit\n\n        # remove the last digit from the base\n        base //= 10\n\n    # calculate the sum of digits raised to the power\n    result = 0\n    for _ in range(power):\n        result += total\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of strings containing all the values between quotation marks.\n    '''\n\n    # Define the pattern to match quotation marks\n    pattern = r'\"[^\"]*\"'\n\n    # Use re.findall() method to extract all the values between the quotation marks\n    values = re.findall(pattern, text)\n\n    # Return the list of values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define regular expression pattern to extract values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n\n    # search for matches of pattern in the input string\n    matches = re.findall(pattern, text1)\n\n    # loop through the matches and return the values between quotation marks\n    return [match.strip() for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # to match a double-quoted string\n    matches = re.findall(pattern, text1) # find all occurrences of the pattern in the string\n    quotations = []\n    for match in matches:\n        quotations.append(match.strip(' \"')) # remove the quotes from the match and append to the list of quotations\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract all the values between quotation marks \" \" of the given string.\n    '''\n\n    # Using regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Returning the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Removing leading and trailing spaces from the string\n    text1 = text1.strip()\n\n    # Using regular expression to match all the occurrences of double quotes \" \"\n    matches = re.findall(r'\"([^\"]+)\"', text1)\n\n    # Returning a list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Removing spaces and special characters from the given string\n    text = re.sub(r'\\W+','', text1)\n    # Finding all the quotation marks \" \" in the string\n    quotations = re.findall(r'\"[^\"]+\"', text)\n    # Extracting values between quotation marks and returning it as a list\n    return [q.strip('\"') for q in quotations]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # search for all occurrences of pattern in the given string\n    matches = re.findall(pattern, text1)\n\n    # return a list of matched quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a new empty tuple to store the result\n    result = ()\n    \n    # iterate over the tuple elements starting from the second one\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next one and append the result to the new tuple\n        result += (test_tup[i-1] * test_tup[i],)\n    \n    # return the new tuple with the multiplied elements\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([x * y for x, y in zip(test_tup[:-1], test_tup[1:])])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a dictionary to store consecutive duplicates\n    consecutive_dict = {}\n    \n    # iterate over the list and add consecutive duplicates to the dictionary\n    for i in range(len(nums)):\n        if i == 0:\n            consecutive_dict[nums[i]] = [nums[i]]\n        else:\n            if nums[i] == nums[i-1] and i == len(nums)-1:\n                # if the current number and the previous number are consecutive duplicates,\n                # add the current number to the previous consecutive duplicates list\n                if nums[i] in consecutive_dict:\n                    consecutive_dict[nums[i-1]].append(nums[i])\n                else:\n                    consecutive_dict[nums[i-1]] = [nums[i]]\n            elif nums[i] == nums[i-1]:\n                # if the current number and the previous number are consecutive duplicates,\n                # add the current number to the previous consecutive duplicates list\n                if nums[i] in consecutive_dict:\n                    consecutive_dict[nums[i-1]].append(nums[i])\n                else:\n                    consecutive_dict[nums[i-1]] = [nums[i]]\n            else:\n                # if the current number and the previous number are not consecutive duplicates,\n                # add the current number to a new list\n                if nums[i] in consecutive_dict:\n                    consecutive_dict[nums[i]].append(nums[i])\n                else:\n                    consecutive_dict[nums[i]] = [nums[i]]\n    \n    # create a new list to store the unique consecutive duplicates\n    unique_consecutive_list = []\n    \n    # iterate over the dictionary and add unique consecutive duplicates to the new list\n    for key, value in consecutive_dict.items():\n        # check if the length of the value list is greater than 1\n        if len(value) > 1:\n            unique_consecutive_list.append(value)\n    \n    # return the unique consecutive duplicates list\n    return unique_consecutive_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(dict.fromkeys(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums)) if key == 0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby() function from the itertools module to group the numbers based on their occurrence\n    grouped = groupby(nums)\n\n    # Create a list to store the consecutive duplicates\n    consecutive = []\n\n    # Iterate over each group\n    for group in grouped:\n        # If the group contains more than one element, add the first element to the consecutive list\n        if len(list(group)) > 1:\n            consecutive.append(list(group)[0])\n\n    # Return the list of consecutive duplicates\n    return consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # convert the list to a dictionary, where the keys are consecutive integers and the values are the corresponding items in the list\n    nums_dict = {k: list(g) for k, g in groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)}\n    # extract the values from the dictionary, which are lists of consecutive duplicates\n    return [item for items in nums_dict.values() for item in items]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(sorted(nums)):\n        if key!= nums[0]:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (math.pi * r * r) + (2 * math.pi * r * h)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * (math.pi * r * h)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * (r**2 + h**2)\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone using the formula:\n\n    A = 2r*h\n\n    Args:\n        r (float): The radius of the cone\n        h (float): The height of the cone\n\n    Returns:\n        float: The lateral surface area of the cone\n\n    \"\"\"\n    A = 2 * r * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h/3  # formula for lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(r**2)*math.tan(math.pi/4) - 2*(r**2)*h + 2*(h**2)*math.tan(math.pi/4)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using the formula for the lateral surface area of a cone, we can find the lateral surface area as follows:\n    # lateral surface area = pi * r^2 * h\n    # where pi is the mathematical constant pi, which is approximately 3.14159265359.\n    pi = 3.14159265359\n    return pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two arguments - radius r and height h - and returns the lateral surface area of a cone.\n    The formula used is:\n\n    lateral surface area = 1/2 * h * r^2\n\n    where h is the height and r is the radius.\n    '''\n    return 0.5 * h * r**2"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text.lower()"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any space, comma, or dot in the text\n    pattern = r\"[\\s,.]\"\n    # Use the replace() method with the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    return text.replace(pattern, \":\")"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[., ]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(r'\\s+','',text)\n    \n    # Replace commas with colon\n    text = re.sub(r',',':',text)\n    \n    # Replace dots with colon\n    text = re.sub(r'\\.',':',text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\. ]'\n    repl = ':'\n    return re.sub(pattern, repl, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove any non-word, non-space characters\n    text = re.sub(r'\\s+', ':', text) # replace all consecutive spaces with a colon\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index of the first occurrence to -1\n    first_index = -1\n    # Iterate through the array and compare each element with the given number\n    for i in range(len(A)):\n        if A[i] == x:\n            # If an element is found that matches the given number, update the first_index to the current index\n            first_index = i\n            break\n    # Return the index of the first occurrence\n    return first_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] <= x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two arguments:\n    A: A sorted array of integers\n    x: An integer that needs to be found in the array A\n    \n    This function returns the index of the first occurrence of x in A if it exists,\n    otherwise it returns -1.\n    \"\"\"\n    # Initialize a variable to store the index of the first occurrence of x\n    first_occurrence_index = -1\n    \n    # Initialize a variable to store the current element being compared\n    current_element = A[0]\n    \n    # Iterate through the array A\n    for i in range(1, len(A)):\n        # If the current element is equal to x and not equal to the first occurrence of x\n        if A[i] == x and A[i]!= current_element:\n            # Update the first_occurrence_index variable with the current index\n            first_occurrence_index = i\n        # Update the current_element variable with the current element\n        current_element = A[i]\n    \n    # Return the first_occurrence_index variable\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right indices to the first and last indices of the array respectively\n    left = 0\n    right = len(A) - 1\n    \n    # Perform a binary search to find the first occurrence of x in A\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            # If the element at the middle index is equal to x, return the middle index\n            return mid\n        elif A[mid] < x:\n            # If the element at the middle index is less than x, it means the first occurrence of x is somewhere after the middle index\n            left = mid + 1\n        else:\n            # If the element at the middle index is greater than x, it means the first occurrence of x is somewhere before the middle index\n            right = mid - 1\n    \n    # If x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Searching for x in the array\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Found x\n            return mid\n        elif A[mid] < x:\n            # Search in the right half of the array\n            left = mid + 1\n        else:\n            # Search in the left half of the array\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    while i < n and A[i] == x:\n        i += 1\n    return i - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right indices\n    left = 0\n    right = len(A) - 1\n    \n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # Loop until the left and right indices cross\n    while left <= right:\n        # Compute the middle index\n        mid = (left + right) // 2\n        \n        # Check if the middle element is equal to the target number\n        if A[mid] == x:\n            # If it is, set the first occurrence index to the middle index\n            first_occurrence_index = mid\n            \n            # Move the left pointer to the right of the middle index\n            left = mid + 1\n            \n        # If the middle element is greater than the target number, move the right pointer to the left of the middle index\n        elif A[mid] > x:\n            # Move the right pointer to the left of the middle index\n            right = mid - 1\n            \n        # If the middle element is less than the target number, move the left pointer to the right of the middle index\n        else:\n            # Move the left pointer to the right of the middle index\n            left = mid + 1\n            \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element greater than or equal to x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    # If x was not found, return -1\n    if i == len(A):\n        return -1\n\n    # Find the index of the first occurrence of x in the remaining part of A\n    j = i + 1\n    while j < len(A) and A[j] == x:\n        j += 1\n\n    # Return the index of the first occurrence of x\n    return j"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # initialize the index to -1\n    index = -1\n\n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, update the index to the current index\n            index = i\n            # exit the loop since we found the first occurrence of x\n            break\n\n    # return the index of the first occurrence of x\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function finds the sum of products of all possible sublists of the given list.\n    \n    Parameters:\n    arr (list): The given list of integers\n    \n    Returns:\n    sum_of_products (int): The sum of products of all possible sublists\n    \n    \"\"\"\n    \n    # initialize the sum of products to 0\n    sum_of_products = 0\n    \n    # iterate through all possible sublists of the given list\n    for i in range(len(arr)):\n        \n        # initialize the product of sublist to 1\n        prod_sublist = 1\n        \n        # iterate through all elements in the sublist\n        for j in range(i, len(arr)):\n            \n            # multiply the product of sublist with the current element\n            prod_sublist *= arr[j]\n            \n        # add the product of sublist to sum_of_products\n        sum_of_products += prod_sublist\n    \n    # return the sum_of_products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize all sublist products to 1\n    sublist_prod = [1] * (n+1)\n    # Calculate the sublist products of all subarrays of length 1 to n\n    for i in range(1, n+1):\n        sublist_prod[i] = sublist_prod[i-1] * arr[i-1]\n    # Calculate the sum of products of all subarrays of length 1 to n\n    sum_prod = sum(sublist_prod[1:n+1])\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate the product of all elements of the list\n    prod_list = [1]*n\n    for i in range(n):\n        prod_list[i] *= arr[i]\n    \n    # Calculate the sum of products of all sublists of length 1\n    sum_sublist1 = prod_list[0]\n    for i in range(1, n):\n        sum_sublist1 += prod_list[i]\n    \n    # Calculate the sum of products of all sublists of length 2\n    sum_sublist2 = prod_list[0]*prod_list[1]\n    for i in range(2, n):\n        sum_sublist2 += prod_list[i]*prod_list[i-1]\n    \n    # Calculate the sum of products of all sublists of length greater than 2\n    for i in range(3, n+1):\n        sum_sublist = 0\n        for j in range(n-i+1):\n            sum_sublist += prod_list[j]*prod_list[j+i-1]\n        sum_sublist2 += sum_sublist\n    \n    return sum_sublist1+sum_sublist2"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # Initialize variables to store sum and products\n    sum_prod = 0\n    prod = 1\n\n    # Iterate over all possible sublists of the array\n    for i in range(n):\n        # Calculate the product of the sublist\n        for j in range(i, n):\n            prod *= arr[j]\n            # Sum the product with the current sum\n            sum_prod += prod\n\n    # Return the sum of products of all possible sublists\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 10**9 + 7\n    prefix_prod = [1] * (n + 1)\n    prefix_prod[0] = 1\n    \n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n        prefix_prod[i] %= MOD\n    \n    subarray_prods = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray_prod = prefix_prod[j] - prefix_prod[i] * prefix_prod[j - 1]\n            subarray_prods.append(subarray_prod)\n            \n    return sum(subarray_prods) % MOD"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    for i in range(1,n):\n        dp[i] = dp[i-1]*arr[i]\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            subarr = arr[i:j+1]\n            subarr_prod = 1\n            for k in subarr:\n                subarr_prod *= k\n            ans += dp[j]*subarr_prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the variables\n    n = len(arr)\n    prod = 1\n    subarray_sum = 0\n\n    # Calculate the product of the first element in the array\n    prod *= arr[0]\n\n    # Initialize the sum of the first element in the array\n    subarray_sum += arr[0]\n\n    # Initialize the sum of the products of the array\n    product_sum = 0\n\n    # Loop through all the subarrays\n    for i in range(1, n):\n        # Calculate the product of the current element\n        prod *= arr[i]\n\n        # Calculate the sum of the subarray starting from the current element\n        current_subarray_sum = subarray_sum + prod - arr[i]\n\n        # Update the sum of the products of the array\n        product_sum += current_subarray_sum\n\n        # Update the subarray sum\n        subarray_sum = current_subarray_sum\n\n    # Return the sum of the products of the array\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n\n    # Initialize first two elements as 1\n    dp[0] = 1\n    dp[1] = arr[0] * arr[1]\n\n    # Fill dp array using dynamic programming approach\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * dp[i-2]\n\n    # Return the sum of products of all possible sublists\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize result and subarrays list\n    result = 0\n    subarrays = []\n    # loop through all possible sublists of the array\n    for i in range(n):\n        # add first element of the sublist\n        subarrays.append(arr[i])\n        # calculate product of subarray\n        prod = 1\n        for j in range(i+1, n):\n            prod *= arr[j]\n        # add product to result\n        result += prod\n    # return the sum of products of all subarrays\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    arr.append(0)\n    \n    max_sum = float('-inf')\n    max_product = 1\n    \n    for i in range(n):\n        if i == 0:\n            max_sum = arr[i]\n            max_product = arr[i]\n        else:\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n            if arr[i] * arr[i-1] > max_product:\n                max_product = arr[i] * arr[i-1]\n\n    sum_products = 0\n    for i in range(n):\n        sum_products += max_product\n    \n    return sum_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer as input and toggles the bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Get the number of bits in the given number\n    num_bits = len(bin(n)[2:])\n    \n    # Loop through the bits of the given number and toggle them\n    for i in range(num_bits-2):\n        if i == num_bits-3 or i == num_bits-4:\n            # If the current bit is the first or the last bit, do nothing\n            pass\n        else:\n            # If the current bit is neither the first nor the last bit, toggle it\n            if (n >> i) & 1 == 0:\n                result = result | (1 << i)\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Set all bits except the first and last to 0\n    n = n & ~(0xFF << 1)\n\n    # Set the middle bit to 1\n    n |= (n ^ ((n >> 1) & 0x5555)) & 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle the middle bits of a given number.\n\n    Args:\n        n: an integer.\n\n    Returns:\n        A new integer with the middle bits toggled.\n    \"\"\"\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Find the position of the middle bits\n    middle = length // 2\n\n    # Create a mask with 1s at the positions of the middle bits and 0s elsewhere\n    mask = 1 << middle\n    mask = mask - 1\n\n    # Create a new integer with the middle bits toggled\n    new_n = n ^ mask\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Extract the first and last bit\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle the middle two bits\n    middle_bits = n ^ (first_bit << 31) ^ (last_bit << 31)\n\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= ~(1 << 31) # clear the sign bit\n    n &= ~(1 << 0)  # clear the first bit\n    n &= ~(1 << 30) # clear the last bit\n    n |= (1 << 31)  # set the sign bit\n    n ^= (1 << 31)  # toggle the sign bit\n    n ^= (1 << 0)   # toggle the first bit\n    n ^= (1 << 30)  # toggle the last bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Initializing the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    # Toggle the middle bits\n    toggled_middle_bits = ((n ^ first_bit ^ last_bit) & 1) << 1\n    \n    # Return the modified number\n    return n ^ toggled_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert binary number to integer\n    n = int(n, 2)\n    \n    # Toggle first and last bit\n    n = n ^ (1 << 31)\n    \n    # Toggle bits from the middle to the left and right\n    mid = (1 << 1) + 1\n    while mid < 64:\n        n = n ^ (mid << 1)\n        mid <<= 1\n    \n    # Convert integer back to binary and return\n    return bin(n)[2:].zfill(64)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the first and last bits\n    n = (n & 0xfffffffe) | (last_bit ^ first_bit)\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # get the first and last bits of n\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # toggle all the bits except first_bit and last_bit\n    n ^= first_bit ^ last_bit\n\n    # set the first and last bits of n\n    n = n & ~(1 << first_bit) & ~(1 << (31 - last_bit))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is less than 2^64\n    if n >= 2**64:\n        return 0\n    # Initialize the bit positions of the first and last bits\n    first_bit = 1\n    last_bit = 64\n\n    # Initialize the mask for all bits except the first and last bits\n    mask = ~(1 << (first_bit - 1)) & ~(1 << last_bit)\n\n    # Toggle the middle bits of the number\n    middle_bits = n & mask\n    n = n ^ middle_bits\n\n    # Shift the first and last bits to the left by one position\n    n = n << (first_bit + last_bit - 2)\n\n    # Shift the middle bits to the right by one position\n    n = n >> (2 * first_bit + last_bit - 2)\n\n    # Add the first and last bits back to the number\n    n = n | (middle_bits << first_bit) | (middle_bits << last_bit)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index > 0 and a[index-1]!= x else index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: a sorted list of integers\n    :param x: a value to search for in the list\n    :return: the index of the left insertion point\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return None"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the leftmost index where x should be inserted\n    left = bisect.bisect_left(a, x)\n    # If x is already present in the array\n    if a[left] == x:\n        return left\n    # If x is to be inserted at the beginning\n    elif left == 0:\n        return left\n    # If x is to be inserted at the end\n    elif left == len(a):\n        return left\n    # If x is to be inserted in the middle\n    else:\n        return left - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): Sorted list of integers.\n    x (int): Integer to be searched for.\n\n    Returns:\n    int: Index of the left insertion point.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x-1)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter a value of n: \"))\nprint(\"The geometric sum of\", n, \"-\", geometric_sum(n), \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1) + n*geometric_sum(n-2))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize the first two triangular numbers to 1 and 2\n    tri_num_1 = 1\n    tri_num_2 = 2\n    \n    # loop till n digits are reached\n    for i in range(n):\n        # calculate the next triangular number by adding the previous two\n        tri_num_3 = tri_num_1 + tri_num_2\n        \n        # check if tri_num_3 is the smallest triangular number with n digits\n        if tri_num_3 < 10**n:\n            return i+2\n        \n        # update the triangular numbers\n        tri_num_1 = tri_num_2\n        tri_num_2 = tri_num_3\n        \n    # if no triangular number with n digits is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the smallest number and its index to be 1\n    min_num = 1\n    min_index = 0\n\n    # Iterate from 2 to n-1\n    for i in range(2, n):\n        \n        # Find the next smallest triangular number using math.comb() function\n        tri_num = math.comb(i, i-1)\n        \n        # If the next smallest triangular number is smaller than the current smallest number, update it and its index\n        if tri_num < min_num:\n            min_num = tri_num\n            min_index = i\n\n    # Return the index of smallest triangular number\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    if n <= 0:\n        return None\n\n    # Initialize sum and index\n    index = 1\n    sum = 1\n\n    # Calculate the sum of the first n digits of the triangular series\n    while len(str(sum)) < n:\n        sum += index\n        index += 1\n\n    # Find the smallest triangular number with n digits\n    smallest_triangular_number = sum - index\n\n    # Calculate the index of the smallest triangular number\n    index = smallest_triangular_number\n    while True:\n        index -= 1\n        if len(str(index)) < n:\n            break\n        if index < 0:\n            break\n        if index % (sum - index) == 0:\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    # Initialize variables \n    index = 0 \n    count = 0 \n    temp = 0\n    num = 0 \n\n    # Check if n is greater than or equal to 3 \n    while n >= 3: \n        # Find the number of digits of n \n        digits = len(str(n))\n\n        # Calculate the next triangular number \n        num = math.factorial(n) // math.factorial(digits)\n\n        # Check if the triangular number is smaller than or equal to n \n        if num <= n: \n            # Increment the count if the triangular number is smaller than or equal to n \n            count += 1\n\n            # Increment the index if the triangular number is smaller than or equal to n \n            index += 1\n\n            # Update the temporary number \n            temp = num\n\n        # Decrement n \n        n -= 1\n\n    # Check if the temporary number is greater than or equal to n \n    if temp >= n: \n        # Increment the count if the temporary number is greater than or equal to n \n        count += 1\n\n    # Return the index and count \n    return index, count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # initialize index to 0\n    index = 0\n\n    # calculate the sum of digits of n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # initialize the current triangular number\n    triangular_num = 0\n\n    # loop through all numbers from 1 to 10^n\n    while index <= sum_of_digits:\n        # check if current triangular number is greater than or equal to n\n        if triangular_num >= n:\n            # return index of triangular number\n            return index\n        # increment triangular number\n        triangular_num += 1\n        # increment index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 1\n    b = 0\n    count = 0\n    while count < n:\n        a += b\n        b = a - b\n        count += 1\n    return count\n\nn = int(input(\"Enter the number of digits: \"))\nprint(\"The index of smallest triangular number with\", n, \"digits is\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    for i in range(2, int(math.pow(10, n)) + 1):\n        if i < 10**(n-1):\n            continue\n        triangular = i * (i + 1) // 2\n        if triangular < 10**(n-1):\n            return triangular - 1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Function to find smallest triangular number with n digits \n    def smallest_triangular(n): \n        '''\n        Function to find smallest triangular number with n digits \n        '''\n        # Find number of digits in n \n        num_digits = len(str(n)) \n\n        # Initialize sum of digits \n        sum_digits = 0 \n\n        # Loop through each digit of n \n        for i in range(num_digits): \n            # Convert digit to integer and add to sum \n            sum_digits += int(str(n)[i]) \n\n        # Return triangular number with n digits \n        return sum_digits \n\n    # Find smallest triangular number with n digits \n    smallest_num = smallest_triangular(n) \n\n    # Calculate index of smallest triangular number with n digits \n    index = math.ceil(math.log(smallest_num, 3))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables \n    min_triangular_num = 10**n + 1\n    min_triangular_index = math.ceil(math.log10(min_triangular_num))\n    triangular_numbers = [0] * (min_triangular_index + 1)\n\n    # Calculate triangular numbers\n    for i in range(min_triangular_index, -1, -1):\n        triangular_numbers[i] = min_triangular_num - (i + 1)\n        min_triangular_num = int(triangular_numbers[i])\n\n    # Find the index of the smallest triangular number\n    min_triangular_num = min_triangular_num * 10**(n + 1) - 1\n    min_triangular_num = int(min_triangular_num)\n    min_triangular_index = 0\n    for i in range(min_triangular_index + 1, min_triangular_index + n + 1):\n        if triangular_numbers[i] == min_triangular_num:\n            min_triangular_index = i\n            break\n\n    return min_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables for count and triangular number \n    count = 0 \n    triangular_num = 1 \n    \n    # Iterate until triangular number with n digits is found \n    while count < n: \n        # Find the next triangular number \n        triangular_num = triangular_num + 1 \n        \n        # Count the number of digits in the triangular number \n        num_digits = len(str(triangular_num)) \n        \n        # If the number of digits is greater than or equal to n, increment count \n        if num_digits >= n: \n            count = count + 1 \n            \n    # Return the index of the smallest triangular number with n digits \n    return count "
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    result_dict = {}\n    # loop through the tuple using range(len(test_tup))\n    for i in range(len(test_tup)):\n        # add the i-th element as the key, and the (i+1)-th element as the value\n        result_dict[i] = test_tup[i+1]\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #initialize an empty dictionary\n    dict_data = {}\n    #iterate over each element of the tuple\n    for i in range(len(test_tup)):\n        #extract the corresponding element from the tuple\n        element = test_tup[i]\n        #if the element is not None, it means there are adjacent elements to be used as key-value pair\n        if element is not None:\n            #add the key-value pair to the dictionary\n            dict_data[element] = test_tup[i+1]\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: The input tuple must have an even number of elements.\"\n    \n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n        \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n    # Iterate through the tuple and add adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Tuple length should be even.\")\n        return\n    else:\n        return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate over the tuple and add the adjacent elements as a key and the current element as its value\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            # if i is even, add the next element as a key and the current element as its value\n            result_dict[test_tup[i+1]] = test_tup[i]\n        else:\n            # if i is odd, add the current element as a key and the previous element as its value\n            result_dict[test_tup[i]] = test_tup[i-1]\n    # return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Use a dictionary comprehension to create the key-value pairs in the dictionary\n    return {i: j for i, j in zip(test_tup, test_tup[1:])}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n    return key_val_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for i in s:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    if len(count) == 1 or len(s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Initialize a variable to store the first character\n    first_char = s[0]\n    # Loop through each character in the string\n    for char in s:\n        # If the first character is not equal to the current character, return False\n        if first_char!= char:\n            return False\n        # Set the first character to the current character\n        first_char = char\n    # If all characters are equal, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    \n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to lowercase\n    s = s.lower()\n    # iterate through the string and check if all characters are same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    \n    # check if all the characters in the string are same\n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    # all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(s)\n\n    # Check if all the characters in the list are the same\n    for i in range(1, len(chars)):\n        if chars[i]!= chars[0]:\n            return False\n\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set()\n    for char in s:\n        char_set.add(char)\n    if len(char_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    chars = list(s)\n    \n    # Check if the length of the list of characters is 1\n    if len(chars) == 1:\n        # If the length is 1, all the characters are same\n        return True\n    else:\n        # If the length is not 1, all the characters are different\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 6\n    area = math.sqrt(s) * (2 * side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    area = (math.sqrt(3)*s**2)/12\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the area using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = math.sqrt(6) / 5 * s * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) ** (1/2)\n    area = math.sqrt(3) * (s ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for tetrahedron area\n    area = (1/6) * side**2 * (math.sin(math.acos((1/2)*side**2/(math.sqrt(3)))))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * math.pow(side, 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula to calculate the area of a tetrahedron\n    area = math.sqrt(3) * side ** 2 / 4\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if m is greater than or equal to the length of the list\n    if m >= len(list):\n        return list\n    # Reverse the first half of the list\n    reverse_list = list[::-1]\n    # Reverse the second half of the list\n    reversed_list = reverse_list[m:] + reverse_list[:m]\n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If m is greater than or equal to n, it means we cannot rotate by m items to the right direction\n    if m >= n:\n        return list\n    # Reverse the first m items in the list\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining n-m items in the list\n    list[m:] = list[m:][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:n] + list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    if m > len(lst):\n        raise ValueError(\"m should be less than or equal to the length of the list.\")\n    else:\n        lst.extend(lst[:m])\n        lst = lst[m:]\n        return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input. It rotates the list n items to the right direction.\n\n    Args:\n    lst: list - The list to be rotated.\n    n: integer - The number of items to be rotated to the right.\n\n    Returns:\n    A list - The rotated list.\n\n    \"\"\"\n    # Check if list is empty\n    if not lst:\n        return []\n\n    # Check if n is greater than or equal to length of list\n    if n >= len(lst):\n        return lst\n\n    # Create a new list with elements from the beginning of the list\n    new_lst = lst[n:]\n\n    # Copy the first n elements of the original list to the end of the new list\n    new_lst[:n] = lst[:n]\n\n    # Return the new list\n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Find the length of the list\n    n = len(list)\n    # Find the number of rotations required\n    rotations = m % n\n    # Store the elements to be rotated in a new list\n    rotating_elements = list[:rotations]\n    # Append the remaining elements to the end of the new list\n    rotating_elements.extend(list[rotations:])\n    # Replace the original list with the rotated elements\n    list[:] = rotating_elements\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    A function to rotate a list to the right direction by specified number of items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst.append(lst.pop(0))\n    return lst[:n-m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = []\n    for val in test_tup:\n        if val is None:\n            none_values.append(val)\n    return none_values"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function that returns True if the number is divisible by a digit and False otherwise\n    is_divisible = lambda num: all(d in str(num) for d in str(num))\n\n    # Define a lambda function that returns True if the number is divisible by every digit in its string representation\n    is_divisible_by_string = lambda num: all(d in str(num) for d in str(num))\n\n    # Use filter to find all numbers within the given range that are divisible by every digit and every digit in their string representation\n    result = list(filter(lambda num: is_divisible(num) and is_divisible_by_string(num), range(startnum, endnum+1)))\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by every digit in its string representation\n    is_divisible = lambda num: all(int(d) in num for d in str(num))\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # If the number is divisible by every digit, print it\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        '''\n        Helper function to check if a number is divisible by every digit in the given number\n        '''\n        digit_count = [0]*10\n        while num > 0:\n            digit = num % 10\n            digit_count[digit] += 1\n            num //= 10\n        return all(digit_count[i] % len(digit_count) == 0 for i in range(10))\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        This function takes a number as input and returns True if it is divisible by every digit it contains, False otherwise.\n        '''\n        def is_valid_digit(digit):\n            '''\n            This function takes a digit as input and returns True if it is a valid digit (i.e. a digit from 0 to 9), False otherwise.\n            '''\n            return digit >= 0 and digit <= 9\n\n        def count_valid_digits(num):\n            '''\n            This function takes a number as input and returns the number of valid digits in the number.\n            '''\n            count = 0\n            while num > 0:\n                count += 1\n                num //= 10\n            return count\n\n        num_digits = count_valid_digits(num)\n        return all(is_valid_digit(digit) for digit in str(num)) and num % 10 == 0\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_valid(num):\n        return all(int(digit) == digit for digit in str(num))\n\n    return list(filter(is_valid, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(d) % x == 0 for d in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Function to check if a number is divisible by a given digit\n    is_divisible = lambda x, digit: x % digit == 0\n\n    # Create a list of digits from 1 to 9\n    digits = [i for i in range(1, 10)]\n\n    # Iterate over each number within the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit it contains\n        if all(is_divisible(num, digit) for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n    \n    # Convert the numbers to strings and split them into digits\n    for num in range(startnum, endnum+1):\n        str_num = str(num)\n        digits.extend(list(str_num))\n        \n    # Use a set to remove duplicates and get a list of unique digits\n    unique_digits = list(set(digits))\n    \n    # Use a lambda function to filter out numbers where every digit is not divisible by itself\n    filtered_nums = list(filter(lambda num: all(digit in str(num) for digit in unique_digits), range(startnum, endnum+1)))\n    \n    return filtered_nums"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * (a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*a/180"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    #convert angle to radians\n    a = math.radians(a)\n    \n    #check if angle is valid\n    if a > math.pi:\n        return None\n    \n    #calculate area using formula for a sector\n    area = r*r*a\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        print(\"Angle is larger than 360 degrees. Returning None.\")\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        print(\"The area of the sector is\", area)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    theta = math.radians(a)\n\n    # Calculate area of sector using Heron's formula\n    area = 0.5 * r * r * theta\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = r * a * math.pi / 180\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Creating a 3D list to store the length of longest common subsequence of substrings of X, Y and Z\n    lcs_matrix = [[[0 for _ in range(len(Z) + 1)] for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    \n    # Iterating through all possible substrings of X, Y and Z\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If all characters are same, then length of lcs is 1, else if only one character is same, then length of lcs is 2\n                if i == 0 or j == 0 or k == 0:\n                    lcs_matrix[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n                else:\n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n    \n    # Extracting the lcs from the 3D list\n    lcs = []\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_matrix[i-1][j][k] == lcs_matrix[i][j-1][k]:\n            i -= 1\n        elif lcs_matrix[i][j-1][k] == lcs_matrix[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # Returning the lcs\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store lengths of longest common subsequence for prefixes of X, Y and Z\n    table = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    # populate the table in bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # find the length of the longest common subsequence\n    max_len = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if table[i][j][k] > max_len:\n                    max_len = table[i][j][k]\n\n    # create a list to store the characters of the longest common subsequence\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n        elif table[i][j - 1][k] == table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # return the length of the longest common subsequence and its characters\n    return max_len, ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0]*(m+1) for i in range(n+1)] \n  \n    # Traverse the dp table to fill the values in LCS matrix \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n  \n            # If not equal, then the maximum of three options is picked \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1], p[i-1][j-1]) \n  \n    # Print the LCS matrix \n    for i in range(n, -1, -1): \n        for j in range(m, -1, -1): \n            if p[i][j] == p[i-1][j-1] + 1: \n                print(X[i-1], end=\" \") \n            else: \n                break"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common subsequence ending at each position\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k])\n\n    # Construct the longest common subsequence from the table\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        elif L[i][j-1] > L[i-1][j]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 3D table to store length of subsequence \n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)] \n  \n    # Fill the table in bottom up manner \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Y) + 1): \n            if X[i - 1] == Y[j - 1]: \n                table[i][j] = table[i - 1][j - 1] + 1\n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) \n  \n    # Print the length of subsequence \n    lcs = \"\" \n    i = len(X) \n    j = len(Y) \n  \n    # Reconstruct the lcs one character at a time \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif table[i - 1][j] > table[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Return the length of LCS \n    return len(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 3D table to store the length of LCS for all possible subsequences\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # filling the first row and first column of the table\n    for i in range(m+1):\n        L[i][0][0] = 0\n    for j in range(n+1):\n        L[0][j][0] = 0\n\n    # filling the table with the lengths of LCS for all possible subsequences\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # backtracking to find the actual LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m+1) for _ in range(n+1)] \n\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    return p[n][m] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    def longest_common_subsequence(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n + 1) for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    p[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n        return p[m][n]\n\n    def lcs(X, Y, Z, p, i, j):\n        if i == 0 or j == 0:\n            return 0\n        elif X[i - 1] == Y[j - 1]:\n            return 1 + p[i - 1][j - 1]\n        else:\n            return max(p[i - 1][j], p[i][j - 1])\n\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            p[i][j] = 0\n\n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            LCS = X[i - 1] + LCS\n            p[i - 1][j - 1] = 1 + p[i - 1][j - 1]\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Calculate the length of all three strings\n    n, m, l = len(X), len(Y), len(Z)\n\n    # Step 2: Initialize the table\n    table = [[0 for i in range(l+1)] for j in range(n+1)]\n\n    # Step 3: Fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 4: Backtrack to find the longest common subsequence\n    i, j = n, m\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Creating a 2D table to store lengths of longest common subsequence of three strings\n    L = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Backtracking to find the LCS of three strings\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i - 1][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Regular expression to match the start of a word with a capital letter\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # List to store the capitalized words\n    capitalized_words = []\n\n    # Iterate over each word in the given string\n    for word in str1.split():\n\n        # Check if the current word starts with a capital letter\n        if pattern.match(word):\n\n            # If it does, add a space before it\n            capitalized_words.append(''+ word)\n        else:\n            # If it doesn't, add it as is\n            capitalized_words.append(word)\n\n    # Join the capitalized words into a single string and return it\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphanumeric characters\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first word and join the words with spaces\n    capitalized = words[0].capitalize()\n    for i in range(1, len(words)):\n        capitalized +='' + words[i].capitalize()\n    return capitalized"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1.lower())\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b\\w', lambda x: x.group(0).strip().capitalize(), str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expressions to split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1)\n    words_capitalized = [word.capitalize() for word in words]\n    # Join the capitalized words back into a string and return it\n    return''.join(words_capitalized)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w+\\b' # matches any word boundary followed by one or more word characters, followed by another word boundary\n    # matches any word boundary followed by one or more word characters\n    words = re.findall(pattern, str1) # returns a list of all non-overlapping matches of pattern in str1\n    # returns a list of all non-overlapping matches of pattern in str1\n    new_words = []\n    for word in words:\n        # capitalize the first letter of each word and add spaces between words starting with capital letters\n        new_word = word.capitalize()\n        if new_word!= word:\n            new_word ='' + new_word\n        new_words.append(new_word)\n    # capitalize the first letter of each word and add spaces between words starting with capital letters\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Join all words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all the occurrences of a capital letter with a space and append a space before the next letter\n    pattern = r'[A-Z]'\n    space_pattern = r'(?=[A-Z])'\n    return re.sub(pattern, space_pattern, str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # loop through the words and add spaces between capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper() and i > 0:\n            words[i] ='' + words[i]\n    # join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Define a function to convert a string of numbers to a list of integers\n    def string_to_int_list(str_num):\n        num_list = []\n        for digit in str_num:\n            num_list.append(int(digit))\n        return num_list\n\n    # Convert all strings of numbers in the list to lists of integers\n    nums_list = [string_to_int_list(num_str) for num_str in nums_str]\n\n    # Sort the list of lists of integers using the built-in sort() function\n    nums_list.sort()\n\n    # Convert the list of lists of integers back to lists of strings of numbers\n    sorted_nums_list = [\"\".join(map(str, num_list)) for num_list in nums_list]\n\n    return sorted_nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list to a list of integers\n    nums = [int(num_str) for num_str in nums_str]\n    # Sort the list of integers numerically\n    nums.sort()\n    # Convert the list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x), reverse=True)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Remove any leading/trailing spaces from the strings\n    nums_str = [num.strip() for num in nums_str]\n    # Convert all strings to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the float numbers in ascending order\n    nums_float.sort()\n    # Convert the sorted float numbers back to strings\n    nums_str = [str(num) for num in nums_float]\n    # Return the sorted list of strings of numbers\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a given list of strings of numbers numerically using the built-in `sorted()` function.\n    The `sorted()` function takes an optional parameter `key` which can be a function or a lambda expression.\n    A lambda expression is a one-line function that performs a specific operation on a single value.\n    In this case, we're passing a lambda expression as the `key` parameter, which extracts the numeric values from each string.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # split the strings into individual strings\n    nums_str = [str(num_str) for num_str in nums_str]\n    # convert the strings to numbers and sort them numerically\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    # convert the sorted numbers back to strings and return the sorted list\n    return [str(num_str) for num_str in nums_str]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Function to convert string to float\n    def str_to_float(num):\n        try:\n            return float(num)\n        except ValueError:\n            return 0\n    \n    # List of strings to be sorted\n    num_strings = nums_str\n    \n    # Convert strings to float and sort in numeric order\n    num_strings = sorted(num_strings, key=str_to_float)\n    \n    # Return sorted list of strings\n    return num_strings"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item in test_tup:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if type(item) == tuple:\n            if test_tup == item:\n                test_list.append(test_tup)\n                break"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        if item not in test_list:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if i % 2 == 0:\n        left_child = i // 2\n        if arr[i] < arr[left_child]:\n            return False\n    else:\n        left_child = (2 * i) + 1\n        right_child = (2 * i) + 2\n        if arr[i] < min(arr[left_child], arr[right_child]):\n            return False\n    return check_min_heap_helper(arr, left_child)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        parent = (i - 1) // 2\n        if arr[parent] > arr[i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the current index is greater than the last index, then the array is not a min heap\n    if i > len(arr) - 1:\n        return True\n    \n    # Check if the left child is greater than the current index\n    if i * 2 + 1 <= len(arr) - 1 and arr[i * 2 + 1] > arr[i]:\n        return False\n    \n    # Check if the right child is greater than the current index\n    if i * 2 + 2 <= len(arr) - 1 and arr[i * 2 + 2] > arr[i]:\n        return False\n    \n    # Recursively check if the left and right children are min heaps\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] < arr[i//2]:\n        return True\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[int((i - 1) / 2)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, int((i - 1) / 2))\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2: # base case: i is greater than or equal to half of the length of the array\n        return True\n    if arr[i] < arr[2 * i + 1]: # if current element is less than child element, then it's not a min heap\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1) # if current element is greater than or equal to child element, then check its children recursively\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0:\n        parent = (i-1)//2\n        if arr[i] < arr[parent]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] > arr[(i - 1) // 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the first two jacobsthal numbers\n    j1 = 0\n    j2 = 1\n    # initialize the nth jacobsthal number\n    jn = 0\n    # iterate n times\n    for i in range(n):\n        # calculate the next jacobsthal number\n        jn = (3*j1 + j2) % 2\n        # update the values for the next iteration\n        j1 = j2\n        j2 = jn\n    # return the nth jacobsthal number\n    return jn"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num = 2\n        for i in range(2, n):\n            jacobsthal_num += jacobsthal_num * (2*i-1)\n        return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initialize the first two numbers of the sequence\n    jacobsthal_num = 0\n    lucas_num = 1\n    \n    # Loop through the sequence until the nth number is reached\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_jacobs_num = (jacobs_num + lucas_num) % 10\n        \n        # Update the variables\n        jacobsthal_num = lucas_num\n        lucas_num = next_jacobs_num\n        \n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    while True:\n        j += 1\n        if j == n:\n            return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    while n > 0:\n        if n % 2 == 1:\n            j += 1\n        n //= 2\n        if n % 2 == 1:\n            j += 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef jacobsthal_num(n):\n    primes = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            n //= i\n        elif is_prime(i):\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    r = len(primes)\n    sum_of_primes = sum(primes)\n    return sum_of_primes\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 0\n    i = 2\n    while i <= n:\n        jacobsthal += 1\n        i += 4*jacobsthal\n    return jacobsthal"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    test_list.sort()  # Sort the list in ascending order of the first element\n    minimum = float('inf')  # Initialize the minimum variable to infinity\n    current_position = 0  # Initialize the current position variable to zero\n    result = []  # Initialize the result list\n\n    for i in range(len(test_list)):\n        if len(result) < K:\n            result.append(test_list[i])  # Add the current record to the result list\n            if len(result) == K:  # If the result list is full, update the minimum variable\n                minimum = min(minimum, result[0][0])  # Find the minimum value in the first element of the result list\n        else:\n            if test_list[i][0] <= minimum:  # If the new record has a smaller value than the minimum, update the minimum and move the current position to the next record\n                minimum = test_list[i][0]\n                current_position = i + 1\n\n    return result  # Return the result list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize min_list with first K elements of test_list\n    min_list = test_list[:K]\n    # Initialize count of each element in min_list\n    count_dict = {x:0 for x in min_list}\n    # Initialize result list with first K elements of test_list\n    result_list = test_list[:K]\n    # Iterate over test_list starting from K\n    for i in range(K, len(test_list)):\n        # Update count of each element in min_list\n        for x in min_list:\n            if test_list[i][0] == x:\n                count_dict[x] += 1\n        # Check if count of each element in min_list is greater than K\n        if min(count_dict.values()) > K:\n            # Remove the first element from min_list and add to result_list\n            min_list.remove(min_list[0])\n            result_list.append(min_list[0])\n            # Update count of each element in min_list\n            for x in min_list:\n                if test_list[i][0] == x:\n                    count_dict[x] -= 1\n        # Add the current element to result_list and update min_list\n        result_list.append(test_list[i])\n        min_list.append(test_list[i][0])\n        # Update count of each element in min_list\n        for x in min_list:\n            if test_list[i][0] == x:\n                count_dict[x] += 1\n    return result_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If there are less than K remaining records, add them to the list\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n        # If there are more than K remaining records, check if the minimum k record is in the current position\n        elif test_list[i][1] < min_k_records[0][1]:\n            min_k_records[0] = test_list[i]\n\n    # Return the list of minimum k records\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create an empty dictionary to store the count of each unique value\n    count_dict = {}\n\n    # iterate through the test list and count the number of occurrences of each unique value\n    for tup in test_list:\n        if tup[0] not in count_dict:\n            count_dict[tup[0]] = 0\n        count_dict[tup[0]] += 1\n\n    # create a min heap of size k to store the k smallest values\n    min_heap = []\n\n    # iterate through the count dictionary and add the minimum k values to the min heap\n    for val in sorted(count_dict.keys()):\n        if len(min_heap) < K:\n            min_heap.append(val)\n        elif count_dict[val] < count_dict[min_heap[0]]:\n            del min_heap[0]\n            min_heap.append(val)\n\n    # return the minimum k values as a list\n    return min_heap"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    min_lst = []\n    for i in range(K):\n        min_lst.append(float('inf'))\n    for i in range(K):\n        for j in range(len(test_list)):\n            if min_lst[i] > test_list[j][i]:\n                min_lst[i] = test_list[j][i]\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n        test_list (list): A list of tuples representing records.\n        K (int): The number of records to find.\n\n    Returns:\n        tuple: The minimum K records from the list.\n    \"\"\"\n    min_records = []\n\n    for record in test_list:\n        if len(min_records) < K:\n            min_records.append(record)\n        else:\n            min_record = min(min_records, key=lambda x: x[1])\n            if record[1] < min_record[1]:\n                min_records.remove(min_record)\n                min_records.append(record)\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    test_list: List of tuples representing a record\n    K: int representing the number of records to find\n    '''\n    # Sorting the list of tuples based on the first element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Creating a set to store the unique first elements\n    unique_set = set([x[0] for x in sorted_list])\n    # Checking if the length of the unique set is greater than or equal to K\n    if len(unique_set) >= K:\n        # Using a set to store the minimum K unique elements\n        min_set = set(sorted_list[:K])\n        # Using list comprehension to find the minimum K records from the sorted list\n        min_list = sorted_list[sorted_list[:K].index(tuple(min_set)):]\n        return min_list\n    else:\n        # If the length of the unique set is less than K, returning an empty list\n        return []"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list by the second element (second element is always the minimum)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum k records to infinity\n    min_k_records = float('inf')\n\n    # Iterate over the sorted list and check if the current k records are smaller\n    for i in range(K):\n        if i < len(sorted_list) and sorted_list[i][0] < min_k_records:\n            min_k_records = sorted_list[i][0]\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # Sort the tuple list based on the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize min_index as 0\n    min_index = 0\n\n    # Iterate over the sorted list\n    for i in range(K):\n        # If the current element is smaller than the current minimum element, update min_index and break\n        if sorted_list[i][0] < sorted_list[min_index][0]:\n            min_index = i\n            break\n\n    # Return the minimum k records as a list\n    return [test_list[min_index]]\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common_elements = {}\n    \n    # Loop through each index in the list\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the dictionary\n            common_elements[l1[i]] = True\n            \n    # Return the dictionary containing the common elements\n    return list(common_elements.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n    \n    # Find the common elements in the sets\n    common_elements = set1.intersection(set2, set3)\n    \n    # Convert the sets back to lists and return the result\n    return list(common_elements)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements\"\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least 2 elements\"\n    \n    sorted_numbers = sorted(numbers)\n    \n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        min1 = min(numbers)\n        min2 = min(numbers[1:])\n        return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 elements.\")\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aabbbbbccddee\"\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    return re.findall(pattern, text)\n\ntext = \"a1b2c3d4e5f\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Found a match!\")\n    else:\n        print(\"No match found!\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<=a)b+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a.*b\")\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Loop through each string in the list except for the current string\n        for j in range(i+1, len(test_list)):\n            # Reverse the current string\n            current_str = test_list[i][::-1]\n            \n            # Check if the reversed string is present in the list except for the current string\n            if current_str in test_list[j:]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a dictionary to store the frequency of each string\n    freq = {}\n\n    # Loop through each string in the list\n    for string in test_list:\n        # If the string is already in the dictionary, increment the frequency\n        if string in freq:\n            freq[string] += 1\n        # If the string is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[string] = 1\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each string in the list again\n    for string1 in test_list:\n        # If the string has a frequency of 1, it must be a reverse string\n        if freq[string1] == 1:\n            # Loop through each string in the list again\n            for string2 in test_list:\n                # If the string is not equal to string1 and the string has a frequency of 1, it must be a reverse string\n                if string2!= string1 and freq[string2] == 1:\n                    count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        if string == string[::-1]:\n            continue\n        for i in range(len(string)):\n            if i >= len(string)//2:\n                break\n            sub_string = string[i:]\n            if sub_string == sub_string[::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                reverse_count += 1\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    count_dict = {}\n    # loop through each element in the list1\n    for item in list1:\n        # convert the element to a tuple and check if it is already present in the dictionary\n        if tuple(item) in count_dict:\n            # if it is present, increment its count by 1\n            count_dict[tuple(item)] += 1\n        else:\n            # if it is not present, add it to the dictionary with a count of 1\n            count_dict[tuple(item)] = 1\n    # return the dictionary containing the count of each sublist\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list into a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    result = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            sublist = tuple(list1[i])\n            if sublist in result:\n                result[sublist] += 1\n            else:\n                result[sublist] = 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = set()\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple not in unique_list:\n            unique_list.add(sublist_tuple)\n            sublist_count[sublist_tuple] = sublist_count.get(sublist_tuple, 0) + 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the list to tuples and remove duplicates\n    unique_tuples = list(set(tuple(sublist) for sublist in list1))\n    # Create a dictionary to store the count of each tuple\n    counts = {}\n    # Iterate over the unique tuples and count their occurrences in the original list\n    for tup in unique_tuples:\n        count = sum(1 for sublist in list1 if sublist == tup)\n        counts[tup] = count\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        count = 0\n        for sublist in list1:\n            if sublist == item:\n                count += 1\n        if item not in count_dict:\n            count_dict[item] = count\n        else:\n            count_dict[item] += count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        sublist = tuple(element)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist in count_dict:\n            # If it is, increment its count by 1\n            count_dict[sublist] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[sublist] = 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the count of unique lists\n    count_dict = {}\n    \n    # iterate over each element of the list\n    for i in range(len(list1)):\n        # convert the current element to a tuple\n        tuple_i = tuple(list1[i])\n        \n        # if the tuple is already in the dictionary, increment its count\n        if tuple_i in count_dict:\n            count_dict[tuple_i] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tuple_i] = 1\n    \n    # return the dictionary of unique lists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # converting the list to set to remove duplicates and then back to a list\n    unique_list = list(set(list1))\n    # creating an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    # iterating over the unique sublists in the list and updating the count in the dictionary\n    for sublist in unique_list:\n        count_dict[tuple(sublist)] = list1.count(sublist)\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Check if the string contains a decimal point\n    if \".\" not in num:\n        return False\n\n    # Split the string into integer and fractional parts\n    parts = num.split(\".\")\n\n    # Check if there are exactly 2 parts\n    if len(parts)!= 2:\n        return False\n\n    # Check if the integer part is a decimal number\n    if not parts[0].isdigit():\n        return False\n\n    # Check if the fractional part is a decimal number with a precision of 2\n    fraction = parts[1]\n    if not fraction.isdigit():\n        return False\n    if len(fraction) > 2:\n        return False\n    if fraction.count(\".\")!= 1:\n        return False\n    if fraction.count(\"0\") > 1:\n        return False\n\n    # If all checks pass, the number is valid\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        elif str(float_num).split('.')[1][2:4] == '00':\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' in num:\n            num_list = num.split('.')\n            if len(num_list) == 2 and num_list[1].isdigit() and int(num_list[1]) <= 99:\n                if len(num) <= 6 and num.isdigit():\n                    return True\n        else:\n            if len(num) <= 6 and num.isdigit():\n                return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return num.is_integer() and round(num, 2) == num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    # Convert the given number to a string and remove any non-numeric characters\n    num = ''.join(e for e in num if e.isdigit())\n\n    # Split the number into its integer and fractional parts\n    int_part, frac_part = num.split('.')\n\n    # Check if the number contains a non-zero fractional part\n    if len(frac_part) > 2:\n        return False\n\n    # Check if the integer part is a multiple of 10\n    if int_part and int_part[-1] == '0':\n        return False\n\n    # Check if the integer part contains any non-zero digits\n    if not int_part or not int_part[0].isdigit():\n        return False\n\n    # Check if the fractional part is a multiple of 0.1\n    if frac_part and frac_part[-1]!= '0':\n        return False\n\n    # Check if the fractional part contains any non-zero digits\n    if not frac_part or not frac_part[0].isdigit():\n        return False\n\n    # If all the checks pass, the number is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = num.strip()\n    if num.startswith('-'):\n        num = num[1:]\n    if '.' in num:\n        num = num.replace('.', '')\n    num = int(num)\n    if num % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # Check if the given number contains any decimal point\n    if '.' in num:\n        # Get the integer part of the number\n        int_part = num.split('.')[0]\n        # Check if the integer part contains any decimal point\n        if '.' in int_part:\n            # If yes, return False\n            return False\n        # Check if the number is greater than 2^53\n        elif int(int_part) > 2**53:\n            return False\n        # Check if the number is less than -2^53\n        elif int(int_part) < -2**53:\n            return False\n        # Check if the number is an integer\n        elif '.' not in int_part:\n            # If not, check if the number is divisible by 10\n            if int(int_part) % 10 == 0:\n                return True\n    # If the number does not contain any decimal point, check if the number is divisible by 10\n    else:\n        if int(num) % 10 == 0:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the given string is a decimal number with a precision of 2\n    if '.' not in num and num.isdigit():\n        if len(num) == 1 or (len(num) == 2 and num[0] == '0'):\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # check if the input contains only digits\n    if not num.isdigit():\n        return False\n    \n    # check the precision of the input\n    if len(num) > 11 or len(num) < 1:\n        return False\n    \n    # convert the input to float and check for precision of 2\n    try:\n        float_num = float(num)\n        if float_num.is_integer() or abs(float_num % 1) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[-1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set_arr = set(arr)\n    # Check if the length of the set is 1 or not\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_numbers = set(arr)\n    if len(distinct_numbers) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Using a set to remove duplicates and check if the length of the set is 1 or not.\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Checking if the length of the list is 1\n    if len(arr) == 1:\n        return True\n    \n    # Initializing a dictionary to store the counts of elements in the list\n    count_dict = {}\n    \n    # Looping through the list and updating the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Checking if all the values in the dictionary are 1\n    if all(value == 1 for value in count_dict.values()):\n        return True\n    \n    # If none of the above conditions are met, it means there are multiple elements in the list that are distinct\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 % 2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"This month has 30 days\"\n    else:\n        return \"This month has 31 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is valid\n    if not (1 <= monthnum3 <= 12):\n        return \"Invalid Month Number\"\n\n    # Check if the given month number contains 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"30 Days\"\n    elif monthnum3 in [2]:\n        return \"28 Days\"\n    else:\n        return \"31 Days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            if monthnum % 4 == 0 and monthnum % 100!= 0 or monthnum % 400 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days_in_months:\n        print(\"Month number contains 30 days.\")\n    else:\n        print(\"Month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 % 4 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"Month has 30 days.\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"Month has 31 days.\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and a number n and returns the minimum difference between any two elements in the array.\n    The algorithm used is the following:\n        1. Sort the array in ascending order.\n        2. Iterate through the array and for each element, check if the difference between it and the previous element is less than or equal to the minimum difference found so far. If it is, update the minimum difference.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference found so far\n    min_diff = arr[1] - arr[0]\n\n    # Iterate through the array and check if the difference between it and the previous element is less than or equal to the minimum difference found so far\n    for i in range(1, n):\n        if arr[i] - arr[i-1] <= min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    Args:\n    - arr: a list of integers\n    - n: the size of the array\n\n    Returns:\n    - The minimum difference between any two elements in the array.\n\n    Examples:\n    >>> arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\n    >>> find_min_diff(arr, len(arr))\n    1\n    \"\"\"\n    # Sort the array\n    arr.sort()\n    # Initialize variables for minimum difference and current minimum difference\n    min_diff = float('inf')\n    curr_min_diff = float('inf')\n    # Loop through the array\n    for i in range(n - 1):\n        # Calculate current difference and update minimum difference if necessary\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            curr_min_diff = curr_diff\n        # Calculate current minimum difference and update minimum difference if necessary\n        curr_min_diff = min(curr_min_diff, arr[i+1] - arr[i])\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    The function takes in two parameters: arr (list of integers) and n (integer representing the length of the array).\n    The function iterates through the array and calculates the difference between each element and the next element.\n    It then compares the difference with the minimum difference seen so far and updates the minimum difference if necessary.\n    Finally, the function returns the minimum difference.\n    '''\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, abs(arr[i] - arr[i+1]))\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array in ascending order\n    \n    # Initialize min_diff to store the minimum difference\n    min_diff = float('inf')\n    \n    # Initialize i to 0 and j to 1\n    i, j = 0, 1\n    \n    # Iterate till j is less than n\n    while j < n:\n        # Check if the difference between arr[i] and arr[j] is less than min_diff\n        diff = arr[j] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n        \n        # If the difference is greater, increment i and decrement j\n        elif diff > 0:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j += 1\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a size n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to be the difference between the first and last elements\n    min_diff = arr[-1] - arr[0]\n    # Loop through all the pairs of elements\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    '''\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    '''\n    if n < 2:\n        return \"Array should have at least two elements.\"\n    \n    # sort the array in non-decreasing order\n    arr.sort()\n    \n    # initialize minimum difference to be the difference between the first and last element\n    min_diff = abs(arr[0] - arr[-1])\n    \n    # loop through the array and calculate the difference between each consecutive pair of elements\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort() # sort the array\n    min_diff = arr[1]-arr[0] # initialize minimum difference\n    for i in range(1,n-1): # iterate through all pairs of elements\n        if arr[i+1]-arr[i] < min_diff: # if the difference between adjacent elements is smaller than the current minimum difference\n            min_diff = arr[i+1]-arr[i] # update minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as arguments,\n    and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last two elements in the array\n    min_diff = abs(arr[n-1] - arr[n-2])\n\n    # Iterate through the array from the second last element to the second element\n    for i in range(n-2, 0, -1):\n        # Calculate the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n\n    for char in str:\n        if char.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 2\n    polite_number = 1\n    while i < n:\n        if i % 2 == 0:\n            polite_number += i\n        else:\n            polite_number += 2\n        i += 1\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    for i in range(1, n+1):\n        if i % 15 == 0:\n            polite_numbers.append(i)\n    return polite_numbers"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        if n < 1:\n            return 0\n\n        # find the smallest prime number greater than or equal to n\n        i = 1\n        while not is_prime(i):\n            i += 1\n\n        # find the nth polite number by adding the number of primes less than n to n\n        result = i + n - 1\n        for _ in range(n):\n            while not is_prime(result):\n                result += 1\n\n        return result\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_of_cubes = math.fsum([i**3 for i in range(1, n+1)])\n\n    # Calculate the square of the sum of the cubes of the first n natural numbers\n    square_of_sum_of_cubes = sum_of_cubes**2\n\n    # Calculate the square of the arithmetic mean of the first n natural numbers\n    square_of_arithmetic_mean = (sum_of_cubes + 1.0/n + 1.0/n**2 + 1.0/n**3 +... + 1.0/math.factorial(n))**2\n\n    # Calculate the difference between the two squares\n    difference = square_of_sum_of_cubes - square_of_arithmetic_mean\n\n    # Calculate the nth polite number\n    nth_polite = int(math.sqrt(difference))\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Calculate the nth polite number\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 11\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 17\n    elif n == 6:\n        return 19\n    elif n == 7:\n        return 23\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 31\n    elif n == 10:\n        return 37\n    elif n == 11:\n        return 41\n    elif n == 12:\n        return 43\n    elif n == 13:\n        return 47\n    elif n == 14:\n        return 53\n    elif n == 15:\n        return 59\n    elif n == 16:\n        return 61\n    elif n == 17:\n        return 67\n    elif n == 18:\n        return 71\n    elif n == 19:\n        return 73\n    elif n == 20:\n        return 79\n    elif n == 21:\n        return 83\n    elif n == 22:\n        return 89\n    elif n == 23:\n        return 97\n    elif n == 24:\n        return 101\n    elif n == 25:\n        return 103\n    elif n == 26:\n        return 107\n    elif n == 27:\n        return 109\n    elif n == 28:\n        return 113\n    elif n == 29:\n        return 127\n    elif n == 30:\n        return 131\n    elif n == 31:\n        return 137\n    elif n == 32:\n        return 139\n    elif n == 33:\n        return 149\n    elif n == 34:\n        return 151\n    elif n == 35:\n        return 157\n    elif n == 36:\n        return 163\n    elif n == 37:\n        return 167\n    elif n == 38:\n        return 173\n    elif n == 39:\n        return 179\n    elif n == 40:\n        return 181\n    elif n == 41:\n        return 191\n    elif n == 42:\n        return 193\n    elif n == 43:\n        return 197\n    elif n == 44:\n        return 199\n    elif n == 45:\n        return 211\n    elif n == 46:\n        return 223\n    elif n == 47:\n        return 227\n    elif n == 48:\n        return 229\n    elif n == 49:\n        return 233\n    elif n == 50:\n        return 239\n    elif n == 51:\n        return 241\n    elif n == 52:\n        return 251\n    elif n == 53:\n        return 257\n    elif n == 54:\n        return 263\n    elif n == 55:\n        return 269\n    elif n == 56:\n        return 271\n    elif n == 57:\n        return 277\n    elif n == 58:\n        return 281\n    elif n == 59:\n        return 283\n    elif n == 60:\n        return 293\n    elif n == 61:\n        return 307\n    elif n == 62:\n        return 311\n    elif n == 63:\n        return 313\n    elif n == 64:\n        return 317\n    elif n == 65:\n        return 331\n    elif n == 66:\n        return 337\n    elif n == 67:\n        return 347\n    elif n == 68:\n        return 349\n    elif n == 69:\n        return 353\n    elif n == 70:\n        return 359\n    elif n == 71:\n        return 367\n   "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = 1\n    \n    # Iterate from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        \n        # If n is divisible by i, i is not a polite number\n        if n % i == 0:\n            break\n        \n        # If i is a polite number, multiply it by 2\n        polite_number *= i\n        \n    # If i is not a polite number, multiply it by n\n    if i**2 > n:\n        polite_number *= n\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # finding the nth prime number\n    def find_nth_prime(n):\n        is_prime = [True] * (n+1)\n        is_prime[0], is_prime[1] = False, False\n        for i in range(2, int(math.sqrt(n))+1):\n            if is_prime[i]:\n                for j in range(i*i, n+1, i):\n                    is_prime[j] = False\n        return sum(is_prime)\n\n    # finding the nth polite number\n    def find_nth_polite(n):\n        # getting the nth prime number\n        nth_prime = find_nth_prime(n)\n        # finding the nth polite number\n        for i in range(n, 1, -1):\n            if is_prime[i]:\n                return i\n        # if the nth polite number is not found, return -1\n        return -1\n\n    return find_nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Define a list of non-polite numbers\n    non_polite_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    # Find the nth polite number in the list of non-polite numbers\n    polite_number = non_polite_numbers[n-1]\n    \n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    # Polite numbers are positive odd numbers greater than 1.\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef nth_polite_number(n):\n    # Use binary search to find the nth polite number.\n    left = 1\n    right = 2\n    while True:\n        mid = (left + right) // 2\n        if is_polite(mid):\n            right = mid\n        else:\n            left = mid + 1\n        if left > right:\n            break\n    return left"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(n):\n        if math.gcd(i, n) == 1:\n            return polite_numbers[i]\n    return None"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes in two arguments:\n    1. The list 'arr' containing numbers.\n    2. The integer'sum' representing the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pairs.append((arr[i], arr[j]))\n    count = 0\n    for pair in pairs:\n        if pair[0] + pair[1] == sum:\n            count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1.sort()\n    li2.sort()\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list, but not in the second list.\n\n    Parameters:\n    -----------\n    li1: list\n        A list of elements.\n    li2: list\n        A list of elements.\n\n    Returns:\n    --------\n    list\n        A new list containing the elements that are present in the first list, but not in the second list.\n\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a set from the first list and then subtract it from the second list\n    diff = set(li1) - set(li2)\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists as a new list.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list with all the elements present in li1 but not present in li2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n        count += 1\n    return sum, count"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(1, n+1, 2):\n        odd_nums.append(i)\n\n    return sum(x ** 4 for x in odd_nums)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    sum_of_fourth_powers = sum([i ** 4 for i in odd_numbers])\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing sum variable\n    sum_fourth = 0\n    # iterating through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculating fourth power of i\n        fourth_power = i**4\n        # adding fourth power to sum variable\n        sum_fourth += fourth_power\n    # returning the sum\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2!= 0:\n            sum += count ** 4\n        count += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += i ** 4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1]!= '(':\n                return False\n            elif char == ']' and stack[-1]!= '[':\n                return False\n            elif char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n            balance += 1\n        elif char == ')':\n            if balance == 0:\n                return False\n            balance -= 1\n            stack.pop()\n\n    return balance == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char in ['+', '-', '*', '/']:\n            if len(stack) < 2:\n                return False\n            else:\n                last_op = stack.pop()\n                if (char == '*' and last_op == '+' or char == '/' and last_op == '+') or (char == '+' and last_op == '*' or char == '-' and last_op == '*'):\n                    stack.append(char)\n                else:\n                    return False\n        else:\n            continue\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    \n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word) == K:\n            # If the word has k length, remove it from the list\n            words.remove(word)\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the input string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Loop through each word in the original list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the word is not of length K, add it to the new list\n            new_words.append(word)\n    # Join the new list of words into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            del words[i]\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for i, match in enumerate(matches):\n            print(f\"Match {i+1}: {match}\")\n            print(f\"Position: {text.find(match)}\")\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Substring found at position {match.start()} and with length {match.end()}\")\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    for match in matches:\n        return match.start(), match.end()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text, re.IGNORECASE)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error as e:\n        print(e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if not matches:\n        return None\n    else:\n        return [match for i,match in enumerate(matches) if i==0]"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    # Loop over each index in the list\n    for i in range(len(nums)):\n        # Check if the current index is odd\n        if i % 2 == 1:\n            # Check if there are odd numbers in the current position\n            if sum(1 for j in range(i, len(nums)) if nums[j] % 2 == 1) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if len(set([num for num in nums[i:] if num % 2 == 1])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            count = 0\n            for num in nums:\n                if num % 2 == 1:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # If the index is even, check if the number is odd\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if not all(n % 2 for n in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    # Check if every odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if len(set([nums[i], nums[i-1]]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i-1 >= 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n        if i+1 < len(test_str) and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            vowel_count += 1\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] == test_str[i-1]:\n            continue\n        if test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j] in vowels and i < j:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Creating a set to store unique elements from the given list\n    unique_set = set(arr)\n    \n    # Initializing the sum variable to 0\n    sum = 0\n    \n    # Iterating through the unique set\n    for num in unique_set:\n        # Adding each element to the sum\n        sum += num\n    \n    # Returning the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements and their frequency in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the sum of non-repeated elements\n    non_repeated = []\n    for num in arr:\n        if freq[num] == 1:\n            non_repeated.append(num)\n\n    return sum(non_repeated)\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(unique_set))\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Iterate over the sorted list and add each element to the total\n    for element in sorted_list:\n        total += element\n\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of the unique elements\n    sum_unique_elements = sum(unique_elements)\n    \n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    \n    # Convert the set to a list and sort it\n    sorted_list = list(unique_set)\n    sorted_list.sort()\n    \n    # Initialize the sum of non-repeated elements to 0\n    sum_non_repeated = 0\n    \n    # Iterate through the sorted list and add up the non-repeated elements\n    for i in range(len(sorted_list)):\n        sum_non_repeated += sorted_list[i]\n        \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    # Initialize the sum variable to zero\n    sum_non_repeated = 0\n    # Loop through the set of unique elements\n    for element in unique_set:\n        # Add the element to the sum if it is not already included\n        if element not in arr:\n            sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # create a dictionary to store the counts of elements in the list\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # initialize the sum variable to 0\n    sum_non_repeated = 0\n    \n    # loop through the dictionary and add the non-repeated elements to the sum variable\n    for i in arr:\n        if count_dict[i] == 1:\n            sum_non_repeated += i\n    \n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in arr:\n        # Check if the element is already in the dictionary\n        if element in count_dict:\n            # If it is, increment its count by 1\n            count_dict[element] += 1\n        else:\n            # If it's not, add it with a count of 1\n            count_dict[element] = 1\n    \n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n    \n    # Loop through the dictionary and add up the sum of all non-repeated elements\n    for key in count_dict:\n        if count_dict[key] == 1:\n            # If the count of the element is 1, add it to the sum\n            sum_non_repeated += key\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # iterate through the count_dict and add up only the non-repeated elements\n    for num, count in count_dict.items():\n        if count == 1:\n            total_sum += num\n            \n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools.groupby to group the list by consecutive elements\n    grouped = groupby(list1)\n    # Use list comprehension to create sublists for each consecutive group\n    sublists = [list(group) for _, group in grouped]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list of sublists where each sublist contains consecutive duplicates of the given list.\n    '''\n    grouped_list = groupby(lst)\n    sublists = [list(sublist) for _, sublist in grouped_list]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list of elements and packs consecutive duplicates of the elements into sublists.\n    '''\n    pack = []\n    for key, group in groupby(lst):\n        if len(list(group)) > 1:\n            pack.append(list(group))\n    return pack"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the list by the first element and then by the next elements\n    grouped_list = groupby(enumerate(list1), lambda x: x[0])\n    # Convert the grouped list to a list of sublists\n    packed_list = [list(group) for group in grouped_list]\n    # Remove any empty sublists\n    return [sublist for sublist in packed_list if sublist]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1] == x[0] + 1):\n        groups.append(list(map(lambda x: x[1], g)))\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the list elements by their value\n    grouped = groupby(lst)\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Iterate over the grouped items and append each group to the sublists\n    for group in grouped:\n        # Extract the key (element value) and the group itself\n        key, group = group\n        # Check if the key is None (i.e. consecutive duplicates)\n        if key is None:\n            # Append the group to the sublists\n            sublists.append(list(group))\n        else:\n            # Initialize an empty list to store the consecutive duplicates\n            consecutive_duplicates = []\n            # Append the first consecutive duplicate to the consecutive duplicates list\n            consecutive_duplicates.append(key)\n            # Iterate over the rest of the consecutive duplicates and append them to the list\n            for item in group:\n                if item!= key:\n                    consecutive_duplicates.append(item)\n                    # Create a new sublist with the consecutive duplicates\n                    sublist = list(consecutive_duplicates)\n                    # Append the sublist to the sublists\n                    sublists.append(sublist)\n                    # Reset the consecutive duplicates list\n                    consecutive_duplicates = []\n            # Create a new sublist with the last consecutive duplicates\n            sublist = list(consecutive_duplicates)\n            # Append the sublist to the sublists\n            sublists.append(sublist)\n\n    # Return the sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a dictionary to store consecutive duplicates\n    consecutive_duplicates = {}\n    # iterate through the list\n    for item in list1:\n        # check if the current item is consecutive to a previous item\n        if item in consecutive_duplicates:\n            # if it is, add it to the list of duplicates for that previous item\n            consecutive_duplicates[item].append(item)\n        else:\n            # if it's not, create a new list for that item and add it to the dictionary\n            consecutive_duplicates[item] = [item]\n    # convert the dictionary to a list of tuples\n    result = list(consecutive_duplicates.items())\n    # sort the tuples by the first element of each tuple (the item)\n    result.sort(key=lambda x: x[0])\n    # create a new list to hold the packed sublists\n    packed_sublists = []\n    # iterate through the sorted tuples\n    for item, group in result:\n        # check if the current group contains only one item (meaning it's consecutive to the previous item)\n        if len(group) == 1:\n            # if it does, add it to the packed sublist for the previous item\n            packed_sublists[-1].append(group[0])\n        else:\n            # if it doesn't, create a new sublist and add it to the packed_sublists list\n            packed_sublists.append([group[0]])\n    # return the packed_sublists list\n    return packed_sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped = groupby(list1)\n    # extract the sublists as a list of sublists\n    sublists = [list(sublist) for sublist in grouped if len(list(sublist)) > 1]\n    # return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools.groupby() to group the list by consecutive duplicates\n    grouped_list = groupby(list1)\n    # Create an empty list to store sublists\n    sublists = []\n    # Iterate over each group of consecutive duplicates\n    for key, group in grouped_list:\n        # If the first element of the group is the same as the last element of the previous group,\n        # then add the group to the sublists as a sublist of the previous sublist\n        if key == prev_key:\n            sublists[-1].extend(list(group))\n        # If the first element of the group is different from the last element of the previous group,\n        # then add the previous sublist to the sublists and start a new sublist with the current group\n        else:\n            sublists.append([key])\n            sublists[-1].extend(list(group))\n        # Update the previous key to the current key\n        prev_key = key\n    # Add the last sublist to the sublists\n    sublists.append([key])\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_tuples = {}\n    for item in list1:\n        if tuple(item) not in unique_tuples:\n            unique_tuples[tuple(item)] = 1\n        else:\n            unique_tuples[tuple(item)] += 1\n    return unique_tuples"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:i+2])\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary to store the number of occurrences for each unique sublist\n    count_dict = {}\n\n    # loop through each sublist in the list\n    for sublist in list1:\n        # create a tuple of the sublist and convert it to a string to use as a key in the dictionary\n        key = tuple(sorted(str(sublist)))\n\n        # check if the key already exists in the dictionary, if it does, increment its value by 1\n        if key in count_dict:\n            count_dict[key] += 1\n        # if the key does not exist in the dictionary, add it with a value of 1\n        else:\n            count_dict[key] = 1\n\n    # return the dictionary containing the number of occurrences for each unique sublist\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for lst in list1:\n        if lst in counts:\n            counts[lst] += 1\n        else:\n            counts[lst] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n    \n    # Iterate over each element in the list1\n    for element in list1:\n        # If the element is a list, turn it into a tuple and check if it's already in the dictionary\n        if type(element) == list:\n            tup = tuple(element)\n            if tup in unique_sublists_dict:\n                unique_sublists_dict[tup] += 1\n            else:\n                unique_sublists_dict[tup] = 1\n                \n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts of unique lists\n    counts = {}\n    \n    # Iterate over the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        tup = tuple(sublist)\n        \n        # Check if the tuple already exists in the dictionary\n        if tup in counts:\n            # Increment the count by 1\n            counts[tup] += 1\n        else:\n            # Otherwise, add the tuple and its count to the dictionary\n            counts[tup] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, list):\n                    for k in j:\n                        if isinstance(k, list):\n                            for l in k:\n                                if isinstance(l, list):\n                                    sublist_count[tuple(l)] = sublist_count.get(tuple(l), 0) + 1\n                        else:\n                            sublist_count[tuple(k)] = sublist_count.get(tuple(k), 0) + 1\n                else:\n                    sublist_count[tuple(j)] = sublist_count.get(tuple(j), 0) + 1\n        else:\n            sublist_count[tuple(i)] = sublist_count.get(tuple(i), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_dict = {}\n    for i in list1:\n        if i in unique_dict:\n            unique_dict[i] += 1\n        else:\n            unique_dict[i] = 1\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for item in list1:\n        if item not in unique_lists:\n            unique_lists[tuple(item)] = 1\n        else:\n            unique_lists[tuple(item)] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        if tuple(sublist) in count:\n            count[tuple(sublist)] += 1\n        else:\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for combination in combinations(test_list, len(test_list)):\n        if sum(combination) == 0:\n            yield tuple(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Creating a list of tuples with unique elements from the given list\n    unique_tuples = set()\n    for tuple_ in test_list:\n        if tuple_ not in unique_tuples:\n            unique_tuples.add(tuple_)\n\n    # Creating a list of unique elements from the given list\n    unique_list = list(unique_tuples)\n\n    # Generating all possible combinations of sums with tuples from the given list of unique elements\n    combination_list = []\n    for i in range(1, len(unique_list) + 1):\n        for combination in combinations(unique_list, i):\n            combination_list.append(tuple(combination))\n\n    # Filtering out the combinations that have already appeared before in the list\n    filtered_combination_list = []\n    for combination in combination_list:\n        if combination not in filtered_combination_list:\n            filtered_combination_list.append(combination)\n\n    return filtered_combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define the function to find combinations of sums\n    def find_combination(array, target_sum):\n        # Find all possible pairs of indexes to form combinations\n        indexes = list(combinations(range(len(array)), 2))\n        # Initialize an empty list to store the combinations of sums\n        combination_list = []\n        # Iterate over all pairs of indexes and check if the sum of the corresponding elements is equal to the target sum\n        for index1, index2 in indexes:\n            if array[index1] + array[index2] == target_sum:\n                # Append the pair of tuples to the combination list\n                combination_list.append((array[index1], array[index2]))\n        return combination_list\n\n    # Find all possible combinations of sums with tuples in the input list\n    result = find_combination(test_list, sum(test_list))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            total = sum(test_list[i]) + sum(test_list[j])\n            if total in test_list:\n                result.append(tuple(sorted([test_list[i], test_list[j]])))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_tuples = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        for n in range(m+1, len(test_list)):\n                            if (sum(test_list[i:j+1]), sum(test_list[j:k+1]), sum(test_list[k:l+1]), sum(test_list[l:m+1]), sum(test_list[m:n+1]), sum(test_list[n:])) == (sum(test_list[i:]), sum(test_list[j:]), sum(test_list[k:]), sum(test_list[l:]), sum(test_list[m:]), sum(test_list[n:])):\n                                sum_tuples.add((sum(test_list[i:j+1]), sum(test_list[j:k+1]), sum(test_list[k:l+1]), sum(test_list[l:m+1]), sum(test_list[m:n+1]), sum(test_list[n:])))\n\n    return sum_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Sort the input list of tuples in ascending order\n    test_list.sort()\n\n    # Find all possible combinations of tuples in the sorted list\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append(test_list[i] + test_list[j])\n\n    # Return the sorted list of combinations of sums with tuples in the input list\n    return sorted(result)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns the list of all combinations of sums with tuples in the list.\n    '''\n    # Create a list of tuples of all possible sums\n    sums = [(x, y) for x in test_list for y in test_list]\n    # Find all combinations of sums using itertools.combinations\n    all_combinations = list(combinations(sums, r=2))\n    # Convert the list of tuples to lists of tuples\n    combinations_list = [tuple(combination) for combination in all_combinations]\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = list(combinations(test_list[i], j))\n            for combo in comb:\n                combinations_list.append(tuple(combo))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total = sum(test_list)\n    all_combinations = list(combinations(test_list, n))\n    result = []\n    for combination in all_combinations:\n        if sum(combination) == total:\n            result.append(combination)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return \"Count of divisors is even\"\n    else:\n        return \"Count of divisors is odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the count of divisors using a loop\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    # Check if the count is even or odd\n    if count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors of the given number\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # Check whether the count of divisors is even or odd\n    count = len(divisors)\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # Calculate the sum of all numbers from 1 to n \n    total = sum(range(1, n+1))\n    \n    # Calculate the sum of all numbers from 1 to the square root of n \n    sum_of_squares = sum(range(1, int(math.sqrt(n))+1))\n    \n    # Calculate the count of divisors using the formula: count = total - sum_of_squares\n    count = total - sum_of_squares\n    \n    # Check whether the count of divisors is even or not \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n\n    # Function to count the number of divisors of a number\n    def count_divisor(num):\n        div_count = 0\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                div_count += 1\n        return div_count\n    \n    # Find the number of divisors of the given number\n    num_of_divisors = count_divisor(n)\n    \n    # Check if the count of divisors is even or odd\n    if num_of_divisors % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # Function to check if n is even or odd\n    def check_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # Calculate the count of divisors of n\n    def count_divisors(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        if n > 2:\n            count += 1\n        return count\n    \n    # Check if count of divisors is even or odd\n    if check_even(count_divisors(n)):\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given integer.\n    \"\"\"\n    # Initialize count to zero\n    count = 0\n    # Loop through the range of numbers from 1 to the square root of the given integer\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # Check if the current number is a divisor of the given integer\n        if n % i == 0:\n            # If it is, add one to the count\n            count += 1\n    # If the count is even, return True\n    if count % 2 == 0:\n        return True\n    # If the count is odd, return False\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the divisors of a given number n\n    and returns a boolean value indicating whether the count is even or odd.\n    '''\n    # Find the number of divisors of n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    # Check if count is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    # Initialize sum to 0\n    sum = 0\n    # Initialize a boolean variable to keep track of the starting index of the subarray\n    start = 0\n    # Traverse the array\n    for i in range(n):\n        # If the index is odd, add the current element to the sum\n        if i % 2!= 0:\n            sum += arr[i]\n        # If the sum reaches the maximum value possible, add the current subarray\n        if i - start + 1 == 2 * i:\n            sum += odd_length_sum(arr[start:i+1])\n        # If the sum becomes negative, reset the sum to 0 and move the start index to the next index\n        elif sum < 0:\n            sum = 0\n            start += 1\n    # Return the sum of all odd length subarrays\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n%2==0:\n        return 0\n    else:\n        even_sum = 0\n        odd_sum = 0\n        for i in range(0, n, 2):\n            odd_sum += arr[i]\n        return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, min(i+15, n)):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            result += arr[j]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, min(i+4, n)):\n            sum_odd_length_subarrays += arr[j]\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2!= 0:\n                sum_odd += arr[j] - arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            sum_odd_len += arr[j-2]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Returns the sum of all odd length subarrays in the given array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    odd_sum = 0\n    for i in range(n):\n        if i % 2 == 0:  # even index\n            count += 1\n            odd_sum += arr[i]\n        elif count % 2 == 1:  # odd count\n            odd_sum += arr[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Find the maximum and minimum value\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the delta value\n    delta = max_val - min_val\n    \n    # Find the hue value\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        # Convert h value to degrees\n        h = h * 60\n    \n    # Find the saturation value\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Find the value value\n    v = max_val\n    \n    # Convert h value to degrees\n    h = h % 360\n    \n    # Return the hsv values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    delta = max_val - min_val\n    \n    if delta == 0:\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / max_val\n    \n    h = h * 60\n    s = s * 100\n    v = v * 100\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n    \n    :param r: Red color value in range [0, 255]\n    :param g: Green color value in range [0, 255]\n    :param b: Blue color value in range [0, 255]\n    \n    :return: Hue value in range [0, 360], Saturation value in range [0, 100], Value value in range [0, 100]\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == 0:\n        hue = 0\n        saturation = 0\n    else:\n        if delta == 0:\n            hue = 0\n        elif max_val == r:\n            hue = ((g - b) / delta) % 6\n        elif max_val == g:\n            hue = (b - r) / delta + 2\n        else:\n            hue = (r - g) / delta + 4\n        \n        hue = hue * 60\n        \n        if hue < 0:\n            hue += 360\n        \n        saturation = delta / max_val\n        \n    value = max_val\n    \n    return int(hue), int(saturation * 100), int(value * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    h = 0\n    s = 0\n    v = max(r, g, b) / 255.0\n\n    if v == 0:\n        s = 0\n    else:\n        delta = max(r, g, b) - min(r, g, b)\n        s = delta / v\n\n    if r == v:\n        h = (g - b) / delta\n    elif g == v:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n    if h < 0:\n        h += 360\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    hsv = {}\n\n    if max_color == min_color:\n        hsv[\"h\"] = 0\n        hsv[\"s\"] = 0\n        hsv[\"v\"] = max_color\n    else:\n        delta = max_color - min_color\n        s = delta / max_color\n\n        if r == max_color:\n            hsv[\"h\"] = (g - b) / delta\n        elif g == max_color:\n            hsv[\"h\"] = 2 + (b - r) / delta\n        else:\n            hsv[\"h\"] = 4 + (r - g) / delta\n\n        hsv[\"h\"] = hsv[\"h\"] / 6.0\n\n        if hsv[\"h\"] < 0:\n            hsv[\"h\"] += 1\n\n        hsv[\"s\"] = s\n        hsv[\"v\"] = max_color\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r,g,b to floats and normalize to [0,1]\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find greatest color value\n    max_color = max(r, g, b)\n    \n    # Find second largest color value\n    second_max_color = max(r, g, b)\n    if second_max_color == r:\n        if g > b:\n            second_max_color = g\n        else:\n            second_max_color = b\n    elif second_max_color == g:\n        if b > r:\n            second_max_color = b\n        else:\n            second_max_color = r\n    \n    # Find hue\n    if max_color == r:\n        hue = (g - b) / (max_color - second_max_color)\n    elif max_color == g:\n        hue = 2 + (b - r) / (max_color - second_max_color)\n    else:\n        hue = 4 + (r - g) / (max_color - second_max_color)\n    \n    if hue < 0:\n        hue += 6\n    \n    # Find saturation\n    if max_color == 0:\n        saturation = 0\n    else:\n        saturation = (max_color - second_max_color) / max_color\n    \n    # Find value\n    value = max_color\n    \n    # Convert to hsv values and return\n    h = hue / 6\n    return [h, saturation, value]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HEX color\n    hex_color = '#%02x%02x%02x' % (r, g, b)\n    \n    # Convert HEX color to HSV\n    hsv = tuple(int(hex_color[i:i+2], 16) for i in (1, 3, 5))\n\n    # Convert HSV to HSL\n    h, s, l = rgb_to_hsl(hsv[0], hsv[1], hsv[2])\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    delta = max_c - min_c\n    if max_c!= 0:\n        s = delta / max_c\n        if max_c == r:\n            h = (g - b) / delta\n        elif max_c == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n    return (int(h*255), int(s*255), int(v*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color using the following formula:\n    \n    H = (r + g + b) / 3\n    \n    S = max(r, g, b) - min(r, g, b)\n    \n    V = max(r, g, b)\n    \n    HSV = (H, S, V)\n    \n    Args:\n        r (int): Red component of the RGB color (0-255)\n        g (int): Green component of the RGB color (0-255)\n        b (int): Blue component of the RGB color (0-255)\n        \n    Returns:\n        tuple: H, S, V components of the HSV color\n    \"\"\"\n    \n    # Convert RGB to HSV components\n    H = (r + g + b) / 3\n    S = max(r, g, b) - min(r, g, b)\n    V = max(r, g, b)\n    \n    # Convert HSV to HSV components\n    S /= V\n    V /= 255\n    \n    return H, S, V"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters r, g, b representing the red, green, and blue color components of the color.\n    The function converts the color from the RGB color model to the HSV color model.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0 # Normalize the values to be between 0 and 1.\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val: # If the color is grayscale.\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60 # Convert to degrees.\n        if h < 0:\n            h += 360\n        s = delta / max_val # Calculate the saturation.\n    v = max_val # Calculate the value.\n    return (h, s, v) # Return the converted color as a tuple."
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    # Initialize a variable to store the product of even and odd numbers\n    prod = 1\n    # Loop through the list and multiply each even number by its corresponding odd number\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            prod *= lst[i+1]\n        else:\n            prod *= lst[i]\n    return prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even *= num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd *= num\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Find the product of even and odd number\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    product = even_product * odd_product\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_product = odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Initialize variables for even and odd numbers and product\n    even = 0\n    odd = 0\n    product = 1\n\n    # Loop through the list to find even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    # Find the product of even and odd numbers\n    product = even * odd\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n            \n    if even_count > 0 and odd_count > 0:\n        product = even_product * odd_product\n        print(\"Product of first even and odd number:\", product)\n    else:\n        print(\"No even or odd numbers in the list\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for item in test_str:\n        if item.isdigit():\n            int_tuple += (int(item),)\n        else:\n            int_tuple += (int(item[1:-1]),)\n    return tuple_str_int(int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a tuple of tuples to hold the converted integers\n    int_tuples = []\n\n    # Loop through each element in the tuple string\n    for item in test_str:\n        # If the item is a string, convert it to an integer and append to the list\n        if isinstance(item, str):\n            int_tuples.append(int(item))\n\n    # Return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    :param test_str: Tuple string to be converted.\n    :type test_str: str\n    :return: Tuple of integers.\n    :rtype: tuple\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer and append to a list\n    int_list = [int(x.strip()) for x in str_list]\n\n    # Convert the list of integers into a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # create list to store integers\n    int_list = []\n    # split string by comma\n    str_list = test_str.split(',')\n    # iterate through the list\n    for i in str_list:\n        # check if the string is an integer\n        try:\n            # convert string to integer and add to list\n            int_list.append(int(i))\n        except ValueError:\n            # if string is not an integer, print error message\n            print('Error: Invalid input for integer conversion.')\n    # return the tuple of integers\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    :param test_str: A string in tuple format.\n    :return: A tuple of integers from the string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Initialize an empty tuple to store the integers\n    int_tuple = ()\n    # Loop through the list of characters\n    for char in char_list:\n        # If the character is a number, add it to the tuple\n        if char.isdigit():\n            int_tuple += (int(char),)\n    # Return the tuple of integers\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of characters\n    char_list = list(test_str)\n    # Initialize an empty list to hold the integer tuples\n    int_list = []\n    # Loop through each character in the list\n    for char in char_list:\n        # If the character is a digit, convert it to an integer and add it to the list\n        if char.isdigit():\n            int_list.append(int(char))\n    # Convert the list of integer tuples to a tuple of integers\n    int_tuple = tuple(int_list)\n    # Return the tuple of integers\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by spaces and convert each element to integer\n    test_tuple = tuple(int(i) for i in test_str.split())\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' to get a list of strings\n    str_list = test_str.split(',')\n    \n    # Create a new list to store the integers\n    int_list = []\n    \n    # Iterate over the list of strings and convert each string to an integer\n    for string in str_list:\n        try:\n            int_list.append(int(string))\n        except ValueError:\n            # If conversion fails, print an error message\n            print(f\"Error: {string} is not a valid integer.\")\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = []\n    temp_list = [int(x) for x in test_str]\n    return tuple(temp_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string by comma and space\n    string_list = test_str.split(',')\n    string_list = [x.strip() for x in string_list]\n\n    # Convert each string to integer\n    int_list = [int(x) for x in string_list]\n\n    # Convert the list of integers to tuple\n    tuple_obj = tuple(int_list)\n\n    return tuple_obj"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the index of the first element greater than or equal to x\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        # If the index is equal to the length of the array, it means that x is already in the array\n        return index\n    # If the index is not equal to the length of the array, then x must be inserted at index + 1\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x) # find the index of the element to the right of x in a\n    if i == len(a): # if x is greater than all elements in a, append it at the end of a\n        a.append(x)\n    elif a[i]!= x: # if the element at the i-th index is not equal to x, it must be between x and a[i-1]\n        a.insert(i, x)\n    else:\n        i -= 1 # if x is equal to a[i-1], make the insertion point i-1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    # Check if the element at the index is equal to x\n    if i == len(a) or a[i]!= x:\n        # If it's not, return the index\n        return i\n    # If it is, move the search to the right until a value is found greater than or equal to x\n    while i < len(a) and a[i] == x:\n        i += 1\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{2}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\s{0,2}b{3}\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a{3}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(b{3})')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\w{3}b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # create a new list with the given string and list\n    new_list = test_str + test_list\n    # convert the new list into a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # combine the two inputs into a single list\n    combined_list = test_list + [test_str]\n    # create a tuple from the combined list\n    new_tuple = tuple(combined_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Join the list with comma as separator\n    combined_list = \",\".join(map(str, test_list))\n    # Combine the list and string with a colon and a space as separator\n    new_tuple = \":\".join([test_str, combined_list])\n    # Convert the new tuple to a tuple\n    new_tuple = tuple(new_tuple.split(\":\"))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists\n    new_list = test_list + [test_str]\n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # combine the list and string using the * operator\n    combined = test_list + (test_str,)\n    # return the new tuple\n    return combined"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new tuple with the given list and string\n    new_tuple = (test_list, test_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = list(test_list)\n    new_tuple_list.insert(0, test_str)\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two input lists and the input string\n    new_list = test_list + [test_str]\n    # convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                break\n        else:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                break\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:])) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[j] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if sum(1 for x in nums[i:i+2] if x % 2 == 0) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if all(nums[j] % 2 == 0 for j in range(i, len(nums))):\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            return False\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # If the element is a tuple, flatten it and add the elements to the flattened_list\n        if isinstance(element, tuple):\n            flattened_list += flatten_tuple(element)\n        # Otherwise, add the element to the flattened_list\n        else:\n            flattened_list.append(element)\n    \n    # Return the flattened list\n    return flattened_list\n\ndef flatten_tuple(test_tup):\n    \"\"\"\n    Flatten a nested tuple to a flattened list.\n    \"\"\"\n    # Initialize an empty list to store the flattened elements\n    flattened_list = []\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # If the element is a tuple, flatten it and add the elements to the flattened_list\n        if isinstance(element, tuple):\n            flattened_list += flatten_tuple(element)\n        # Otherwise, add the element to the flattened_list\n        else:\n            flattened_list.append(element)\n    \n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Use a list comprehension to remove the tuples\n    result = [elem for elem in test_tup if type(elem)!= tuple]\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def is_tuple(obj):\n        return isinstance(obj, tuple)\n\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    flattened_list = flatten([x for x in test_tup if not is_tuple(x)])\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define a new list to store the flattened tuple\n    flattened = []\n    \n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is a tuple, loop through each element in the tuple\n        if type(element) == tuple:\n            # Loop through each element in the tuple and append it to the flattened list\n            for sub_element in element:\n                flattened.append(sub_element)\n        # If the element is not a tuple, append it to the flattened list\n        else:\n            flattened.append(element)\n    \n    # Return the flattened list\n    return flattened"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the input is a tuple\n    if type(test_tup)!= tuple:\n        return \"The input is not a tuple.\"\n    \n    # Create an empty list to store the output\n    output_list = []\n    \n    # Loop through each element in the input tuple\n    for item in test_tup:\n        # Check if the element is a tuple\n        if type(item) == tuple:\n            # If it is, recursively call the function\n            output_list.extend(remove_nested(item))\n        else:\n            # If it's not, add it to the output list\n            output_list.append(item)\n    \n    # Return the output list\n    return output_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for tup in test_tup:\n        for item in tup:\n            if type(item)!= tuple:\n                new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n\n    Args:\n    input_list: A list of lists of any type.\n\n    Returns:\n    The number of lists in the input list.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the index of the last occurrence of x in the array. If x is not present in the array, it returns -1.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is equal to x, update the last index\n        if arr[i] == x:\n            last_index = i\n    # Return the last index or -1 if x was not found in the array\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    # Finding the last index of the element x in the array\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if right >= 0 and arr[right] == x:\n        return right\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the last index of the element in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    last_index = -1\n\n    # Binary search to find the last index of x in the array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_index = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize variables\n    left, right = 0, len(arr) - 1\n    ans = -1\n    \n    # Find first occurrence of x in the array\n    while arr[left]!= x:\n        left += 1\n        if left == right:\n            break\n    \n    # Find the last occurrence of x in the array\n    while arr[right]!= x:\n        right -= 1\n        if left == right:\n            break\n    \n    # Return the last position of x\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == x:\n            return i\n        i += 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # initialize the last position to None\n    last_position = None\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # if the current element is equal to the x element, set the last_position to i\n        if arr[i] == x:\n            last_position = i\n\n    # return the last_position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n\n    Args:\n        arr (list): The sorted array.\n        x (int): The element to find the last occurrence of.\n\n    Returns:\n        int: The index of the last occurrence of x in the array.\n\n    Raises:\n        ValueError: If the element x is not in the array.\n    \"\"\"\n    if x not in arr:\n        raise ValueError(f\"{x} is not in the array.\")\n    else:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # If the array is empty or the element is not present\n    if not arr or x not in arr:\n        return -1\n\n    # Find the leftmost index of the element in the array\n    while arr[left] < x:\n        left += 1\n\n    # If the element is not present in the array\n    if arr[left]!= x:\n        return -1\n\n    # Find the rightmost index of the element in the array\n    while arr[right] > x:\n        right -= 1\n\n    # Return the last index of the element\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'\\ba[^b]*b\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)[^\\s\\W]*?(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"(?i)a.*?b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Function to find the sum of all items in the given dictionary.\n    '''\n\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    '''\n    Function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable\n    sum_odd = 0\n    # loop through numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if number is odd\n        if i % 2 == 1:\n            # add number to sum if odd\n            sum_odd += i\n    # return sum of all odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_odd = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    s = 0\n    while l <= r:\n        s += l\n        if l % 2 == 1:\n            l += 2\n        else:\n            l += 1\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r): \n    \"\"\"\n    This function takes two arguments: l (lower limit) and r (upper limit).\n    It returns the sum of all odd natural numbers within the range l to r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range: \").split())\n    return sum(x for x in range(l, r + 1) if x % 2!= 0)\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number of test cases: \"))\n    for i in range(n):\n        l, r = map(int, input(\"Enter the range: \").split())\n        print(\"Case #{}: {}\".format(i + 1, sum_odd(l, r)))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower limit: \")), int(input(\"Enter the upper limit: \"))\n    s = 0\n    for i in range(l, r+1):\n        if i%2!=0:\n            s += i\n    print(\"The sum of all odd natural numbers in the given range is:\", s)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # calculate the range of numbers within which we need to sum odd natural numbers\n    l = 1\n    r = n\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the range of numbers within the range l and r\n    for i in range(l, r+1):\n        # check if the current number is odd\n        if i % 2!= 0:\n            # add the current number to the sum variable\n            sum += i\n\n    # return the sum of all odd natural numbers within the range l and r\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if arr == []:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_array(arr):\n    \"\"\"\n    This function finds the sum of a given array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes a 32-bit integer n and a number d, and rotates the bits left by d bits.\n    \"\"\"\n    # Convert the integer to a binary string\n    binary = format(n, \"032b\")\n    # Convert the binary string to a list of characters\n    binary_list = list(binary)\n    # Reverse the list of characters\n    binary_list.reverse()\n    # Reverse the whole list\n    binary_list = binary_list[d:] + binary_list[:d]\n    # Convert the list of characters back to a binary string\n    rotated_binary = \"\".join(binary_list)\n    # Convert the binary string back to an integer and return it\n    return int(rotated_binary, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    n = n & mask  # Mask off upper bits\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask  # Keep only the lower 32 bits\n    \n    # Rotate the bits to the left\n    rotated = ((n >> d) | (n << (32 - d))) & mask\n    \n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the input number to binary\n    binary = bin(n)[2:]\n    # pad the binary number with zeros until we reach the desired length\n    padded_binary = binary + '0' * d\n    # convert the padded binary number back to decimal\n    rotated_number = int(padded_binary, 2)\n    # return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # Check if the number of bits is less than 32\n    if len(binary_str) < 32:\n        # Pad the number with zeroes to make it 32 bits\n        binary_str = '0' * (32 - len(binary_str)) + binary_str\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    # Calculate the number of bits to shift\n    num_bits_to_shift = 32 - num_bits_to_rotate\n    # Perform the left rotation\n    rotated_binary_str = binary_str[:num_bits_to_rotate] + binary_str[num_bits_to_rotate:]\n    # Convert the rotated binary string to an integer\n    rotated_int = int(rotated_binary_str, 2)\n    # Return the rotated number\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d &= 0x1f # mask out the high order bits\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert binary representation of n to a list of 32 bit integers\n    n_list = [int(bit) for bit in bin(n)[2:]]\n\n    # Rotate the list by d bits\n    for _ in range(d):\n        n_list.append(n_list.pop(0))\n\n    # Convert the rotated list to a binary string\n    rotated_bin = ''.join([str(bit) for bit in n_list])\n\n    # Convert the binary string back to an integer\n    rotated_int = int(rotated_bin, 2)\n\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates a given number by d bits to the left.\n    \"\"\"\n    # Convert the binary number to an integer\n    n = int(n, 2)\n    # Calculate the binary representation of the number after rotation\n    n_rotated = (n << d) | (n >> (32 - d))\n    # Convert the binary rotated number back to a string and return it\n    return format(n_rotated, '032b')"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the last d bits of the number\n    last_d_bits = (n >> (32 - d)) & ((1 << d) - 1)\n\n    # Shift the first d bits of the number to the right\n    rotated_bits = (n << d) & 0xFFFFFFFF\n\n    # Combine the last d bits with the rotated bits\n    n = last_d_bits | rotated_bits\n\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters:\n    text (str): The input string.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    # Use a regular expression to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    cleaned_text = re.sub(r'\\s+','', text)\n    return cleaned_text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of the number of equal numbers from the three integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # check for increasing and decreasing sequence\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n        elif arr[i] < arr[i + 1]:\n            break\n    # check if the increasing and decreasing sequence is already sorted\n    if count == 0 and arr == sorted(arr):\n        return 0\n    return count + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # Traverse the array once to find the pivot element\n    pivot = arr[n // 2]\n    # Initialize two pointers, one at the start and one at the end of the array\n    i = 0\n    j = n - 1\n    # count the number of rotations\n    count = 0\n    while i <= j:\n        while i <= j and arr[i] >= pivot:\n            i += 1\n        while i <= j and arr[j] <= pivot:\n            j -= 1\n        # If i and j cross each other, then the array is sorted\n        if i <= j:\n            count += 1\n            # If the array is not sorted, then swap the elements at i and j\n            arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the first index of the smallest element in the array\n    i = 0\n    while i < n - 1 and arr[i] > arr[i + 1]:\n        i += 1\n    # if the smallest element is at the beginning of the array, there is no rotation needed\n    if i == 0:\n        return 0\n    # find the last index of the largest element in the array\n    j = n - 1\n    while j > 0 and arr[j - 1] < arr[j]:\n        j -= 1\n    # if the largest element is at the end of the array, there is no rotation needed\n    if j == n - 1:\n        return 0\n    # find the smallest element that is not equal to the first element\n    k = i\n    while k < j and arr[k] == arr[i]:\n        k += 1\n    # if the smallest element that is not equal to the first element is the largest element, there is no rotation needed\n    if k == j:\n        return 0\n    # count the number of rotations required to generate a sorted array\n    count = j - k + 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n    # If array is already sorted in descending order, return 0 rotations\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # If array is already sorted in ascending order, return 0 rotations\n    if arr == sorted(arr, reverse=False):\n        return 0\n    # Initialize counter variable\n    count = 0\n    # If array has only one element, return 0 rotations\n    if n == 1:\n        return 0\n    # Find the first rotation point\n    rot_point = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            rot_point = i\n            break\n    # Initialize two pointers, one at the beginning of the array and the other at the rotation point\n    i = 0\n    j = rot_point - 1\n    # Move the pointers until they meet in the middle of the array\n    while i < j:\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    # Increment the counter variable by the difference between the pointers\n    count += j - i + 1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse through all possible permutations of arr\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the array is already sorted\n            if arr[i] <= arr[j] <= arr[i+1]:\n                return 0\n    # If no rotations are found, return 1\n    return 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # Initialize variables\n    min_val = arr[0]\n    max_val = arr[-1]\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        # If current element is less than minimum value, update minimum value and count\n        if arr[i] < min_val:\n            min_val = arr[i]\n            count += 1\n        # If current element is greater than maximum value, update maximum value and count\n        elif arr[i] > max_val:\n            max_val = arr[i]\n            count += 1\n    # Check if the maximum value is greater than the minimum value\n    if max_val > min_val:\n        return count\n    else:\n        return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i+1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        if j == n:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Traverse the array for n-1 times\n    for i in range(n - 1):\n        # Find the smallest element greater than current element\n        j = i + 1\n        while j < n and arr[j] <= arr[i]:\n            j += 1\n\n        # If the smallest element greater than current element is the last element, there's no rotation required\n        if j == n:\n            return 0\n\n        # Count the number of rotations required to make the subarray of size j sorted\n        count = 0\n        while j < n:\n            if arr[i] <= arr[j]:\n                count += 1\n                j += 1\n            else:\n                break\n\n        # Update the count if the rotation count is more\n        if count > 0:\n            return max(count, count_rotation(arr[i:]))\n\n    # If the array is already sorted, there's no rotation required\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        # Traverse the array from the end to find the first element greater than the current element\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                # If the found element is smaller than the current element, then the array is sorted\n                # and no rotations are required\n                return 0\n    # If no element in the array is smaller than the current element, then the array is rotated\n    return n - i"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Convert the number to integer to calculate its square root\n    num = int(n**0.5)\n    # Calculate the square of the number\n    square = num * num\n    # Check if the square is equal to the original number\n    if square == n:\n        return True\n    # If the square is greater than the original number, it cannot be a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether a given number is a perfect square or not.\n    It returns True if the number is a perfect square, and False otherwise.\n    '''\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Check if the number is already a perfect square\n    elif n % 4 == 1:\n        return False\n    # Check if the number is not a perfect square\n    else:\n        # Calculate the square root of the number\n        root = int(n ** 0.5)\n        # Check if the square root is an integer\n        if root * root == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n % 4 == 3:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is a positive integer\n    if n < 1:\n        return False\n\n    # Check if the number is a perfect square or not\n    x = int(n ** 0.5)\n    if x * x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is less than 1\n    if n < 1:\n        return False\n    # Initialize the variable to store the square root\n    root = 0\n    # Loop till the square root is greater than the given number\n    while root**2 <= n:\n        # If the square of the root is equal to the given number, return True\n        if root**2 == n:\n            return True\n        # If the square of the root is less than the given number, update the square root\n        root += 1\n    # If the loop completes without finding the perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Use the sqrt function from math to find the square root of n\n    root = round(math.sqrt(n))\n    # Check if the square root of n is an integer\n    if root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    if n < 2:\n        return False\n\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of all numbers in the list is even and False otherwise.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(arr) <= 1:\n        return False\n    \n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    product = 1\n    even = True\n    for num in arr:\n        product *= num\n        if product % 2!= 0:\n            even = False\n            break\n    return even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product is even.\"\n    else:\n        return \"The product is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # find the maximum sum\n    max_sum = float('-inf')\n    for lst in lists:\n        if max_sum < sum(lst):\n            max_sum = sum(lst)\n    # find the list with the maximum sum\n    max_lst = None\n    for lst in lists:\n        if sum(lst) == max_sum:\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and its corresponding sublist\n    max_sum = float('-inf')\n    max_sublist = []\n\n    # Loop through each sublist in the input list of lists\n    for sublist in lists:\n        # Initialize a variable to keep track of the current sum of the sublist\n        current_sum = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the current sum\n            current_sum += element\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # If it is, update the maximum sum and corresponding sublist\n            max_sum = current_sum\n            max_sublist = sublist\n\n    # Return the maximum sum and corresponding sublist\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = None\n    # Iterate over each list in the input list\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        current_sum = sum(lst)\n        # If the current sum is greater than the current max sum, update the max sum and max list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_combination = None\n    \n    # Loop through all possible combinations of the lists\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            # Calculate the sum of the elements of the combination\n            combination_sum = lists[i][0] + lists[j][0]\n            \n            # Update the maximum sum and combination if necessary\n            if combination_sum > max_sum:\n                max_sum = combination_sum\n                max_combination = [lists[i], lists[j]]\n    \n    # Return the combination that maximizes the sum\n    return max_combination"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists[i])):\n            sum_list = [x + y for x in lists[i] for y in lists[j]]\n            if sum(sum_list) > max_sum:\n                max_sum = sum(sum_list)\n                max_list = [x for x in sum_list]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 0\n    start_index = 0\n    max_index = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if count > max_count:\n                max_count = count\n                max_index = start_index\n            count = 1\n        else:\n            count += 1\n\n        if count > max_count:\n            max_count = count\n            max_index = i\n\n    if count > max_count:\n        max_count = count\n        max_index = i\n\n    return max_str, max_index, max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If the current character is uppercase, increment the run count\n            current_run += 1\n        else:\n            # If the current character is not uppercase, update the maximum run count if necessary\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run count to 0\n            current_run = 0\n            # Reset the flag for uppercase characters to False\n            uppercase = False\n    # Update the maximum run count if the final character is uppercase\n    if current_run > max_run:\n        max_run = current_run\n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    max_run = 0\n    max_len = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            run_start = i\n            max_run = i\n        else:\n            if i-run_start+1 > max_len:\n                max_len = i-run_start+1\n                max_run = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 1\n    max_run = 1\n    current_run = 1\n    current_char = test_str[0]\n\n    for i in range(1, len(test_str)):\n        if test_str[i] == current_char:\n            current_run += 1\n        else:\n            if test_str[i].isupper():\n                max_run = max(max_run, current_run)\n                current_run = 1\n                current_char = test_str[i]\n            else:\n                current_run = 1\n\n    if test_str[-1].isupper():\n        max_run = max(max_run, current_run)\n\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for maximum run and current run length\n    max_run = 0\n    run_length = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase, increment the run length\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            run_length += 1\n        # If the current character is not uppercase or the previous character was uppercase, reset the run length and move on\n        else:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 0\n\n    # If the last run was longer than the previous maximum, update the maximum\n    if run_length > max_run:\n        max_run = run_length\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if count == 0:\n                start = i\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            max_start = start\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    curr_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_count += 1\n        else:\n            count += curr_count\n            curr_count = 0\n            if curr_count > max_count:\n                max_count = curr_count\n\n    count += curr_count\n\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for maximum run length and current run length\n    max_run_length = 0\n    current_run_length = 0\n\n    # Iterate through the string character by character\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run length\n        if test_str[i].isupper():\n            current_run_length += 1\n        else:\n            # If the current character is not uppercase, check if the current run length is greater than the maximum run length\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n                # Reset the current run length to 0\n                current_run_length = 0\n\n    # Check if the last character is uppercase and update the current run length if necessary\n    if test_str[-1].isupper():\n        current_run_length += 1\n\n    # Return the maximum run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    run_length = 0\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > 0:\n                if current_run > max_run:\n                    max_run = current_run\n                current_run = 0\n                count = 0\n            if count == 0:\n                current_run += 1\n\n    if count > 0:\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, append it to the odd_list\n            odd_list.append(num)\n    # If there are no odd numbers in the list, return None\n    if len(odd_list) == 0:\n        return None\n    # Otherwise, return the first odd number in the list\n    else:\n        return odd_list[0]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The first odd number in the list, or None if the list is empty or all\n        numbers in the list are even.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 0:\n        return False\n    \n    if K == test_tup[0]:\n        return True\n    \n    return check_K(test_tup[1:], K)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple 'test_tup' and a positive integer 'K' and returns True if\n    the tuple contains the value 'K' and False otherwise.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[K:]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        if K in test_tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Split the tuples into individual elements\n    tup1 = test_tup[0]\n    tup2 = test_tup[1]\n    tup3 = test_tup[2]\n    \n    # Check if each element of the tuple is greater than or equal to K\n    if tup1 >= K and tup2 >= K and tup3 >= K:\n        print(\"All elements are greater than or equal to K.\")\n    elif tup1 < K and tup2 < K and tup3 < K:\n        print(\"All elements are less than K.\")\n    else:\n        print(\"Some elements are less than K.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) >= K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Checking if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Iterating through the two tuples\n        for i in range(len(test_tup1)):\n            # Checking if the element in the first tuple is smaller than the element in the second tuple\n            if test_tup1[i] > test_tup2[i]:\n                # If it is smaller, return True\n                return True\n        # If the two tuples are equal, return False\n        return False\n    # If the length of the two tuples is not equal, return False\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Tuple 1 element\", i+1, \"is smaller than tuple 2 element\", i+1, \".\")\n        else:\n            print(\"Tuple 1 element\", i+1, \"is not smaller than tuple 2 element\", i+1, \".\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    }
]